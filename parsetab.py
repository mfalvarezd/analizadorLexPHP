
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AND ARRAY ARROW ARROWMAP AS BOOL BREAK CASE CATCH CLASS CLOSETAG COLON COMMA CONCATENATEEQUAL CONST DEFAULT DIVIDE DO DOT DOUBLEDOT DOUBLEMINUS DOUBLEPLUS ECHO ELSE ELSEIF EMPTY ENDSWITCH EQ EQUALS EXCEPTION EXTENDS FGETS FINAL FINALLY FLOAT FN FOR FOREACH FUNCTION GEQ GT ID IF IMPLEMENTS INCLUDE INSTANCEOF INT INTERFACE LBRACE LBRACKET LEQ LOGICAL_AND LOGICAL_NOT LOGICAL_OR LPAREN LT MINUS MINUSEQUAL MODULO NAMESPACE NEQ NEW NOT NULL OPENTAG OR PLUS PLUSEQUAL POTENCIA PRINT PRIVATE PROTECTED PUBLIC QUESTION RBRACE RBRACKET RETURN RPAREN SEMICOLON STATIC STDIN STRICTEQ STRICTNEQ STRING SWITCH THIS THROW TIMES TRY VARIABLE VOID WHILEinicio : OPENTAG programa CLOSETAGprograma : sentencia\n                | sentencia programasentencia : asignacion\n                | comparacion\n                | impresionasignacion : VARIABLE EQUALS operaArit SEMICOLONoperaArit : valor\n                | valor operador operaAritvalor : INT\n            | FLOAT\n            | VARIABLE\n            | STRINGoperador : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE\n                | MODULOcomparacion : INT comparador INTcomparador : LT\n                | GT\n                | LEQ\n                | GEQimpresion : ECHO imprimir SEMICOLON\n                | PRINT imprimir SEMICOLONimprimir : LPAREN repiteValores RPAREN\n                | LPAREN RPAREN\n                | repiteValores\n                | emptyrepiteValores : valor\n                    | valor COMMA repiteValoresempty :'
    
_lr_action_items = {'OPENTAG':([0,],[2,]),'$end':([1,12,],[0,-1,]),'VARIABLE':([2,4,5,6,7,10,11,14,21,32,33,36,37,38,39,40,41,42,43,44,],[8,8,-4,-5,-6,27,27,27,27,-19,-24,27,-25,-7,27,-14,-15,-16,-17,-18,]),'INT':([2,4,5,6,7,10,11,14,15,16,17,18,19,21,32,33,36,37,38,39,40,41,42,43,44,],[9,9,-4,-5,-6,25,25,25,32,-20,-21,-22,-23,25,-19,-24,25,-25,-7,25,-14,-15,-16,-17,-18,]),'ECHO':([2,4,5,6,7,32,33,37,38,],[10,10,-4,-5,-6,-19,-24,-25,-7,]),'PRINT':([2,4,5,6,7,32,33,37,38,],[11,11,-4,-5,-6,-19,-24,-25,-7,]),'CLOSETAG':([3,4,5,6,7,13,32,33,37,38,],[12,-2,-4,-5,-6,-3,-19,-24,-25,-7,]),'EQUALS':([8,],[14,]),'LT':([9,],[16,]),'GT':([9,],[17,]),'LEQ':([9,],[18,]),'GEQ':([9,],[19,]),'LPAREN':([10,11,],[21,21,]),'SEMICOLON':([10,11,20,22,23,24,25,26,27,28,29,30,31,35,45,46,47,],[-32,-32,33,-28,-29,-30,-10,-11,-12,-13,37,38,-8,-27,-26,-31,-9,]),'FLOAT':([10,11,14,21,36,39,40,41,42,43,44,],[26,26,26,26,26,26,-14,-15,-16,-17,-18,]),'STRING':([10,11,14,21,36,39,40,41,42,43,44,],[28,28,28,28,28,28,-14,-15,-16,-17,-18,]),'RPAREN':([21,24,25,26,27,28,34,46,],[35,-30,-10,-11,-12,-13,45,-31,]),'COMMA':([24,25,26,27,28,],[36,-10,-11,-12,-13,]),'PLUS':([25,26,27,28,31,],[-10,-11,-12,-13,40,]),'MINUS':([25,26,27,28,31,],[-10,-11,-12,-13,41,]),'TIMES':([25,26,27,28,31,],[-10,-11,-12,-13,42,]),'DIVIDE':([25,26,27,28,31,],[-10,-11,-12,-13,43,]),'MODULO':([25,26,27,28,31,],[-10,-11,-12,-13,44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'inicio':([0,],[1,]),'programa':([2,4,],[3,13,]),'sentencia':([2,4,],[4,4,]),'asignacion':([2,4,],[5,5,]),'comparacion':([2,4,],[6,6,]),'impresion':([2,4,],[7,7,]),'comparador':([9,],[15,]),'imprimir':([10,11,],[20,29,]),'repiteValores':([10,11,21,36,],[22,22,34,46,]),'empty':([10,11,],[23,23,]),'valor':([10,11,14,21,36,39,],[24,24,31,24,24,31,]),'operaArit':([14,39,],[30,47,]),'operador':([31,],[39,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> inicio","S'",1,None,None,None),
  ('inicio -> OPENTAG programa CLOSETAG','inicio',3,'p_inicio','main.py',7),
  ('programa -> sentencia','programa',1,'p_programa','main.py',10),
  ('programa -> sentencia programa','programa',2,'p_programa','main.py',11),
  ('sentencia -> asignacion','sentencia',1,'p_sentencia','main.py',14),
  ('sentencia -> comparacion','sentencia',1,'p_sentencia','main.py',15),
  ('sentencia -> impresion','sentencia',1,'p_sentencia','main.py',16),
  ('asignacion -> VARIABLE EQUALS operaArit SEMICOLON','asignacion',4,'p_asignacion','main.py',19),
  ('operaArit -> valor','operaArit',1,'p_operaArit','main.py',22),
  ('operaArit -> valor operador operaArit','operaArit',3,'p_operaArit','main.py',23),
  ('valor -> INT','valor',1,'p_valor','main.py',26),
  ('valor -> FLOAT','valor',1,'p_valor','main.py',27),
  ('valor -> VARIABLE','valor',1,'p_valor','main.py',28),
  ('valor -> STRING','valor',1,'p_valor','main.py',29),
  ('operador -> PLUS','operador',1,'p_operador','main.py',32),
  ('operador -> MINUS','operador',1,'p_operador','main.py',33),
  ('operador -> TIMES','operador',1,'p_operador','main.py',34),
  ('operador -> DIVIDE','operador',1,'p_operador','main.py',35),
  ('operador -> MODULO','operador',1,'p_operador','main.py',36),
  ('comparacion -> INT comparador INT','comparacion',3,'p_comparacion','main.py',39),
  ('comparador -> LT','comparador',1,'p_comparador','main.py',42),
  ('comparador -> GT','comparador',1,'p_comparador','main.py',43),
  ('comparador -> LEQ','comparador',1,'p_comparador','main.py',44),
  ('comparador -> GEQ','comparador',1,'p_comparador','main.py',45),
  ('impresion -> ECHO imprimir SEMICOLON','impresion',3,'p_impresion','main.py',48),
  ('impresion -> PRINT imprimir SEMICOLON','impresion',3,'p_impresion','main.py',49),
  ('imprimir -> LPAREN repiteValores RPAREN','imprimir',3,'p_imprimir','main.py',52),
  ('imprimir -> LPAREN RPAREN','imprimir',2,'p_imprimir','main.py',53),
  ('imprimir -> repiteValores','imprimir',1,'p_imprimir','main.py',54),
  ('imprimir -> empty','imprimir',1,'p_imprimir','main.py',55),
  ('repiteValores -> valor','repiteValores',1,'p_repiteValores','main.py',58),
  ('repiteValores -> valor COMMA repiteValores','repiteValores',3,'p_repiteValores','main.py',59),
  ('empty -> <empty>','empty',0,'p_empty','main.py',62),
]
