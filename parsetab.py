
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AND ARRAY ARROW ARROWMAP AS BOOL BREAK CASE CATCH CLASS CLONE CLOSETAG COMMA CONCATENATEEQUAL CONST CONTINUE DECLARE DEFAULT DIVIDE DO DOT DOUBLEDOT ECHO ELSE ELSEIF EMPTY ENDSWITCH EQ EQUALS EXCEPTION EXTENDS FALSE FGETS FINAL FINALLY FLOAT FOR FOREACH FUNCTION GEQ GLOBAL GT ID IF IMPLEMENTS INCLUDE INSTANCEOF INT INTERFACE ISSET LBRACE LBRACKET LEQ LIST LPAREN LT MINUS MINUSEQUAL MODULO NAMESPACE NEQ NEW NOT OPENTAG OR PLUS PLUSEQUAL POTENCIA PRINT PRIVATE PROTECTED PUBLIC RBRACE RBRACKET RETURN RPAREN SEMICOLON STATIC STDIN STRICTEQ STRICTNEQ STRING SWITCH THIS THROW TIMES TRUE TRY VARIABLE WHILEprograma : sentencia\n                | sentencia programasentencia : asignacion\n                | impresion\n                | comparacionasignacion : VARIABLE EQUALS operaArit SEMICOLONimpresion : ECHO imprimir SEMICOLON\n                | PRINT imprimir SEMICOLONimprimir : LPAREN repiteValores RPAREN\n                | LPAREN RPAREN\n                | repiteValores\n                | emptyvalor : INT\n            | FLOAT\n            | VARIABLE\n            | STRINGcomparacion : INT operador INT\n                    | FLOAT operador FLOAT\n                    | INT operador FLOAT\n                    | FLOAT operador INTvalor : TRUE\n            | FALSErepiteValores : valor COMMA repiteValores\n                | valoroperaArit : valor\n                |  valor operador operaAritoperador :  PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE\n                | MODULOempty :'
    
_lr_action_items = {'VARIABLE':([0,2,3,4,5,7,8,12,14,26,27,28,29,30,34,37,38,39,40,41,42,43,44,],[6,6,-3,-4,-5,20,20,20,20,-27,-28,-29,-30,-31,-7,20,-8,-17,-19,-18,-20,-6,20,]),'ECHO':([0,2,3,4,5,34,38,39,40,41,42,43,],[7,7,-3,-4,-5,-7,-8,-17,-19,-18,-20,-6,]),'PRINT':([0,2,3,4,5,34,38,39,40,41,42,43,],[8,8,-3,-4,-5,-7,-8,-17,-19,-18,-20,-6,]),'INT':([0,2,3,4,5,7,8,12,14,25,26,27,28,29,30,31,34,37,38,39,40,41,42,43,44,],[9,9,-3,-4,-5,18,18,18,18,39,-27,-28,-29,-30,-31,42,-7,18,-8,-17,-19,-18,-20,-6,18,]),'FLOAT':([0,2,3,4,5,7,8,12,14,25,26,27,28,29,30,31,34,37,38,39,40,41,42,43,44,],[10,10,-3,-4,-5,19,19,19,19,40,-27,-28,-29,-30,-31,41,-7,19,-8,-17,-19,-18,-20,-6,19,]),'$end':([1,2,3,4,5,11,34,38,39,40,41,42,43,],[0,-1,-3,-4,-5,-2,-7,-8,-17,-19,-18,-20,-6,]),'EQUALS':([6,],[12,]),'LPAREN':([7,8,],[14,14,]),'SEMICOLON':([7,8,13,15,16,17,18,19,20,21,22,23,24,32,33,36,45,46,47,],[-32,-32,34,-11,-12,-24,-13,-14,-15,-16,-21,-22,38,43,-25,-10,-9,-23,-26,]),'STRING':([7,8,12,14,26,27,28,29,30,37,44,],[21,21,21,21,-27,-28,-29,-30,-31,21,21,]),'TRUE':([7,8,12,14,26,27,28,29,30,37,44,],[22,22,22,22,-27,-28,-29,-30,-31,22,22,]),'FALSE':([7,8,12,14,26,27,28,29,30,37,44,],[23,23,23,23,-27,-28,-29,-30,-31,23,23,]),'PLUS':([9,10,18,19,20,21,22,23,33,],[26,26,-13,-14,-15,-16,-21,-22,26,]),'MINUS':([9,10,18,19,20,21,22,23,33,],[27,27,-13,-14,-15,-16,-21,-22,27,]),'TIMES':([9,10,18,19,20,21,22,23,33,],[28,28,-13,-14,-15,-16,-21,-22,28,]),'DIVIDE':([9,10,18,19,20,21,22,23,33,],[29,29,-13,-14,-15,-16,-21,-22,29,]),'MODULO':([9,10,18,19,20,21,22,23,33,],[30,30,-13,-14,-15,-16,-21,-22,30,]),'RPAREN':([14,17,18,19,20,21,22,23,35,46,],[36,-24,-13,-14,-15,-16,-21,-22,45,-23,]),'COMMA':([17,18,19,20,21,22,23,],[37,-13,-14,-15,-16,-21,-22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,2,],[1,11,]),'sentencia':([0,2,],[2,2,]),'asignacion':([0,2,],[3,3,]),'impresion':([0,2,],[4,4,]),'comparacion':([0,2,],[5,5,]),'imprimir':([7,8,],[13,24,]),'repiteValores':([7,8,14,37,],[15,15,35,46,]),'empty':([7,8,],[16,16,]),'valor':([7,8,12,14,37,44,],[17,17,33,17,17,33,]),'operador':([9,10,33,],[25,31,44,]),'operaArit':([12,44,],[32,47,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> sentencia','programa',1,'p_programa','main.py',6),
  ('programa -> sentencia programa','programa',2,'p_programa','main.py',7),
  ('sentencia -> asignacion','sentencia',1,'p_sentencia','main.py',10),
  ('sentencia -> impresion','sentencia',1,'p_sentencia','main.py',11),
  ('sentencia -> comparacion','sentencia',1,'p_sentencia','main.py',12),
  ('asignacion -> VARIABLE EQUALS operaArit SEMICOLON','asignacion',4,'p_asignacion','main.py',15),
  ('impresion -> ECHO imprimir SEMICOLON','impresion',3,'p_impresion','main.py',19),
  ('impresion -> PRINT imprimir SEMICOLON','impresion',3,'p_impresion','main.py',20),
  ('imprimir -> LPAREN repiteValores RPAREN','imprimir',3,'p_imprimir','main.py',23),
  ('imprimir -> LPAREN RPAREN','imprimir',2,'p_imprimir','main.py',24),
  ('imprimir -> repiteValores','imprimir',1,'p_imprimir','main.py',25),
  ('imprimir -> empty','imprimir',1,'p_imprimir','main.py',26),
  ('valor -> INT','valor',1,'p_valor','main.py',29),
  ('valor -> FLOAT','valor',1,'p_valor','main.py',30),
  ('valor -> VARIABLE','valor',1,'p_valor','main.py',31),
  ('valor -> STRING','valor',1,'p_valor','main.py',32),
  ('comparacion -> INT operador INT','comparacion',3,'p_comparacion','main.py',35),
  ('comparacion -> FLOAT operador FLOAT','comparacion',3,'p_comparacion','main.py',36),
  ('comparacion -> INT operador FLOAT','comparacion',3,'p_comparacion','main.py',37),
  ('comparacion -> FLOAT operador INT','comparacion',3,'p_comparacion','main.py',38),
  ('valor -> TRUE','valor',1,'p_valorBool','main.py',42),
  ('valor -> FALSE','valor',1,'p_valorBool','main.py',43),
  ('repiteValores -> valor COMMA repiteValores','repiteValores',3,'p_repiteValores','main.py',46),
  ('repiteValores -> valor','repiteValores',1,'p_repiteValores','main.py',47),
  ('operaArit -> valor','operaArit',1,'p_operaArit','main.py',50),
  ('operaArit -> valor operador operaArit','operaArit',3,'p_operaArit','main.py',51),
  ('operador -> PLUS','operador',1,'p_operador','main.py',54),
  ('operador -> MINUS','operador',1,'p_operador','main.py',55),
  ('operador -> TIMES','operador',1,'p_operador','main.py',56),
  ('operador -> DIVIDE','operador',1,'p_operador','main.py',57),
  ('operador -> MODULO','operador',1,'p_operador','main.py',58),
  ('empty -> <empty>','empty',0,'p_empty','main.py',61),
]
