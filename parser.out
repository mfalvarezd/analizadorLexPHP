Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    CLASS
    CONCATENATEEQUAL
    CONST
    DO
    DOT
    EXTENDS
    FINAL
    FN
    IMPLEMENTS
    INCLUDE
    INSTANCEOF
    INTERFACE
    MINUSEQUAL
    NAMESPACE
    NEW
    OBJECT_TYPE
    PLUSEQUAL
    POTENCIA
    PRIVATE
    PROTECTED
    PUBLIC
    STATIC
    THIS
    THROW

Grammar

Rule 0     S' -> inicio
Rule 1     inicio -> OPENTAG programa CLOSETAG
Rule 2     programa -> sentencia
Rule 3     programa -> sentencia programa
Rule 4     sentencia -> asignacion
Rule 5     sentencia -> asignacion_fgets
Rule 6     sentencia -> comparacion
Rule 7     sentencia -> impresion
Rule 8     sentencia -> estructurasPrograma
Rule 9     sentencia -> try
Rule 10    sentencia -> funcionDeclaration
Rule 11    sentencia -> returnStatement
Rule 12    sentencia -> llamadaFuncion
Rule 13    returnStatement -> RETURN valor SEMICOLON
Rule 14    returnStatement -> RETURN SEMICOLON
Rule 15    asignacion -> VARIABLE EQUALS operaArit SEMICOLON
Rule 16    asignacion -> VARIABLE EQUALS valor SEMICOLON
Rule 17    asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
Rule 18    operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor
Rule 19    operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor
Rule 20    operaArit -> valor
Rule 21    operaArit -> valor operador operaArit
Rule 22    valor -> INT
Rule 23    valor -> VARIABLE
Rule 24    valor -> FLOAT
Rule 25    valor -> STRING
Rule 26    valor -> BOOL
Rule 27    valor -> NULL
Rule 28    valor -> ARRAY
Rule 29    valor -> llamadaFuncion
Rule 30    valor -> operador_ternario
Rule 31    operador -> PLUS
Rule 32    operador -> MINUS
Rule 33    operador -> TIMES
Rule 34    operador -> DIVIDE
Rule 35    operador -> MODULO
Rule 36    comparacion -> valor comparador valor
Rule 37    comparador -> LT
Rule 38    comparador -> GT
Rule 39    comparador -> LEQ
Rule 40    comparador -> GEQ
Rule 41    impresion -> ECHO imprimir SEMICOLON
Rule 42    impresion -> PRINT imprimir SEMICOLON
Rule 43    imprimir -> LPAREN repiteValores RPAREN
Rule 44    imprimir -> LPAREN RPAREN
Rule 45    imprimir -> repiteValores
Rule 46    imprimir -> empty
Rule 47    repiteValores -> valor
Rule 48    repiteValores -> valor COMMA repiteValores
Rule 49    empty -> <empty>
Rule 50    estructurasPrograma -> controlStructure
Rule 51    estructurasPrograma -> dataStructure
Rule 52    controlStructure -> if
Rule 53    controlStructure -> for
Rule 54    controlStructure -> while
Rule 55    controlStructure -> switch
Rule 56    controlStructure -> foreach
Rule 57    if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
Rule 58    if -> IF LPAREN conditions RPAREN body
Rule 59    else_blocks -> ELSE LBRACE body RBRACE
Rule 60    else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
Rule 61    else_blocks -> empty
Rule 62    conditions -> condition
Rule 63    conditions -> condition opLogic conditions
Rule 64    conditions -> LPAREN conditions RPAREN
Rule 65    condition -> valor
Rule 66    condition -> valor opSymbol valor
Rule 67    condition -> NOT condition
Rule 68    condition -> LPAREN conditions RPAREN
Rule 69    opSymbol -> EQ
Rule 70    opSymbol -> NEQ
Rule 71    opSymbol -> STRICTEQ
Rule 72    opSymbol -> STRICTNEQ
Rule 73    opSymbol -> LT
Rule 74    opSymbol -> GT
Rule 75    opSymbol -> LEQ
Rule 76    opSymbol -> GEQ
Rule 77    opLogic -> AND
Rule 78    opLogic -> LOGICAL_AND
Rule 79    opLogic -> OR
Rule 80    opLogic -> LOGICAL_OR
Rule 81    body -> sentenciaList
Rule 82    body -> empty
Rule 83    sentenciaList -> sentencia
Rule 84    sentenciaList -> sentencia sentenciaList
Rule 85    for -> forStatement
Rule 86    forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE
Rule 87    forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
Rule 88    forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS
Rule 89    while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE
Rule 90    while -> WHILE LPAREN condition RPAREN LBRACE RBRACE
Rule 91    switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
Rule 92    switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
Rule 93    caseLists -> cases
Rule 94    caseLists -> cases default
Rule 95    caseLists -> default
Rule 96    caseLists -> empty
Rule 97    cases -> case
Rule 98    cases -> case cases
Rule 99    foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
Rule 100   case -> CASE valor COLON body BREAK SEMICOLON
Rule 101   case -> CASE valor SEMICOLON body BREAK SEMICOLON
Rule 102   case -> CASE valor COLON body
Rule 103   case -> CASE valor SEMICOLON
Rule 104   case -> CASE valor
Rule 105   dataStructure -> array
Rule 106   array -> VARIABLE EQUALS arrays SEMICOLON
Rule 107   array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
Rule 108   array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
Rule 109   array -> map
Rule 110   arrays -> LBRACKET repiteValores RBRACKET
Rule 111   arrayAnidado -> arrays
Rule 112   arrayAnidado -> arrays COMMA arrayAnidado
Rule 113   map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
Rule 114   map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON
Rule 115   maps -> mapArrow
Rule 116   maps -> mapArrow COMMA maps
Rule 117   mapArrow -> valor ARROWMAP valor
Rule 118   default -> DEFAULT COLON body BREAK SEMICOLON
Rule 119   default -> DEFAULT SEMICOLON body BREAK SEMICOLON
Rule 120   default -> DEFAULT COLON body
Rule 121   default -> DEFAULT SEMICOLON body
Rule 122   default -> DEFAULT
Rule 123   argumentos -> argumento
Rule 124   argumentos -> argumento COMMA argumentos
Rule 125   argumentos -> empty
Rule 126   argumento -> VARIABLE
Rule 127   argumento -> type VARIABLE
Rule 128   argumento -> VARIABLE EQUALS valor
Rule 129   argumento -> type VARIABLE EQUALS valor
Rule 130   argumento -> operaArit
Rule 131   type -> INT_TYPE
Rule 132   type -> FLOAT_TYPE
Rule 133   type -> STRING_TYPE
Rule 134   type -> BOOL_TYPE
Rule 135   type -> ARRAY_TYPE
Rule 136   type -> VOID
Rule 137   try -> TRY LBRACE body RBRACE catchs
Rule 138   try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
Rule 139   catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE
Rule 140   catchs -> catch
Rule 141   catchs -> catch catchs
Rule 142   objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
Rule 143   funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
Rule 144   llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON
Rule 145   llamadaFuncion -> EMPTY LPAREN argumentos RPAREN
Rule 146   llamadaFuncion -> ID LPAREN argumentos RPAREN
Rule 147   llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 77
ARRAY                : 28 108 114
ARRAY_TYPE           : 135
ARROW                : 142
ARROWMAP             : 117
AS                   : 99
BOOL                 : 26
BOOL_TYPE            : 134
BREAK                : 100 101 118 119
CASE                 : 100 101 102 103 104
CATCH                : 139
CLASS                : 
CLOSETAG             : 1
COLON                : 18 19 92 100 102 118 120
COMMA                : 48 112 116 124
CONCATENATEEQUAL     : 
CONST                : 
DEFAULT              : 118 119 120 121 122
DIVIDE               : 34
DO                   : 
DOT                  : 
DOUBLEMINUS          : 88
DOUBLEPLUS           : 87
ECHO                 : 41
ELSE                 : 59
ELSEIF               : 60
EMPTY                : 145 147
ENDSWITCH            : 92
EQ                   : 69
EQUALS               : 15 16 17 87 88 106 107 108 113 114 128 129
EXCEPTION            : 139
EXTENDS              : 
FGETS                : 17
FINAL                : 
FINALLY              : 138
FLOAT                : 24
FLOAT_TYPE           : 132
FN                   : 
FOR                  : 86
FOREACH              : 99
FUNCTION             : 143
GEQ                  : 40 76
GT                   : 38 74
ID                   : 142 143 144 146
IF                   : 57 58
IMPLEMENTS           : 
INCLUDE              : 
INSTANCEOF           : 
INT                  : 22 87 87 88 88
INTERFACE            : 
INT_TYPE             : 131
LBRACE               : 57 59 60 86 89 90 91 99 137 138 138 139 143
LBRACKET             : 107 110 113
LEQ                  : 39 75
LOGICAL_AND          : 78
LOGICAL_OR           : 80
LPAREN               : 17 18 19 43 44 57 58 60 64 68 86 89 90 91 92 99 108 114 139 142 143 144 145 146 147
LT                   : 37 73
MINUS                : 32
MINUSEQUAL           : 
MODULO               : 35
NAMESPACE            : 
NEQ                  : 70
NEW                  : 
NOT                  : 67
NULL                 : 27
OBJECT_TYPE          : 
OPENTAG              : 1
OR                   : 79
PLUS                 : 31
PLUSEQUAL            : 
POTENCIA             : 
PRINT                : 42
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
QUESTION             : 18 19
RBRACE               : 57 59 60 86 89 90 91 99 137 138 138 139 143
RBRACKET             : 107 110 113
RETURN               : 13 14
RPAREN               : 17 18 19 43 44 57 58 60 64 68 86 89 90 91 92 99 108 114 139 142 143 144 145 146 147
SEMICOLON            : 13 14 15 16 17 41 42 87 87 88 88 92 100 101 101 103 106 107 108 113 114 118 119 119 121 142 144 147
STATIC               : 
STDIN                : 17
STRICTEQ             : 71
STRICTNEQ            : 72
STRING               : 25
STRING_TYPE          : 133
SWITCH               : 91 92
THIS                 : 
THROW                : 
TIMES                : 33
TRY                  : 137 138
VARIABLE             : 15 16 17 23 87 87 87 88 88 88 99 99 106 107 108 113 114 126 127 128 129 139 142
VOID                 : 136
WHILE                : 89 90
error                : 

Nonterminals, with rules where they appear

argumento            : 123 124
argumentos           : 124 142 143 144 145 146 147
array                : 105
arrayAnidado         : 107 112
arrays               : 106 111 112
asignacion           : 4
asignacion_fgets     : 5
body                 : 57 58 59 60 86 89 99 100 101 102 118 119 120 121 137 138 138 139 143
case                 : 97 98
caseLists            : 91 92
cases                : 93 94 98
catch                : 140 141
catchs               : 137 138 141
comparacion          : 6
comparador           : 36
condition            : 62 63 67 89 90
conditions           : 18 19 57 58 60 63 64 68
controlStructure     : 50
dataStructure        : 51
default              : 94 95
else_blocks          : 57 60
empty                : 46 61 82 96 125
estructurasPrograma  : 8
for                  : 53
forStatement         : 85
forcondition         : 86
foreach              : 56
funcionDeclaration   : 10
if                   : 52
impresion            : 7
imprimir             : 41 42
inicio               : 0
llamadaFuncion       : 12 29
map                  : 109
mapArrow             : 115 116
maps                 : 113 114 116
objeto               : 
opLogic              : 63
opSymbol             : 66 87 88
operaArit            : 15 21 130
operador             : 21
operador_ternario    : 30
programa             : 1 3
repiteValores        : 43 45 48 108 110
returnStatement      : 11
sentencia            : 2 3 83 84
sentenciaList        : 81 84
switch               : 55
try                  : 9
type                 : 127 129
valor                : 13 16 18 18 19 20 21 36 36 47 48 65 66 66 91 92 100 101 102 103 104 117 117 128 129
while                : 54

Parsing method: LALR

state 0

    (0) S' -> . inicio
    (1) inicio -> . OPENTAG programa CLOSETAG

    OPENTAG         shift and go to state 2

    inicio                         shift and go to state 1

state 1

    (0) S' -> inicio .



state 2

    (1) inicio -> OPENTAG . programa CLOSETAG
    (2) programa -> . sentencia
    (3) programa -> . sentencia programa
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (15) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (16) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (17) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (36) comparacion -> . valor comparador valor
    (41) impresion -> . ECHO imprimir SEMICOLON
    (42) impresion -> . PRINT imprimir SEMICOLON
    (50) estructurasPrograma -> . controlStructure
    (51) estructurasPrograma -> . dataStructure
    (137) try -> . TRY LBRACE body RBRACE catchs
    (138) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (143) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (13) returnStatement -> . RETURN valor SEMICOLON
    (14) returnStatement -> . RETURN SEMICOLON
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (52) controlStructure -> . if
    (53) controlStructure -> . for
    (54) controlStructure -> . while
    (55) controlStructure -> . switch
    (56) controlStructure -> . foreach
    (105) dataStructure -> . array
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (57) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (58) if -> . IF LPAREN conditions RPAREN body
    (85) for -> . forStatement
    (89) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (90) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (91) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (92) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (99) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (106) array -> . VARIABLE EQUALS arrays SEMICOLON
    (107) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (108) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (109) array -> . map
    (86) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (113) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (114) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    VARIABLE        shift and go to state 14
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    TRY             shift and go to state 21
    FUNCTION        shift and go to state 22
    RETURN          shift and go to state 24
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 16
    IF              shift and go to state 39
    WHILE           shift and go to state 41
    SWITCH          shift and go to state 42
    FOREACH         shift and go to state 43
    FOR             shift and go to state 45

    programa                       shift and go to state 3
    sentencia                      shift and go to state 4
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    valor                          shift and go to state 15
    controlStructure               shift and go to state 19
    dataStructure                  shift and go to state 20
    operador_ternario              shift and go to state 32
    if                             shift and go to state 33
    for                            shift and go to state 34
    while                          shift and go to state 35
    switch                         shift and go to state 36
    foreach                        shift and go to state 37
    array                          shift and go to state 38
    forStatement                   shift and go to state 40
    map                            shift and go to state 44

state 3

    (1) inicio -> OPENTAG programa . CLOSETAG

    CLOSETAG        shift and go to state 46


state 4

    (2) programa -> sentencia .
    (3) programa -> sentencia . programa
    (2) programa -> . sentencia
    (3) programa -> . sentencia programa
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (15) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (16) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (17) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (36) comparacion -> . valor comparador valor
    (41) impresion -> . ECHO imprimir SEMICOLON
    (42) impresion -> . PRINT imprimir SEMICOLON
    (50) estructurasPrograma -> . controlStructure
    (51) estructurasPrograma -> . dataStructure
    (137) try -> . TRY LBRACE body RBRACE catchs
    (138) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (143) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (13) returnStatement -> . RETURN valor SEMICOLON
    (14) returnStatement -> . RETURN SEMICOLON
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (52) controlStructure -> . if
    (53) controlStructure -> . for
    (54) controlStructure -> . while
    (55) controlStructure -> . switch
    (56) controlStructure -> . foreach
    (105) dataStructure -> . array
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (57) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (58) if -> . IF LPAREN conditions RPAREN body
    (85) for -> . forStatement
    (89) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (90) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (91) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (92) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (99) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (106) array -> . VARIABLE EQUALS arrays SEMICOLON
    (107) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (108) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (109) array -> . map
    (86) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (113) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (114) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    CLOSETAG        reduce using rule 2 (programa -> sentencia .)
    VARIABLE        shift and go to state 14
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    TRY             shift and go to state 21
    FUNCTION        shift and go to state 22
    RETURN          shift and go to state 24
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 16
    IF              shift and go to state 39
    WHILE           shift and go to state 41
    SWITCH          shift and go to state 42
    FOREACH         shift and go to state 43
    FOR             shift and go to state 45

    sentencia                      shift and go to state 4
    programa                       shift and go to state 47
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    valor                          shift and go to state 15
    controlStructure               shift and go to state 19
    dataStructure                  shift and go to state 20
    operador_ternario              shift and go to state 32
    if                             shift and go to state 33
    for                            shift and go to state 34
    while                          shift and go to state 35
    switch                         shift and go to state 36
    foreach                        shift and go to state 37
    array                          shift and go to state 38
    forStatement                   shift and go to state 40
    map                            shift and go to state 44

state 5

    (4) sentencia -> asignacion .

    VARIABLE        reduce using rule 4 (sentencia -> asignacion .)
    ECHO            reduce using rule 4 (sentencia -> asignacion .)
    PRINT           reduce using rule 4 (sentencia -> asignacion .)
    TRY             reduce using rule 4 (sentencia -> asignacion .)
    FUNCTION        reduce using rule 4 (sentencia -> asignacion .)
    RETURN          reduce using rule 4 (sentencia -> asignacion .)
    ID              reduce using rule 4 (sentencia -> asignacion .)
    EMPTY           reduce using rule 4 (sentencia -> asignacion .)
    INT             reduce using rule 4 (sentencia -> asignacion .)
    FLOAT           reduce using rule 4 (sentencia -> asignacion .)
    STRING          reduce using rule 4 (sentencia -> asignacion .)
    BOOL            reduce using rule 4 (sentencia -> asignacion .)
    NULL            reduce using rule 4 (sentencia -> asignacion .)
    ARRAY           reduce using rule 4 (sentencia -> asignacion .)
    LPAREN          reduce using rule 4 (sentencia -> asignacion .)
    IF              reduce using rule 4 (sentencia -> asignacion .)
    WHILE           reduce using rule 4 (sentencia -> asignacion .)
    SWITCH          reduce using rule 4 (sentencia -> asignacion .)
    FOREACH         reduce using rule 4 (sentencia -> asignacion .)
    FOR             reduce using rule 4 (sentencia -> asignacion .)
    CLOSETAG        reduce using rule 4 (sentencia -> asignacion .)
    RBRACE          reduce using rule 4 (sentencia -> asignacion .)
    BREAK           reduce using rule 4 (sentencia -> asignacion .)
    ENDSWITCH       reduce using rule 4 (sentencia -> asignacion .)
    CASE            reduce using rule 4 (sentencia -> asignacion .)
    DEFAULT         reduce using rule 4 (sentencia -> asignacion .)


state 6

    (5) sentencia -> asignacion_fgets .

    VARIABLE        reduce using rule 5 (sentencia -> asignacion_fgets .)
    ECHO            reduce using rule 5 (sentencia -> asignacion_fgets .)
    PRINT           reduce using rule 5 (sentencia -> asignacion_fgets .)
    TRY             reduce using rule 5 (sentencia -> asignacion_fgets .)
    FUNCTION        reduce using rule 5 (sentencia -> asignacion_fgets .)
    RETURN          reduce using rule 5 (sentencia -> asignacion_fgets .)
    ID              reduce using rule 5 (sentencia -> asignacion_fgets .)
    EMPTY           reduce using rule 5 (sentencia -> asignacion_fgets .)
    INT             reduce using rule 5 (sentencia -> asignacion_fgets .)
    FLOAT           reduce using rule 5 (sentencia -> asignacion_fgets .)
    STRING          reduce using rule 5 (sentencia -> asignacion_fgets .)
    BOOL            reduce using rule 5 (sentencia -> asignacion_fgets .)
    NULL            reduce using rule 5 (sentencia -> asignacion_fgets .)
    ARRAY           reduce using rule 5 (sentencia -> asignacion_fgets .)
    LPAREN          reduce using rule 5 (sentencia -> asignacion_fgets .)
    IF              reduce using rule 5 (sentencia -> asignacion_fgets .)
    WHILE           reduce using rule 5 (sentencia -> asignacion_fgets .)
    SWITCH          reduce using rule 5 (sentencia -> asignacion_fgets .)
    FOREACH         reduce using rule 5 (sentencia -> asignacion_fgets .)
    FOR             reduce using rule 5 (sentencia -> asignacion_fgets .)
    CLOSETAG        reduce using rule 5 (sentencia -> asignacion_fgets .)
    RBRACE          reduce using rule 5 (sentencia -> asignacion_fgets .)
    BREAK           reduce using rule 5 (sentencia -> asignacion_fgets .)
    ENDSWITCH       reduce using rule 5 (sentencia -> asignacion_fgets .)
    CASE            reduce using rule 5 (sentencia -> asignacion_fgets .)
    DEFAULT         reduce using rule 5 (sentencia -> asignacion_fgets .)


state 7

    (6) sentencia -> comparacion .

    VARIABLE        reduce using rule 6 (sentencia -> comparacion .)
    ECHO            reduce using rule 6 (sentencia -> comparacion .)
    PRINT           reduce using rule 6 (sentencia -> comparacion .)
    TRY             reduce using rule 6 (sentencia -> comparacion .)
    FUNCTION        reduce using rule 6 (sentencia -> comparacion .)
    RETURN          reduce using rule 6 (sentencia -> comparacion .)
    ID              reduce using rule 6 (sentencia -> comparacion .)
    EMPTY           reduce using rule 6 (sentencia -> comparacion .)
    INT             reduce using rule 6 (sentencia -> comparacion .)
    FLOAT           reduce using rule 6 (sentencia -> comparacion .)
    STRING          reduce using rule 6 (sentencia -> comparacion .)
    BOOL            reduce using rule 6 (sentencia -> comparacion .)
    NULL            reduce using rule 6 (sentencia -> comparacion .)
    ARRAY           reduce using rule 6 (sentencia -> comparacion .)
    LPAREN          reduce using rule 6 (sentencia -> comparacion .)
    IF              reduce using rule 6 (sentencia -> comparacion .)
    WHILE           reduce using rule 6 (sentencia -> comparacion .)
    SWITCH          reduce using rule 6 (sentencia -> comparacion .)
    FOREACH         reduce using rule 6 (sentencia -> comparacion .)
    FOR             reduce using rule 6 (sentencia -> comparacion .)
    CLOSETAG        reduce using rule 6 (sentencia -> comparacion .)
    RBRACE          reduce using rule 6 (sentencia -> comparacion .)
    BREAK           reduce using rule 6 (sentencia -> comparacion .)
    ENDSWITCH       reduce using rule 6 (sentencia -> comparacion .)
    CASE            reduce using rule 6 (sentencia -> comparacion .)
    DEFAULT         reduce using rule 6 (sentencia -> comparacion .)


state 8

    (7) sentencia -> impresion .

    VARIABLE        reduce using rule 7 (sentencia -> impresion .)
    ECHO            reduce using rule 7 (sentencia -> impresion .)
    PRINT           reduce using rule 7 (sentencia -> impresion .)
    TRY             reduce using rule 7 (sentencia -> impresion .)
    FUNCTION        reduce using rule 7 (sentencia -> impresion .)
    RETURN          reduce using rule 7 (sentencia -> impresion .)
    ID              reduce using rule 7 (sentencia -> impresion .)
    EMPTY           reduce using rule 7 (sentencia -> impresion .)
    INT             reduce using rule 7 (sentencia -> impresion .)
    FLOAT           reduce using rule 7 (sentencia -> impresion .)
    STRING          reduce using rule 7 (sentencia -> impresion .)
    BOOL            reduce using rule 7 (sentencia -> impresion .)
    NULL            reduce using rule 7 (sentencia -> impresion .)
    ARRAY           reduce using rule 7 (sentencia -> impresion .)
    LPAREN          reduce using rule 7 (sentencia -> impresion .)
    IF              reduce using rule 7 (sentencia -> impresion .)
    WHILE           reduce using rule 7 (sentencia -> impresion .)
    SWITCH          reduce using rule 7 (sentencia -> impresion .)
    FOREACH         reduce using rule 7 (sentencia -> impresion .)
    FOR             reduce using rule 7 (sentencia -> impresion .)
    CLOSETAG        reduce using rule 7 (sentencia -> impresion .)
    RBRACE          reduce using rule 7 (sentencia -> impresion .)
    BREAK           reduce using rule 7 (sentencia -> impresion .)
    ENDSWITCH       reduce using rule 7 (sentencia -> impresion .)
    CASE            reduce using rule 7 (sentencia -> impresion .)
    DEFAULT         reduce using rule 7 (sentencia -> impresion .)


state 9

    (8) sentencia -> estructurasPrograma .

    VARIABLE        reduce using rule 8 (sentencia -> estructurasPrograma .)
    ECHO            reduce using rule 8 (sentencia -> estructurasPrograma .)
    PRINT           reduce using rule 8 (sentencia -> estructurasPrograma .)
    TRY             reduce using rule 8 (sentencia -> estructurasPrograma .)
    FUNCTION        reduce using rule 8 (sentencia -> estructurasPrograma .)
    RETURN          reduce using rule 8 (sentencia -> estructurasPrograma .)
    ID              reduce using rule 8 (sentencia -> estructurasPrograma .)
    EMPTY           reduce using rule 8 (sentencia -> estructurasPrograma .)
    INT             reduce using rule 8 (sentencia -> estructurasPrograma .)
    FLOAT           reduce using rule 8 (sentencia -> estructurasPrograma .)
    STRING          reduce using rule 8 (sentencia -> estructurasPrograma .)
    BOOL            reduce using rule 8 (sentencia -> estructurasPrograma .)
    NULL            reduce using rule 8 (sentencia -> estructurasPrograma .)
    ARRAY           reduce using rule 8 (sentencia -> estructurasPrograma .)
    LPAREN          reduce using rule 8 (sentencia -> estructurasPrograma .)
    IF              reduce using rule 8 (sentencia -> estructurasPrograma .)
    WHILE           reduce using rule 8 (sentencia -> estructurasPrograma .)
    SWITCH          reduce using rule 8 (sentencia -> estructurasPrograma .)
    FOREACH         reduce using rule 8 (sentencia -> estructurasPrograma .)
    FOR             reduce using rule 8 (sentencia -> estructurasPrograma .)
    CLOSETAG        reduce using rule 8 (sentencia -> estructurasPrograma .)
    RBRACE          reduce using rule 8 (sentencia -> estructurasPrograma .)
    BREAK           reduce using rule 8 (sentencia -> estructurasPrograma .)
    ENDSWITCH       reduce using rule 8 (sentencia -> estructurasPrograma .)
    CASE            reduce using rule 8 (sentencia -> estructurasPrograma .)
    DEFAULT         reduce using rule 8 (sentencia -> estructurasPrograma .)


state 10

    (9) sentencia -> try .

    VARIABLE        reduce using rule 9 (sentencia -> try .)
    ECHO            reduce using rule 9 (sentencia -> try .)
    PRINT           reduce using rule 9 (sentencia -> try .)
    TRY             reduce using rule 9 (sentencia -> try .)
    FUNCTION        reduce using rule 9 (sentencia -> try .)
    RETURN          reduce using rule 9 (sentencia -> try .)
    ID              reduce using rule 9 (sentencia -> try .)
    EMPTY           reduce using rule 9 (sentencia -> try .)
    INT             reduce using rule 9 (sentencia -> try .)
    FLOAT           reduce using rule 9 (sentencia -> try .)
    STRING          reduce using rule 9 (sentencia -> try .)
    BOOL            reduce using rule 9 (sentencia -> try .)
    NULL            reduce using rule 9 (sentencia -> try .)
    ARRAY           reduce using rule 9 (sentencia -> try .)
    LPAREN          reduce using rule 9 (sentencia -> try .)
    IF              reduce using rule 9 (sentencia -> try .)
    WHILE           reduce using rule 9 (sentencia -> try .)
    SWITCH          reduce using rule 9 (sentencia -> try .)
    FOREACH         reduce using rule 9 (sentencia -> try .)
    FOR             reduce using rule 9 (sentencia -> try .)
    CLOSETAG        reduce using rule 9 (sentencia -> try .)
    RBRACE          reduce using rule 9 (sentencia -> try .)
    BREAK           reduce using rule 9 (sentencia -> try .)
    ENDSWITCH       reduce using rule 9 (sentencia -> try .)
    CASE            reduce using rule 9 (sentencia -> try .)
    DEFAULT         reduce using rule 9 (sentencia -> try .)


state 11

    (10) sentencia -> funcionDeclaration .

    VARIABLE        reduce using rule 10 (sentencia -> funcionDeclaration .)
    ECHO            reduce using rule 10 (sentencia -> funcionDeclaration .)
    PRINT           reduce using rule 10 (sentencia -> funcionDeclaration .)
    TRY             reduce using rule 10 (sentencia -> funcionDeclaration .)
    FUNCTION        reduce using rule 10 (sentencia -> funcionDeclaration .)
    RETURN          reduce using rule 10 (sentencia -> funcionDeclaration .)
    ID              reduce using rule 10 (sentencia -> funcionDeclaration .)
    EMPTY           reduce using rule 10 (sentencia -> funcionDeclaration .)
    INT             reduce using rule 10 (sentencia -> funcionDeclaration .)
    FLOAT           reduce using rule 10 (sentencia -> funcionDeclaration .)
    STRING          reduce using rule 10 (sentencia -> funcionDeclaration .)
    BOOL            reduce using rule 10 (sentencia -> funcionDeclaration .)
    NULL            reduce using rule 10 (sentencia -> funcionDeclaration .)
    ARRAY           reduce using rule 10 (sentencia -> funcionDeclaration .)
    LPAREN          reduce using rule 10 (sentencia -> funcionDeclaration .)
    IF              reduce using rule 10 (sentencia -> funcionDeclaration .)
    WHILE           reduce using rule 10 (sentencia -> funcionDeclaration .)
    SWITCH          reduce using rule 10 (sentencia -> funcionDeclaration .)
    FOREACH         reduce using rule 10 (sentencia -> funcionDeclaration .)
    FOR             reduce using rule 10 (sentencia -> funcionDeclaration .)
    CLOSETAG        reduce using rule 10 (sentencia -> funcionDeclaration .)
    RBRACE          reduce using rule 10 (sentencia -> funcionDeclaration .)
    BREAK           reduce using rule 10 (sentencia -> funcionDeclaration .)
    ENDSWITCH       reduce using rule 10 (sentencia -> funcionDeclaration .)
    CASE            reduce using rule 10 (sentencia -> funcionDeclaration .)
    DEFAULT         reduce using rule 10 (sentencia -> funcionDeclaration .)


state 12

    (11) sentencia -> returnStatement .

    VARIABLE        reduce using rule 11 (sentencia -> returnStatement .)
    ECHO            reduce using rule 11 (sentencia -> returnStatement .)
    PRINT           reduce using rule 11 (sentencia -> returnStatement .)
    TRY             reduce using rule 11 (sentencia -> returnStatement .)
    FUNCTION        reduce using rule 11 (sentencia -> returnStatement .)
    RETURN          reduce using rule 11 (sentencia -> returnStatement .)
    ID              reduce using rule 11 (sentencia -> returnStatement .)
    EMPTY           reduce using rule 11 (sentencia -> returnStatement .)
    INT             reduce using rule 11 (sentencia -> returnStatement .)
    FLOAT           reduce using rule 11 (sentencia -> returnStatement .)
    STRING          reduce using rule 11 (sentencia -> returnStatement .)
    BOOL            reduce using rule 11 (sentencia -> returnStatement .)
    NULL            reduce using rule 11 (sentencia -> returnStatement .)
    ARRAY           reduce using rule 11 (sentencia -> returnStatement .)
    LPAREN          reduce using rule 11 (sentencia -> returnStatement .)
    IF              reduce using rule 11 (sentencia -> returnStatement .)
    WHILE           reduce using rule 11 (sentencia -> returnStatement .)
    SWITCH          reduce using rule 11 (sentencia -> returnStatement .)
    FOREACH         reduce using rule 11 (sentencia -> returnStatement .)
    FOR             reduce using rule 11 (sentencia -> returnStatement .)
    CLOSETAG        reduce using rule 11 (sentencia -> returnStatement .)
    RBRACE          reduce using rule 11 (sentencia -> returnStatement .)
    BREAK           reduce using rule 11 (sentencia -> returnStatement .)
    ENDSWITCH       reduce using rule 11 (sentencia -> returnStatement .)
    CASE            reduce using rule 11 (sentencia -> returnStatement .)
    DEFAULT         reduce using rule 11 (sentencia -> returnStatement .)


state 13

    (12) sentencia -> llamadaFuncion .
    (29) valor -> llamadaFuncion .

    VARIABLE        reduce using rule 12 (sentencia -> llamadaFuncion .)
    ECHO            reduce using rule 12 (sentencia -> llamadaFuncion .)
    PRINT           reduce using rule 12 (sentencia -> llamadaFuncion .)
    TRY             reduce using rule 12 (sentencia -> llamadaFuncion .)
    FUNCTION        reduce using rule 12 (sentencia -> llamadaFuncion .)
    RETURN          reduce using rule 12 (sentencia -> llamadaFuncion .)
    ID              reduce using rule 12 (sentencia -> llamadaFuncion .)
    EMPTY           reduce using rule 12 (sentencia -> llamadaFuncion .)
    INT             reduce using rule 12 (sentencia -> llamadaFuncion .)
    FLOAT           reduce using rule 12 (sentencia -> llamadaFuncion .)
    STRING          reduce using rule 12 (sentencia -> llamadaFuncion .)
    BOOL            reduce using rule 12 (sentencia -> llamadaFuncion .)
    NULL            reduce using rule 12 (sentencia -> llamadaFuncion .)
    ARRAY           reduce using rule 12 (sentencia -> llamadaFuncion .)
    LPAREN          reduce using rule 12 (sentencia -> llamadaFuncion .)
    IF              reduce using rule 12 (sentencia -> llamadaFuncion .)
    WHILE           reduce using rule 12 (sentencia -> llamadaFuncion .)
    SWITCH          reduce using rule 12 (sentencia -> llamadaFuncion .)
    FOREACH         reduce using rule 12 (sentencia -> llamadaFuncion .)
    FOR             reduce using rule 12 (sentencia -> llamadaFuncion .)
    CLOSETAG        reduce using rule 12 (sentencia -> llamadaFuncion .)
    RBRACE          reduce using rule 12 (sentencia -> llamadaFuncion .)
    BREAK           reduce using rule 12 (sentencia -> llamadaFuncion .)
    ENDSWITCH       reduce using rule 12 (sentencia -> llamadaFuncion .)
    CASE            reduce using rule 12 (sentencia -> llamadaFuncion .)
    DEFAULT         reduce using rule 12 (sentencia -> llamadaFuncion .)
    LT              reduce using rule 29 (valor -> llamadaFuncion .)
    GT              reduce using rule 29 (valor -> llamadaFuncion .)
    LEQ             reduce using rule 29 (valor -> llamadaFuncion .)
    GEQ             reduce using rule 29 (valor -> llamadaFuncion .)


state 14

    (15) asignacion -> VARIABLE . EQUALS operaArit SEMICOLON
    (16) asignacion -> VARIABLE . EQUALS valor SEMICOLON
    (17) asignacion_fgets -> VARIABLE . EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (23) valor -> VARIABLE .
    (106) array -> VARIABLE . EQUALS arrays SEMICOLON
    (107) array -> VARIABLE . EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (108) array -> VARIABLE . EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (113) map -> VARIABLE . EQUALS LBRACKET maps RBRACKET SEMICOLON
    (114) map -> VARIABLE . EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    EQUALS          shift and go to state 48
    LT              reduce using rule 23 (valor -> VARIABLE .)
    GT              reduce using rule 23 (valor -> VARIABLE .)
    LEQ             reduce using rule 23 (valor -> VARIABLE .)
    GEQ             reduce using rule 23 (valor -> VARIABLE .)


state 15

    (36) comparacion -> valor . comparador valor
    (37) comparador -> . LT
    (38) comparador -> . GT
    (39) comparador -> . LEQ
    (40) comparador -> . GEQ

    LT              shift and go to state 50
    GT              shift and go to state 51
    LEQ             shift and go to state 52
    GEQ             shift and go to state 53

    comparador                     shift and go to state 49

state 16

    (18) operador_ternario -> LPAREN . conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> LPAREN . conditions RPAREN QUESTION COLON valor
    (62) conditions -> . condition
    (63) conditions -> . condition opLogic conditions
    (64) conditions -> . LPAREN conditions RPAREN
    (65) condition -> . valor
    (66) condition -> . valor opSymbol valor
    (67) condition -> . NOT condition
    (68) condition -> . LPAREN conditions RPAREN
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    LPAREN          shift and go to state 54
    NOT             shift and go to state 58
    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25

    conditions                     shift and go to state 55
    valor                          shift and go to state 56
    condition                      shift and go to state 57
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 17

    (41) impresion -> ECHO . imprimir SEMICOLON
    (43) imprimir -> . LPAREN repiteValores RPAREN
    (44) imprimir -> . LPAREN RPAREN
    (45) imprimir -> . repiteValores
    (46) imprimir -> . empty
    (47) repiteValores -> . valor
    (48) repiteValores -> . valor COMMA repiteValores
    (49) empty -> .
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    LPAREN          shift and go to state 62
    SEMICOLON       reduce using rule 49 (empty -> .)
    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25

    imprimir                       shift and go to state 61
    repiteValores                  shift and go to state 63
    empty                          shift and go to state 64
    valor                          shift and go to state 65
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 18

    (42) impresion -> PRINT . imprimir SEMICOLON
    (43) imprimir -> . LPAREN repiteValores RPAREN
    (44) imprimir -> . LPAREN RPAREN
    (45) imprimir -> . repiteValores
    (46) imprimir -> . empty
    (47) repiteValores -> . valor
    (48) repiteValores -> . valor COMMA repiteValores
    (49) empty -> .
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    LPAREN          shift and go to state 62
    SEMICOLON       reduce using rule 49 (empty -> .)
    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25

    imprimir                       shift and go to state 66
    repiteValores                  shift and go to state 63
    empty                          shift and go to state 64
    valor                          shift and go to state 65
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 19

    (50) estructurasPrograma -> controlStructure .

    VARIABLE        reduce using rule 50 (estructurasPrograma -> controlStructure .)
    ECHO            reduce using rule 50 (estructurasPrograma -> controlStructure .)
    PRINT           reduce using rule 50 (estructurasPrograma -> controlStructure .)
    TRY             reduce using rule 50 (estructurasPrograma -> controlStructure .)
    FUNCTION        reduce using rule 50 (estructurasPrograma -> controlStructure .)
    RETURN          reduce using rule 50 (estructurasPrograma -> controlStructure .)
    ID              reduce using rule 50 (estructurasPrograma -> controlStructure .)
    EMPTY           reduce using rule 50 (estructurasPrograma -> controlStructure .)
    INT             reduce using rule 50 (estructurasPrograma -> controlStructure .)
    FLOAT           reduce using rule 50 (estructurasPrograma -> controlStructure .)
    STRING          reduce using rule 50 (estructurasPrograma -> controlStructure .)
    BOOL            reduce using rule 50 (estructurasPrograma -> controlStructure .)
    NULL            reduce using rule 50 (estructurasPrograma -> controlStructure .)
    ARRAY           reduce using rule 50 (estructurasPrograma -> controlStructure .)
    LPAREN          reduce using rule 50 (estructurasPrograma -> controlStructure .)
    IF              reduce using rule 50 (estructurasPrograma -> controlStructure .)
    WHILE           reduce using rule 50 (estructurasPrograma -> controlStructure .)
    SWITCH          reduce using rule 50 (estructurasPrograma -> controlStructure .)
    FOREACH         reduce using rule 50 (estructurasPrograma -> controlStructure .)
    FOR             reduce using rule 50 (estructurasPrograma -> controlStructure .)
    CLOSETAG        reduce using rule 50 (estructurasPrograma -> controlStructure .)
    RBRACE          reduce using rule 50 (estructurasPrograma -> controlStructure .)
    BREAK           reduce using rule 50 (estructurasPrograma -> controlStructure .)
    ENDSWITCH       reduce using rule 50 (estructurasPrograma -> controlStructure .)
    CASE            reduce using rule 50 (estructurasPrograma -> controlStructure .)
    DEFAULT         reduce using rule 50 (estructurasPrograma -> controlStructure .)


state 20

    (51) estructurasPrograma -> dataStructure .

    VARIABLE        reduce using rule 51 (estructurasPrograma -> dataStructure .)
    ECHO            reduce using rule 51 (estructurasPrograma -> dataStructure .)
    PRINT           reduce using rule 51 (estructurasPrograma -> dataStructure .)
    TRY             reduce using rule 51 (estructurasPrograma -> dataStructure .)
    FUNCTION        reduce using rule 51 (estructurasPrograma -> dataStructure .)
    RETURN          reduce using rule 51 (estructurasPrograma -> dataStructure .)
    ID              reduce using rule 51 (estructurasPrograma -> dataStructure .)
    EMPTY           reduce using rule 51 (estructurasPrograma -> dataStructure .)
    INT             reduce using rule 51 (estructurasPrograma -> dataStructure .)
    FLOAT           reduce using rule 51 (estructurasPrograma -> dataStructure .)
    STRING          reduce using rule 51 (estructurasPrograma -> dataStructure .)
    BOOL            reduce using rule 51 (estructurasPrograma -> dataStructure .)
    NULL            reduce using rule 51 (estructurasPrograma -> dataStructure .)
    ARRAY           reduce using rule 51 (estructurasPrograma -> dataStructure .)
    LPAREN          reduce using rule 51 (estructurasPrograma -> dataStructure .)
    IF              reduce using rule 51 (estructurasPrograma -> dataStructure .)
    WHILE           reduce using rule 51 (estructurasPrograma -> dataStructure .)
    SWITCH          reduce using rule 51 (estructurasPrograma -> dataStructure .)
    FOREACH         reduce using rule 51 (estructurasPrograma -> dataStructure .)
    FOR             reduce using rule 51 (estructurasPrograma -> dataStructure .)
    CLOSETAG        reduce using rule 51 (estructurasPrograma -> dataStructure .)
    RBRACE          reduce using rule 51 (estructurasPrograma -> dataStructure .)
    BREAK           reduce using rule 51 (estructurasPrograma -> dataStructure .)
    ENDSWITCH       reduce using rule 51 (estructurasPrograma -> dataStructure .)
    CASE            reduce using rule 51 (estructurasPrograma -> dataStructure .)
    DEFAULT         reduce using rule 51 (estructurasPrograma -> dataStructure .)


state 21

    (137) try -> TRY . LBRACE body RBRACE catchs
    (138) try -> TRY . LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE

    LBRACE          shift and go to state 67


state 22

    (143) funcionDeclaration -> FUNCTION . ID LPAREN argumentos RPAREN LBRACE body RBRACE

    ID              shift and go to state 68


state 23

    (144) llamadaFuncion -> ID . LPAREN argumentos RPAREN SEMICOLON
    (146) llamadaFuncion -> ID . LPAREN argumentos RPAREN

    LPAREN          shift and go to state 69


state 24

    (13) returnStatement -> RETURN . valor SEMICOLON
    (14) returnStatement -> RETURN . SEMICOLON
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    SEMICOLON       shift and go to state 71
    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    valor                          shift and go to state 70
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 25

    (145) llamadaFuncion -> EMPTY . LPAREN argumentos RPAREN
    (147) llamadaFuncion -> EMPTY . LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 72


state 26

    (22) valor -> INT .

    LT              reduce using rule 22 (valor -> INT .)
    GT              reduce using rule 22 (valor -> INT .)
    LEQ             reduce using rule 22 (valor -> INT .)
    GEQ             reduce using rule 22 (valor -> INT .)
    EQ              reduce using rule 22 (valor -> INT .)
    NEQ             reduce using rule 22 (valor -> INT .)
    STRICTEQ        reduce using rule 22 (valor -> INT .)
    STRICTNEQ       reduce using rule 22 (valor -> INT .)
    AND             reduce using rule 22 (valor -> INT .)
    LOGICAL_AND     reduce using rule 22 (valor -> INT .)
    OR              reduce using rule 22 (valor -> INT .)
    LOGICAL_OR      reduce using rule 22 (valor -> INT .)
    RPAREN          reduce using rule 22 (valor -> INT .)
    COMMA           reduce using rule 22 (valor -> INT .)
    SEMICOLON       reduce using rule 22 (valor -> INT .)
    PLUS            reduce using rule 22 (valor -> INT .)
    MINUS           reduce using rule 22 (valor -> INT .)
    TIMES           reduce using rule 22 (valor -> INT .)
    DIVIDE          reduce using rule 22 (valor -> INT .)
    MODULO          reduce using rule 22 (valor -> INT .)
    VARIABLE        reduce using rule 22 (valor -> INT .)
    ECHO            reduce using rule 22 (valor -> INT .)
    PRINT           reduce using rule 22 (valor -> INT .)
    TRY             reduce using rule 22 (valor -> INT .)
    FUNCTION        reduce using rule 22 (valor -> INT .)
    RETURN          reduce using rule 22 (valor -> INT .)
    ID              reduce using rule 22 (valor -> INT .)
    EMPTY           reduce using rule 22 (valor -> INT .)
    INT             reduce using rule 22 (valor -> INT .)
    FLOAT           reduce using rule 22 (valor -> INT .)
    STRING          reduce using rule 22 (valor -> INT .)
    BOOL            reduce using rule 22 (valor -> INT .)
    NULL            reduce using rule 22 (valor -> INT .)
    ARRAY           reduce using rule 22 (valor -> INT .)
    LPAREN          reduce using rule 22 (valor -> INT .)
    IF              reduce using rule 22 (valor -> INT .)
    WHILE           reduce using rule 22 (valor -> INT .)
    SWITCH          reduce using rule 22 (valor -> INT .)
    FOREACH         reduce using rule 22 (valor -> INT .)
    FOR             reduce using rule 22 (valor -> INT .)
    CLOSETAG        reduce using rule 22 (valor -> INT .)
    RBRACE          reduce using rule 22 (valor -> INT .)
    BREAK           reduce using rule 22 (valor -> INT .)
    ENDSWITCH       reduce using rule 22 (valor -> INT .)
    CASE            reduce using rule 22 (valor -> INT .)
    DEFAULT         reduce using rule 22 (valor -> INT .)
    ARROWMAP        reduce using rule 22 (valor -> INT .)
    RBRACKET        reduce using rule 22 (valor -> INT .)
    COLON           reduce using rule 22 (valor -> INT .)


state 27

    (24) valor -> FLOAT .

    LT              reduce using rule 24 (valor -> FLOAT .)
    GT              reduce using rule 24 (valor -> FLOAT .)
    LEQ             reduce using rule 24 (valor -> FLOAT .)
    GEQ             reduce using rule 24 (valor -> FLOAT .)
    EQ              reduce using rule 24 (valor -> FLOAT .)
    NEQ             reduce using rule 24 (valor -> FLOAT .)
    STRICTEQ        reduce using rule 24 (valor -> FLOAT .)
    STRICTNEQ       reduce using rule 24 (valor -> FLOAT .)
    AND             reduce using rule 24 (valor -> FLOAT .)
    LOGICAL_AND     reduce using rule 24 (valor -> FLOAT .)
    OR              reduce using rule 24 (valor -> FLOAT .)
    LOGICAL_OR      reduce using rule 24 (valor -> FLOAT .)
    RPAREN          reduce using rule 24 (valor -> FLOAT .)
    COMMA           reduce using rule 24 (valor -> FLOAT .)
    SEMICOLON       reduce using rule 24 (valor -> FLOAT .)
    PLUS            reduce using rule 24 (valor -> FLOAT .)
    MINUS           reduce using rule 24 (valor -> FLOAT .)
    TIMES           reduce using rule 24 (valor -> FLOAT .)
    DIVIDE          reduce using rule 24 (valor -> FLOAT .)
    MODULO          reduce using rule 24 (valor -> FLOAT .)
    VARIABLE        reduce using rule 24 (valor -> FLOAT .)
    ECHO            reduce using rule 24 (valor -> FLOAT .)
    PRINT           reduce using rule 24 (valor -> FLOAT .)
    TRY             reduce using rule 24 (valor -> FLOAT .)
    FUNCTION        reduce using rule 24 (valor -> FLOAT .)
    RETURN          reduce using rule 24 (valor -> FLOAT .)
    ID              reduce using rule 24 (valor -> FLOAT .)
    EMPTY           reduce using rule 24 (valor -> FLOAT .)
    INT             reduce using rule 24 (valor -> FLOAT .)
    FLOAT           reduce using rule 24 (valor -> FLOAT .)
    STRING          reduce using rule 24 (valor -> FLOAT .)
    BOOL            reduce using rule 24 (valor -> FLOAT .)
    NULL            reduce using rule 24 (valor -> FLOAT .)
    ARRAY           reduce using rule 24 (valor -> FLOAT .)
    LPAREN          reduce using rule 24 (valor -> FLOAT .)
    IF              reduce using rule 24 (valor -> FLOAT .)
    WHILE           reduce using rule 24 (valor -> FLOAT .)
    SWITCH          reduce using rule 24 (valor -> FLOAT .)
    FOREACH         reduce using rule 24 (valor -> FLOAT .)
    FOR             reduce using rule 24 (valor -> FLOAT .)
    CLOSETAG        reduce using rule 24 (valor -> FLOAT .)
    RBRACE          reduce using rule 24 (valor -> FLOAT .)
    BREAK           reduce using rule 24 (valor -> FLOAT .)
    ENDSWITCH       reduce using rule 24 (valor -> FLOAT .)
    CASE            reduce using rule 24 (valor -> FLOAT .)
    DEFAULT         reduce using rule 24 (valor -> FLOAT .)
    ARROWMAP        reduce using rule 24 (valor -> FLOAT .)
    RBRACKET        reduce using rule 24 (valor -> FLOAT .)
    COLON           reduce using rule 24 (valor -> FLOAT .)


state 28

    (25) valor -> STRING .

    LT              reduce using rule 25 (valor -> STRING .)
    GT              reduce using rule 25 (valor -> STRING .)
    LEQ             reduce using rule 25 (valor -> STRING .)
    GEQ             reduce using rule 25 (valor -> STRING .)
    EQ              reduce using rule 25 (valor -> STRING .)
    NEQ             reduce using rule 25 (valor -> STRING .)
    STRICTEQ        reduce using rule 25 (valor -> STRING .)
    STRICTNEQ       reduce using rule 25 (valor -> STRING .)
    AND             reduce using rule 25 (valor -> STRING .)
    LOGICAL_AND     reduce using rule 25 (valor -> STRING .)
    OR              reduce using rule 25 (valor -> STRING .)
    LOGICAL_OR      reduce using rule 25 (valor -> STRING .)
    RPAREN          reduce using rule 25 (valor -> STRING .)
    COMMA           reduce using rule 25 (valor -> STRING .)
    SEMICOLON       reduce using rule 25 (valor -> STRING .)
    PLUS            reduce using rule 25 (valor -> STRING .)
    MINUS           reduce using rule 25 (valor -> STRING .)
    TIMES           reduce using rule 25 (valor -> STRING .)
    DIVIDE          reduce using rule 25 (valor -> STRING .)
    MODULO          reduce using rule 25 (valor -> STRING .)
    VARIABLE        reduce using rule 25 (valor -> STRING .)
    ECHO            reduce using rule 25 (valor -> STRING .)
    PRINT           reduce using rule 25 (valor -> STRING .)
    TRY             reduce using rule 25 (valor -> STRING .)
    FUNCTION        reduce using rule 25 (valor -> STRING .)
    RETURN          reduce using rule 25 (valor -> STRING .)
    ID              reduce using rule 25 (valor -> STRING .)
    EMPTY           reduce using rule 25 (valor -> STRING .)
    INT             reduce using rule 25 (valor -> STRING .)
    FLOAT           reduce using rule 25 (valor -> STRING .)
    STRING          reduce using rule 25 (valor -> STRING .)
    BOOL            reduce using rule 25 (valor -> STRING .)
    NULL            reduce using rule 25 (valor -> STRING .)
    ARRAY           reduce using rule 25 (valor -> STRING .)
    LPAREN          reduce using rule 25 (valor -> STRING .)
    IF              reduce using rule 25 (valor -> STRING .)
    WHILE           reduce using rule 25 (valor -> STRING .)
    SWITCH          reduce using rule 25 (valor -> STRING .)
    FOREACH         reduce using rule 25 (valor -> STRING .)
    FOR             reduce using rule 25 (valor -> STRING .)
    CLOSETAG        reduce using rule 25 (valor -> STRING .)
    RBRACE          reduce using rule 25 (valor -> STRING .)
    BREAK           reduce using rule 25 (valor -> STRING .)
    ENDSWITCH       reduce using rule 25 (valor -> STRING .)
    CASE            reduce using rule 25 (valor -> STRING .)
    DEFAULT         reduce using rule 25 (valor -> STRING .)
    ARROWMAP        reduce using rule 25 (valor -> STRING .)
    RBRACKET        reduce using rule 25 (valor -> STRING .)
    COLON           reduce using rule 25 (valor -> STRING .)


state 29

    (26) valor -> BOOL .

    LT              reduce using rule 26 (valor -> BOOL .)
    GT              reduce using rule 26 (valor -> BOOL .)
    LEQ             reduce using rule 26 (valor -> BOOL .)
    GEQ             reduce using rule 26 (valor -> BOOL .)
    EQ              reduce using rule 26 (valor -> BOOL .)
    NEQ             reduce using rule 26 (valor -> BOOL .)
    STRICTEQ        reduce using rule 26 (valor -> BOOL .)
    STRICTNEQ       reduce using rule 26 (valor -> BOOL .)
    AND             reduce using rule 26 (valor -> BOOL .)
    LOGICAL_AND     reduce using rule 26 (valor -> BOOL .)
    OR              reduce using rule 26 (valor -> BOOL .)
    LOGICAL_OR      reduce using rule 26 (valor -> BOOL .)
    RPAREN          reduce using rule 26 (valor -> BOOL .)
    COMMA           reduce using rule 26 (valor -> BOOL .)
    SEMICOLON       reduce using rule 26 (valor -> BOOL .)
    PLUS            reduce using rule 26 (valor -> BOOL .)
    MINUS           reduce using rule 26 (valor -> BOOL .)
    TIMES           reduce using rule 26 (valor -> BOOL .)
    DIVIDE          reduce using rule 26 (valor -> BOOL .)
    MODULO          reduce using rule 26 (valor -> BOOL .)
    VARIABLE        reduce using rule 26 (valor -> BOOL .)
    ECHO            reduce using rule 26 (valor -> BOOL .)
    PRINT           reduce using rule 26 (valor -> BOOL .)
    TRY             reduce using rule 26 (valor -> BOOL .)
    FUNCTION        reduce using rule 26 (valor -> BOOL .)
    RETURN          reduce using rule 26 (valor -> BOOL .)
    ID              reduce using rule 26 (valor -> BOOL .)
    EMPTY           reduce using rule 26 (valor -> BOOL .)
    INT             reduce using rule 26 (valor -> BOOL .)
    FLOAT           reduce using rule 26 (valor -> BOOL .)
    STRING          reduce using rule 26 (valor -> BOOL .)
    BOOL            reduce using rule 26 (valor -> BOOL .)
    NULL            reduce using rule 26 (valor -> BOOL .)
    ARRAY           reduce using rule 26 (valor -> BOOL .)
    LPAREN          reduce using rule 26 (valor -> BOOL .)
    IF              reduce using rule 26 (valor -> BOOL .)
    WHILE           reduce using rule 26 (valor -> BOOL .)
    SWITCH          reduce using rule 26 (valor -> BOOL .)
    FOREACH         reduce using rule 26 (valor -> BOOL .)
    FOR             reduce using rule 26 (valor -> BOOL .)
    CLOSETAG        reduce using rule 26 (valor -> BOOL .)
    RBRACE          reduce using rule 26 (valor -> BOOL .)
    BREAK           reduce using rule 26 (valor -> BOOL .)
    ENDSWITCH       reduce using rule 26 (valor -> BOOL .)
    CASE            reduce using rule 26 (valor -> BOOL .)
    DEFAULT         reduce using rule 26 (valor -> BOOL .)
    ARROWMAP        reduce using rule 26 (valor -> BOOL .)
    RBRACKET        reduce using rule 26 (valor -> BOOL .)
    COLON           reduce using rule 26 (valor -> BOOL .)


state 30

    (27) valor -> NULL .

    LT              reduce using rule 27 (valor -> NULL .)
    GT              reduce using rule 27 (valor -> NULL .)
    LEQ             reduce using rule 27 (valor -> NULL .)
    GEQ             reduce using rule 27 (valor -> NULL .)
    EQ              reduce using rule 27 (valor -> NULL .)
    NEQ             reduce using rule 27 (valor -> NULL .)
    STRICTEQ        reduce using rule 27 (valor -> NULL .)
    STRICTNEQ       reduce using rule 27 (valor -> NULL .)
    AND             reduce using rule 27 (valor -> NULL .)
    LOGICAL_AND     reduce using rule 27 (valor -> NULL .)
    OR              reduce using rule 27 (valor -> NULL .)
    LOGICAL_OR      reduce using rule 27 (valor -> NULL .)
    RPAREN          reduce using rule 27 (valor -> NULL .)
    COMMA           reduce using rule 27 (valor -> NULL .)
    SEMICOLON       reduce using rule 27 (valor -> NULL .)
    PLUS            reduce using rule 27 (valor -> NULL .)
    MINUS           reduce using rule 27 (valor -> NULL .)
    TIMES           reduce using rule 27 (valor -> NULL .)
    DIVIDE          reduce using rule 27 (valor -> NULL .)
    MODULO          reduce using rule 27 (valor -> NULL .)
    VARIABLE        reduce using rule 27 (valor -> NULL .)
    ECHO            reduce using rule 27 (valor -> NULL .)
    PRINT           reduce using rule 27 (valor -> NULL .)
    TRY             reduce using rule 27 (valor -> NULL .)
    FUNCTION        reduce using rule 27 (valor -> NULL .)
    RETURN          reduce using rule 27 (valor -> NULL .)
    ID              reduce using rule 27 (valor -> NULL .)
    EMPTY           reduce using rule 27 (valor -> NULL .)
    INT             reduce using rule 27 (valor -> NULL .)
    FLOAT           reduce using rule 27 (valor -> NULL .)
    STRING          reduce using rule 27 (valor -> NULL .)
    BOOL            reduce using rule 27 (valor -> NULL .)
    NULL            reduce using rule 27 (valor -> NULL .)
    ARRAY           reduce using rule 27 (valor -> NULL .)
    LPAREN          reduce using rule 27 (valor -> NULL .)
    IF              reduce using rule 27 (valor -> NULL .)
    WHILE           reduce using rule 27 (valor -> NULL .)
    SWITCH          reduce using rule 27 (valor -> NULL .)
    FOREACH         reduce using rule 27 (valor -> NULL .)
    FOR             reduce using rule 27 (valor -> NULL .)
    CLOSETAG        reduce using rule 27 (valor -> NULL .)
    RBRACE          reduce using rule 27 (valor -> NULL .)
    BREAK           reduce using rule 27 (valor -> NULL .)
    ENDSWITCH       reduce using rule 27 (valor -> NULL .)
    CASE            reduce using rule 27 (valor -> NULL .)
    DEFAULT         reduce using rule 27 (valor -> NULL .)
    ARROWMAP        reduce using rule 27 (valor -> NULL .)
    RBRACKET        reduce using rule 27 (valor -> NULL .)
    COLON           reduce using rule 27 (valor -> NULL .)


state 31

    (28) valor -> ARRAY .

    LT              reduce using rule 28 (valor -> ARRAY .)
    GT              reduce using rule 28 (valor -> ARRAY .)
    LEQ             reduce using rule 28 (valor -> ARRAY .)
    GEQ             reduce using rule 28 (valor -> ARRAY .)
    EQ              reduce using rule 28 (valor -> ARRAY .)
    NEQ             reduce using rule 28 (valor -> ARRAY .)
    STRICTEQ        reduce using rule 28 (valor -> ARRAY .)
    STRICTNEQ       reduce using rule 28 (valor -> ARRAY .)
    AND             reduce using rule 28 (valor -> ARRAY .)
    LOGICAL_AND     reduce using rule 28 (valor -> ARRAY .)
    OR              reduce using rule 28 (valor -> ARRAY .)
    LOGICAL_OR      reduce using rule 28 (valor -> ARRAY .)
    RPAREN          reduce using rule 28 (valor -> ARRAY .)
    COMMA           reduce using rule 28 (valor -> ARRAY .)
    SEMICOLON       reduce using rule 28 (valor -> ARRAY .)
    VARIABLE        reduce using rule 28 (valor -> ARRAY .)
    ECHO            reduce using rule 28 (valor -> ARRAY .)
    PRINT           reduce using rule 28 (valor -> ARRAY .)
    TRY             reduce using rule 28 (valor -> ARRAY .)
    FUNCTION        reduce using rule 28 (valor -> ARRAY .)
    RETURN          reduce using rule 28 (valor -> ARRAY .)
    ID              reduce using rule 28 (valor -> ARRAY .)
    EMPTY           reduce using rule 28 (valor -> ARRAY .)
    INT             reduce using rule 28 (valor -> ARRAY .)
    FLOAT           reduce using rule 28 (valor -> ARRAY .)
    STRING          reduce using rule 28 (valor -> ARRAY .)
    BOOL            reduce using rule 28 (valor -> ARRAY .)
    NULL            reduce using rule 28 (valor -> ARRAY .)
    ARRAY           reduce using rule 28 (valor -> ARRAY .)
    LPAREN          reduce using rule 28 (valor -> ARRAY .)
    IF              reduce using rule 28 (valor -> ARRAY .)
    WHILE           reduce using rule 28 (valor -> ARRAY .)
    SWITCH          reduce using rule 28 (valor -> ARRAY .)
    FOREACH         reduce using rule 28 (valor -> ARRAY .)
    FOR             reduce using rule 28 (valor -> ARRAY .)
    CLOSETAG        reduce using rule 28 (valor -> ARRAY .)
    RBRACE          reduce using rule 28 (valor -> ARRAY .)
    BREAK           reduce using rule 28 (valor -> ARRAY .)
    ENDSWITCH       reduce using rule 28 (valor -> ARRAY .)
    CASE            reduce using rule 28 (valor -> ARRAY .)
    DEFAULT         reduce using rule 28 (valor -> ARRAY .)
    PLUS            reduce using rule 28 (valor -> ARRAY .)
    MINUS           reduce using rule 28 (valor -> ARRAY .)
    TIMES           reduce using rule 28 (valor -> ARRAY .)
    DIVIDE          reduce using rule 28 (valor -> ARRAY .)
    MODULO          reduce using rule 28 (valor -> ARRAY .)
    ARROWMAP        reduce using rule 28 (valor -> ARRAY .)
    RBRACKET        reduce using rule 28 (valor -> ARRAY .)
    COLON           reduce using rule 28 (valor -> ARRAY .)


state 32

    (30) valor -> operador_ternario .

    LT              reduce using rule 30 (valor -> operador_ternario .)
    GT              reduce using rule 30 (valor -> operador_ternario .)
    LEQ             reduce using rule 30 (valor -> operador_ternario .)
    GEQ             reduce using rule 30 (valor -> operador_ternario .)
    EQ              reduce using rule 30 (valor -> operador_ternario .)
    NEQ             reduce using rule 30 (valor -> operador_ternario .)
    STRICTEQ        reduce using rule 30 (valor -> operador_ternario .)
    STRICTNEQ       reduce using rule 30 (valor -> operador_ternario .)
    AND             reduce using rule 30 (valor -> operador_ternario .)
    LOGICAL_AND     reduce using rule 30 (valor -> operador_ternario .)
    OR              reduce using rule 30 (valor -> operador_ternario .)
    LOGICAL_OR      reduce using rule 30 (valor -> operador_ternario .)
    RPAREN          reduce using rule 30 (valor -> operador_ternario .)
    COMMA           reduce using rule 30 (valor -> operador_ternario .)
    SEMICOLON       reduce using rule 30 (valor -> operador_ternario .)
    PLUS            reduce using rule 30 (valor -> operador_ternario .)
    MINUS           reduce using rule 30 (valor -> operador_ternario .)
    TIMES           reduce using rule 30 (valor -> operador_ternario .)
    DIVIDE          reduce using rule 30 (valor -> operador_ternario .)
    MODULO          reduce using rule 30 (valor -> operador_ternario .)
    VARIABLE        reduce using rule 30 (valor -> operador_ternario .)
    ECHO            reduce using rule 30 (valor -> operador_ternario .)
    PRINT           reduce using rule 30 (valor -> operador_ternario .)
    TRY             reduce using rule 30 (valor -> operador_ternario .)
    FUNCTION        reduce using rule 30 (valor -> operador_ternario .)
    RETURN          reduce using rule 30 (valor -> operador_ternario .)
    ID              reduce using rule 30 (valor -> operador_ternario .)
    EMPTY           reduce using rule 30 (valor -> operador_ternario .)
    INT             reduce using rule 30 (valor -> operador_ternario .)
    FLOAT           reduce using rule 30 (valor -> operador_ternario .)
    STRING          reduce using rule 30 (valor -> operador_ternario .)
    BOOL            reduce using rule 30 (valor -> operador_ternario .)
    NULL            reduce using rule 30 (valor -> operador_ternario .)
    ARRAY           reduce using rule 30 (valor -> operador_ternario .)
    LPAREN          reduce using rule 30 (valor -> operador_ternario .)
    IF              reduce using rule 30 (valor -> operador_ternario .)
    WHILE           reduce using rule 30 (valor -> operador_ternario .)
    SWITCH          reduce using rule 30 (valor -> operador_ternario .)
    FOREACH         reduce using rule 30 (valor -> operador_ternario .)
    FOR             reduce using rule 30 (valor -> operador_ternario .)
    CLOSETAG        reduce using rule 30 (valor -> operador_ternario .)
    RBRACE          reduce using rule 30 (valor -> operador_ternario .)
    BREAK           reduce using rule 30 (valor -> operador_ternario .)
    ENDSWITCH       reduce using rule 30 (valor -> operador_ternario .)
    CASE            reduce using rule 30 (valor -> operador_ternario .)
    DEFAULT         reduce using rule 30 (valor -> operador_ternario .)
    ARROWMAP        reduce using rule 30 (valor -> operador_ternario .)
    RBRACKET        reduce using rule 30 (valor -> operador_ternario .)
    COLON           reduce using rule 30 (valor -> operador_ternario .)


state 33

    (52) controlStructure -> if .

    VARIABLE        reduce using rule 52 (controlStructure -> if .)
    ECHO            reduce using rule 52 (controlStructure -> if .)
    PRINT           reduce using rule 52 (controlStructure -> if .)
    TRY             reduce using rule 52 (controlStructure -> if .)
    FUNCTION        reduce using rule 52 (controlStructure -> if .)
    RETURN          reduce using rule 52 (controlStructure -> if .)
    ID              reduce using rule 52 (controlStructure -> if .)
    EMPTY           reduce using rule 52 (controlStructure -> if .)
    INT             reduce using rule 52 (controlStructure -> if .)
    FLOAT           reduce using rule 52 (controlStructure -> if .)
    STRING          reduce using rule 52 (controlStructure -> if .)
    BOOL            reduce using rule 52 (controlStructure -> if .)
    NULL            reduce using rule 52 (controlStructure -> if .)
    ARRAY           reduce using rule 52 (controlStructure -> if .)
    LPAREN          reduce using rule 52 (controlStructure -> if .)
    IF              reduce using rule 52 (controlStructure -> if .)
    WHILE           reduce using rule 52 (controlStructure -> if .)
    SWITCH          reduce using rule 52 (controlStructure -> if .)
    FOREACH         reduce using rule 52 (controlStructure -> if .)
    FOR             reduce using rule 52 (controlStructure -> if .)
    CLOSETAG        reduce using rule 52 (controlStructure -> if .)
    RBRACE          reduce using rule 52 (controlStructure -> if .)
    BREAK           reduce using rule 52 (controlStructure -> if .)
    ENDSWITCH       reduce using rule 52 (controlStructure -> if .)
    CASE            reduce using rule 52 (controlStructure -> if .)
    DEFAULT         reduce using rule 52 (controlStructure -> if .)


state 34

    (53) controlStructure -> for .

    VARIABLE        reduce using rule 53 (controlStructure -> for .)
    ECHO            reduce using rule 53 (controlStructure -> for .)
    PRINT           reduce using rule 53 (controlStructure -> for .)
    TRY             reduce using rule 53 (controlStructure -> for .)
    FUNCTION        reduce using rule 53 (controlStructure -> for .)
    RETURN          reduce using rule 53 (controlStructure -> for .)
    ID              reduce using rule 53 (controlStructure -> for .)
    EMPTY           reduce using rule 53 (controlStructure -> for .)
    INT             reduce using rule 53 (controlStructure -> for .)
    FLOAT           reduce using rule 53 (controlStructure -> for .)
    STRING          reduce using rule 53 (controlStructure -> for .)
    BOOL            reduce using rule 53 (controlStructure -> for .)
    NULL            reduce using rule 53 (controlStructure -> for .)
    ARRAY           reduce using rule 53 (controlStructure -> for .)
    LPAREN          reduce using rule 53 (controlStructure -> for .)
    IF              reduce using rule 53 (controlStructure -> for .)
    WHILE           reduce using rule 53 (controlStructure -> for .)
    SWITCH          reduce using rule 53 (controlStructure -> for .)
    FOREACH         reduce using rule 53 (controlStructure -> for .)
    FOR             reduce using rule 53 (controlStructure -> for .)
    CLOSETAG        reduce using rule 53 (controlStructure -> for .)
    RBRACE          reduce using rule 53 (controlStructure -> for .)
    BREAK           reduce using rule 53 (controlStructure -> for .)
    ENDSWITCH       reduce using rule 53 (controlStructure -> for .)
    CASE            reduce using rule 53 (controlStructure -> for .)
    DEFAULT         reduce using rule 53 (controlStructure -> for .)


state 35

    (54) controlStructure -> while .

    VARIABLE        reduce using rule 54 (controlStructure -> while .)
    ECHO            reduce using rule 54 (controlStructure -> while .)
    PRINT           reduce using rule 54 (controlStructure -> while .)
    TRY             reduce using rule 54 (controlStructure -> while .)
    FUNCTION        reduce using rule 54 (controlStructure -> while .)
    RETURN          reduce using rule 54 (controlStructure -> while .)
    ID              reduce using rule 54 (controlStructure -> while .)
    EMPTY           reduce using rule 54 (controlStructure -> while .)
    INT             reduce using rule 54 (controlStructure -> while .)
    FLOAT           reduce using rule 54 (controlStructure -> while .)
    STRING          reduce using rule 54 (controlStructure -> while .)
    BOOL            reduce using rule 54 (controlStructure -> while .)
    NULL            reduce using rule 54 (controlStructure -> while .)
    ARRAY           reduce using rule 54 (controlStructure -> while .)
    LPAREN          reduce using rule 54 (controlStructure -> while .)
    IF              reduce using rule 54 (controlStructure -> while .)
    WHILE           reduce using rule 54 (controlStructure -> while .)
    SWITCH          reduce using rule 54 (controlStructure -> while .)
    FOREACH         reduce using rule 54 (controlStructure -> while .)
    FOR             reduce using rule 54 (controlStructure -> while .)
    CLOSETAG        reduce using rule 54 (controlStructure -> while .)
    RBRACE          reduce using rule 54 (controlStructure -> while .)
    BREAK           reduce using rule 54 (controlStructure -> while .)
    ENDSWITCH       reduce using rule 54 (controlStructure -> while .)
    CASE            reduce using rule 54 (controlStructure -> while .)
    DEFAULT         reduce using rule 54 (controlStructure -> while .)


state 36

    (55) controlStructure -> switch .

    VARIABLE        reduce using rule 55 (controlStructure -> switch .)
    ECHO            reduce using rule 55 (controlStructure -> switch .)
    PRINT           reduce using rule 55 (controlStructure -> switch .)
    TRY             reduce using rule 55 (controlStructure -> switch .)
    FUNCTION        reduce using rule 55 (controlStructure -> switch .)
    RETURN          reduce using rule 55 (controlStructure -> switch .)
    ID              reduce using rule 55 (controlStructure -> switch .)
    EMPTY           reduce using rule 55 (controlStructure -> switch .)
    INT             reduce using rule 55 (controlStructure -> switch .)
    FLOAT           reduce using rule 55 (controlStructure -> switch .)
    STRING          reduce using rule 55 (controlStructure -> switch .)
    BOOL            reduce using rule 55 (controlStructure -> switch .)
    NULL            reduce using rule 55 (controlStructure -> switch .)
    ARRAY           reduce using rule 55 (controlStructure -> switch .)
    LPAREN          reduce using rule 55 (controlStructure -> switch .)
    IF              reduce using rule 55 (controlStructure -> switch .)
    WHILE           reduce using rule 55 (controlStructure -> switch .)
    SWITCH          reduce using rule 55 (controlStructure -> switch .)
    FOREACH         reduce using rule 55 (controlStructure -> switch .)
    FOR             reduce using rule 55 (controlStructure -> switch .)
    CLOSETAG        reduce using rule 55 (controlStructure -> switch .)
    RBRACE          reduce using rule 55 (controlStructure -> switch .)
    BREAK           reduce using rule 55 (controlStructure -> switch .)
    ENDSWITCH       reduce using rule 55 (controlStructure -> switch .)
    CASE            reduce using rule 55 (controlStructure -> switch .)
    DEFAULT         reduce using rule 55 (controlStructure -> switch .)


state 37

    (56) controlStructure -> foreach .

    VARIABLE        reduce using rule 56 (controlStructure -> foreach .)
    ECHO            reduce using rule 56 (controlStructure -> foreach .)
    PRINT           reduce using rule 56 (controlStructure -> foreach .)
    TRY             reduce using rule 56 (controlStructure -> foreach .)
    FUNCTION        reduce using rule 56 (controlStructure -> foreach .)
    RETURN          reduce using rule 56 (controlStructure -> foreach .)
    ID              reduce using rule 56 (controlStructure -> foreach .)
    EMPTY           reduce using rule 56 (controlStructure -> foreach .)
    INT             reduce using rule 56 (controlStructure -> foreach .)
    FLOAT           reduce using rule 56 (controlStructure -> foreach .)
    STRING          reduce using rule 56 (controlStructure -> foreach .)
    BOOL            reduce using rule 56 (controlStructure -> foreach .)
    NULL            reduce using rule 56 (controlStructure -> foreach .)
    ARRAY           reduce using rule 56 (controlStructure -> foreach .)
    LPAREN          reduce using rule 56 (controlStructure -> foreach .)
    IF              reduce using rule 56 (controlStructure -> foreach .)
    WHILE           reduce using rule 56 (controlStructure -> foreach .)
    SWITCH          reduce using rule 56 (controlStructure -> foreach .)
    FOREACH         reduce using rule 56 (controlStructure -> foreach .)
    FOR             reduce using rule 56 (controlStructure -> foreach .)
    CLOSETAG        reduce using rule 56 (controlStructure -> foreach .)
    RBRACE          reduce using rule 56 (controlStructure -> foreach .)
    BREAK           reduce using rule 56 (controlStructure -> foreach .)
    ENDSWITCH       reduce using rule 56 (controlStructure -> foreach .)
    CASE            reduce using rule 56 (controlStructure -> foreach .)
    DEFAULT         reduce using rule 56 (controlStructure -> foreach .)


state 38

    (105) dataStructure -> array .

    VARIABLE        reduce using rule 105 (dataStructure -> array .)
    ECHO            reduce using rule 105 (dataStructure -> array .)
    PRINT           reduce using rule 105 (dataStructure -> array .)
    TRY             reduce using rule 105 (dataStructure -> array .)
    FUNCTION        reduce using rule 105 (dataStructure -> array .)
    RETURN          reduce using rule 105 (dataStructure -> array .)
    ID              reduce using rule 105 (dataStructure -> array .)
    EMPTY           reduce using rule 105 (dataStructure -> array .)
    INT             reduce using rule 105 (dataStructure -> array .)
    FLOAT           reduce using rule 105 (dataStructure -> array .)
    STRING          reduce using rule 105 (dataStructure -> array .)
    BOOL            reduce using rule 105 (dataStructure -> array .)
    NULL            reduce using rule 105 (dataStructure -> array .)
    ARRAY           reduce using rule 105 (dataStructure -> array .)
    LPAREN          reduce using rule 105 (dataStructure -> array .)
    IF              reduce using rule 105 (dataStructure -> array .)
    WHILE           reduce using rule 105 (dataStructure -> array .)
    SWITCH          reduce using rule 105 (dataStructure -> array .)
    FOREACH         reduce using rule 105 (dataStructure -> array .)
    FOR             reduce using rule 105 (dataStructure -> array .)
    CLOSETAG        reduce using rule 105 (dataStructure -> array .)
    RBRACE          reduce using rule 105 (dataStructure -> array .)
    BREAK           reduce using rule 105 (dataStructure -> array .)
    ENDSWITCH       reduce using rule 105 (dataStructure -> array .)
    CASE            reduce using rule 105 (dataStructure -> array .)
    DEFAULT         reduce using rule 105 (dataStructure -> array .)


state 39

    (57) if -> IF . LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (58) if -> IF . LPAREN conditions RPAREN body

    LPAREN          shift and go to state 73


state 40

    (85) for -> forStatement .

    VARIABLE        reduce using rule 85 (for -> forStatement .)
    ECHO            reduce using rule 85 (for -> forStatement .)
    PRINT           reduce using rule 85 (for -> forStatement .)
    TRY             reduce using rule 85 (for -> forStatement .)
    FUNCTION        reduce using rule 85 (for -> forStatement .)
    RETURN          reduce using rule 85 (for -> forStatement .)
    ID              reduce using rule 85 (for -> forStatement .)
    EMPTY           reduce using rule 85 (for -> forStatement .)
    INT             reduce using rule 85 (for -> forStatement .)
    FLOAT           reduce using rule 85 (for -> forStatement .)
    STRING          reduce using rule 85 (for -> forStatement .)
    BOOL            reduce using rule 85 (for -> forStatement .)
    NULL            reduce using rule 85 (for -> forStatement .)
    ARRAY           reduce using rule 85 (for -> forStatement .)
    LPAREN          reduce using rule 85 (for -> forStatement .)
    IF              reduce using rule 85 (for -> forStatement .)
    WHILE           reduce using rule 85 (for -> forStatement .)
    SWITCH          reduce using rule 85 (for -> forStatement .)
    FOREACH         reduce using rule 85 (for -> forStatement .)
    FOR             reduce using rule 85 (for -> forStatement .)
    CLOSETAG        reduce using rule 85 (for -> forStatement .)
    RBRACE          reduce using rule 85 (for -> forStatement .)
    BREAK           reduce using rule 85 (for -> forStatement .)
    ENDSWITCH       reduce using rule 85 (for -> forStatement .)
    CASE            reduce using rule 85 (for -> forStatement .)
    DEFAULT         reduce using rule 85 (for -> forStatement .)


state 41

    (89) while -> WHILE . LPAREN condition RPAREN LBRACE body RBRACE
    (90) while -> WHILE . LPAREN condition RPAREN LBRACE RBRACE

    LPAREN          shift and go to state 74


state 42

    (91) switch -> SWITCH . LPAREN valor RPAREN LBRACE caseLists RBRACE
    (92) switch -> SWITCH . LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON

    LPAREN          shift and go to state 75


state 43

    (99) foreach -> FOREACH . LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 76


state 44

    (109) array -> map .

    VARIABLE        reduce using rule 109 (array -> map .)
    ECHO            reduce using rule 109 (array -> map .)
    PRINT           reduce using rule 109 (array -> map .)
    TRY             reduce using rule 109 (array -> map .)
    FUNCTION        reduce using rule 109 (array -> map .)
    RETURN          reduce using rule 109 (array -> map .)
    ID              reduce using rule 109 (array -> map .)
    EMPTY           reduce using rule 109 (array -> map .)
    INT             reduce using rule 109 (array -> map .)
    FLOAT           reduce using rule 109 (array -> map .)
    STRING          reduce using rule 109 (array -> map .)
    BOOL            reduce using rule 109 (array -> map .)
    NULL            reduce using rule 109 (array -> map .)
    ARRAY           reduce using rule 109 (array -> map .)
    LPAREN          reduce using rule 109 (array -> map .)
    IF              reduce using rule 109 (array -> map .)
    WHILE           reduce using rule 109 (array -> map .)
    SWITCH          reduce using rule 109 (array -> map .)
    FOREACH         reduce using rule 109 (array -> map .)
    FOR             reduce using rule 109 (array -> map .)
    CLOSETAG        reduce using rule 109 (array -> map .)
    RBRACE          reduce using rule 109 (array -> map .)
    BREAK           reduce using rule 109 (array -> map .)
    ENDSWITCH       reduce using rule 109 (array -> map .)
    CASE            reduce using rule 109 (array -> map .)
    DEFAULT         reduce using rule 109 (array -> map .)


state 45

    (86) forStatement -> FOR . LPAREN forcondition RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 77


state 46

    (1) inicio -> OPENTAG programa CLOSETAG .

    $end            reduce using rule 1 (inicio -> OPENTAG programa CLOSETAG .)


state 47

    (3) programa -> sentencia programa .

    CLOSETAG        reduce using rule 3 (programa -> sentencia programa .)


state 48

    (15) asignacion -> VARIABLE EQUALS . operaArit SEMICOLON
    (16) asignacion -> VARIABLE EQUALS . valor SEMICOLON
    (17) asignacion_fgets -> VARIABLE EQUALS . FGETS LPAREN STDIN RPAREN SEMICOLON
    (106) array -> VARIABLE EQUALS . arrays SEMICOLON
    (107) array -> VARIABLE EQUALS . LBRACKET arrayAnidado RBRACKET SEMICOLON
    (108) array -> VARIABLE EQUALS . ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (113) map -> VARIABLE EQUALS . LBRACKET maps RBRACKET SEMICOLON
    (114) map -> VARIABLE EQUALS . ARRAY LPAREN maps RPAREN SEMICOLON
    (20) operaArit -> . valor
    (21) operaArit -> . valor operador operaArit
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (110) arrays -> . LBRACKET repiteValores RBRACKET
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    FGETS           shift and go to state 80
    LBRACKET        shift and go to state 82
    ARRAY           shift and go to state 83
    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    operaArit                      shift and go to state 78
    valor                          shift and go to state 79
    arrays                         shift and go to state 81
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 49

    (36) comparacion -> valor comparador . valor
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    valor                          shift and go to state 84
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 50

    (37) comparador -> LT .

    INT             reduce using rule 37 (comparador -> LT .)
    VARIABLE        reduce using rule 37 (comparador -> LT .)
    FLOAT           reduce using rule 37 (comparador -> LT .)
    STRING          reduce using rule 37 (comparador -> LT .)
    BOOL            reduce using rule 37 (comparador -> LT .)
    NULL            reduce using rule 37 (comparador -> LT .)
    ARRAY           reduce using rule 37 (comparador -> LT .)
    ID              reduce using rule 37 (comparador -> LT .)
    EMPTY           reduce using rule 37 (comparador -> LT .)
    LPAREN          reduce using rule 37 (comparador -> LT .)


state 51

    (38) comparador -> GT .

    INT             reduce using rule 38 (comparador -> GT .)
    VARIABLE        reduce using rule 38 (comparador -> GT .)
    FLOAT           reduce using rule 38 (comparador -> GT .)
    STRING          reduce using rule 38 (comparador -> GT .)
    BOOL            reduce using rule 38 (comparador -> GT .)
    NULL            reduce using rule 38 (comparador -> GT .)
    ARRAY           reduce using rule 38 (comparador -> GT .)
    ID              reduce using rule 38 (comparador -> GT .)
    EMPTY           reduce using rule 38 (comparador -> GT .)
    LPAREN          reduce using rule 38 (comparador -> GT .)


state 52

    (39) comparador -> LEQ .

    INT             reduce using rule 39 (comparador -> LEQ .)
    VARIABLE        reduce using rule 39 (comparador -> LEQ .)
    FLOAT           reduce using rule 39 (comparador -> LEQ .)
    STRING          reduce using rule 39 (comparador -> LEQ .)
    BOOL            reduce using rule 39 (comparador -> LEQ .)
    NULL            reduce using rule 39 (comparador -> LEQ .)
    ARRAY           reduce using rule 39 (comparador -> LEQ .)
    ID              reduce using rule 39 (comparador -> LEQ .)
    EMPTY           reduce using rule 39 (comparador -> LEQ .)
    LPAREN          reduce using rule 39 (comparador -> LEQ .)


state 53

    (40) comparador -> GEQ .

    INT             reduce using rule 40 (comparador -> GEQ .)
    VARIABLE        reduce using rule 40 (comparador -> GEQ .)
    FLOAT           reduce using rule 40 (comparador -> GEQ .)
    STRING          reduce using rule 40 (comparador -> GEQ .)
    BOOL            reduce using rule 40 (comparador -> GEQ .)
    NULL            reduce using rule 40 (comparador -> GEQ .)
    ARRAY           reduce using rule 40 (comparador -> GEQ .)
    ID              reduce using rule 40 (comparador -> GEQ .)
    EMPTY           reduce using rule 40 (comparador -> GEQ .)
    LPAREN          reduce using rule 40 (comparador -> GEQ .)


state 54

    (64) conditions -> LPAREN . conditions RPAREN
    (68) condition -> LPAREN . conditions RPAREN
    (18) operador_ternario -> LPAREN . conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> LPAREN . conditions RPAREN QUESTION COLON valor
    (62) conditions -> . condition
    (63) conditions -> . condition opLogic conditions
    (64) conditions -> . LPAREN conditions RPAREN
    (65) condition -> . valor
    (66) condition -> . valor opSymbol valor
    (67) condition -> . NOT condition
    (68) condition -> . LPAREN conditions RPAREN
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    LPAREN          shift and go to state 54
    NOT             shift and go to state 58
    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25

    conditions                     shift and go to state 85
    valor                          shift and go to state 56
    condition                      shift and go to state 57
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 55

    (18) operador_ternario -> LPAREN conditions . RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> LPAREN conditions . RPAREN QUESTION COLON valor

    RPAREN          shift and go to state 86


state 56

    (65) condition -> valor .
    (66) condition -> valor . opSymbol valor
    (69) opSymbol -> . EQ
    (70) opSymbol -> . NEQ
    (71) opSymbol -> . STRICTEQ
    (72) opSymbol -> . STRICTNEQ
    (73) opSymbol -> . LT
    (74) opSymbol -> . GT
    (75) opSymbol -> . LEQ
    (76) opSymbol -> . GEQ

    AND             reduce using rule 65 (condition -> valor .)
    LOGICAL_AND     reduce using rule 65 (condition -> valor .)
    OR              reduce using rule 65 (condition -> valor .)
    LOGICAL_OR      reduce using rule 65 (condition -> valor .)
    RPAREN          reduce using rule 65 (condition -> valor .)
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    STRICTEQ        shift and go to state 90
    STRICTNEQ       shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LEQ             shift and go to state 94
    GEQ             shift and go to state 95

    opSymbol                       shift and go to state 87

state 57

    (62) conditions -> condition .
    (63) conditions -> condition . opLogic conditions
    (77) opLogic -> . AND
    (78) opLogic -> . LOGICAL_AND
    (79) opLogic -> . OR
    (80) opLogic -> . LOGICAL_OR

    RPAREN          reduce using rule 62 (conditions -> condition .)
    AND             shift and go to state 97
    LOGICAL_AND     shift and go to state 98
    OR              shift and go to state 99
    LOGICAL_OR      shift and go to state 100

    opLogic                        shift and go to state 96

state 58

    (67) condition -> NOT . condition
    (65) condition -> . valor
    (66) condition -> . valor opSymbol valor
    (67) condition -> . NOT condition
    (68) condition -> . LPAREN conditions RPAREN
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    NOT             shift and go to state 58
    LPAREN          shift and go to state 102
    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25

    condition                      shift and go to state 101
    valor                          shift and go to state 56
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 59

    (23) valor -> VARIABLE .

    EQ              reduce using rule 23 (valor -> VARIABLE .)
    NEQ             reduce using rule 23 (valor -> VARIABLE .)
    STRICTEQ        reduce using rule 23 (valor -> VARIABLE .)
    STRICTNEQ       reduce using rule 23 (valor -> VARIABLE .)
    LT              reduce using rule 23 (valor -> VARIABLE .)
    GT              reduce using rule 23 (valor -> VARIABLE .)
    LEQ             reduce using rule 23 (valor -> VARIABLE .)
    GEQ             reduce using rule 23 (valor -> VARIABLE .)
    AND             reduce using rule 23 (valor -> VARIABLE .)
    LOGICAL_AND     reduce using rule 23 (valor -> VARIABLE .)
    OR              reduce using rule 23 (valor -> VARIABLE .)
    LOGICAL_OR      reduce using rule 23 (valor -> VARIABLE .)
    RPAREN          reduce using rule 23 (valor -> VARIABLE .)
    COMMA           reduce using rule 23 (valor -> VARIABLE .)
    SEMICOLON       reduce using rule 23 (valor -> VARIABLE .)
    PLUS            reduce using rule 23 (valor -> VARIABLE .)
    MINUS           reduce using rule 23 (valor -> VARIABLE .)
    TIMES           reduce using rule 23 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 23 (valor -> VARIABLE .)
    MODULO          reduce using rule 23 (valor -> VARIABLE .)
    VARIABLE        reduce using rule 23 (valor -> VARIABLE .)
    ECHO            reduce using rule 23 (valor -> VARIABLE .)
    PRINT           reduce using rule 23 (valor -> VARIABLE .)
    TRY             reduce using rule 23 (valor -> VARIABLE .)
    FUNCTION        reduce using rule 23 (valor -> VARIABLE .)
    RETURN          reduce using rule 23 (valor -> VARIABLE .)
    ID              reduce using rule 23 (valor -> VARIABLE .)
    EMPTY           reduce using rule 23 (valor -> VARIABLE .)
    INT             reduce using rule 23 (valor -> VARIABLE .)
    FLOAT           reduce using rule 23 (valor -> VARIABLE .)
    STRING          reduce using rule 23 (valor -> VARIABLE .)
    BOOL            reduce using rule 23 (valor -> VARIABLE .)
    NULL            reduce using rule 23 (valor -> VARIABLE .)
    ARRAY           reduce using rule 23 (valor -> VARIABLE .)
    LPAREN          reduce using rule 23 (valor -> VARIABLE .)
    IF              reduce using rule 23 (valor -> VARIABLE .)
    WHILE           reduce using rule 23 (valor -> VARIABLE .)
    SWITCH          reduce using rule 23 (valor -> VARIABLE .)
    FOREACH         reduce using rule 23 (valor -> VARIABLE .)
    FOR             reduce using rule 23 (valor -> VARIABLE .)
    CLOSETAG        reduce using rule 23 (valor -> VARIABLE .)
    RBRACE          reduce using rule 23 (valor -> VARIABLE .)
    BREAK           reduce using rule 23 (valor -> VARIABLE .)
    ENDSWITCH       reduce using rule 23 (valor -> VARIABLE .)
    CASE            reduce using rule 23 (valor -> VARIABLE .)
    DEFAULT         reduce using rule 23 (valor -> VARIABLE .)
    ARROWMAP        reduce using rule 23 (valor -> VARIABLE .)
    RBRACKET        reduce using rule 23 (valor -> VARIABLE .)
    COLON           reduce using rule 23 (valor -> VARIABLE .)


state 60

    (29) valor -> llamadaFuncion .

    EQ              reduce using rule 29 (valor -> llamadaFuncion .)
    NEQ             reduce using rule 29 (valor -> llamadaFuncion .)
    STRICTEQ        reduce using rule 29 (valor -> llamadaFuncion .)
    STRICTNEQ       reduce using rule 29 (valor -> llamadaFuncion .)
    LT              reduce using rule 29 (valor -> llamadaFuncion .)
    GT              reduce using rule 29 (valor -> llamadaFuncion .)
    LEQ             reduce using rule 29 (valor -> llamadaFuncion .)
    GEQ             reduce using rule 29 (valor -> llamadaFuncion .)
    AND             reduce using rule 29 (valor -> llamadaFuncion .)
    LOGICAL_AND     reduce using rule 29 (valor -> llamadaFuncion .)
    OR              reduce using rule 29 (valor -> llamadaFuncion .)
    LOGICAL_OR      reduce using rule 29 (valor -> llamadaFuncion .)
    RPAREN          reduce using rule 29 (valor -> llamadaFuncion .)
    COMMA           reduce using rule 29 (valor -> llamadaFuncion .)
    SEMICOLON       reduce using rule 29 (valor -> llamadaFuncion .)
    PLUS            reduce using rule 29 (valor -> llamadaFuncion .)
    MINUS           reduce using rule 29 (valor -> llamadaFuncion .)
    TIMES           reduce using rule 29 (valor -> llamadaFuncion .)
    DIVIDE          reduce using rule 29 (valor -> llamadaFuncion .)
    MODULO          reduce using rule 29 (valor -> llamadaFuncion .)
    VARIABLE        reduce using rule 29 (valor -> llamadaFuncion .)
    ECHO            reduce using rule 29 (valor -> llamadaFuncion .)
    PRINT           reduce using rule 29 (valor -> llamadaFuncion .)
    TRY             reduce using rule 29 (valor -> llamadaFuncion .)
    FUNCTION        reduce using rule 29 (valor -> llamadaFuncion .)
    RETURN          reduce using rule 29 (valor -> llamadaFuncion .)
    ID              reduce using rule 29 (valor -> llamadaFuncion .)
    EMPTY           reduce using rule 29 (valor -> llamadaFuncion .)
    INT             reduce using rule 29 (valor -> llamadaFuncion .)
    FLOAT           reduce using rule 29 (valor -> llamadaFuncion .)
    STRING          reduce using rule 29 (valor -> llamadaFuncion .)
    BOOL            reduce using rule 29 (valor -> llamadaFuncion .)
    NULL            reduce using rule 29 (valor -> llamadaFuncion .)
    ARRAY           reduce using rule 29 (valor -> llamadaFuncion .)
    LPAREN          reduce using rule 29 (valor -> llamadaFuncion .)
    IF              reduce using rule 29 (valor -> llamadaFuncion .)
    WHILE           reduce using rule 29 (valor -> llamadaFuncion .)
    SWITCH          reduce using rule 29 (valor -> llamadaFuncion .)
    FOREACH         reduce using rule 29 (valor -> llamadaFuncion .)
    FOR             reduce using rule 29 (valor -> llamadaFuncion .)
    CLOSETAG        reduce using rule 29 (valor -> llamadaFuncion .)
    RBRACE          reduce using rule 29 (valor -> llamadaFuncion .)
    BREAK           reduce using rule 29 (valor -> llamadaFuncion .)
    ENDSWITCH       reduce using rule 29 (valor -> llamadaFuncion .)
    CASE            reduce using rule 29 (valor -> llamadaFuncion .)
    DEFAULT         reduce using rule 29 (valor -> llamadaFuncion .)
    ARROWMAP        reduce using rule 29 (valor -> llamadaFuncion .)
    RBRACKET        reduce using rule 29 (valor -> llamadaFuncion .)
    COLON           reduce using rule 29 (valor -> llamadaFuncion .)


state 61

    (41) impresion -> ECHO imprimir . SEMICOLON

    SEMICOLON       shift and go to state 103


state 62

    (43) imprimir -> LPAREN . repiteValores RPAREN
    (44) imprimir -> LPAREN . RPAREN
    (18) operador_ternario -> LPAREN . conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> LPAREN . conditions RPAREN QUESTION COLON valor
    (47) repiteValores -> . valor
    (48) repiteValores -> . valor COMMA repiteValores
    (62) conditions -> . condition
    (63) conditions -> . condition opLogic conditions
    (64) conditions -> . LPAREN conditions RPAREN
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (65) condition -> . valor
    (66) condition -> . valor opSymbol valor
    (67) condition -> . NOT condition
    (68) condition -> . LPAREN conditions RPAREN
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    RPAREN          shift and go to state 105
    LPAREN          shift and go to state 54
    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    NOT             shift and go to state 58
    ID              shift and go to state 23
    EMPTY           shift and go to state 25

    repiteValores                  shift and go to state 104
    conditions                     shift and go to state 55
    valor                          shift and go to state 106
    condition                      shift and go to state 57
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 63

    (45) imprimir -> repiteValores .

    SEMICOLON       reduce using rule 45 (imprimir -> repiteValores .)


state 64

    (46) imprimir -> empty .

    SEMICOLON       reduce using rule 46 (imprimir -> empty .)


state 65

    (47) repiteValores -> valor .
    (48) repiteValores -> valor . COMMA repiteValores

    SEMICOLON       reduce using rule 47 (repiteValores -> valor .)
    RPAREN          reduce using rule 47 (repiteValores -> valor .)
    RBRACKET        reduce using rule 47 (repiteValores -> valor .)
    COMMA           shift and go to state 107


state 66

    (42) impresion -> PRINT imprimir . SEMICOLON

    SEMICOLON       shift and go to state 108


state 67

    (137) try -> TRY LBRACE . body RBRACE catchs
    (138) try -> TRY LBRACE . body RBRACE catchs FINALLY LBRACE body RBRACE
    (81) body -> . sentenciaList
    (82) body -> . empty
    (83) sentenciaList -> . sentencia
    (84) sentenciaList -> . sentencia sentenciaList
    (49) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (15) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (16) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (17) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (36) comparacion -> . valor comparador valor
    (41) impresion -> . ECHO imprimir SEMICOLON
    (42) impresion -> . PRINT imprimir SEMICOLON
    (50) estructurasPrograma -> . controlStructure
    (51) estructurasPrograma -> . dataStructure
    (137) try -> . TRY LBRACE body RBRACE catchs
    (138) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (143) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (13) returnStatement -> . RETURN valor SEMICOLON
    (14) returnStatement -> . RETURN SEMICOLON
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (52) controlStructure -> . if
    (53) controlStructure -> . for
    (54) controlStructure -> . while
    (55) controlStructure -> . switch
    (56) controlStructure -> . foreach
    (105) dataStructure -> . array
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (57) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (58) if -> . IF LPAREN conditions RPAREN body
    (85) for -> . forStatement
    (89) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (90) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (91) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (92) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (99) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (106) array -> . VARIABLE EQUALS arrays SEMICOLON
    (107) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (108) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (109) array -> . map
    (86) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (113) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (114) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 49 (empty -> .)
    VARIABLE        shift and go to state 14
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    TRY             shift and go to state 21
    FUNCTION        shift and go to state 22
    RETURN          shift and go to state 24
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 16
    IF              shift and go to state 39
    WHILE           shift and go to state 41
    SWITCH          shift and go to state 42
    FOREACH         shift and go to state 43
    FOR             shift and go to state 45

    body                           shift and go to state 109
    sentenciaList                  shift and go to state 110
    empty                          shift and go to state 111
    sentencia                      shift and go to state 112
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    valor                          shift and go to state 15
    controlStructure               shift and go to state 19
    dataStructure                  shift and go to state 20
    operador_ternario              shift and go to state 32
    if                             shift and go to state 33
    for                            shift and go to state 34
    while                          shift and go to state 35
    switch                         shift and go to state 36
    foreach                        shift and go to state 37
    array                          shift and go to state 38
    forStatement                   shift and go to state 40
    map                            shift and go to state 44

state 68

    (143) funcionDeclaration -> FUNCTION ID . LPAREN argumentos RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 113


state 69

    (144) llamadaFuncion -> ID LPAREN . argumentos RPAREN SEMICOLON
    (146) llamadaFuncion -> ID LPAREN . argumentos RPAREN
    (123) argumentos -> . argumento
    (124) argumentos -> . argumento COMMA argumentos
    (125) argumentos -> . empty
    (126) argumento -> . VARIABLE
    (127) argumento -> . type VARIABLE
    (128) argumento -> . VARIABLE EQUALS valor
    (129) argumento -> . type VARIABLE EQUALS valor
    (130) argumento -> . operaArit
    (49) empty -> .
    (131) type -> . INT_TYPE
    (132) type -> . FLOAT_TYPE
    (133) type -> . STRING_TYPE
    (134) type -> . BOOL_TYPE
    (135) type -> . ARRAY_TYPE
    (136) type -> . VOID
    (20) operaArit -> . valor
    (21) operaArit -> . valor operador operaArit
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    VARIABLE        shift and go to state 117
    RPAREN          reduce using rule 49 (empty -> .)
    INT_TYPE        shift and go to state 121
    FLOAT_TYPE      shift and go to state 122
    STRING_TYPE     shift and go to state 123
    BOOL_TYPE       shift and go to state 124
    ARRAY_TYPE      shift and go to state 125
    VOID            shift and go to state 126
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    argumentos                     shift and go to state 114
    argumento                      shift and go to state 115
    empty                          shift and go to state 116
    type                           shift and go to state 118
    valor                          shift and go to state 119
    operaArit                      shift and go to state 120
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 70

    (13) returnStatement -> RETURN valor . SEMICOLON

    SEMICOLON       shift and go to state 127


state 71

    (14) returnStatement -> RETURN SEMICOLON .

    VARIABLE        reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    ECHO            reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    PRINT           reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    TRY             reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    FUNCTION        reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    ID              reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    EMPTY           reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    INT             reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    STRING          reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    BOOL            reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    NULL            reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    ARRAY           reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    IF              reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    FOREACH         reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    FOR             reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    CLOSETAG        reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    ENDSWITCH       reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    CASE            reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 14 (returnStatement -> RETURN SEMICOLON .)


state 72

    (145) llamadaFuncion -> EMPTY LPAREN . argumentos RPAREN
    (147) llamadaFuncion -> EMPTY LPAREN . argumentos RPAREN SEMICOLON
    (123) argumentos -> . argumento
    (124) argumentos -> . argumento COMMA argumentos
    (125) argumentos -> . empty
    (126) argumento -> . VARIABLE
    (127) argumento -> . type VARIABLE
    (128) argumento -> . VARIABLE EQUALS valor
    (129) argumento -> . type VARIABLE EQUALS valor
    (130) argumento -> . operaArit
    (49) empty -> .
    (131) type -> . INT_TYPE
    (132) type -> . FLOAT_TYPE
    (133) type -> . STRING_TYPE
    (134) type -> . BOOL_TYPE
    (135) type -> . ARRAY_TYPE
    (136) type -> . VOID
    (20) operaArit -> . valor
    (21) operaArit -> . valor operador operaArit
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    VARIABLE        shift and go to state 117
    RPAREN          reduce using rule 49 (empty -> .)
    INT_TYPE        shift and go to state 121
    FLOAT_TYPE      shift and go to state 122
    STRING_TYPE     shift and go to state 123
    BOOL_TYPE       shift and go to state 124
    ARRAY_TYPE      shift and go to state 125
    VOID            shift and go to state 126
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    argumentos                     shift and go to state 128
    argumento                      shift and go to state 115
    empty                          shift and go to state 116
    type                           shift and go to state 118
    valor                          shift and go to state 119
    operaArit                      shift and go to state 120
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 73

    (57) if -> IF LPAREN . conditions RPAREN LBRACE body RBRACE else_blocks
    (58) if -> IF LPAREN . conditions RPAREN body
    (62) conditions -> . condition
    (63) conditions -> . condition opLogic conditions
    (64) conditions -> . LPAREN conditions RPAREN
    (65) condition -> . valor
    (66) condition -> . valor opSymbol valor
    (67) condition -> . NOT condition
    (68) condition -> . LPAREN conditions RPAREN
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    LPAREN          shift and go to state 54
    NOT             shift and go to state 58
    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25

    conditions                     shift and go to state 129
    condition                      shift and go to state 57
    valor                          shift and go to state 56
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 74

    (89) while -> WHILE LPAREN . condition RPAREN LBRACE body RBRACE
    (90) while -> WHILE LPAREN . condition RPAREN LBRACE RBRACE
    (65) condition -> . valor
    (66) condition -> . valor opSymbol valor
    (67) condition -> . NOT condition
    (68) condition -> . LPAREN conditions RPAREN
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    NOT             shift and go to state 58
    LPAREN          shift and go to state 102
    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25

    condition                      shift and go to state 130
    valor                          shift and go to state 56
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 75

    (91) switch -> SWITCH LPAREN . valor RPAREN LBRACE caseLists RBRACE
    (92) switch -> SWITCH LPAREN . valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    valor                          shift and go to state 131
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 76

    (99) foreach -> FOREACH LPAREN . VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE

    VARIABLE        shift and go to state 132


state 77

    (86) forStatement -> FOR LPAREN . forcondition RPAREN LBRACE body RBRACE
    (87) forcondition -> . VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (88) forcondition -> . VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    VARIABLE        shift and go to state 134

    forcondition                   shift and go to state 133

state 78

    (15) asignacion -> VARIABLE EQUALS operaArit . SEMICOLON

    SEMICOLON       shift and go to state 135


state 79

    (16) asignacion -> VARIABLE EQUALS valor . SEMICOLON
    (20) operaArit -> valor .
    (21) operaArit -> valor . operador operaArit
    (31) operador -> . PLUS
    (32) operador -> . MINUS
    (33) operador -> . TIMES
    (34) operador -> . DIVIDE
    (35) operador -> . MODULO

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 136
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    MODULO          shift and go to state 142

  ! SEMICOLON       [ reduce using rule 20 (operaArit -> valor .) ]

    operador                       shift and go to state 137

state 80

    (17) asignacion_fgets -> VARIABLE EQUALS FGETS . LPAREN STDIN RPAREN SEMICOLON

    LPAREN          shift and go to state 143


state 81

    (106) array -> VARIABLE EQUALS arrays . SEMICOLON

    SEMICOLON       shift and go to state 144


state 82

    (107) array -> VARIABLE EQUALS LBRACKET . arrayAnidado RBRACKET SEMICOLON
    (113) map -> VARIABLE EQUALS LBRACKET . maps RBRACKET SEMICOLON
    (110) arrays -> LBRACKET . repiteValores RBRACKET
    (111) arrayAnidado -> . arrays
    (112) arrayAnidado -> . arrays COMMA arrayAnidado
    (115) maps -> . mapArrow
    (116) maps -> . mapArrow COMMA maps
    (47) repiteValores -> . valor
    (48) repiteValores -> . valor COMMA repiteValores
    (110) arrays -> . LBRACKET repiteValores RBRACKET
    (117) mapArrow -> . valor ARROWMAP valor
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    LBRACKET        shift and go to state 145
    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    arrayAnidado                   shift and go to state 146
    maps                           shift and go to state 147
    repiteValores                  shift and go to state 148
    arrays                         shift and go to state 149
    mapArrow                       shift and go to state 150
    valor                          shift and go to state 151
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 83

    (108) array -> VARIABLE EQUALS ARRAY . LPAREN repiteValores RPAREN SEMICOLON
    (114) map -> VARIABLE EQUALS ARRAY . LPAREN maps RPAREN SEMICOLON
    (28) valor -> ARRAY .

    LPAREN          shift and go to state 152
    SEMICOLON       reduce using rule 28 (valor -> ARRAY .)
    PLUS            reduce using rule 28 (valor -> ARRAY .)
    MINUS           reduce using rule 28 (valor -> ARRAY .)
    TIMES           reduce using rule 28 (valor -> ARRAY .)
    DIVIDE          reduce using rule 28 (valor -> ARRAY .)
    MODULO          reduce using rule 28 (valor -> ARRAY .)


state 84

    (36) comparacion -> valor comparador valor .

    VARIABLE        reduce using rule 36 (comparacion -> valor comparador valor .)
    ECHO            reduce using rule 36 (comparacion -> valor comparador valor .)
    PRINT           reduce using rule 36 (comparacion -> valor comparador valor .)
    TRY             reduce using rule 36 (comparacion -> valor comparador valor .)
    FUNCTION        reduce using rule 36 (comparacion -> valor comparador valor .)
    RETURN          reduce using rule 36 (comparacion -> valor comparador valor .)
    ID              reduce using rule 36 (comparacion -> valor comparador valor .)
    EMPTY           reduce using rule 36 (comparacion -> valor comparador valor .)
    INT             reduce using rule 36 (comparacion -> valor comparador valor .)
    FLOAT           reduce using rule 36 (comparacion -> valor comparador valor .)
    STRING          reduce using rule 36 (comparacion -> valor comparador valor .)
    BOOL            reduce using rule 36 (comparacion -> valor comparador valor .)
    NULL            reduce using rule 36 (comparacion -> valor comparador valor .)
    ARRAY           reduce using rule 36 (comparacion -> valor comparador valor .)
    LPAREN          reduce using rule 36 (comparacion -> valor comparador valor .)
    IF              reduce using rule 36 (comparacion -> valor comparador valor .)
    WHILE           reduce using rule 36 (comparacion -> valor comparador valor .)
    SWITCH          reduce using rule 36 (comparacion -> valor comparador valor .)
    FOREACH         reduce using rule 36 (comparacion -> valor comparador valor .)
    FOR             reduce using rule 36 (comparacion -> valor comparador valor .)
    CLOSETAG        reduce using rule 36 (comparacion -> valor comparador valor .)
    RBRACE          reduce using rule 36 (comparacion -> valor comparador valor .)
    BREAK           reduce using rule 36 (comparacion -> valor comparador valor .)
    ENDSWITCH       reduce using rule 36 (comparacion -> valor comparador valor .)
    CASE            reduce using rule 36 (comparacion -> valor comparador valor .)
    DEFAULT         reduce using rule 36 (comparacion -> valor comparador valor .)


state 85

    (64) conditions -> LPAREN conditions . RPAREN
    (68) condition -> LPAREN conditions . RPAREN
    (18) operador_ternario -> LPAREN conditions . RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> LPAREN conditions . RPAREN QUESTION COLON valor

    RPAREN          shift and go to state 153


state 86

    (18) operador_ternario -> LPAREN conditions RPAREN . QUESTION valor COLON valor
    (19) operador_ternario -> LPAREN conditions RPAREN . QUESTION COLON valor

    QUESTION        shift and go to state 154


state 87

    (66) condition -> valor opSymbol . valor
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    valor                          shift and go to state 155
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 88

    (69) opSymbol -> EQ .

    INT             reduce using rule 69 (opSymbol -> EQ .)
    VARIABLE        reduce using rule 69 (opSymbol -> EQ .)
    FLOAT           reduce using rule 69 (opSymbol -> EQ .)
    STRING          reduce using rule 69 (opSymbol -> EQ .)
    BOOL            reduce using rule 69 (opSymbol -> EQ .)
    NULL            reduce using rule 69 (opSymbol -> EQ .)
    ARRAY           reduce using rule 69 (opSymbol -> EQ .)
    ID              reduce using rule 69 (opSymbol -> EQ .)
    EMPTY           reduce using rule 69 (opSymbol -> EQ .)
    LPAREN          reduce using rule 69 (opSymbol -> EQ .)


state 89

    (70) opSymbol -> NEQ .

    INT             reduce using rule 70 (opSymbol -> NEQ .)
    VARIABLE        reduce using rule 70 (opSymbol -> NEQ .)
    FLOAT           reduce using rule 70 (opSymbol -> NEQ .)
    STRING          reduce using rule 70 (opSymbol -> NEQ .)
    BOOL            reduce using rule 70 (opSymbol -> NEQ .)
    NULL            reduce using rule 70 (opSymbol -> NEQ .)
    ARRAY           reduce using rule 70 (opSymbol -> NEQ .)
    ID              reduce using rule 70 (opSymbol -> NEQ .)
    EMPTY           reduce using rule 70 (opSymbol -> NEQ .)
    LPAREN          reduce using rule 70 (opSymbol -> NEQ .)


state 90

    (71) opSymbol -> STRICTEQ .

    INT             reduce using rule 71 (opSymbol -> STRICTEQ .)
    VARIABLE        reduce using rule 71 (opSymbol -> STRICTEQ .)
    FLOAT           reduce using rule 71 (opSymbol -> STRICTEQ .)
    STRING          reduce using rule 71 (opSymbol -> STRICTEQ .)
    BOOL            reduce using rule 71 (opSymbol -> STRICTEQ .)
    NULL            reduce using rule 71 (opSymbol -> STRICTEQ .)
    ARRAY           reduce using rule 71 (opSymbol -> STRICTEQ .)
    ID              reduce using rule 71 (opSymbol -> STRICTEQ .)
    EMPTY           reduce using rule 71 (opSymbol -> STRICTEQ .)
    LPAREN          reduce using rule 71 (opSymbol -> STRICTEQ .)


state 91

    (72) opSymbol -> STRICTNEQ .

    INT             reduce using rule 72 (opSymbol -> STRICTNEQ .)
    VARIABLE        reduce using rule 72 (opSymbol -> STRICTNEQ .)
    FLOAT           reduce using rule 72 (opSymbol -> STRICTNEQ .)
    STRING          reduce using rule 72 (opSymbol -> STRICTNEQ .)
    BOOL            reduce using rule 72 (opSymbol -> STRICTNEQ .)
    NULL            reduce using rule 72 (opSymbol -> STRICTNEQ .)
    ARRAY           reduce using rule 72 (opSymbol -> STRICTNEQ .)
    ID              reduce using rule 72 (opSymbol -> STRICTNEQ .)
    EMPTY           reduce using rule 72 (opSymbol -> STRICTNEQ .)
    LPAREN          reduce using rule 72 (opSymbol -> STRICTNEQ .)


state 92

    (73) opSymbol -> LT .

    INT             reduce using rule 73 (opSymbol -> LT .)
    VARIABLE        reduce using rule 73 (opSymbol -> LT .)
    FLOAT           reduce using rule 73 (opSymbol -> LT .)
    STRING          reduce using rule 73 (opSymbol -> LT .)
    BOOL            reduce using rule 73 (opSymbol -> LT .)
    NULL            reduce using rule 73 (opSymbol -> LT .)
    ARRAY           reduce using rule 73 (opSymbol -> LT .)
    ID              reduce using rule 73 (opSymbol -> LT .)
    EMPTY           reduce using rule 73 (opSymbol -> LT .)
    LPAREN          reduce using rule 73 (opSymbol -> LT .)


state 93

    (74) opSymbol -> GT .

    INT             reduce using rule 74 (opSymbol -> GT .)
    VARIABLE        reduce using rule 74 (opSymbol -> GT .)
    FLOAT           reduce using rule 74 (opSymbol -> GT .)
    STRING          reduce using rule 74 (opSymbol -> GT .)
    BOOL            reduce using rule 74 (opSymbol -> GT .)
    NULL            reduce using rule 74 (opSymbol -> GT .)
    ARRAY           reduce using rule 74 (opSymbol -> GT .)
    ID              reduce using rule 74 (opSymbol -> GT .)
    EMPTY           reduce using rule 74 (opSymbol -> GT .)
    LPAREN          reduce using rule 74 (opSymbol -> GT .)


state 94

    (75) opSymbol -> LEQ .

    INT             reduce using rule 75 (opSymbol -> LEQ .)
    VARIABLE        reduce using rule 75 (opSymbol -> LEQ .)
    FLOAT           reduce using rule 75 (opSymbol -> LEQ .)
    STRING          reduce using rule 75 (opSymbol -> LEQ .)
    BOOL            reduce using rule 75 (opSymbol -> LEQ .)
    NULL            reduce using rule 75 (opSymbol -> LEQ .)
    ARRAY           reduce using rule 75 (opSymbol -> LEQ .)
    ID              reduce using rule 75 (opSymbol -> LEQ .)
    EMPTY           reduce using rule 75 (opSymbol -> LEQ .)
    LPAREN          reduce using rule 75 (opSymbol -> LEQ .)


state 95

    (76) opSymbol -> GEQ .

    INT             reduce using rule 76 (opSymbol -> GEQ .)
    VARIABLE        reduce using rule 76 (opSymbol -> GEQ .)
    FLOAT           reduce using rule 76 (opSymbol -> GEQ .)
    STRING          reduce using rule 76 (opSymbol -> GEQ .)
    BOOL            reduce using rule 76 (opSymbol -> GEQ .)
    NULL            reduce using rule 76 (opSymbol -> GEQ .)
    ARRAY           reduce using rule 76 (opSymbol -> GEQ .)
    ID              reduce using rule 76 (opSymbol -> GEQ .)
    EMPTY           reduce using rule 76 (opSymbol -> GEQ .)
    LPAREN          reduce using rule 76 (opSymbol -> GEQ .)


state 96

    (63) conditions -> condition opLogic . conditions
    (62) conditions -> . condition
    (63) conditions -> . condition opLogic conditions
    (64) conditions -> . LPAREN conditions RPAREN
    (65) condition -> . valor
    (66) condition -> . valor opSymbol valor
    (67) condition -> . NOT condition
    (68) condition -> . LPAREN conditions RPAREN
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    LPAREN          shift and go to state 54
    NOT             shift and go to state 58
    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25

    condition                      shift and go to state 57
    conditions                     shift and go to state 156
    valor                          shift and go to state 56
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 97

    (77) opLogic -> AND .

    LPAREN          reduce using rule 77 (opLogic -> AND .)
    NOT             reduce using rule 77 (opLogic -> AND .)
    INT             reduce using rule 77 (opLogic -> AND .)
    VARIABLE        reduce using rule 77 (opLogic -> AND .)
    FLOAT           reduce using rule 77 (opLogic -> AND .)
    STRING          reduce using rule 77 (opLogic -> AND .)
    BOOL            reduce using rule 77 (opLogic -> AND .)
    NULL            reduce using rule 77 (opLogic -> AND .)
    ARRAY           reduce using rule 77 (opLogic -> AND .)
    ID              reduce using rule 77 (opLogic -> AND .)
    EMPTY           reduce using rule 77 (opLogic -> AND .)


state 98

    (78) opLogic -> LOGICAL_AND .

    LPAREN          reduce using rule 78 (opLogic -> LOGICAL_AND .)
    NOT             reduce using rule 78 (opLogic -> LOGICAL_AND .)
    INT             reduce using rule 78 (opLogic -> LOGICAL_AND .)
    VARIABLE        reduce using rule 78 (opLogic -> LOGICAL_AND .)
    FLOAT           reduce using rule 78 (opLogic -> LOGICAL_AND .)
    STRING          reduce using rule 78 (opLogic -> LOGICAL_AND .)
    BOOL            reduce using rule 78 (opLogic -> LOGICAL_AND .)
    NULL            reduce using rule 78 (opLogic -> LOGICAL_AND .)
    ARRAY           reduce using rule 78 (opLogic -> LOGICAL_AND .)
    ID              reduce using rule 78 (opLogic -> LOGICAL_AND .)
    EMPTY           reduce using rule 78 (opLogic -> LOGICAL_AND .)


state 99

    (79) opLogic -> OR .

    LPAREN          reduce using rule 79 (opLogic -> OR .)
    NOT             reduce using rule 79 (opLogic -> OR .)
    INT             reduce using rule 79 (opLogic -> OR .)
    VARIABLE        reduce using rule 79 (opLogic -> OR .)
    FLOAT           reduce using rule 79 (opLogic -> OR .)
    STRING          reduce using rule 79 (opLogic -> OR .)
    BOOL            reduce using rule 79 (opLogic -> OR .)
    NULL            reduce using rule 79 (opLogic -> OR .)
    ARRAY           reduce using rule 79 (opLogic -> OR .)
    ID              reduce using rule 79 (opLogic -> OR .)
    EMPTY           reduce using rule 79 (opLogic -> OR .)


state 100

    (80) opLogic -> LOGICAL_OR .

    LPAREN          reduce using rule 80 (opLogic -> LOGICAL_OR .)
    NOT             reduce using rule 80 (opLogic -> LOGICAL_OR .)
    INT             reduce using rule 80 (opLogic -> LOGICAL_OR .)
    VARIABLE        reduce using rule 80 (opLogic -> LOGICAL_OR .)
    FLOAT           reduce using rule 80 (opLogic -> LOGICAL_OR .)
    STRING          reduce using rule 80 (opLogic -> LOGICAL_OR .)
    BOOL            reduce using rule 80 (opLogic -> LOGICAL_OR .)
    NULL            reduce using rule 80 (opLogic -> LOGICAL_OR .)
    ARRAY           reduce using rule 80 (opLogic -> LOGICAL_OR .)
    ID              reduce using rule 80 (opLogic -> LOGICAL_OR .)
    EMPTY           reduce using rule 80 (opLogic -> LOGICAL_OR .)


state 101

    (67) condition -> NOT condition .

    AND             reduce using rule 67 (condition -> NOT condition .)
    LOGICAL_AND     reduce using rule 67 (condition -> NOT condition .)
    OR              reduce using rule 67 (condition -> NOT condition .)
    LOGICAL_OR      reduce using rule 67 (condition -> NOT condition .)
    RPAREN          reduce using rule 67 (condition -> NOT condition .)


state 102

    (68) condition -> LPAREN . conditions RPAREN
    (18) operador_ternario -> LPAREN . conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> LPAREN . conditions RPAREN QUESTION COLON valor
    (62) conditions -> . condition
    (63) conditions -> . condition opLogic conditions
    (64) conditions -> . LPAREN conditions RPAREN
    (65) condition -> . valor
    (66) condition -> . valor opSymbol valor
    (67) condition -> . NOT condition
    (68) condition -> . LPAREN conditions RPAREN
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    LPAREN          shift and go to state 54
    NOT             shift and go to state 58
    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25

    conditions                     shift and go to state 157
    valor                          shift and go to state 56
    condition                      shift and go to state 57
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 103

    (41) impresion -> ECHO imprimir SEMICOLON .

    VARIABLE        reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    ECHO            reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    PRINT           reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    TRY             reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    FUNCTION        reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    RETURN          reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    ID              reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    EMPTY           reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    INT             reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    FLOAT           reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    STRING          reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    BOOL            reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    NULL            reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    ARRAY           reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    LPAREN          reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    IF              reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    WHILE           reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    SWITCH          reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    FOREACH         reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    FOR             reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    CLOSETAG        reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    RBRACE          reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    BREAK           reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    ENDSWITCH       reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    CASE            reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)
    DEFAULT         reduce using rule 41 (impresion -> ECHO imprimir SEMICOLON .)


state 104

    (43) imprimir -> LPAREN repiteValores . RPAREN

    RPAREN          shift and go to state 158


state 105

    (44) imprimir -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 44 (imprimir -> LPAREN RPAREN .)


state 106

    (47) repiteValores -> valor .
    (48) repiteValores -> valor . COMMA repiteValores
    (65) condition -> valor .
    (66) condition -> valor . opSymbol valor
    (69) opSymbol -> . EQ
    (70) opSymbol -> . NEQ
    (71) opSymbol -> . STRICTEQ
    (72) opSymbol -> . STRICTNEQ
    (73) opSymbol -> . LT
    (74) opSymbol -> . GT
    (75) opSymbol -> . LEQ
    (76) opSymbol -> . GEQ

  ! reduce/reduce conflict for RPAREN resolved using rule 47 (repiteValores -> valor .)
    RPAREN          reduce using rule 47 (repiteValores -> valor .)
    COMMA           shift and go to state 107
    AND             reduce using rule 65 (condition -> valor .)
    LOGICAL_AND     reduce using rule 65 (condition -> valor .)
    OR              reduce using rule 65 (condition -> valor .)
    LOGICAL_OR      reduce using rule 65 (condition -> valor .)
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    STRICTEQ        shift and go to state 90
    STRICTNEQ       shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LEQ             shift and go to state 94
    GEQ             shift and go to state 95

  ! RPAREN          [ reduce using rule 65 (condition -> valor .) ]

    opSymbol                       shift and go to state 87

state 107

    (48) repiteValores -> valor COMMA . repiteValores
    (47) repiteValores -> . valor
    (48) repiteValores -> . valor COMMA repiteValores
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    valor                          shift and go to state 65
    repiteValores                  shift and go to state 159
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 108

    (42) impresion -> PRINT imprimir SEMICOLON .

    VARIABLE        reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    ECHO            reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    PRINT           reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    TRY             reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    FUNCTION        reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    RETURN          reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    ID              reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    EMPTY           reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    INT             reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    FLOAT           reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    STRING          reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    BOOL            reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    NULL            reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    ARRAY           reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    LPAREN          reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    IF              reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    WHILE           reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    SWITCH          reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    FOREACH         reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    FOR             reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    CLOSETAG        reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    RBRACE          reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    BREAK           reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    ENDSWITCH       reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    CASE            reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)
    DEFAULT         reduce using rule 42 (impresion -> PRINT imprimir SEMICOLON .)


state 109

    (137) try -> TRY LBRACE body . RBRACE catchs
    (138) try -> TRY LBRACE body . RBRACE catchs FINALLY LBRACE body RBRACE

    RBRACE          shift and go to state 160


state 110

    (81) body -> sentenciaList .

    RBRACE          reduce using rule 81 (body -> sentenciaList .)
    VARIABLE        reduce using rule 81 (body -> sentenciaList .)
    ECHO            reduce using rule 81 (body -> sentenciaList .)
    PRINT           reduce using rule 81 (body -> sentenciaList .)
    TRY             reduce using rule 81 (body -> sentenciaList .)
    FUNCTION        reduce using rule 81 (body -> sentenciaList .)
    RETURN          reduce using rule 81 (body -> sentenciaList .)
    ID              reduce using rule 81 (body -> sentenciaList .)
    EMPTY           reduce using rule 81 (body -> sentenciaList .)
    INT             reduce using rule 81 (body -> sentenciaList .)
    FLOAT           reduce using rule 81 (body -> sentenciaList .)
    STRING          reduce using rule 81 (body -> sentenciaList .)
    BOOL            reduce using rule 81 (body -> sentenciaList .)
    NULL            reduce using rule 81 (body -> sentenciaList .)
    ARRAY           reduce using rule 81 (body -> sentenciaList .)
    LPAREN          reduce using rule 81 (body -> sentenciaList .)
    IF              reduce using rule 81 (body -> sentenciaList .)
    WHILE           reduce using rule 81 (body -> sentenciaList .)
    SWITCH          reduce using rule 81 (body -> sentenciaList .)
    FOREACH         reduce using rule 81 (body -> sentenciaList .)
    FOR             reduce using rule 81 (body -> sentenciaList .)
    CLOSETAG        reduce using rule 81 (body -> sentenciaList .)
    BREAK           reduce using rule 81 (body -> sentenciaList .)
    ENDSWITCH       reduce using rule 81 (body -> sentenciaList .)
    CASE            reduce using rule 81 (body -> sentenciaList .)
    DEFAULT         reduce using rule 81 (body -> sentenciaList .)


state 111

    (82) body -> empty .

    RBRACE          reduce using rule 82 (body -> empty .)
    VARIABLE        reduce using rule 82 (body -> empty .)
    ECHO            reduce using rule 82 (body -> empty .)
    PRINT           reduce using rule 82 (body -> empty .)
    TRY             reduce using rule 82 (body -> empty .)
    FUNCTION        reduce using rule 82 (body -> empty .)
    RETURN          reduce using rule 82 (body -> empty .)
    ID              reduce using rule 82 (body -> empty .)
    EMPTY           reduce using rule 82 (body -> empty .)
    INT             reduce using rule 82 (body -> empty .)
    FLOAT           reduce using rule 82 (body -> empty .)
    STRING          reduce using rule 82 (body -> empty .)
    BOOL            reduce using rule 82 (body -> empty .)
    NULL            reduce using rule 82 (body -> empty .)
    ARRAY           reduce using rule 82 (body -> empty .)
    LPAREN          reduce using rule 82 (body -> empty .)
    IF              reduce using rule 82 (body -> empty .)
    WHILE           reduce using rule 82 (body -> empty .)
    SWITCH          reduce using rule 82 (body -> empty .)
    FOREACH         reduce using rule 82 (body -> empty .)
    FOR             reduce using rule 82 (body -> empty .)
    CLOSETAG        reduce using rule 82 (body -> empty .)
    BREAK           reduce using rule 82 (body -> empty .)
    ENDSWITCH       reduce using rule 82 (body -> empty .)
    CASE            reduce using rule 82 (body -> empty .)
    DEFAULT         reduce using rule 82 (body -> empty .)


state 112

    (83) sentenciaList -> sentencia .
    (84) sentenciaList -> sentencia . sentenciaList
    (83) sentenciaList -> . sentencia
    (84) sentenciaList -> . sentencia sentenciaList
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (15) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (16) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (17) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (36) comparacion -> . valor comparador valor
    (41) impresion -> . ECHO imprimir SEMICOLON
    (42) impresion -> . PRINT imprimir SEMICOLON
    (50) estructurasPrograma -> . controlStructure
    (51) estructurasPrograma -> . dataStructure
    (137) try -> . TRY LBRACE body RBRACE catchs
    (138) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (143) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (13) returnStatement -> . RETURN valor SEMICOLON
    (14) returnStatement -> . RETURN SEMICOLON
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (52) controlStructure -> . if
    (53) controlStructure -> . for
    (54) controlStructure -> . while
    (55) controlStructure -> . switch
    (56) controlStructure -> . foreach
    (105) dataStructure -> . array
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (57) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (58) if -> . IF LPAREN conditions RPAREN body
    (85) for -> . forStatement
    (89) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (90) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (91) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (92) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (99) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (106) array -> . VARIABLE EQUALS arrays SEMICOLON
    (107) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (108) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (109) array -> . map
    (86) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (113) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (114) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for EMPTY resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    RBRACE          reduce using rule 83 (sentenciaList -> sentencia .)
    CLOSETAG        reduce using rule 83 (sentenciaList -> sentencia .)
    BREAK           reduce using rule 83 (sentenciaList -> sentencia .)
    ENDSWITCH       reduce using rule 83 (sentenciaList -> sentencia .)
    CASE            reduce using rule 83 (sentenciaList -> sentencia .)
    DEFAULT         reduce using rule 83 (sentenciaList -> sentencia .)
    VARIABLE        shift and go to state 14
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    TRY             shift and go to state 21
    FUNCTION        shift and go to state 22
    RETURN          shift and go to state 24
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 16
    IF              shift and go to state 39
    WHILE           shift and go to state 41
    SWITCH          shift and go to state 42
    FOREACH         shift and go to state 43
    FOR             shift and go to state 45

  ! VARIABLE        [ reduce using rule 83 (sentenciaList -> sentencia .) ]
  ! ECHO            [ reduce using rule 83 (sentenciaList -> sentencia .) ]
  ! PRINT           [ reduce using rule 83 (sentenciaList -> sentencia .) ]
  ! TRY             [ reduce using rule 83 (sentenciaList -> sentencia .) ]
  ! FUNCTION        [ reduce using rule 83 (sentenciaList -> sentencia .) ]
  ! RETURN          [ reduce using rule 83 (sentenciaList -> sentencia .) ]
  ! ID              [ reduce using rule 83 (sentenciaList -> sentencia .) ]
  ! EMPTY           [ reduce using rule 83 (sentenciaList -> sentencia .) ]
  ! INT             [ reduce using rule 83 (sentenciaList -> sentencia .) ]
  ! FLOAT           [ reduce using rule 83 (sentenciaList -> sentencia .) ]
  ! STRING          [ reduce using rule 83 (sentenciaList -> sentencia .) ]
  ! BOOL            [ reduce using rule 83 (sentenciaList -> sentencia .) ]
  ! NULL            [ reduce using rule 83 (sentenciaList -> sentencia .) ]
  ! ARRAY           [ reduce using rule 83 (sentenciaList -> sentencia .) ]
  ! LPAREN          [ reduce using rule 83 (sentenciaList -> sentencia .) ]
  ! IF              [ reduce using rule 83 (sentenciaList -> sentencia .) ]
  ! WHILE           [ reduce using rule 83 (sentenciaList -> sentencia .) ]
  ! SWITCH          [ reduce using rule 83 (sentenciaList -> sentencia .) ]
  ! FOREACH         [ reduce using rule 83 (sentenciaList -> sentencia .) ]
  ! FOR             [ reduce using rule 83 (sentenciaList -> sentencia .) ]

    sentencia                      shift and go to state 112
    sentenciaList                  shift and go to state 161
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    valor                          shift and go to state 15
    controlStructure               shift and go to state 19
    dataStructure                  shift and go to state 20
    operador_ternario              shift and go to state 32
    if                             shift and go to state 33
    for                            shift and go to state 34
    while                          shift and go to state 35
    switch                         shift and go to state 36
    foreach                        shift and go to state 37
    array                          shift and go to state 38
    forStatement                   shift and go to state 40
    map                            shift and go to state 44

state 113

    (143) funcionDeclaration -> FUNCTION ID LPAREN . argumentos RPAREN LBRACE body RBRACE
    (123) argumentos -> . argumento
    (124) argumentos -> . argumento COMMA argumentos
    (125) argumentos -> . empty
    (126) argumento -> . VARIABLE
    (127) argumento -> . type VARIABLE
    (128) argumento -> . VARIABLE EQUALS valor
    (129) argumento -> . type VARIABLE EQUALS valor
    (130) argumento -> . operaArit
    (49) empty -> .
    (131) type -> . INT_TYPE
    (132) type -> . FLOAT_TYPE
    (133) type -> . STRING_TYPE
    (134) type -> . BOOL_TYPE
    (135) type -> . ARRAY_TYPE
    (136) type -> . VOID
    (20) operaArit -> . valor
    (21) operaArit -> . valor operador operaArit
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    VARIABLE        shift and go to state 117
    RPAREN          reduce using rule 49 (empty -> .)
    INT_TYPE        shift and go to state 121
    FLOAT_TYPE      shift and go to state 122
    STRING_TYPE     shift and go to state 123
    BOOL_TYPE       shift and go to state 124
    ARRAY_TYPE      shift and go to state 125
    VOID            shift and go to state 126
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    argumentos                     shift and go to state 162
    argumento                      shift and go to state 115
    empty                          shift and go to state 116
    type                           shift and go to state 118
    valor                          shift and go to state 119
    operaArit                      shift and go to state 120
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 114

    (144) llamadaFuncion -> ID LPAREN argumentos . RPAREN SEMICOLON
    (146) llamadaFuncion -> ID LPAREN argumentos . RPAREN

    RPAREN          shift and go to state 163


state 115

    (123) argumentos -> argumento .
    (124) argumentos -> argumento . COMMA argumentos

    RPAREN          reduce using rule 123 (argumentos -> argumento .)
    COMMA           shift and go to state 164


state 116

    (125) argumentos -> empty .

    RPAREN          reduce using rule 125 (argumentos -> empty .)


state 117

    (126) argumento -> VARIABLE .
    (128) argumento -> VARIABLE . EQUALS valor
    (23) valor -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 23 (valor -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 23 (valor -> VARIABLE .)
    EQUALS          shift and go to state 165
    PLUS            reduce using rule 23 (valor -> VARIABLE .)
    MINUS           reduce using rule 23 (valor -> VARIABLE .)
    TIMES           reduce using rule 23 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 23 (valor -> VARIABLE .)
    MODULO          reduce using rule 23 (valor -> VARIABLE .)
    COMMA           reduce using rule 23 (valor -> VARIABLE .)
    RPAREN          reduce using rule 23 (valor -> VARIABLE .)

  ! COMMA           [ reduce using rule 126 (argumento -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 126 (argumento -> VARIABLE .) ]


state 118

    (127) argumento -> type . VARIABLE
    (129) argumento -> type . VARIABLE EQUALS valor

    VARIABLE        shift and go to state 166


state 119

    (20) operaArit -> valor .
    (21) operaArit -> valor . operador operaArit
    (31) operador -> . PLUS
    (32) operador -> . MINUS
    (33) operador -> . TIMES
    (34) operador -> . DIVIDE
    (35) operador -> . MODULO

    COMMA           reduce using rule 20 (operaArit -> valor .)
    RPAREN          reduce using rule 20 (operaArit -> valor .)
    SEMICOLON       reduce using rule 20 (operaArit -> valor .)
    PLUS            shift and go to state 138
    MINUS           shift and go to state 139
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    MODULO          shift and go to state 142

    operador                       shift and go to state 137

state 120

    (130) argumento -> operaArit .

    COMMA           reduce using rule 130 (argumento -> operaArit .)
    RPAREN          reduce using rule 130 (argumento -> operaArit .)


state 121

    (131) type -> INT_TYPE .

    VARIABLE        reduce using rule 131 (type -> INT_TYPE .)


state 122

    (132) type -> FLOAT_TYPE .

    VARIABLE        reduce using rule 132 (type -> FLOAT_TYPE .)


state 123

    (133) type -> STRING_TYPE .

    VARIABLE        reduce using rule 133 (type -> STRING_TYPE .)


state 124

    (134) type -> BOOL_TYPE .

    VARIABLE        reduce using rule 134 (type -> BOOL_TYPE .)


state 125

    (135) type -> ARRAY_TYPE .

    VARIABLE        reduce using rule 135 (type -> ARRAY_TYPE .)


state 126

    (136) type -> VOID .

    VARIABLE        reduce using rule 136 (type -> VOID .)


state 127

    (13) returnStatement -> RETURN valor SEMICOLON .

    VARIABLE        reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    ECHO            reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    PRINT           reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    TRY             reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    FUNCTION        reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    RETURN          reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    ID              reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    EMPTY           reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    INT             reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    FLOAT           reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    STRING          reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    BOOL            reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    NULL            reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    ARRAY           reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    LPAREN          reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    IF              reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    WHILE           reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    SWITCH          reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    FOREACH         reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    FOR             reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    CLOSETAG        reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    RBRACE          reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    BREAK           reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    ENDSWITCH       reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    CASE            reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)
    DEFAULT         reduce using rule 13 (returnStatement -> RETURN valor SEMICOLON .)


state 128

    (145) llamadaFuncion -> EMPTY LPAREN argumentos . RPAREN
    (147) llamadaFuncion -> EMPTY LPAREN argumentos . RPAREN SEMICOLON

    RPAREN          shift and go to state 167


state 129

    (57) if -> IF LPAREN conditions . RPAREN LBRACE body RBRACE else_blocks
    (58) if -> IF LPAREN conditions . RPAREN body

    RPAREN          shift and go to state 168


state 130

    (89) while -> WHILE LPAREN condition . RPAREN LBRACE body RBRACE
    (90) while -> WHILE LPAREN condition . RPAREN LBRACE RBRACE

    RPAREN          shift and go to state 169


state 131

    (91) switch -> SWITCH LPAREN valor . RPAREN LBRACE caseLists RBRACE
    (92) switch -> SWITCH LPAREN valor . RPAREN COLON caseLists ENDSWITCH SEMICOLON

    RPAREN          shift and go to state 170


state 132

    (99) foreach -> FOREACH LPAREN VARIABLE . AS VARIABLE RPAREN LBRACE body RBRACE

    AS              shift and go to state 171


state 133

    (86) forStatement -> FOR LPAREN forcondition . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 172


state 134

    (87) forcondition -> VARIABLE . EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (88) forcondition -> VARIABLE . EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    EQUALS          shift and go to state 173


state 135

    (15) asignacion -> VARIABLE EQUALS operaArit SEMICOLON .

    VARIABLE        reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    ECHO            reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    PRINT           reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    TRY             reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    FUNCTION        reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    RETURN          reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    ID              reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    EMPTY           reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    INT             reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    FLOAT           reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    STRING          reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    BOOL            reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    NULL            reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    ARRAY           reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    LPAREN          reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    IF              reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    WHILE           reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    SWITCH          reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    FOREACH         reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    FOR             reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    CLOSETAG        reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    RBRACE          reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    BREAK           reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    ENDSWITCH       reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    CASE            reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    DEFAULT         reduce using rule 15 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)


state 136

    (16) asignacion -> VARIABLE EQUALS valor SEMICOLON .

    VARIABLE        reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    ECHO            reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    PRINT           reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    TRY             reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    FUNCTION        reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    RETURN          reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    ID              reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    EMPTY           reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    INT             reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    FLOAT           reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    STRING          reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    BOOL            reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    NULL            reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    ARRAY           reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    LPAREN          reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    IF              reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    WHILE           reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    SWITCH          reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    FOREACH         reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    FOR             reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    CLOSETAG        reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    RBRACE          reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    BREAK           reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    ENDSWITCH       reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    CASE            reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    DEFAULT         reduce using rule 16 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)


state 137

    (21) operaArit -> valor operador . operaArit
    (20) operaArit -> . valor
    (21) operaArit -> . valor operador operaArit
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    valor                          shift and go to state 119
    operaArit                      shift and go to state 174
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 138

    (31) operador -> PLUS .

    INT             reduce using rule 31 (operador -> PLUS .)
    VARIABLE        reduce using rule 31 (operador -> PLUS .)
    FLOAT           reduce using rule 31 (operador -> PLUS .)
    STRING          reduce using rule 31 (operador -> PLUS .)
    BOOL            reduce using rule 31 (operador -> PLUS .)
    NULL            reduce using rule 31 (operador -> PLUS .)
    ARRAY           reduce using rule 31 (operador -> PLUS .)
    ID              reduce using rule 31 (operador -> PLUS .)
    EMPTY           reduce using rule 31 (operador -> PLUS .)
    LPAREN          reduce using rule 31 (operador -> PLUS .)


state 139

    (32) operador -> MINUS .

    INT             reduce using rule 32 (operador -> MINUS .)
    VARIABLE        reduce using rule 32 (operador -> MINUS .)
    FLOAT           reduce using rule 32 (operador -> MINUS .)
    STRING          reduce using rule 32 (operador -> MINUS .)
    BOOL            reduce using rule 32 (operador -> MINUS .)
    NULL            reduce using rule 32 (operador -> MINUS .)
    ARRAY           reduce using rule 32 (operador -> MINUS .)
    ID              reduce using rule 32 (operador -> MINUS .)
    EMPTY           reduce using rule 32 (operador -> MINUS .)
    LPAREN          reduce using rule 32 (operador -> MINUS .)


state 140

    (33) operador -> TIMES .

    INT             reduce using rule 33 (operador -> TIMES .)
    VARIABLE        reduce using rule 33 (operador -> TIMES .)
    FLOAT           reduce using rule 33 (operador -> TIMES .)
    STRING          reduce using rule 33 (operador -> TIMES .)
    BOOL            reduce using rule 33 (operador -> TIMES .)
    NULL            reduce using rule 33 (operador -> TIMES .)
    ARRAY           reduce using rule 33 (operador -> TIMES .)
    ID              reduce using rule 33 (operador -> TIMES .)
    EMPTY           reduce using rule 33 (operador -> TIMES .)
    LPAREN          reduce using rule 33 (operador -> TIMES .)


state 141

    (34) operador -> DIVIDE .

    INT             reduce using rule 34 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 34 (operador -> DIVIDE .)
    FLOAT           reduce using rule 34 (operador -> DIVIDE .)
    STRING          reduce using rule 34 (operador -> DIVIDE .)
    BOOL            reduce using rule 34 (operador -> DIVIDE .)
    NULL            reduce using rule 34 (operador -> DIVIDE .)
    ARRAY           reduce using rule 34 (operador -> DIVIDE .)
    ID              reduce using rule 34 (operador -> DIVIDE .)
    EMPTY           reduce using rule 34 (operador -> DIVIDE .)
    LPAREN          reduce using rule 34 (operador -> DIVIDE .)


state 142

    (35) operador -> MODULO .

    INT             reduce using rule 35 (operador -> MODULO .)
    VARIABLE        reduce using rule 35 (operador -> MODULO .)
    FLOAT           reduce using rule 35 (operador -> MODULO .)
    STRING          reduce using rule 35 (operador -> MODULO .)
    BOOL            reduce using rule 35 (operador -> MODULO .)
    NULL            reduce using rule 35 (operador -> MODULO .)
    ARRAY           reduce using rule 35 (operador -> MODULO .)
    ID              reduce using rule 35 (operador -> MODULO .)
    EMPTY           reduce using rule 35 (operador -> MODULO .)
    LPAREN          reduce using rule 35 (operador -> MODULO .)


state 143

    (17) asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN . STDIN RPAREN SEMICOLON

    STDIN           shift and go to state 175


state 144

    (106) array -> VARIABLE EQUALS arrays SEMICOLON .

    VARIABLE        reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    ECHO            reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    PRINT           reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    TRY             reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    FUNCTION        reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    RETURN          reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    ID              reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    EMPTY           reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    INT             reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    FLOAT           reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    STRING          reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    BOOL            reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    NULL            reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    ARRAY           reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    LPAREN          reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    IF              reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    WHILE           reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    SWITCH          reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    FOREACH         reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    FOR             reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    CLOSETAG        reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    RBRACE          reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    BREAK           reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    ENDSWITCH       reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    CASE            reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    DEFAULT         reduce using rule 106 (array -> VARIABLE EQUALS arrays SEMICOLON .)


state 145

    (110) arrays -> LBRACKET . repiteValores RBRACKET
    (47) repiteValores -> . valor
    (48) repiteValores -> . valor COMMA repiteValores
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    repiteValores                  shift and go to state 148
    valor                          shift and go to state 65
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 146

    (107) array -> VARIABLE EQUALS LBRACKET arrayAnidado . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 176


state 147

    (113) map -> VARIABLE EQUALS LBRACKET maps . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 177


state 148

    (110) arrays -> LBRACKET repiteValores . RBRACKET

    RBRACKET        shift and go to state 178


state 149

    (111) arrayAnidado -> arrays .
    (112) arrayAnidado -> arrays . COMMA arrayAnidado

    RBRACKET        reduce using rule 111 (arrayAnidado -> arrays .)
    COMMA           shift and go to state 179


state 150

    (115) maps -> mapArrow .
    (116) maps -> mapArrow . COMMA maps

    RBRACKET        reduce using rule 115 (maps -> mapArrow .)
    RPAREN          reduce using rule 115 (maps -> mapArrow .)
    COMMA           shift and go to state 180


state 151

    (47) repiteValores -> valor .
    (48) repiteValores -> valor . COMMA repiteValores
    (117) mapArrow -> valor . ARROWMAP valor

    RBRACKET        reduce using rule 47 (repiteValores -> valor .)
    RPAREN          reduce using rule 47 (repiteValores -> valor .)
    COMMA           shift and go to state 107
    ARROWMAP        shift and go to state 181


state 152

    (108) array -> VARIABLE EQUALS ARRAY LPAREN . repiteValores RPAREN SEMICOLON
    (114) map -> VARIABLE EQUALS ARRAY LPAREN . maps RPAREN SEMICOLON
    (47) repiteValores -> . valor
    (48) repiteValores -> . valor COMMA repiteValores
    (115) maps -> . mapArrow
    (116) maps -> . mapArrow COMMA maps
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (117) mapArrow -> . valor ARROWMAP valor
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    repiteValores                  shift and go to state 182
    maps                           shift and go to state 183
    valor                          shift and go to state 151
    mapArrow                       shift and go to state 150
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 153

    (64) conditions -> LPAREN conditions RPAREN .
    (68) condition -> LPAREN conditions RPAREN .
    (18) operador_ternario -> LPAREN conditions RPAREN . QUESTION valor COLON valor
    (19) operador_ternario -> LPAREN conditions RPAREN . QUESTION COLON valor

  ! reduce/reduce conflict for RPAREN resolved using rule 64 (conditions -> LPAREN conditions RPAREN .)
    RPAREN          reduce using rule 64 (conditions -> LPAREN conditions RPAREN .)
    AND             reduce using rule 68 (condition -> LPAREN conditions RPAREN .)
    LOGICAL_AND     reduce using rule 68 (condition -> LPAREN conditions RPAREN .)
    OR              reduce using rule 68 (condition -> LPAREN conditions RPAREN .)
    LOGICAL_OR      reduce using rule 68 (condition -> LPAREN conditions RPAREN .)
    QUESTION        shift and go to state 154

  ! RPAREN          [ reduce using rule 68 (condition -> LPAREN conditions RPAREN .) ]


state 154

    (18) operador_ternario -> LPAREN conditions RPAREN QUESTION . valor COLON valor
    (19) operador_ternario -> LPAREN conditions RPAREN QUESTION . COLON valor
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    COLON           shift and go to state 185
    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    valor                          shift and go to state 184
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 155

    (66) condition -> valor opSymbol valor .

    AND             reduce using rule 66 (condition -> valor opSymbol valor .)
    LOGICAL_AND     reduce using rule 66 (condition -> valor opSymbol valor .)
    OR              reduce using rule 66 (condition -> valor opSymbol valor .)
    LOGICAL_OR      reduce using rule 66 (condition -> valor opSymbol valor .)
    RPAREN          reduce using rule 66 (condition -> valor opSymbol valor .)


state 156

    (63) conditions -> condition opLogic conditions .

    RPAREN          reduce using rule 63 (conditions -> condition opLogic conditions .)


state 157

    (68) condition -> LPAREN conditions . RPAREN
    (18) operador_ternario -> LPAREN conditions . RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> LPAREN conditions . RPAREN QUESTION COLON valor

    RPAREN          shift and go to state 186


state 158

    (43) imprimir -> LPAREN repiteValores RPAREN .

    SEMICOLON       reduce using rule 43 (imprimir -> LPAREN repiteValores RPAREN .)


state 159

    (48) repiteValores -> valor COMMA repiteValores .

    SEMICOLON       reduce using rule 48 (repiteValores -> valor COMMA repiteValores .)
    RPAREN          reduce using rule 48 (repiteValores -> valor COMMA repiteValores .)
    RBRACKET        reduce using rule 48 (repiteValores -> valor COMMA repiteValores .)


state 160

    (137) try -> TRY LBRACE body RBRACE . catchs
    (138) try -> TRY LBRACE body RBRACE . catchs FINALLY LBRACE body RBRACE
    (140) catchs -> . catch
    (141) catchs -> . catch catchs
    (139) catch -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE

    CATCH           shift and go to state 189

    catchs                         shift and go to state 187
    catch                          shift and go to state 188

state 161

    (84) sentenciaList -> sentencia sentenciaList .

    RBRACE          reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    VARIABLE        reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    ECHO            reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    PRINT           reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    TRY             reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    FUNCTION        reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    RETURN          reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    ID              reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    EMPTY           reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    INT             reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    FLOAT           reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    STRING          reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    BOOL            reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    NULL            reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    ARRAY           reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    LPAREN          reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    IF              reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    WHILE           reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    SWITCH          reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    FOREACH         reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    FOR             reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    CLOSETAG        reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    BREAK           reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    ENDSWITCH       reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    CASE            reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)
    DEFAULT         reduce using rule 84 (sentenciaList -> sentencia sentenciaList .)


state 162

    (143) funcionDeclaration -> FUNCTION ID LPAREN argumentos . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 190


state 163

    (144) llamadaFuncion -> ID LPAREN argumentos RPAREN . SEMICOLON
    (146) llamadaFuncion -> ID LPAREN argumentos RPAREN .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 191
    VARIABLE        reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ECHO            reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    PRINT           reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    TRY             reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    FUNCTION        reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    RETURN          reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ID              reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    EMPTY           reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    INT             reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    FLOAT           reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    STRING          reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    BOOL            reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    NULL            reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ARRAY           reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    LPAREN          reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    IF              reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    WHILE           reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    SWITCH          reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    FOREACH         reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    FOR             reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    CLOSETAG        reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    LT              reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    GT              reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    LEQ             reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    GEQ             reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    EQ              reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    NEQ             reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    STRICTEQ        reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    STRICTNEQ       reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    AND             reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    LOGICAL_AND     reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    OR              reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    LOGICAL_OR      reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    RPAREN          reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    COMMA           reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    PLUS            reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    MINUS           reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    TIMES           reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    DIVIDE          reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    MODULO          reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    RBRACE          reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    BREAK           reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ENDSWITCH       reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    CASE            reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    DEFAULT         reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ARROWMAP        reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    RBRACKET        reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    COLON           reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)

  ! SEMICOLON       [ reduce using rule 146 (llamadaFuncion -> ID LPAREN argumentos RPAREN .) ]


state 164

    (124) argumentos -> argumento COMMA . argumentos
    (123) argumentos -> . argumento
    (124) argumentos -> . argumento COMMA argumentos
    (125) argumentos -> . empty
    (126) argumento -> . VARIABLE
    (127) argumento -> . type VARIABLE
    (128) argumento -> . VARIABLE EQUALS valor
    (129) argumento -> . type VARIABLE EQUALS valor
    (130) argumento -> . operaArit
    (49) empty -> .
    (131) type -> . INT_TYPE
    (132) type -> . FLOAT_TYPE
    (133) type -> . STRING_TYPE
    (134) type -> . BOOL_TYPE
    (135) type -> . ARRAY_TYPE
    (136) type -> . VOID
    (20) operaArit -> . valor
    (21) operaArit -> . valor operador operaArit
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    VARIABLE        shift and go to state 117
    RPAREN          reduce using rule 49 (empty -> .)
    INT_TYPE        shift and go to state 121
    FLOAT_TYPE      shift and go to state 122
    STRING_TYPE     shift and go to state 123
    BOOL_TYPE       shift and go to state 124
    ARRAY_TYPE      shift and go to state 125
    VOID            shift and go to state 126
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    argumento                      shift and go to state 115
    argumentos                     shift and go to state 192
    empty                          shift and go to state 116
    type                           shift and go to state 118
    valor                          shift and go to state 119
    operaArit                      shift and go to state 120
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 165

    (128) argumento -> VARIABLE EQUALS . valor
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    valor                          shift and go to state 193
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 166

    (127) argumento -> type VARIABLE .
    (129) argumento -> type VARIABLE . EQUALS valor

    COMMA           reduce using rule 127 (argumento -> type VARIABLE .)
    RPAREN          reduce using rule 127 (argumento -> type VARIABLE .)
    EQUALS          shift and go to state 194


state 167

    (145) llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .
    (147) llamadaFuncion -> EMPTY LPAREN argumentos RPAREN . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    VARIABLE        reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ECHO            reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    PRINT           reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    TRY             reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    FUNCTION        reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    RETURN          reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ID              reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    EMPTY           reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    INT             reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    FLOAT           reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    STRING          reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    BOOL            reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    NULL            reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ARRAY           reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    LPAREN          reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    IF              reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    WHILE           reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    SWITCH          reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    FOREACH         reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    FOR             reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    CLOSETAG        reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    LT              reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    GT              reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    LEQ             reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    GEQ             reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    EQ              reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    NEQ             reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    STRICTEQ        reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    STRICTNEQ       reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    AND             reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    LOGICAL_AND     reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    OR              reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    LOGICAL_OR      reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    RPAREN          reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    COMMA           reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    PLUS            reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    MINUS           reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    TIMES           reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    DIVIDE          reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    MODULO          reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    RBRACE          reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    BREAK           reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ENDSWITCH       reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    CASE            reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    DEFAULT         reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ARROWMAP        reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    RBRACKET        reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    COLON           reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    SEMICOLON       shift and go to state 195

  ! SEMICOLON       [ reduce using rule 145 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .) ]


state 168

    (57) if -> IF LPAREN conditions RPAREN . LBRACE body RBRACE else_blocks
    (58) if -> IF LPAREN conditions RPAREN . body
    (81) body -> . sentenciaList
    (82) body -> . empty
    (83) sentenciaList -> . sentencia
    (84) sentenciaList -> . sentencia sentenciaList
    (49) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (15) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (16) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (17) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (36) comparacion -> . valor comparador valor
    (41) impresion -> . ECHO imprimir SEMICOLON
    (42) impresion -> . PRINT imprimir SEMICOLON
    (50) estructurasPrograma -> . controlStructure
    (51) estructurasPrograma -> . dataStructure
    (137) try -> . TRY LBRACE body RBRACE catchs
    (138) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (143) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (13) returnStatement -> . RETURN valor SEMICOLON
    (14) returnStatement -> . RETURN SEMICOLON
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (52) controlStructure -> . if
    (53) controlStructure -> . for
    (54) controlStructure -> . while
    (55) controlStructure -> . switch
    (56) controlStructure -> . foreach
    (105) dataStructure -> . array
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (57) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (58) if -> . IF LPAREN conditions RPAREN body
    (85) for -> . forStatement
    (89) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (90) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (91) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (92) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (99) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (106) array -> . VARIABLE EQUALS arrays SEMICOLON
    (107) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (108) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (109) array -> . map
    (86) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (113) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (114) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for EMPTY resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    LBRACE          shift and go to state 196
    RBRACE          reduce using rule 49 (empty -> .)
    CLOSETAG        reduce using rule 49 (empty -> .)
    BREAK           reduce using rule 49 (empty -> .)
    ENDSWITCH       reduce using rule 49 (empty -> .)
    CASE            reduce using rule 49 (empty -> .)
    DEFAULT         reduce using rule 49 (empty -> .)
    VARIABLE        shift and go to state 14
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    TRY             shift and go to state 21
    FUNCTION        shift and go to state 22
    RETURN          shift and go to state 24
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 16
    IF              shift and go to state 39
    WHILE           shift and go to state 41
    SWITCH          shift and go to state 42
    FOREACH         shift and go to state 43
    FOR             shift and go to state 45

  ! VARIABLE        [ reduce using rule 49 (empty -> .) ]
  ! ECHO            [ reduce using rule 49 (empty -> .) ]
  ! PRINT           [ reduce using rule 49 (empty -> .) ]
  ! TRY             [ reduce using rule 49 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 49 (empty -> .) ]
  ! RETURN          [ reduce using rule 49 (empty -> .) ]
  ! ID              [ reduce using rule 49 (empty -> .) ]
  ! EMPTY           [ reduce using rule 49 (empty -> .) ]
  ! INT             [ reduce using rule 49 (empty -> .) ]
  ! FLOAT           [ reduce using rule 49 (empty -> .) ]
  ! STRING          [ reduce using rule 49 (empty -> .) ]
  ! BOOL            [ reduce using rule 49 (empty -> .) ]
  ! NULL            [ reduce using rule 49 (empty -> .) ]
  ! ARRAY           [ reduce using rule 49 (empty -> .) ]
  ! LPAREN          [ reduce using rule 49 (empty -> .) ]
  ! IF              [ reduce using rule 49 (empty -> .) ]
  ! WHILE           [ reduce using rule 49 (empty -> .) ]
  ! SWITCH          [ reduce using rule 49 (empty -> .) ]
  ! FOREACH         [ reduce using rule 49 (empty -> .) ]
  ! FOR             [ reduce using rule 49 (empty -> .) ]

    body                           shift and go to state 197
    sentenciaList                  shift and go to state 110
    empty                          shift and go to state 111
    sentencia                      shift and go to state 112
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    valor                          shift and go to state 15
    controlStructure               shift and go to state 19
    dataStructure                  shift and go to state 20
    operador_ternario              shift and go to state 32
    if                             shift and go to state 33
    for                            shift and go to state 34
    while                          shift and go to state 35
    switch                         shift and go to state 36
    foreach                        shift and go to state 37
    array                          shift and go to state 38
    forStatement                   shift and go to state 40
    map                            shift and go to state 44

state 169

    (89) while -> WHILE LPAREN condition RPAREN . LBRACE body RBRACE
    (90) while -> WHILE LPAREN condition RPAREN . LBRACE RBRACE

    LBRACE          shift and go to state 198


state 170

    (91) switch -> SWITCH LPAREN valor RPAREN . LBRACE caseLists RBRACE
    (92) switch -> SWITCH LPAREN valor RPAREN . COLON caseLists ENDSWITCH SEMICOLON

    LBRACE          shift and go to state 199
    COLON           shift and go to state 200


state 171

    (99) foreach -> FOREACH LPAREN VARIABLE AS . VARIABLE RPAREN LBRACE body RBRACE

    VARIABLE        shift and go to state 201


state 172

    (86) forStatement -> FOR LPAREN forcondition RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 202


state 173

    (87) forcondition -> VARIABLE EQUALS . INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (88) forcondition -> VARIABLE EQUALS . INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    INT             shift and go to state 203


state 174

    (21) operaArit -> valor operador operaArit .

    SEMICOLON       reduce using rule 21 (operaArit -> valor operador operaArit .)
    COMMA           reduce using rule 21 (operaArit -> valor operador operaArit .)
    RPAREN          reduce using rule 21 (operaArit -> valor operador operaArit .)


state 175

    (17) asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN . RPAREN SEMICOLON

    RPAREN          shift and go to state 204


state 176

    (107) array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 205


state 177

    (113) map -> VARIABLE EQUALS LBRACKET maps RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 206


state 178

    (110) arrays -> LBRACKET repiteValores RBRACKET .

    SEMICOLON       reduce using rule 110 (arrays -> LBRACKET repiteValores RBRACKET .)
    COMMA           reduce using rule 110 (arrays -> LBRACKET repiteValores RBRACKET .)
    RBRACKET        reduce using rule 110 (arrays -> LBRACKET repiteValores RBRACKET .)


state 179

    (112) arrayAnidado -> arrays COMMA . arrayAnidado
    (111) arrayAnidado -> . arrays
    (112) arrayAnidado -> . arrays COMMA arrayAnidado
    (110) arrays -> . LBRACKET repiteValores RBRACKET

    LBRACKET        shift and go to state 145

    arrays                         shift and go to state 149
    arrayAnidado                   shift and go to state 207

state 180

    (116) maps -> mapArrow COMMA . maps
    (115) maps -> . mapArrow
    (116) maps -> . mapArrow COMMA maps
    (117) mapArrow -> . valor ARROWMAP valor
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    mapArrow                       shift and go to state 150
    maps                           shift and go to state 208
    valor                          shift and go to state 209
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 181

    (117) mapArrow -> valor ARROWMAP . valor
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    valor                          shift and go to state 210
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 182

    (108) array -> VARIABLE EQUALS ARRAY LPAREN repiteValores . RPAREN SEMICOLON

    RPAREN          shift and go to state 211


state 183

    (114) map -> VARIABLE EQUALS ARRAY LPAREN maps . RPAREN SEMICOLON

    RPAREN          shift and go to state 212


state 184

    (18) operador_ternario -> LPAREN conditions RPAREN QUESTION valor . COLON valor

    COLON           shift and go to state 213


state 185

    (19) operador_ternario -> LPAREN conditions RPAREN QUESTION COLON . valor
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    valor                          shift and go to state 214
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 186

    (68) condition -> LPAREN conditions RPAREN .
    (18) operador_ternario -> LPAREN conditions RPAREN . QUESTION valor COLON valor
    (19) operador_ternario -> LPAREN conditions RPAREN . QUESTION COLON valor

    AND             reduce using rule 68 (condition -> LPAREN conditions RPAREN .)
    LOGICAL_AND     reduce using rule 68 (condition -> LPAREN conditions RPAREN .)
    OR              reduce using rule 68 (condition -> LPAREN conditions RPAREN .)
    LOGICAL_OR      reduce using rule 68 (condition -> LPAREN conditions RPAREN .)
    RPAREN          reduce using rule 68 (condition -> LPAREN conditions RPAREN .)
    QUESTION        shift and go to state 154


state 187

    (137) try -> TRY LBRACE body RBRACE catchs .
    (138) try -> TRY LBRACE body RBRACE catchs . FINALLY LBRACE body RBRACE

    VARIABLE        reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    ECHO            reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    PRINT           reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    TRY             reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    FUNCTION        reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    RETURN          reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    ID              reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    EMPTY           reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    INT             reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    FLOAT           reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    STRING          reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    BOOL            reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    NULL            reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    ARRAY           reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    LPAREN          reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    IF              reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    WHILE           reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    SWITCH          reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    FOREACH         reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    FOR             reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    CLOSETAG        reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    RBRACE          reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    BREAK           reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    ENDSWITCH       reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    CASE            reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    DEFAULT         reduce using rule 137 (try -> TRY LBRACE body RBRACE catchs .)
    FINALLY         shift and go to state 215


state 188

    (140) catchs -> catch .
    (141) catchs -> catch . catchs
    (140) catchs -> . catch
    (141) catchs -> . catch catchs
    (139) catch -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE

    FINALLY         reduce using rule 140 (catchs -> catch .)
    VARIABLE        reduce using rule 140 (catchs -> catch .)
    ECHO            reduce using rule 140 (catchs -> catch .)
    PRINT           reduce using rule 140 (catchs -> catch .)
    TRY             reduce using rule 140 (catchs -> catch .)
    FUNCTION        reduce using rule 140 (catchs -> catch .)
    RETURN          reduce using rule 140 (catchs -> catch .)
    ID              reduce using rule 140 (catchs -> catch .)
    EMPTY           reduce using rule 140 (catchs -> catch .)
    INT             reduce using rule 140 (catchs -> catch .)
    FLOAT           reduce using rule 140 (catchs -> catch .)
    STRING          reduce using rule 140 (catchs -> catch .)
    BOOL            reduce using rule 140 (catchs -> catch .)
    NULL            reduce using rule 140 (catchs -> catch .)
    ARRAY           reduce using rule 140 (catchs -> catch .)
    LPAREN          reduce using rule 140 (catchs -> catch .)
    IF              reduce using rule 140 (catchs -> catch .)
    WHILE           reduce using rule 140 (catchs -> catch .)
    SWITCH          reduce using rule 140 (catchs -> catch .)
    FOREACH         reduce using rule 140 (catchs -> catch .)
    FOR             reduce using rule 140 (catchs -> catch .)
    CLOSETAG        reduce using rule 140 (catchs -> catch .)
    RBRACE          reduce using rule 140 (catchs -> catch .)
    BREAK           reduce using rule 140 (catchs -> catch .)
    ENDSWITCH       reduce using rule 140 (catchs -> catch .)
    CASE            reduce using rule 140 (catchs -> catch .)
    DEFAULT         reduce using rule 140 (catchs -> catch .)
    CATCH           shift and go to state 189

    catch                          shift and go to state 188
    catchs                         shift and go to state 216

state 189

    (139) catch -> CATCH . LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 217


state 190

    (143) funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 218


state 191

    (144) llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .

    VARIABLE        reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ECHO            reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    PRINT           reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    TRY             reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    RETURN          reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ID              reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    EMPTY           reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    INT             reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FLOAT           reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    STRING          reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    BOOL            reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    NULL            reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ARRAY           reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    LPAREN          reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    IF              reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    WHILE           reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    SWITCH          reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FOREACH         reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FOR             reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    LT              reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    GT              reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    LEQ             reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    GEQ             reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    EQ              reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    NEQ             reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    STRICTEQ        reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    STRICTNEQ       reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    AND             reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    LOGICAL_AND     reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    OR              reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    LOGICAL_OR      reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    RPAREN          reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    COMMA           reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    PLUS            reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    MINUS           reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    TIMES           reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    DIVIDE          reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    MODULO          reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    RBRACE          reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    BREAK           reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    CASE            reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ARROWMAP        reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    COLON           reduce using rule 144 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)


state 192

    (124) argumentos -> argumento COMMA argumentos .

    RPAREN          reduce using rule 124 (argumentos -> argumento COMMA argumentos .)


state 193

    (128) argumento -> VARIABLE EQUALS valor .

    COMMA           reduce using rule 128 (argumento -> VARIABLE EQUALS valor .)
    RPAREN          reduce using rule 128 (argumento -> VARIABLE EQUALS valor .)


state 194

    (129) argumento -> type VARIABLE EQUALS . valor
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    valor                          shift and go to state 219
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 195

    (147) llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .

    VARIABLE        reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ECHO            reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    PRINT           reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    TRY             reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    RETURN          reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ID              reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    EMPTY           reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    INT             reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    FLOAT           reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    STRING          reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    BOOL            reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    NULL            reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ARRAY           reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    LPAREN          reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    IF              reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    WHILE           reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    SWITCH          reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    FOREACH         reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    FOR             reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    LT              reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    GT              reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    LEQ             reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    GEQ             reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    EQ              reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    NEQ             reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    STRICTEQ        reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    STRICTNEQ       reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    AND             reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    LOGICAL_AND     reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    OR              reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    LOGICAL_OR      reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    RPAREN          reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    COMMA           reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    PLUS            reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    MINUS           reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    TIMES           reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    DIVIDE          reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    MODULO          reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    RBRACE          reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    BREAK           reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    CASE            reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ARROWMAP        reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    COLON           reduce using rule 147 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)


state 196

    (57) if -> IF LPAREN conditions RPAREN LBRACE . body RBRACE else_blocks
    (81) body -> . sentenciaList
    (82) body -> . empty
    (83) sentenciaList -> . sentencia
    (84) sentenciaList -> . sentencia sentenciaList
    (49) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (15) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (16) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (17) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (36) comparacion -> . valor comparador valor
    (41) impresion -> . ECHO imprimir SEMICOLON
    (42) impresion -> . PRINT imprimir SEMICOLON
    (50) estructurasPrograma -> . controlStructure
    (51) estructurasPrograma -> . dataStructure
    (137) try -> . TRY LBRACE body RBRACE catchs
    (138) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (143) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (13) returnStatement -> . RETURN valor SEMICOLON
    (14) returnStatement -> . RETURN SEMICOLON
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (52) controlStructure -> . if
    (53) controlStructure -> . for
    (54) controlStructure -> . while
    (55) controlStructure -> . switch
    (56) controlStructure -> . foreach
    (105) dataStructure -> . array
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (57) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (58) if -> . IF LPAREN conditions RPAREN body
    (85) for -> . forStatement
    (89) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (90) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (91) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (92) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (99) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (106) array -> . VARIABLE EQUALS arrays SEMICOLON
    (107) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (108) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (109) array -> . map
    (86) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (113) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (114) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 49 (empty -> .)
    VARIABLE        shift and go to state 14
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    TRY             shift and go to state 21
    FUNCTION        shift and go to state 22
    RETURN          shift and go to state 24
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 16
    IF              shift and go to state 39
    WHILE           shift and go to state 41
    SWITCH          shift and go to state 42
    FOREACH         shift and go to state 43
    FOR             shift and go to state 45

    body                           shift and go to state 220
    sentenciaList                  shift and go to state 110
    empty                          shift and go to state 111
    sentencia                      shift and go to state 112
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    valor                          shift and go to state 15
    controlStructure               shift and go to state 19
    dataStructure                  shift and go to state 20
    operador_ternario              shift and go to state 32
    if                             shift and go to state 33
    for                            shift and go to state 34
    while                          shift and go to state 35
    switch                         shift and go to state 36
    foreach                        shift and go to state 37
    array                          shift and go to state 38
    forStatement                   shift and go to state 40
    map                            shift and go to state 44

state 197

    (58) if -> IF LPAREN conditions RPAREN body .

    VARIABLE        reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    ECHO            reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    PRINT           reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    TRY             reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    FUNCTION        reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    RETURN          reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    ID              reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    EMPTY           reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    INT             reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    FLOAT           reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    STRING          reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    BOOL            reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    NULL            reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    ARRAY           reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    LPAREN          reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    IF              reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    WHILE           reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    SWITCH          reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    FOREACH         reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    FOR             reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    CLOSETAG        reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    RBRACE          reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    BREAK           reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    ENDSWITCH       reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    CASE            reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)
    DEFAULT         reduce using rule 58 (if -> IF LPAREN conditions RPAREN body .)


state 198

    (89) while -> WHILE LPAREN condition RPAREN LBRACE . body RBRACE
    (90) while -> WHILE LPAREN condition RPAREN LBRACE . RBRACE
    (81) body -> . sentenciaList
    (82) body -> . empty
    (83) sentenciaList -> . sentencia
    (84) sentenciaList -> . sentencia sentenciaList
    (49) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (15) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (16) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (17) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (36) comparacion -> . valor comparador valor
    (41) impresion -> . ECHO imprimir SEMICOLON
    (42) impresion -> . PRINT imprimir SEMICOLON
    (50) estructurasPrograma -> . controlStructure
    (51) estructurasPrograma -> . dataStructure
    (137) try -> . TRY LBRACE body RBRACE catchs
    (138) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (143) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (13) returnStatement -> . RETURN valor SEMICOLON
    (14) returnStatement -> . RETURN SEMICOLON
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (52) controlStructure -> . if
    (53) controlStructure -> . for
    (54) controlStructure -> . while
    (55) controlStructure -> . switch
    (56) controlStructure -> . foreach
    (105) dataStructure -> . array
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (57) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (58) if -> . IF LPAREN conditions RPAREN body
    (85) for -> . forStatement
    (89) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (90) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (91) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (92) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (99) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (106) array -> . VARIABLE EQUALS arrays SEMICOLON
    (107) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (108) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (109) array -> . map
    (86) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (113) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (114) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 222
    VARIABLE        shift and go to state 14
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    TRY             shift and go to state 21
    FUNCTION        shift and go to state 22
    RETURN          shift and go to state 24
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 16
    IF              shift and go to state 39
    WHILE           shift and go to state 41
    SWITCH          shift and go to state 42
    FOREACH         shift and go to state 43
    FOR             shift and go to state 45

  ! RBRACE          [ reduce using rule 49 (empty -> .) ]

    body                           shift and go to state 221
    sentenciaList                  shift and go to state 110
    empty                          shift and go to state 111
    sentencia                      shift and go to state 112
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    valor                          shift and go to state 15
    controlStructure               shift and go to state 19
    dataStructure                  shift and go to state 20
    operador_ternario              shift and go to state 32
    if                             shift and go to state 33
    for                            shift and go to state 34
    while                          shift and go to state 35
    switch                         shift and go to state 36
    foreach                        shift and go to state 37
    array                          shift and go to state 38
    forStatement                   shift and go to state 40
    map                            shift and go to state 44

state 199

    (91) switch -> SWITCH LPAREN valor RPAREN LBRACE . caseLists RBRACE
    (93) caseLists -> . cases
    (94) caseLists -> . cases default
    (95) caseLists -> . default
    (96) caseLists -> . empty
    (97) cases -> . case
    (98) cases -> . case cases
    (118) default -> . DEFAULT COLON body BREAK SEMICOLON
    (119) default -> . DEFAULT SEMICOLON body BREAK SEMICOLON
    (120) default -> . DEFAULT COLON body
    (121) default -> . DEFAULT SEMICOLON body
    (122) default -> . DEFAULT
    (49) empty -> .
    (100) case -> . CASE valor COLON body BREAK SEMICOLON
    (101) case -> . CASE valor SEMICOLON body BREAK SEMICOLON
    (102) case -> . CASE valor COLON body
    (103) case -> . CASE valor SEMICOLON
    (104) case -> . CASE valor

    DEFAULT         shift and go to state 228
    RBRACE          reduce using rule 49 (empty -> .)
    CASE            shift and go to state 229

    caseLists                      shift and go to state 223
    cases                          shift and go to state 224
    default                        shift and go to state 225
    empty                          shift and go to state 226
    case                           shift and go to state 227

state 200

    (92) switch -> SWITCH LPAREN valor RPAREN COLON . caseLists ENDSWITCH SEMICOLON
    (93) caseLists -> . cases
    (94) caseLists -> . cases default
    (95) caseLists -> . default
    (96) caseLists -> . empty
    (97) cases -> . case
    (98) cases -> . case cases
    (118) default -> . DEFAULT COLON body BREAK SEMICOLON
    (119) default -> . DEFAULT SEMICOLON body BREAK SEMICOLON
    (120) default -> . DEFAULT COLON body
    (121) default -> . DEFAULT SEMICOLON body
    (122) default -> . DEFAULT
    (49) empty -> .
    (100) case -> . CASE valor COLON body BREAK SEMICOLON
    (101) case -> . CASE valor SEMICOLON body BREAK SEMICOLON
    (102) case -> . CASE valor COLON body
    (103) case -> . CASE valor SEMICOLON
    (104) case -> . CASE valor

    DEFAULT         shift and go to state 228
    ENDSWITCH       reduce using rule 49 (empty -> .)
    CASE            shift and go to state 229

    caseLists                      shift and go to state 230
    cases                          shift and go to state 224
    default                        shift and go to state 225
    empty                          shift and go to state 226
    case                           shift and go to state 227

state 201

    (99) foreach -> FOREACH LPAREN VARIABLE AS VARIABLE . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 231


state 202

    (86) forStatement -> FOR LPAREN forcondition RPAREN LBRACE . body RBRACE
    (81) body -> . sentenciaList
    (82) body -> . empty
    (83) sentenciaList -> . sentencia
    (84) sentenciaList -> . sentencia sentenciaList
    (49) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (15) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (16) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (17) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (36) comparacion -> . valor comparador valor
    (41) impresion -> . ECHO imprimir SEMICOLON
    (42) impresion -> . PRINT imprimir SEMICOLON
    (50) estructurasPrograma -> . controlStructure
    (51) estructurasPrograma -> . dataStructure
    (137) try -> . TRY LBRACE body RBRACE catchs
    (138) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (143) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (13) returnStatement -> . RETURN valor SEMICOLON
    (14) returnStatement -> . RETURN SEMICOLON
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (52) controlStructure -> . if
    (53) controlStructure -> . for
    (54) controlStructure -> . while
    (55) controlStructure -> . switch
    (56) controlStructure -> . foreach
    (105) dataStructure -> . array
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (57) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (58) if -> . IF LPAREN conditions RPAREN body
    (85) for -> . forStatement
    (89) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (90) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (91) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (92) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (99) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (106) array -> . VARIABLE EQUALS arrays SEMICOLON
    (107) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (108) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (109) array -> . map
    (86) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (113) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (114) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 49 (empty -> .)
    VARIABLE        shift and go to state 14
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    TRY             shift and go to state 21
    FUNCTION        shift and go to state 22
    RETURN          shift and go to state 24
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 16
    IF              shift and go to state 39
    WHILE           shift and go to state 41
    SWITCH          shift and go to state 42
    FOREACH         shift and go to state 43
    FOR             shift and go to state 45

    body                           shift and go to state 232
    sentenciaList                  shift and go to state 110
    empty                          shift and go to state 111
    sentencia                      shift and go to state 112
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    valor                          shift and go to state 15
    controlStructure               shift and go to state 19
    dataStructure                  shift and go to state 20
    operador_ternario              shift and go to state 32
    if                             shift and go to state 33
    for                            shift and go to state 34
    while                          shift and go to state 35
    switch                         shift and go to state 36
    foreach                        shift and go to state 37
    array                          shift and go to state 38
    forStatement                   shift and go to state 40
    map                            shift and go to state 44

state 203

    (87) forcondition -> VARIABLE EQUALS INT . SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (88) forcondition -> VARIABLE EQUALS INT . SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    SEMICOLON       shift and go to state 233


state 204

    (17) asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 234


state 205

    (107) array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .

    VARIABLE        reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    ECHO            reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    PRINT           reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    TRY             reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    FUNCTION        reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    RETURN          reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    ID              reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    EMPTY           reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    INT             reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    STRING          reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    BOOL            reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    NULL            reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    ARRAY           reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    IF              reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    WHILE           reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    SWITCH          reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    FOREACH         reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    FOR             reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    CLOSETAG        reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    BREAK           reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    ENDSWITCH       reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    CASE            reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    DEFAULT         reduce using rule 107 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)


state 206

    (113) map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .

    VARIABLE        reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    ECHO            reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    PRINT           reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    TRY             reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    FUNCTION        reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    RETURN          reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    ID              reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    EMPTY           reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    INT             reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    STRING          reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    BOOL            reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    NULL            reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    ARRAY           reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    IF              reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    WHILE           reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    SWITCH          reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    FOREACH         reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    FOR             reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    CLOSETAG        reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    BREAK           reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    ENDSWITCH       reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    CASE            reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    DEFAULT         reduce using rule 113 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)


state 207

    (112) arrayAnidado -> arrays COMMA arrayAnidado .

    RBRACKET        reduce using rule 112 (arrayAnidado -> arrays COMMA arrayAnidado .)


state 208

    (116) maps -> mapArrow COMMA maps .

    RBRACKET        reduce using rule 116 (maps -> mapArrow COMMA maps .)
    RPAREN          reduce using rule 116 (maps -> mapArrow COMMA maps .)


state 209

    (117) mapArrow -> valor . ARROWMAP valor

    ARROWMAP        shift and go to state 181


state 210

    (117) mapArrow -> valor ARROWMAP valor .

    COMMA           reduce using rule 117 (mapArrow -> valor ARROWMAP valor .)
    RBRACKET        reduce using rule 117 (mapArrow -> valor ARROWMAP valor .)
    RPAREN          reduce using rule 117 (mapArrow -> valor ARROWMAP valor .)


state 211

    (108) array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 235


state 212

    (114) map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 236


state 213

    (18) operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON . valor
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    valor                          shift and go to state 237
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 214

    (19) operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .

    LT              reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    GT              reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    LEQ             reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    GEQ             reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    EQ              reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    NEQ             reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    STRICTEQ        reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    STRICTNEQ       reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    AND             reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    LOGICAL_AND     reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    OR              reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    LOGICAL_OR      reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    RPAREN          reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    COMMA           reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    SEMICOLON       reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    PLUS            reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    MINUS           reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    TIMES           reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    DIVIDE          reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    MODULO          reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    VARIABLE        reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    ECHO            reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    PRINT           reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    TRY             reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    FUNCTION        reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    RETURN          reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    ID              reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    EMPTY           reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    INT             reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    FLOAT           reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    STRING          reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    BOOL            reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    NULL            reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    ARRAY           reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    LPAREN          reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    IF              reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    WHILE           reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    SWITCH          reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    FOREACH         reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    FOR             reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    CLOSETAG        reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    RBRACE          reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    BREAK           reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    ENDSWITCH       reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    CASE            reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    DEFAULT         reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    ARROWMAP        reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    RBRACKET        reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    COLON           reduce using rule 19 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)


state 215

    (138) try -> TRY LBRACE body RBRACE catchs FINALLY . LBRACE body RBRACE

    LBRACE          shift and go to state 238


state 216

    (141) catchs -> catch catchs .

    FINALLY         reduce using rule 141 (catchs -> catch catchs .)
    VARIABLE        reduce using rule 141 (catchs -> catch catchs .)
    ECHO            reduce using rule 141 (catchs -> catch catchs .)
    PRINT           reduce using rule 141 (catchs -> catch catchs .)
    TRY             reduce using rule 141 (catchs -> catch catchs .)
    FUNCTION        reduce using rule 141 (catchs -> catch catchs .)
    RETURN          reduce using rule 141 (catchs -> catch catchs .)
    ID              reduce using rule 141 (catchs -> catch catchs .)
    EMPTY           reduce using rule 141 (catchs -> catch catchs .)
    INT             reduce using rule 141 (catchs -> catch catchs .)
    FLOAT           reduce using rule 141 (catchs -> catch catchs .)
    STRING          reduce using rule 141 (catchs -> catch catchs .)
    BOOL            reduce using rule 141 (catchs -> catch catchs .)
    NULL            reduce using rule 141 (catchs -> catch catchs .)
    ARRAY           reduce using rule 141 (catchs -> catch catchs .)
    LPAREN          reduce using rule 141 (catchs -> catch catchs .)
    IF              reduce using rule 141 (catchs -> catch catchs .)
    WHILE           reduce using rule 141 (catchs -> catch catchs .)
    SWITCH          reduce using rule 141 (catchs -> catch catchs .)
    FOREACH         reduce using rule 141 (catchs -> catch catchs .)
    FOR             reduce using rule 141 (catchs -> catch catchs .)
    CLOSETAG        reduce using rule 141 (catchs -> catch catchs .)
    RBRACE          reduce using rule 141 (catchs -> catch catchs .)
    BREAK           reduce using rule 141 (catchs -> catch catchs .)
    ENDSWITCH       reduce using rule 141 (catchs -> catch catchs .)
    CASE            reduce using rule 141 (catchs -> catch catchs .)
    DEFAULT         reduce using rule 141 (catchs -> catch catchs .)


state 217

    (139) catch -> CATCH LPAREN . EXCEPTION VARIABLE RPAREN LBRACE body RBRACE

    EXCEPTION       shift and go to state 239


state 218

    (143) funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE . body RBRACE
    (81) body -> . sentenciaList
    (82) body -> . empty
    (83) sentenciaList -> . sentencia
    (84) sentenciaList -> . sentencia sentenciaList
    (49) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (15) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (16) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (17) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (36) comparacion -> . valor comparador valor
    (41) impresion -> . ECHO imprimir SEMICOLON
    (42) impresion -> . PRINT imprimir SEMICOLON
    (50) estructurasPrograma -> . controlStructure
    (51) estructurasPrograma -> . dataStructure
    (137) try -> . TRY LBRACE body RBRACE catchs
    (138) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (143) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (13) returnStatement -> . RETURN valor SEMICOLON
    (14) returnStatement -> . RETURN SEMICOLON
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (52) controlStructure -> . if
    (53) controlStructure -> . for
    (54) controlStructure -> . while
    (55) controlStructure -> . switch
    (56) controlStructure -> . foreach
    (105) dataStructure -> . array
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (57) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (58) if -> . IF LPAREN conditions RPAREN body
    (85) for -> . forStatement
    (89) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (90) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (91) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (92) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (99) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (106) array -> . VARIABLE EQUALS arrays SEMICOLON
    (107) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (108) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (109) array -> . map
    (86) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (113) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (114) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 49 (empty -> .)
    VARIABLE        shift and go to state 14
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    TRY             shift and go to state 21
    FUNCTION        shift and go to state 22
    RETURN          shift and go to state 24
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 16
    IF              shift and go to state 39
    WHILE           shift and go to state 41
    SWITCH          shift and go to state 42
    FOREACH         shift and go to state 43
    FOR             shift and go to state 45

    body                           shift and go to state 240
    sentenciaList                  shift and go to state 110
    empty                          shift and go to state 111
    sentencia                      shift and go to state 112
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    valor                          shift and go to state 15
    controlStructure               shift and go to state 19
    dataStructure                  shift and go to state 20
    operador_ternario              shift and go to state 32
    if                             shift and go to state 33
    for                            shift and go to state 34
    while                          shift and go to state 35
    switch                         shift and go to state 36
    foreach                        shift and go to state 37
    array                          shift and go to state 38
    forStatement                   shift and go to state 40
    map                            shift and go to state 44

state 219

    (129) argumento -> type VARIABLE EQUALS valor .

    COMMA           reduce using rule 129 (argumento -> type VARIABLE EQUALS valor .)
    RPAREN          reduce using rule 129 (argumento -> type VARIABLE EQUALS valor .)


state 220

    (57) if -> IF LPAREN conditions RPAREN LBRACE body . RBRACE else_blocks

    RBRACE          shift and go to state 241


state 221

    (89) while -> WHILE LPAREN condition RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 242


state 222

    (90) while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .

    VARIABLE        reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ECHO            reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    PRINT           reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    TRY             reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FUNCTION        reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ID              reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    EMPTY           reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    INT             reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FLOAT           reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    STRING          reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    BOOL            reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    NULL            reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ARRAY           reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    LPAREN          reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    IF              reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    WHILE           reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    SWITCH          reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FOREACH         reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FOR             reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    CLOSETAG        reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    RBRACE          reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    BREAK           reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ENDSWITCH       reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    CASE            reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    DEFAULT         reduce using rule 90 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)


state 223

    (91) switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists . RBRACE

    RBRACE          shift and go to state 243


state 224

    (93) caseLists -> cases .
    (94) caseLists -> cases . default
    (118) default -> . DEFAULT COLON body BREAK SEMICOLON
    (119) default -> . DEFAULT SEMICOLON body BREAK SEMICOLON
    (120) default -> . DEFAULT COLON body
    (121) default -> . DEFAULT SEMICOLON body
    (122) default -> . DEFAULT

    RBRACE          reduce using rule 93 (caseLists -> cases .)
    ENDSWITCH       reduce using rule 93 (caseLists -> cases .)
    DEFAULT         shift and go to state 228

    default                        shift and go to state 244

state 225

    (95) caseLists -> default .

    RBRACE          reduce using rule 95 (caseLists -> default .)
    ENDSWITCH       reduce using rule 95 (caseLists -> default .)


state 226

    (96) caseLists -> empty .

    RBRACE          reduce using rule 96 (caseLists -> empty .)
    ENDSWITCH       reduce using rule 96 (caseLists -> empty .)


state 227

    (97) cases -> case .
    (98) cases -> case . cases
    (97) cases -> . case
    (98) cases -> . case cases
    (100) case -> . CASE valor COLON body BREAK SEMICOLON
    (101) case -> . CASE valor SEMICOLON body BREAK SEMICOLON
    (102) case -> . CASE valor COLON body
    (103) case -> . CASE valor SEMICOLON
    (104) case -> . CASE valor

    DEFAULT         reduce using rule 97 (cases -> case .)
    RBRACE          reduce using rule 97 (cases -> case .)
    ENDSWITCH       reduce using rule 97 (cases -> case .)
    CASE            shift and go to state 229

    case                           shift and go to state 227
    cases                          shift and go to state 245

state 228

    (118) default -> DEFAULT . COLON body BREAK SEMICOLON
    (119) default -> DEFAULT . SEMICOLON body BREAK SEMICOLON
    (120) default -> DEFAULT . COLON body
    (121) default -> DEFAULT . SEMICOLON body
    (122) default -> DEFAULT .

    COLON           shift and go to state 246
    SEMICOLON       shift and go to state 247
    RBRACE          reduce using rule 122 (default -> DEFAULT .)
    ENDSWITCH       reduce using rule 122 (default -> DEFAULT .)


state 229

    (100) case -> CASE . valor COLON body BREAK SEMICOLON
    (101) case -> CASE . valor SEMICOLON body BREAK SEMICOLON
    (102) case -> CASE . valor COLON body
    (103) case -> CASE . valor SEMICOLON
    (104) case -> CASE . valor
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    LPAREN          shift and go to state 16

    valor                          shift and go to state 248
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 230

    (92) switch -> SWITCH LPAREN valor RPAREN COLON caseLists . ENDSWITCH SEMICOLON

    ENDSWITCH       shift and go to state 249


state 231

    (99) foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 250


state 232

    (86) forStatement -> FOR LPAREN forcondition RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 251


state 233

    (87) forcondition -> VARIABLE EQUALS INT SEMICOLON . VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (88) forcondition -> VARIABLE EQUALS INT SEMICOLON . VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    VARIABLE        shift and go to state 252


state 234

    (17) asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .

    VARIABLE        reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ECHO            reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    PRINT           reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    TRY             reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    RETURN          reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ID              reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    EMPTY           reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    INT             reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    STRING          reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    BOOL            reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    NULL            reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    IF              reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    WHILE           reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    SWITCH          reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FOREACH         reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FOR             reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    BREAK           reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    CASE            reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 17 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)


state 235

    (108) array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .

    VARIABLE        reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    ECHO            reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    PRINT           reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    TRY             reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    RETURN          reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    ID              reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    EMPTY           reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    INT             reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    FLOAT           reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    STRING          reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    BOOL            reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    NULL            reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    ARRAY           reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    LPAREN          reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    IF              reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    WHILE           reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    SWITCH          reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    FOREACH         reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    FOR             reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    RBRACE          reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    BREAK           reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    CASE            reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 108 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)


state 236

    (114) map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .

    VARIABLE        reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    ECHO            reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    PRINT           reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    TRY             reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    RETURN          reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    ID              reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    EMPTY           reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    INT             reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    FLOAT           reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    STRING          reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    BOOL            reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    NULL            reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    ARRAY           reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    LPAREN          reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    IF              reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    WHILE           reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    SWITCH          reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    FOREACH         reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    FOR             reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    RBRACE          reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    BREAK           reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    CASE            reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 114 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)


state 237

    (18) operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .

    LT              reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    GT              reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    LEQ             reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    GEQ             reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    EQ              reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    NEQ             reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    STRICTEQ        reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    STRICTNEQ       reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    AND             reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    LOGICAL_AND     reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    OR              reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    LOGICAL_OR      reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    RPAREN          reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    COMMA           reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    SEMICOLON       reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    PLUS            reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    MINUS           reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    TIMES           reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    DIVIDE          reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    MODULO          reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    VARIABLE        reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    ECHO            reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    PRINT           reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    TRY             reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    FUNCTION        reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    RETURN          reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    ID              reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    EMPTY           reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    INT             reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    FLOAT           reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    STRING          reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    BOOL            reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    NULL            reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    ARRAY           reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    LPAREN          reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    IF              reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    WHILE           reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    SWITCH          reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    FOREACH         reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    FOR             reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    CLOSETAG        reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    RBRACE          reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    BREAK           reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    ENDSWITCH       reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    CASE            reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    DEFAULT         reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    ARROWMAP        reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    RBRACKET        reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    COLON           reduce using rule 18 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)


state 238

    (138) try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE . body RBRACE
    (81) body -> . sentenciaList
    (82) body -> . empty
    (83) sentenciaList -> . sentencia
    (84) sentenciaList -> . sentencia sentenciaList
    (49) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (15) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (16) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (17) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (36) comparacion -> . valor comparador valor
    (41) impresion -> . ECHO imprimir SEMICOLON
    (42) impresion -> . PRINT imprimir SEMICOLON
    (50) estructurasPrograma -> . controlStructure
    (51) estructurasPrograma -> . dataStructure
    (137) try -> . TRY LBRACE body RBRACE catchs
    (138) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (143) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (13) returnStatement -> . RETURN valor SEMICOLON
    (14) returnStatement -> . RETURN SEMICOLON
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (52) controlStructure -> . if
    (53) controlStructure -> . for
    (54) controlStructure -> . while
    (55) controlStructure -> . switch
    (56) controlStructure -> . foreach
    (105) dataStructure -> . array
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (57) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (58) if -> . IF LPAREN conditions RPAREN body
    (85) for -> . forStatement
    (89) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (90) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (91) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (92) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (99) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (106) array -> . VARIABLE EQUALS arrays SEMICOLON
    (107) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (108) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (109) array -> . map
    (86) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (113) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (114) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 49 (empty -> .)
    VARIABLE        shift and go to state 14
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    TRY             shift and go to state 21
    FUNCTION        shift and go to state 22
    RETURN          shift and go to state 24
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 16
    IF              shift and go to state 39
    WHILE           shift and go to state 41
    SWITCH          shift and go to state 42
    FOREACH         shift and go to state 43
    FOR             shift and go to state 45

    body                           shift and go to state 253
    sentenciaList                  shift and go to state 110
    empty                          shift and go to state 111
    sentencia                      shift and go to state 112
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    valor                          shift and go to state 15
    controlStructure               shift and go to state 19
    dataStructure                  shift and go to state 20
    operador_ternario              shift and go to state 32
    if                             shift and go to state 33
    for                            shift and go to state 34
    while                          shift and go to state 35
    switch                         shift and go to state 36
    foreach                        shift and go to state 37
    array                          shift and go to state 38
    forStatement                   shift and go to state 40
    map                            shift and go to state 44

state 239

    (139) catch -> CATCH LPAREN EXCEPTION . VARIABLE RPAREN LBRACE body RBRACE

    VARIABLE        shift and go to state 254


state 240

    (143) funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 255


state 241

    (57) if -> IF LPAREN conditions RPAREN LBRACE body RBRACE . else_blocks
    (59) else_blocks -> . ELSE LBRACE body RBRACE
    (60) else_blocks -> . ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (61) else_blocks -> . empty
    (49) empty -> .

    ELSE            shift and go to state 257
    ELSEIF          shift and go to state 258
    VARIABLE        reduce using rule 49 (empty -> .)
    ECHO            reduce using rule 49 (empty -> .)
    PRINT           reduce using rule 49 (empty -> .)
    TRY             reduce using rule 49 (empty -> .)
    FUNCTION        reduce using rule 49 (empty -> .)
    RETURN          reduce using rule 49 (empty -> .)
    ID              reduce using rule 49 (empty -> .)
    EMPTY           reduce using rule 49 (empty -> .)
    INT             reduce using rule 49 (empty -> .)
    FLOAT           reduce using rule 49 (empty -> .)
    STRING          reduce using rule 49 (empty -> .)
    BOOL            reduce using rule 49 (empty -> .)
    NULL            reduce using rule 49 (empty -> .)
    ARRAY           reduce using rule 49 (empty -> .)
    LPAREN          reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    WHILE           reduce using rule 49 (empty -> .)
    SWITCH          reduce using rule 49 (empty -> .)
    FOREACH         reduce using rule 49 (empty -> .)
    FOR             reduce using rule 49 (empty -> .)
    CLOSETAG        reduce using rule 49 (empty -> .)
    RBRACE          reduce using rule 49 (empty -> .)
    BREAK           reduce using rule 49 (empty -> .)
    ENDSWITCH       reduce using rule 49 (empty -> .)
    CASE            reduce using rule 49 (empty -> .)
    DEFAULT         reduce using rule 49 (empty -> .)

    else_blocks                    shift and go to state 256
    empty                          shift and go to state 259

state 242

    (89) while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .

    VARIABLE        reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    TRY             reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    EMPTY           reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    LPAREN          reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FOREACH         reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 89 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)


state 243

    (91) switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .

    VARIABLE        reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ECHO            reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    PRINT           reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    TRY             reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FUNCTION        reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    RETURN          reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ID              reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    EMPTY           reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    INT             reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FLOAT           reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    STRING          reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    BOOL            reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    NULL            reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ARRAY           reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    LPAREN          reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    IF              reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    WHILE           reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    SWITCH          reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FOREACH         reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FOR             reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    CLOSETAG        reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    RBRACE          reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    BREAK           reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ENDSWITCH       reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    CASE            reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    DEFAULT         reduce using rule 91 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)


state 244

    (94) caseLists -> cases default .

    RBRACE          reduce using rule 94 (caseLists -> cases default .)
    ENDSWITCH       reduce using rule 94 (caseLists -> cases default .)


state 245

    (98) cases -> case cases .

    DEFAULT         reduce using rule 98 (cases -> case cases .)
    RBRACE          reduce using rule 98 (cases -> case cases .)
    ENDSWITCH       reduce using rule 98 (cases -> case cases .)


state 246

    (118) default -> DEFAULT COLON . body BREAK SEMICOLON
    (120) default -> DEFAULT COLON . body
    (81) body -> . sentenciaList
    (82) body -> . empty
    (83) sentenciaList -> . sentencia
    (84) sentenciaList -> . sentencia sentenciaList
    (49) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (15) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (16) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (17) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (36) comparacion -> . valor comparador valor
    (41) impresion -> . ECHO imprimir SEMICOLON
    (42) impresion -> . PRINT imprimir SEMICOLON
    (50) estructurasPrograma -> . controlStructure
    (51) estructurasPrograma -> . dataStructure
    (137) try -> . TRY LBRACE body RBRACE catchs
    (138) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (143) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (13) returnStatement -> . RETURN valor SEMICOLON
    (14) returnStatement -> . RETURN SEMICOLON
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (52) controlStructure -> . if
    (53) controlStructure -> . for
    (54) controlStructure -> . while
    (55) controlStructure -> . switch
    (56) controlStructure -> . foreach
    (105) dataStructure -> . array
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (57) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (58) if -> . IF LPAREN conditions RPAREN body
    (85) for -> . forStatement
    (89) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (90) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (91) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (92) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (99) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (106) array -> . VARIABLE EQUALS arrays SEMICOLON
    (107) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (108) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (109) array -> . map
    (86) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (113) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (114) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    BREAK           reduce using rule 49 (empty -> .)
    RBRACE          reduce using rule 49 (empty -> .)
    ENDSWITCH       reduce using rule 49 (empty -> .)
    VARIABLE        shift and go to state 14
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    TRY             shift and go to state 21
    FUNCTION        shift and go to state 22
    RETURN          shift and go to state 24
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 16
    IF              shift and go to state 39
    WHILE           shift and go to state 41
    SWITCH          shift and go to state 42
    FOREACH         shift and go to state 43
    FOR             shift and go to state 45

    body                           shift and go to state 260
    sentenciaList                  shift and go to state 110
    empty                          shift and go to state 111
    sentencia                      shift and go to state 112
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    valor                          shift and go to state 15
    controlStructure               shift and go to state 19
    dataStructure                  shift and go to state 20
    operador_ternario              shift and go to state 32
    if                             shift and go to state 33
    for                            shift and go to state 34
    while                          shift and go to state 35
    switch                         shift and go to state 36
    foreach                        shift and go to state 37
    array                          shift and go to state 38
    forStatement                   shift and go to state 40
    map                            shift and go to state 44

state 247

    (119) default -> DEFAULT SEMICOLON . body BREAK SEMICOLON
    (121) default -> DEFAULT SEMICOLON . body
    (81) body -> . sentenciaList
    (82) body -> . empty
    (83) sentenciaList -> . sentencia
    (84) sentenciaList -> . sentencia sentenciaList
    (49) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (15) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (16) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (17) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (36) comparacion -> . valor comparador valor
    (41) impresion -> . ECHO imprimir SEMICOLON
    (42) impresion -> . PRINT imprimir SEMICOLON
    (50) estructurasPrograma -> . controlStructure
    (51) estructurasPrograma -> . dataStructure
    (137) try -> . TRY LBRACE body RBRACE catchs
    (138) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (143) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (13) returnStatement -> . RETURN valor SEMICOLON
    (14) returnStatement -> . RETURN SEMICOLON
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (52) controlStructure -> . if
    (53) controlStructure -> . for
    (54) controlStructure -> . while
    (55) controlStructure -> . switch
    (56) controlStructure -> . foreach
    (105) dataStructure -> . array
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (57) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (58) if -> . IF LPAREN conditions RPAREN body
    (85) for -> . forStatement
    (89) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (90) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (91) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (92) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (99) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (106) array -> . VARIABLE EQUALS arrays SEMICOLON
    (107) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (108) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (109) array -> . map
    (86) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (113) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (114) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    BREAK           reduce using rule 49 (empty -> .)
    RBRACE          reduce using rule 49 (empty -> .)
    ENDSWITCH       reduce using rule 49 (empty -> .)
    VARIABLE        shift and go to state 14
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    TRY             shift and go to state 21
    FUNCTION        shift and go to state 22
    RETURN          shift and go to state 24
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 16
    IF              shift and go to state 39
    WHILE           shift and go to state 41
    SWITCH          shift and go to state 42
    FOREACH         shift and go to state 43
    FOR             shift and go to state 45

    body                           shift and go to state 261
    sentenciaList                  shift and go to state 110
    empty                          shift and go to state 111
    sentencia                      shift and go to state 112
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    valor                          shift and go to state 15
    controlStructure               shift and go to state 19
    dataStructure                  shift and go to state 20
    operador_ternario              shift and go to state 32
    if                             shift and go to state 33
    for                            shift and go to state 34
    while                          shift and go to state 35
    switch                         shift and go to state 36
    foreach                        shift and go to state 37
    array                          shift and go to state 38
    forStatement                   shift and go to state 40
    map                            shift and go to state 44

state 248

    (100) case -> CASE valor . COLON body BREAK SEMICOLON
    (101) case -> CASE valor . SEMICOLON body BREAK SEMICOLON
    (102) case -> CASE valor . COLON body
    (103) case -> CASE valor . SEMICOLON
    (104) case -> CASE valor .

    COLON           shift and go to state 262
    SEMICOLON       shift and go to state 263
    CASE            reduce using rule 104 (case -> CASE valor .)
    DEFAULT         reduce using rule 104 (case -> CASE valor .)
    RBRACE          reduce using rule 104 (case -> CASE valor .)
    ENDSWITCH       reduce using rule 104 (case -> CASE valor .)


state 249

    (92) switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH . SEMICOLON

    SEMICOLON       shift and go to state 264


state 250

    (99) foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE . body RBRACE
    (81) body -> . sentenciaList
    (82) body -> . empty
    (83) sentenciaList -> . sentencia
    (84) sentenciaList -> . sentencia sentenciaList
    (49) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (15) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (16) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (17) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (36) comparacion -> . valor comparador valor
    (41) impresion -> . ECHO imprimir SEMICOLON
    (42) impresion -> . PRINT imprimir SEMICOLON
    (50) estructurasPrograma -> . controlStructure
    (51) estructurasPrograma -> . dataStructure
    (137) try -> . TRY LBRACE body RBRACE catchs
    (138) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (143) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (13) returnStatement -> . RETURN valor SEMICOLON
    (14) returnStatement -> . RETURN SEMICOLON
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (52) controlStructure -> . if
    (53) controlStructure -> . for
    (54) controlStructure -> . while
    (55) controlStructure -> . switch
    (56) controlStructure -> . foreach
    (105) dataStructure -> . array
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (57) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (58) if -> . IF LPAREN conditions RPAREN body
    (85) for -> . forStatement
    (89) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (90) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (91) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (92) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (99) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (106) array -> . VARIABLE EQUALS arrays SEMICOLON
    (107) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (108) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (109) array -> . map
    (86) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (113) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (114) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 49 (empty -> .)
    VARIABLE        shift and go to state 14
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    TRY             shift and go to state 21
    FUNCTION        shift and go to state 22
    RETURN          shift and go to state 24
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 16
    IF              shift and go to state 39
    WHILE           shift and go to state 41
    SWITCH          shift and go to state 42
    FOREACH         shift and go to state 43
    FOR             shift and go to state 45

    body                           shift and go to state 265
    sentenciaList                  shift and go to state 110
    empty                          shift and go to state 111
    sentencia                      shift and go to state 112
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    valor                          shift and go to state 15
    controlStructure               shift and go to state 19
    dataStructure                  shift and go to state 20
    operador_ternario              shift and go to state 32
    if                             shift and go to state 33
    for                            shift and go to state 34
    while                          shift and go to state 35
    switch                         shift and go to state 36
    foreach                        shift and go to state 37
    array                          shift and go to state 38
    forStatement                   shift and go to state 40
    map                            shift and go to state 44

state 251

    (86) forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .

    VARIABLE        reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    TRY             reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    EMPTY           reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    LPAREN          reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FOREACH         reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 86 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)


state 252

    (87) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE . opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (88) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE . opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS
    (69) opSymbol -> . EQ
    (70) opSymbol -> . NEQ
    (71) opSymbol -> . STRICTEQ
    (72) opSymbol -> . STRICTNEQ
    (73) opSymbol -> . LT
    (74) opSymbol -> . GT
    (75) opSymbol -> . LEQ
    (76) opSymbol -> . GEQ

    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    STRICTEQ        shift and go to state 90
    STRICTNEQ       shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LEQ             shift and go to state 94
    GEQ             shift and go to state 95

    opSymbol                       shift and go to state 266

state 253

    (138) try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body . RBRACE

    RBRACE          shift and go to state 267


state 254

    (139) catch -> CATCH LPAREN EXCEPTION VARIABLE . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 268


state 255

    (143) funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .

    VARIABLE        reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    TRY             reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    EMPTY           reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    LPAREN          reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FOREACH         reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 143 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)


state 256

    (57) if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .

    VARIABLE        reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ECHO            reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PRINT           reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    TRY             reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FUNCTION        reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    RETURN          reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ID              reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    EMPTY           reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INT             reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FLOAT           reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    STRING          reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    BOOL            reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    NULL            reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ARRAY           reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    LPAREN          reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    IF              reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    WHILE           reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    SWITCH          reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FOREACH         reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FOR             reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CLOSETAG        reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    RBRACE          reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    BREAK           reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ENDSWITCH       reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CASE            reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    DEFAULT         reduce using rule 57 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)


state 257

    (59) else_blocks -> ELSE . LBRACE body RBRACE

    LBRACE          shift and go to state 269


state 258

    (60) else_blocks -> ELSEIF . LPAREN conditions RPAREN LBRACE body RBRACE else_blocks

    LPAREN          shift and go to state 270


state 259

    (61) else_blocks -> empty .

    VARIABLE        reduce using rule 61 (else_blocks -> empty .)
    ECHO            reduce using rule 61 (else_blocks -> empty .)
    PRINT           reduce using rule 61 (else_blocks -> empty .)
    TRY             reduce using rule 61 (else_blocks -> empty .)
    FUNCTION        reduce using rule 61 (else_blocks -> empty .)
    RETURN          reduce using rule 61 (else_blocks -> empty .)
    ID              reduce using rule 61 (else_blocks -> empty .)
    EMPTY           reduce using rule 61 (else_blocks -> empty .)
    INT             reduce using rule 61 (else_blocks -> empty .)
    FLOAT           reduce using rule 61 (else_blocks -> empty .)
    STRING          reduce using rule 61 (else_blocks -> empty .)
    BOOL            reduce using rule 61 (else_blocks -> empty .)
    NULL            reduce using rule 61 (else_blocks -> empty .)
    ARRAY           reduce using rule 61 (else_blocks -> empty .)
    LPAREN          reduce using rule 61 (else_blocks -> empty .)
    IF              reduce using rule 61 (else_blocks -> empty .)
    WHILE           reduce using rule 61 (else_blocks -> empty .)
    SWITCH          reduce using rule 61 (else_blocks -> empty .)
    FOREACH         reduce using rule 61 (else_blocks -> empty .)
    FOR             reduce using rule 61 (else_blocks -> empty .)
    CLOSETAG        reduce using rule 61 (else_blocks -> empty .)
    RBRACE          reduce using rule 61 (else_blocks -> empty .)
    BREAK           reduce using rule 61 (else_blocks -> empty .)
    ENDSWITCH       reduce using rule 61 (else_blocks -> empty .)
    CASE            reduce using rule 61 (else_blocks -> empty .)
    DEFAULT         reduce using rule 61 (else_blocks -> empty .)


state 260

    (118) default -> DEFAULT COLON body . BREAK SEMICOLON
    (120) default -> DEFAULT COLON body .

    BREAK           shift and go to state 271
    RBRACE          reduce using rule 120 (default -> DEFAULT COLON body .)
    ENDSWITCH       reduce using rule 120 (default -> DEFAULT COLON body .)


state 261

    (119) default -> DEFAULT SEMICOLON body . BREAK SEMICOLON
    (121) default -> DEFAULT SEMICOLON body .

    BREAK           shift and go to state 272
    RBRACE          reduce using rule 121 (default -> DEFAULT SEMICOLON body .)
    ENDSWITCH       reduce using rule 121 (default -> DEFAULT SEMICOLON body .)


state 262

    (100) case -> CASE valor COLON . body BREAK SEMICOLON
    (102) case -> CASE valor COLON . body
    (81) body -> . sentenciaList
    (82) body -> . empty
    (83) sentenciaList -> . sentencia
    (84) sentenciaList -> . sentencia sentenciaList
    (49) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (15) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (16) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (17) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (36) comparacion -> . valor comparador valor
    (41) impresion -> . ECHO imprimir SEMICOLON
    (42) impresion -> . PRINT imprimir SEMICOLON
    (50) estructurasPrograma -> . controlStructure
    (51) estructurasPrograma -> . dataStructure
    (137) try -> . TRY LBRACE body RBRACE catchs
    (138) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (143) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (13) returnStatement -> . RETURN valor SEMICOLON
    (14) returnStatement -> . RETURN SEMICOLON
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (52) controlStructure -> . if
    (53) controlStructure -> . for
    (54) controlStructure -> . while
    (55) controlStructure -> . switch
    (56) controlStructure -> . foreach
    (105) dataStructure -> . array
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (57) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (58) if -> . IF LPAREN conditions RPAREN body
    (85) for -> . forStatement
    (89) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (90) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (91) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (92) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (99) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (106) array -> . VARIABLE EQUALS arrays SEMICOLON
    (107) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (108) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (109) array -> . map
    (86) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (113) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (114) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    BREAK           reduce using rule 49 (empty -> .)
    CASE            reduce using rule 49 (empty -> .)
    DEFAULT         reduce using rule 49 (empty -> .)
    RBRACE          reduce using rule 49 (empty -> .)
    ENDSWITCH       reduce using rule 49 (empty -> .)
    VARIABLE        shift and go to state 14
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    TRY             shift and go to state 21
    FUNCTION        shift and go to state 22
    RETURN          shift and go to state 24
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 16
    IF              shift and go to state 39
    WHILE           shift and go to state 41
    SWITCH          shift and go to state 42
    FOREACH         shift and go to state 43
    FOR             shift and go to state 45

    valor                          shift and go to state 15
    body                           shift and go to state 273
    sentenciaList                  shift and go to state 110
    empty                          shift and go to state 111
    sentencia                      shift and go to state 112
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    controlStructure               shift and go to state 19
    dataStructure                  shift and go to state 20
    operador_ternario              shift and go to state 32
    if                             shift and go to state 33
    for                            shift and go to state 34
    while                          shift and go to state 35
    switch                         shift and go to state 36
    foreach                        shift and go to state 37
    array                          shift and go to state 38
    forStatement                   shift and go to state 40
    map                            shift and go to state 44

state 263

    (101) case -> CASE valor SEMICOLON . body BREAK SEMICOLON
    (103) case -> CASE valor SEMICOLON .
    (81) body -> . sentenciaList
    (82) body -> . empty
    (83) sentenciaList -> . sentencia
    (84) sentenciaList -> . sentencia sentenciaList
    (49) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (15) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (16) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (17) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (36) comparacion -> . valor comparador valor
    (41) impresion -> . ECHO imprimir SEMICOLON
    (42) impresion -> . PRINT imprimir SEMICOLON
    (50) estructurasPrograma -> . controlStructure
    (51) estructurasPrograma -> . dataStructure
    (137) try -> . TRY LBRACE body RBRACE catchs
    (138) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (143) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (13) returnStatement -> . RETURN valor SEMICOLON
    (14) returnStatement -> . RETURN SEMICOLON
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (52) controlStructure -> . if
    (53) controlStructure -> . for
    (54) controlStructure -> . while
    (55) controlStructure -> . switch
    (56) controlStructure -> . foreach
    (105) dataStructure -> . array
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (57) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (58) if -> . IF LPAREN conditions RPAREN body
    (85) for -> . forStatement
    (89) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (90) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (91) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (92) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (99) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (106) array -> . VARIABLE EQUALS arrays SEMICOLON
    (107) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (108) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (109) array -> . map
    (86) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (113) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (114) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    CASE            reduce using rule 103 (case -> CASE valor SEMICOLON .)
    DEFAULT         reduce using rule 103 (case -> CASE valor SEMICOLON .)
    RBRACE          reduce using rule 103 (case -> CASE valor SEMICOLON .)
    ENDSWITCH       reduce using rule 103 (case -> CASE valor SEMICOLON .)
    BREAK           reduce using rule 49 (empty -> .)
    VARIABLE        shift and go to state 14
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    TRY             shift and go to state 21
    FUNCTION        shift and go to state 22
    RETURN          shift and go to state 24
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 16
    IF              shift and go to state 39
    WHILE           shift and go to state 41
    SWITCH          shift and go to state 42
    FOREACH         shift and go to state 43
    FOR             shift and go to state 45

    valor                          shift and go to state 15
    body                           shift and go to state 274
    sentenciaList                  shift and go to state 110
    empty                          shift and go to state 111
    sentencia                      shift and go to state 112
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    controlStructure               shift and go to state 19
    dataStructure                  shift and go to state 20
    operador_ternario              shift and go to state 32
    if                             shift and go to state 33
    for                            shift and go to state 34
    while                          shift and go to state 35
    switch                         shift and go to state 36
    foreach                        shift and go to state 37
    array                          shift and go to state 38
    forStatement                   shift and go to state 40
    map                            shift and go to state 44

state 264

    (92) switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .

    VARIABLE        reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ECHO            reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    PRINT           reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    TRY             reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FUNCTION        reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    RETURN          reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ID              reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    EMPTY           reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    INT             reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FLOAT           reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    STRING          reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    BOOL            reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    NULL            reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ARRAY           reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    LPAREN          reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    IF              reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    WHILE           reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    SWITCH          reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FOREACH         reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FOR             reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    CLOSETAG        reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    RBRACE          reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    BREAK           reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ENDSWITCH       reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    CASE            reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    DEFAULT         reduce using rule 92 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)


state 265

    (99) foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 275


state 266

    (87) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol . INT SEMICOLON VARIABLE DOUBLEPLUS
    (88) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol . INT SEMICOLON VARIABLE DOUBLEMINUS

    INT             shift and go to state 276


state 267

    (138) try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .

    VARIABLE        reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    ECHO            reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    PRINT           reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    TRY             reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    FUNCTION        reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    RETURN          reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    ID              reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    EMPTY           reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    INT             reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    FLOAT           reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    STRING          reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    BOOL            reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    NULL            reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    ARRAY           reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    LPAREN          reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    IF              reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    WHILE           reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    SWITCH          reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    FOREACH         reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    FOR             reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    RBRACE          reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    BREAK           reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    CASE            reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    DEFAULT         reduce using rule 138 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)


state 268

    (139) catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 277


state 269

    (59) else_blocks -> ELSE LBRACE . body RBRACE
    (81) body -> . sentenciaList
    (82) body -> . empty
    (83) sentenciaList -> . sentencia
    (84) sentenciaList -> . sentencia sentenciaList
    (49) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (15) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (16) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (17) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (36) comparacion -> . valor comparador valor
    (41) impresion -> . ECHO imprimir SEMICOLON
    (42) impresion -> . PRINT imprimir SEMICOLON
    (50) estructurasPrograma -> . controlStructure
    (51) estructurasPrograma -> . dataStructure
    (137) try -> . TRY LBRACE body RBRACE catchs
    (138) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (143) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (13) returnStatement -> . RETURN valor SEMICOLON
    (14) returnStatement -> . RETURN SEMICOLON
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (52) controlStructure -> . if
    (53) controlStructure -> . for
    (54) controlStructure -> . while
    (55) controlStructure -> . switch
    (56) controlStructure -> . foreach
    (105) dataStructure -> . array
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (57) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (58) if -> . IF LPAREN conditions RPAREN body
    (85) for -> . forStatement
    (89) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (90) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (91) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (92) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (99) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (106) array -> . VARIABLE EQUALS arrays SEMICOLON
    (107) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (108) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (109) array -> . map
    (86) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (113) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (114) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 49 (empty -> .)
    VARIABLE        shift and go to state 14
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    TRY             shift and go to state 21
    FUNCTION        shift and go to state 22
    RETURN          shift and go to state 24
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 16
    IF              shift and go to state 39
    WHILE           shift and go to state 41
    SWITCH          shift and go to state 42
    FOREACH         shift and go to state 43
    FOR             shift and go to state 45

    body                           shift and go to state 278
    sentenciaList                  shift and go to state 110
    empty                          shift and go to state 111
    sentencia                      shift and go to state 112
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    valor                          shift and go to state 15
    controlStructure               shift and go to state 19
    dataStructure                  shift and go to state 20
    operador_ternario              shift and go to state 32
    if                             shift and go to state 33
    for                            shift and go to state 34
    while                          shift and go to state 35
    switch                         shift and go to state 36
    foreach                        shift and go to state 37
    array                          shift and go to state 38
    forStatement                   shift and go to state 40
    map                            shift and go to state 44

state 270

    (60) else_blocks -> ELSEIF LPAREN . conditions RPAREN LBRACE body RBRACE else_blocks
    (62) conditions -> . condition
    (63) conditions -> . condition opLogic conditions
    (64) conditions -> . LPAREN conditions RPAREN
    (65) condition -> . valor
    (66) condition -> . valor opSymbol valor
    (67) condition -> . NOT condition
    (68) condition -> . LPAREN conditions RPAREN
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    LPAREN          shift and go to state 54
    NOT             shift and go to state 58
    INT             shift and go to state 26
    VARIABLE        shift and go to state 59
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    ID              shift and go to state 23
    EMPTY           shift and go to state 25

    conditions                     shift and go to state 279
    condition                      shift and go to state 57
    valor                          shift and go to state 56
    llamadaFuncion                 shift and go to state 60
    operador_ternario              shift and go to state 32

state 271

    (118) default -> DEFAULT COLON body BREAK . SEMICOLON

    SEMICOLON       shift and go to state 280


state 272

    (119) default -> DEFAULT SEMICOLON body BREAK . SEMICOLON

    SEMICOLON       shift and go to state 281


state 273

    (100) case -> CASE valor COLON body . BREAK SEMICOLON
    (102) case -> CASE valor COLON body .

    BREAK           shift and go to state 282
    CASE            reduce using rule 102 (case -> CASE valor COLON body .)
    DEFAULT         reduce using rule 102 (case -> CASE valor COLON body .)
    RBRACE          reduce using rule 102 (case -> CASE valor COLON body .)
    ENDSWITCH       reduce using rule 102 (case -> CASE valor COLON body .)


state 274

    (101) case -> CASE valor SEMICOLON body . BREAK SEMICOLON

    BREAK           shift and go to state 283


state 275

    (99) foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .

    VARIABLE        reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    TRY             reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    EMPTY           reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    LPAREN          reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    FOREACH         reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 99 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)


state 276

    (87) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT . SEMICOLON VARIABLE DOUBLEPLUS
    (88) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT . SEMICOLON VARIABLE DOUBLEMINUS

    SEMICOLON       shift and go to state 284


state 277

    (139) catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE . body RBRACE
    (81) body -> . sentenciaList
    (82) body -> . empty
    (83) sentenciaList -> . sentencia
    (84) sentenciaList -> . sentencia sentenciaList
    (49) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (15) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (16) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (17) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (36) comparacion -> . valor comparador valor
    (41) impresion -> . ECHO imprimir SEMICOLON
    (42) impresion -> . PRINT imprimir SEMICOLON
    (50) estructurasPrograma -> . controlStructure
    (51) estructurasPrograma -> . dataStructure
    (137) try -> . TRY LBRACE body RBRACE catchs
    (138) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (143) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (13) returnStatement -> . RETURN valor SEMICOLON
    (14) returnStatement -> . RETURN SEMICOLON
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (52) controlStructure -> . if
    (53) controlStructure -> . for
    (54) controlStructure -> . while
    (55) controlStructure -> . switch
    (56) controlStructure -> . foreach
    (105) dataStructure -> . array
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (57) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (58) if -> . IF LPAREN conditions RPAREN body
    (85) for -> . forStatement
    (89) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (90) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (91) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (92) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (99) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (106) array -> . VARIABLE EQUALS arrays SEMICOLON
    (107) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (108) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (109) array -> . map
    (86) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (113) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (114) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 49 (empty -> .)
    VARIABLE        shift and go to state 14
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    TRY             shift and go to state 21
    FUNCTION        shift and go to state 22
    RETURN          shift and go to state 24
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 16
    IF              shift and go to state 39
    WHILE           shift and go to state 41
    SWITCH          shift and go to state 42
    FOREACH         shift and go to state 43
    FOR             shift and go to state 45

    body                           shift and go to state 285
    sentenciaList                  shift and go to state 110
    empty                          shift and go to state 111
    sentencia                      shift and go to state 112
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    valor                          shift and go to state 15
    controlStructure               shift and go to state 19
    dataStructure                  shift and go to state 20
    operador_ternario              shift and go to state 32
    if                             shift and go to state 33
    for                            shift and go to state 34
    while                          shift and go to state 35
    switch                         shift and go to state 36
    foreach                        shift and go to state 37
    array                          shift and go to state 38
    forStatement                   shift and go to state 40
    map                            shift and go to state 44

state 278

    (59) else_blocks -> ELSE LBRACE body . RBRACE

    RBRACE          shift and go to state 286


state 279

    (60) else_blocks -> ELSEIF LPAREN conditions . RPAREN LBRACE body RBRACE else_blocks

    RPAREN          shift and go to state 287


state 280

    (118) default -> DEFAULT COLON body BREAK SEMICOLON .

    RBRACE          reduce using rule 118 (default -> DEFAULT COLON body BREAK SEMICOLON .)
    ENDSWITCH       reduce using rule 118 (default -> DEFAULT COLON body BREAK SEMICOLON .)


state 281

    (119) default -> DEFAULT SEMICOLON body BREAK SEMICOLON .

    RBRACE          reduce using rule 119 (default -> DEFAULT SEMICOLON body BREAK SEMICOLON .)
    ENDSWITCH       reduce using rule 119 (default -> DEFAULT SEMICOLON body BREAK SEMICOLON .)


state 282

    (100) case -> CASE valor COLON body BREAK . SEMICOLON

    SEMICOLON       shift and go to state 288


state 283

    (101) case -> CASE valor SEMICOLON body BREAK . SEMICOLON

    SEMICOLON       shift and go to state 289


state 284

    (87) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON . VARIABLE DOUBLEPLUS
    (88) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON . VARIABLE DOUBLEMINUS

    VARIABLE        shift and go to state 290


state 285

    (139) catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 291


state 286

    (59) else_blocks -> ELSE LBRACE body RBRACE .

    VARIABLE        reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    ECHO            reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    PRINT           reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    TRY             reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    FUNCTION        reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    RETURN          reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    ID              reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    EMPTY           reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    INT             reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    FLOAT           reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    STRING          reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    BOOL            reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    NULL            reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    ARRAY           reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    LPAREN          reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    IF              reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    WHILE           reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    SWITCH          reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    FOREACH         reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    FOR             reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    RBRACE          reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    BREAK           reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    CASE            reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)
    DEFAULT         reduce using rule 59 (else_blocks -> ELSE LBRACE body RBRACE .)


state 287

    (60) else_blocks -> ELSEIF LPAREN conditions RPAREN . LBRACE body RBRACE else_blocks

    LBRACE          shift and go to state 292


state 288

    (100) case -> CASE valor COLON body BREAK SEMICOLON .

    CASE            reduce using rule 100 (case -> CASE valor COLON body BREAK SEMICOLON .)
    DEFAULT         reduce using rule 100 (case -> CASE valor COLON body BREAK SEMICOLON .)
    RBRACE          reduce using rule 100 (case -> CASE valor COLON body BREAK SEMICOLON .)
    ENDSWITCH       reduce using rule 100 (case -> CASE valor COLON body BREAK SEMICOLON .)


state 289

    (101) case -> CASE valor SEMICOLON body BREAK SEMICOLON .

    CASE            reduce using rule 101 (case -> CASE valor SEMICOLON body BREAK SEMICOLON .)
    DEFAULT         reduce using rule 101 (case -> CASE valor SEMICOLON body BREAK SEMICOLON .)
    RBRACE          reduce using rule 101 (case -> CASE valor SEMICOLON body BREAK SEMICOLON .)
    ENDSWITCH       reduce using rule 101 (case -> CASE valor SEMICOLON body BREAK SEMICOLON .)


state 290

    (87) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE . DOUBLEPLUS
    (88) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE . DOUBLEMINUS

    DOUBLEPLUS      shift and go to state 293
    DOUBLEMINUS     shift and go to state 294


state 291

    (139) catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .

    CATCH           reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FINALLY         reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    VARIABLE        reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    TRY             reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    EMPTY           reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    LPAREN          reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FOREACH         reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 139 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)


state 292

    (60) else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE . body RBRACE else_blocks
    (81) body -> . sentenciaList
    (82) body -> . empty
    (83) sentenciaList -> . sentencia
    (84) sentenciaList -> . sentencia sentenciaList
    (49) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (15) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (16) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (17) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (36) comparacion -> . valor comparador valor
    (41) impresion -> . ECHO imprimir SEMICOLON
    (42) impresion -> . PRINT imprimir SEMICOLON
    (50) estructurasPrograma -> . controlStructure
    (51) estructurasPrograma -> . dataStructure
    (137) try -> . TRY LBRACE body RBRACE catchs
    (138) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (143) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (13) returnStatement -> . RETURN valor SEMICOLON
    (14) returnStatement -> . RETURN SEMICOLON
    (144) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (145) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (146) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (147) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (22) valor -> . INT
    (23) valor -> . VARIABLE
    (24) valor -> . FLOAT
    (25) valor -> . STRING
    (26) valor -> . BOOL
    (27) valor -> . NULL
    (28) valor -> . ARRAY
    (29) valor -> . llamadaFuncion
    (30) valor -> . operador_ternario
    (52) controlStructure -> . if
    (53) controlStructure -> . for
    (54) controlStructure -> . while
    (55) controlStructure -> . switch
    (56) controlStructure -> . foreach
    (105) dataStructure -> . array
    (18) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (19) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (57) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (58) if -> . IF LPAREN conditions RPAREN body
    (85) for -> . forStatement
    (89) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (90) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (91) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (92) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (99) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (106) array -> . VARIABLE EQUALS arrays SEMICOLON
    (107) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (108) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (109) array -> . map
    (86) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (113) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (114) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 49 (empty -> .)
    VARIABLE        shift and go to state 14
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    TRY             shift and go to state 21
    FUNCTION        shift and go to state 22
    RETURN          shift and go to state 24
    ID              shift and go to state 23
    EMPTY           shift and go to state 25
    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 16
    IF              shift and go to state 39
    WHILE           shift and go to state 41
    SWITCH          shift and go to state 42
    FOREACH         shift and go to state 43
    FOR             shift and go to state 45

    body                           shift and go to state 295
    sentenciaList                  shift and go to state 110
    empty                          shift and go to state 111
    sentencia                      shift and go to state 112
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    valor                          shift and go to state 15
    controlStructure               shift and go to state 19
    dataStructure                  shift and go to state 20
    operador_ternario              shift and go to state 32
    if                             shift and go to state 33
    for                            shift and go to state 34
    while                          shift and go to state 35
    switch                         shift and go to state 36
    foreach                        shift and go to state 37
    array                          shift and go to state 38
    forStatement                   shift and go to state 40
    map                            shift and go to state 44

state 293

    (87) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS .

    RPAREN          reduce using rule 87 (forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS .)


state 294

    (88) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS .

    RPAREN          reduce using rule 88 (forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS .)


state 295

    (60) else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body . RBRACE else_blocks

    RBRACE          shift and go to state 296


state 296

    (60) else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE . else_blocks
    (59) else_blocks -> . ELSE LBRACE body RBRACE
    (60) else_blocks -> . ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (61) else_blocks -> . empty
    (49) empty -> .

    ELSE            shift and go to state 257
    ELSEIF          shift and go to state 258
    VARIABLE        reduce using rule 49 (empty -> .)
    ECHO            reduce using rule 49 (empty -> .)
    PRINT           reduce using rule 49 (empty -> .)
    TRY             reduce using rule 49 (empty -> .)
    FUNCTION        reduce using rule 49 (empty -> .)
    RETURN          reduce using rule 49 (empty -> .)
    ID              reduce using rule 49 (empty -> .)
    EMPTY           reduce using rule 49 (empty -> .)
    INT             reduce using rule 49 (empty -> .)
    FLOAT           reduce using rule 49 (empty -> .)
    STRING          reduce using rule 49 (empty -> .)
    BOOL            reduce using rule 49 (empty -> .)
    NULL            reduce using rule 49 (empty -> .)
    ARRAY           reduce using rule 49 (empty -> .)
    LPAREN          reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    WHILE           reduce using rule 49 (empty -> .)
    SWITCH          reduce using rule 49 (empty -> .)
    FOREACH         reduce using rule 49 (empty -> .)
    FOR             reduce using rule 49 (empty -> .)
    CLOSETAG        reduce using rule 49 (empty -> .)
    RBRACE          reduce using rule 49 (empty -> .)
    BREAK           reduce using rule 49 (empty -> .)
    ENDSWITCH       reduce using rule 49 (empty -> .)
    CASE            reduce using rule 49 (empty -> .)
    DEFAULT         reduce using rule 49 (empty -> .)

    else_blocks                    shift and go to state 297
    empty                          shift and go to state 259

state 297

    (60) else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .

    VARIABLE        reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ECHO            reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PRINT           reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    TRY             reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FUNCTION        reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    RETURN          reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ID              reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    EMPTY           reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INT             reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FLOAT           reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    STRING          reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    BOOL            reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    NULL            reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ARRAY           reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    LPAREN          reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    IF              reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    WHILE           reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    SWITCH          reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FOREACH         reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FOR             reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CLOSETAG        reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    RBRACE          reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    BREAK           reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ENDSWITCH       reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CASE            reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    DEFAULT         reduce using rule 60 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 79 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 112 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 112 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 112 resolved as shift
WARNING: shift/reduce conflict for TRY in state 112 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 112 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 112 resolved as shift
WARNING: shift/reduce conflict for ID in state 112 resolved as shift
WARNING: shift/reduce conflict for EMPTY in state 112 resolved as shift
WARNING: shift/reduce conflict for INT in state 112 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 112 resolved as shift
WARNING: shift/reduce conflict for STRING in state 112 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 112 resolved as shift
WARNING: shift/reduce conflict for NULL in state 112 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 112 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 112 resolved as shift
WARNING: shift/reduce conflict for IF in state 112 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 112 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 112 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 112 resolved as shift
WARNING: shift/reduce conflict for FOR in state 112 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 163 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 167 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 168 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 168 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 168 resolved as shift
WARNING: shift/reduce conflict for TRY in state 168 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 168 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 168 resolved as shift
WARNING: shift/reduce conflict for ID in state 168 resolved as shift
WARNING: shift/reduce conflict for EMPTY in state 168 resolved as shift
WARNING: shift/reduce conflict for INT in state 168 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 168 resolved as shift
WARNING: shift/reduce conflict for STRING in state 168 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 168 resolved as shift
WARNING: shift/reduce conflict for NULL in state 168 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 168 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 168 resolved as shift
WARNING: shift/reduce conflict for IF in state 168 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 168 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 168 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 168 resolved as shift
WARNING: shift/reduce conflict for FOR in state 168 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 198 resolved as shift
WARNING: reduce/reduce conflict in state 106 resolved using rule (repiteValores -> valor)
WARNING: rejected rule (condition -> valor) in state 106
WARNING: reduce/reduce conflict in state 117 resolved using rule (valor -> VARIABLE)
WARNING: rejected rule (argumento -> VARIABLE) in state 117
WARNING: reduce/reduce conflict in state 153 resolved using rule (conditions -> LPAREN conditions RPAREN)
WARNING: rejected rule (condition -> LPAREN conditions RPAREN) in state 153
WARNING: Rule (argumento -> VARIABLE) is never reduced
