Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ARROW
    ARROWMAP
    AS
    CATCH
    CLASS
    CONCATENATEEQUAL
    CONST
    DO
    DOT
    EMPTY
    EXCEPTION
    EXTENDS
    FGETS
    FINAL
    FINALLY
    FN
    FOREACH
    IMPLEMENTS
    INCLUDE
    INSTANCEOF
    INTERFACE
    LBRACKET
    MINUSEQUAL
    NAMESPACE
    NEW
    OBJECT_TYPE
    PLUSEQUAL
    POTENCIA
    PRIVATE
    PROTECTED
    PUBLIC
    QUESTION
    RBRACKET
    STATIC
    STDIN
    THIS
    THROW
    TRY

Grammar

Rule 0     S' -> inicio
Rule 1     inicio -> OPENTAG programa CLOSETAG
Rule 2     programa -> sentencia
Rule 3     programa -> sentencia programa
Rule 4     sentencia -> asignacion
Rule 5     sentencia -> comparacion
Rule 6     sentencia -> impresion
Rule 7     sentencia -> estructurasPrograma
Rule 8     sentencia -> funcionDeclaration
Rule 9     sentencia -> returnStatement
Rule 10    sentencia -> llamadaFuncion
Rule 11    returnStatement -> RETURN valor SEMICOLON
Rule 12    returnStatement -> RETURN SEMICOLON
Rule 13    asignacion -> VARIABLE EQUALS operaArit SEMICOLON
Rule 14    operaArit -> valor
Rule 15    operaArit -> valor operador operaArit
Rule 16    valor -> INT
Rule 17    valor -> FLOAT
Rule 18    valor -> VARIABLE
Rule 19    valor -> STRING
Rule 20    valor -> BOOL
Rule 21    valor -> NULL
Rule 22    valor -> ARRAY
Rule 23    operador -> PLUS
Rule 24    operador -> MINUS
Rule 25    operador -> TIMES
Rule 26    operador -> DIVIDE
Rule 27    operador -> MODULO
Rule 28    comparacion -> valor comparador valor
Rule 29    comparador -> LT
Rule 30    comparador -> GT
Rule 31    comparador -> LEQ
Rule 32    comparador -> GEQ
Rule 33    impresion -> ECHO imprimir SEMICOLON
Rule 34    impresion -> PRINT imprimir SEMICOLON
Rule 35    imprimir -> LPAREN repiteValores RPAREN
Rule 36    imprimir -> LPAREN RPAREN
Rule 37    imprimir -> repiteValores
Rule 38    imprimir -> empty
Rule 39    repiteValores -> valor
Rule 40    repiteValores -> valor COMMA repiteValores
Rule 41    empty -> <empty>
Rule 42    estructurasPrograma -> controlStructure
Rule 43    controlStructure -> if
Rule 44    controlStructure -> for
Rule 45    controlStructure -> while
Rule 46    controlStructure -> switch
Rule 47    if -> IF LPAREN conditions RPAREN LBRACE body RBRACE
Rule 48    if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
Rule 49    if -> IF LPAREN conditions RPAREN body
Rule 50    else_blocks -> ELSE LBRACE body RBRACE
Rule 51    else_blocks -> ELSE COLON body
Rule 52    else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
Rule 53    else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks
Rule 54    conditions -> LPAREN condition RPAREN
Rule 55    conditions -> condition opLogic conditions
Rule 56    conditions -> unaryLogic condition
Rule 57    conditions -> condition
Rule 58    condition -> valor
Rule 59    condition -> valor opSymbol valor
Rule 60    condition -> operaArit opSymbol operaArit
Rule 61    opSymbol -> EQ
Rule 62    opSymbol -> NEQ
Rule 63    opSymbol -> STRICTEQ
Rule 64    opSymbol -> STRICTNEQ
Rule 65    opSymbol -> LT
Rule 66    opSymbol -> GT
Rule 67    opSymbol -> LEQ
Rule 68    opSymbol -> GEQ
Rule 69    opLogic -> AND
Rule 70    opLogic -> LOGICAL_AND
Rule 71    opLogic -> OR
Rule 72    opLogic -> LOGICAL_OR
Rule 73    unaryLogic -> NOT
Rule 74    unaryLogic -> LOGICAL_NOT
Rule 75    body -> sentenciaList
Rule 76    body -> sentencia
Rule 77    body -> empty
Rule 78    sentenciaList -> sentencia
Rule 79    sentenciaList -> sentencia sentenciaList
Rule 80    for -> forStatement
Rule 81    forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE
Rule 82    forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
Rule 83    forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS
Rule 84    while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE
Rule 85    while -> WHILE LPAREN condition RPAREN LBRACE RBRACE
Rule 86    switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
Rule 87    switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
Rule 88    caseLists -> cases
Rule 89    caseLists -> cases default
Rule 90    caseLists -> default
Rule 91    caseLists -> empty
Rule 92    cases -> case
Rule 93    cases -> case cases
Rule 94    case -> CASE valor COLON body BREAK SEMICOLON
Rule 95    case -> CASE valor SEMICOLON body BREAK SEMICOLON
Rule 96    case -> CASE valor COLON body
Rule 97    case -> CASE valor SEMICOLON
Rule 98    case -> CASE valor
Rule 99    default -> DEFAULT COLON body BREAK SEMICOLON
Rule 100   default -> DEFAULT SEMICOLON body BREAK SEMICOLON
Rule 101   default -> DEFAULT COLON body
Rule 102   default -> DEFAULT SEMICOLON body
Rule 103   default -> DEFAULT
Rule 104   argumentos -> argumento
Rule 105   argumentos -> argumento COMMA argumentos
Rule 106   argumentos -> empty
Rule 107   argumento -> VARIABLE
Rule 108   argumento -> type VARIABLE
Rule 109   argumento -> VARIABLE EQUALS valor
Rule 110   argumento -> type VARIABLE EQUALS valor
Rule 111   argumento -> operaArit
Rule 112   type -> INT_TYPE
Rule 113   type -> FLOAT_TYPE
Rule 114   type -> STRING_TYPE
Rule 115   type -> BOOL_TYPE
Rule 116   type -> ARRAY_TYPE
Rule 117   type -> VOID
Rule 118   funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
Rule 119   llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 69
ARRAY                : 22
ARRAY_TYPE           : 116
ARROW                : 
ARROWMAP             : 
AS                   : 
BOOL                 : 20
BOOL_TYPE            : 115
BREAK                : 94 95 99 100
CASE                 : 94 95 96 97 98
CATCH                : 
CLASS                : 
CLOSETAG             : 1
COLON                : 51 53 87 94 96 99 101
COMMA                : 40 105
CONCATENATEEQUAL     : 
CONST                : 
DEFAULT              : 99 100 101 102 103
DIVIDE               : 26
DO                   : 
DOT                  : 
DOUBLEMINUS          : 83
DOUBLEPLUS           : 82
ECHO                 : 33
ELSE                 : 50 51
ELSEIF               : 52 53
EMPTY                : 
ENDSWITCH            : 87
EQ                   : 61
EQUALS               : 13 82 83 109 110
EXCEPTION            : 
EXTENDS              : 
FGETS                : 
FINAL                : 
FINALLY              : 
FLOAT                : 17
FLOAT_TYPE           : 113
FN                   : 
FOR                  : 81
FOREACH              : 
FUNCTION             : 118
GEQ                  : 32 68
GT                   : 30 66
ID                   : 118 119
IF                   : 47 48 49
IMPLEMENTS           : 
INCLUDE              : 
INSTANCEOF           : 
INT                  : 16 82 82 83 83
INTERFACE            : 
INT_TYPE             : 112
LBRACE               : 47 48 50 52 81 84 85 86 118
LBRACKET             : 
LEQ                  : 31 67
LOGICAL_AND          : 70
LOGICAL_NOT          : 74
LOGICAL_OR           : 72
LPAREN               : 35 36 47 48 49 52 53 54 81 84 85 86 87 118 119
LT                   : 29 65
MINUS                : 24
MINUSEQUAL           : 
MODULO               : 27
NAMESPACE            : 
NEQ                  : 62
NEW                  : 
NOT                  : 73
NULL                 : 21
OBJECT_TYPE          : 
OPENTAG              : 1
OR                   : 71
PLUS                 : 23
PLUSEQUAL            : 
POTENCIA             : 
PRINT                : 34
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
QUESTION             : 
RBRACE               : 47 48 50 52 81 84 85 86 118
RBRACKET             : 
RETURN               : 11 12
RPAREN               : 35 36 47 48 49 52 53 54 81 84 85 86 87 118 119
SEMICOLON            : 11 12 13 33 34 82 82 83 83 87 94 95 95 97 99 100 100 102 119
STATIC               : 
STDIN                : 
STRICTEQ             : 63
STRICTNEQ            : 64
STRING               : 19
STRING_TYPE          : 114
SWITCH               : 86 87
THIS                 : 
THROW                : 
TIMES                : 25
TRY                  : 
VARIABLE             : 13 18 82 82 82 83 83 83 107 108 109 110
VOID                 : 117
WHILE                : 84 85
error                : 

Nonterminals, with rules where they appear

argumento            : 104 105
argumentos           : 105 118 119
asignacion           : 4
body                 : 47 48 49 50 51 52 53 81 84 94 95 96 99 100 101 102 118
case                 : 92 93
caseLists            : 86 87
cases                : 88 89 93
comparacion          : 5
comparador           : 28
condition            : 54 55 56 57 84 85
conditions           : 47 48 49 52 53 55
controlStructure     : 42
default              : 89 90
else_blocks          : 48 52 53
empty                : 38 77 91 106
estructurasPrograma  : 7
for                  : 44
forStatement         : 80
forcondition         : 81
funcionDeclaration   : 8
if                   : 43
impresion            : 6
imprimir             : 33 34
inicio               : 0
llamadaFuncion       : 10
opLogic              : 55
opSymbol             : 59 60 82 83
operaArit            : 13 15 60 60 111
operador             : 15
programa             : 1 3
repiteValores        : 35 37 40
returnStatement      : 9
sentencia            : 2 3 76 78 79
sentenciaList        : 75 79
switch               : 46
type                 : 108 110
unaryLogic           : 56
valor                : 11 14 15 28 28 39 40 58 59 59 86 87 94 95 96 97 98 109 110
while                : 45

Parsing method: LALR

state 0

    (0) S' -> . inicio
    (1) inicio -> . OPENTAG programa CLOSETAG

    OPENTAG         shift and go to state 2

    inicio                         shift and go to state 1

state 1

    (0) S' -> inicio .



state 2

    (1) inicio -> OPENTAG . programa CLOSETAG
    (2) programa -> . sentencia
    (3) programa -> . sentencia programa
    (4) sentencia -> . asignacion
    (5) sentencia -> . comparacion
    (6) sentencia -> . impresion
    (7) sentencia -> . estructurasPrograma
    (8) sentencia -> . funcionDeclaration
    (9) sentencia -> . returnStatement
    (10) sentencia -> . llamadaFuncion
    (13) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) comparacion -> . valor comparador valor
    (33) impresion -> . ECHO imprimir SEMICOLON
    (34) impresion -> . PRINT imprimir SEMICOLON
    (42) estructurasPrograma -> . controlStructure
    (118) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (11) returnStatement -> . RETURN valor SEMICOLON
    (12) returnStatement -> . RETURN SEMICOLON
    (119) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (43) controlStructure -> . if
    (44) controlStructure -> . for
    (45) controlStructure -> . while
    (46) controlStructure -> . switch
    (47) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE
    (48) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (49) if -> . IF LPAREN conditions RPAREN body
    (80) for -> . forStatement
    (84) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (85) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (86) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (87) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (81) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE

    VARIABLE        shift and go to state 12
    ECHO            shift and go to state 14
    PRINT           shift and go to state 15
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 19
    ID              shift and go to state 18
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    SWITCH          shift and go to state 33
    FOR             shift and go to state 34

    programa                       shift and go to state 3
    sentencia                      shift and go to state 4
    asignacion                     shift and go to state 5
    comparacion                    shift and go to state 6
    impresion                      shift and go to state 7
    estructurasPrograma            shift and go to state 8
    funcionDeclaration             shift and go to state 9
    returnStatement                shift and go to state 10
    llamadaFuncion                 shift and go to state 11
    valor                          shift and go to state 13
    controlStructure               shift and go to state 16
    if                             shift and go to state 26
    for                            shift and go to state 27
    while                          shift and go to state 28
    switch                         shift and go to state 29
    forStatement                   shift and go to state 31

state 3

    (1) inicio -> OPENTAG programa . CLOSETAG

    CLOSETAG        shift and go to state 35


state 4

    (2) programa -> sentencia .
    (3) programa -> sentencia . programa
    (2) programa -> . sentencia
    (3) programa -> . sentencia programa
    (4) sentencia -> . asignacion
    (5) sentencia -> . comparacion
    (6) sentencia -> . impresion
    (7) sentencia -> . estructurasPrograma
    (8) sentencia -> . funcionDeclaration
    (9) sentencia -> . returnStatement
    (10) sentencia -> . llamadaFuncion
    (13) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) comparacion -> . valor comparador valor
    (33) impresion -> . ECHO imprimir SEMICOLON
    (34) impresion -> . PRINT imprimir SEMICOLON
    (42) estructurasPrograma -> . controlStructure
    (118) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (11) returnStatement -> . RETURN valor SEMICOLON
    (12) returnStatement -> . RETURN SEMICOLON
    (119) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (43) controlStructure -> . if
    (44) controlStructure -> . for
    (45) controlStructure -> . while
    (46) controlStructure -> . switch
    (47) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE
    (48) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (49) if -> . IF LPAREN conditions RPAREN body
    (80) for -> . forStatement
    (84) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (85) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (86) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (87) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (81) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE

    CLOSETAG        reduce using rule 2 (programa -> sentencia .)
    VARIABLE        shift and go to state 12
    ECHO            shift and go to state 14
    PRINT           shift and go to state 15
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 19
    ID              shift and go to state 18
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    SWITCH          shift and go to state 33
    FOR             shift and go to state 34

    sentencia                      shift and go to state 4
    programa                       shift and go to state 36
    asignacion                     shift and go to state 5
    comparacion                    shift and go to state 6
    impresion                      shift and go to state 7
    estructurasPrograma            shift and go to state 8
    funcionDeclaration             shift and go to state 9
    returnStatement                shift and go to state 10
    llamadaFuncion                 shift and go to state 11
    valor                          shift and go to state 13
    controlStructure               shift and go to state 16
    if                             shift and go to state 26
    for                            shift and go to state 27
    while                          shift and go to state 28
    switch                         shift and go to state 29
    forStatement                   shift and go to state 31

state 5

    (4) sentencia -> asignacion .

    VARIABLE        reduce using rule 4 (sentencia -> asignacion .)
    ECHO            reduce using rule 4 (sentencia -> asignacion .)
    PRINT           reduce using rule 4 (sentencia -> asignacion .)
    FUNCTION        reduce using rule 4 (sentencia -> asignacion .)
    RETURN          reduce using rule 4 (sentencia -> asignacion .)
    ID              reduce using rule 4 (sentencia -> asignacion .)
    INT             reduce using rule 4 (sentencia -> asignacion .)
    FLOAT           reduce using rule 4 (sentencia -> asignacion .)
    STRING          reduce using rule 4 (sentencia -> asignacion .)
    BOOL            reduce using rule 4 (sentencia -> asignacion .)
    NULL            reduce using rule 4 (sentencia -> asignacion .)
    ARRAY           reduce using rule 4 (sentencia -> asignacion .)
    IF              reduce using rule 4 (sentencia -> asignacion .)
    WHILE           reduce using rule 4 (sentencia -> asignacion .)
    SWITCH          reduce using rule 4 (sentencia -> asignacion .)
    FOR             reduce using rule 4 (sentencia -> asignacion .)
    CLOSETAG        reduce using rule 4 (sentencia -> asignacion .)
    RBRACE          reduce using rule 4 (sentencia -> asignacion .)
    BREAK           reduce using rule 4 (sentencia -> asignacion .)
    ENDSWITCH       reduce using rule 4 (sentencia -> asignacion .)
    CASE            reduce using rule 4 (sentencia -> asignacion .)
    DEFAULT         reduce using rule 4 (sentencia -> asignacion .)
    ELSE            reduce using rule 4 (sentencia -> asignacion .)
    ELSEIF          reduce using rule 4 (sentencia -> asignacion .)


state 6

    (5) sentencia -> comparacion .

    VARIABLE        reduce using rule 5 (sentencia -> comparacion .)
    ECHO            reduce using rule 5 (sentencia -> comparacion .)
    PRINT           reduce using rule 5 (sentencia -> comparacion .)
    FUNCTION        reduce using rule 5 (sentencia -> comparacion .)
    RETURN          reduce using rule 5 (sentencia -> comparacion .)
    ID              reduce using rule 5 (sentencia -> comparacion .)
    INT             reduce using rule 5 (sentencia -> comparacion .)
    FLOAT           reduce using rule 5 (sentencia -> comparacion .)
    STRING          reduce using rule 5 (sentencia -> comparacion .)
    BOOL            reduce using rule 5 (sentencia -> comparacion .)
    NULL            reduce using rule 5 (sentencia -> comparacion .)
    ARRAY           reduce using rule 5 (sentencia -> comparacion .)
    IF              reduce using rule 5 (sentencia -> comparacion .)
    WHILE           reduce using rule 5 (sentencia -> comparacion .)
    SWITCH          reduce using rule 5 (sentencia -> comparacion .)
    FOR             reduce using rule 5 (sentencia -> comparacion .)
    CLOSETAG        reduce using rule 5 (sentencia -> comparacion .)
    RBRACE          reduce using rule 5 (sentencia -> comparacion .)
    BREAK           reduce using rule 5 (sentencia -> comparacion .)
    ENDSWITCH       reduce using rule 5 (sentencia -> comparacion .)
    CASE            reduce using rule 5 (sentencia -> comparacion .)
    DEFAULT         reduce using rule 5 (sentencia -> comparacion .)
    ELSE            reduce using rule 5 (sentencia -> comparacion .)
    ELSEIF          reduce using rule 5 (sentencia -> comparacion .)


state 7

    (6) sentencia -> impresion .

    VARIABLE        reduce using rule 6 (sentencia -> impresion .)
    ECHO            reduce using rule 6 (sentencia -> impresion .)
    PRINT           reduce using rule 6 (sentencia -> impresion .)
    FUNCTION        reduce using rule 6 (sentencia -> impresion .)
    RETURN          reduce using rule 6 (sentencia -> impresion .)
    ID              reduce using rule 6 (sentencia -> impresion .)
    INT             reduce using rule 6 (sentencia -> impresion .)
    FLOAT           reduce using rule 6 (sentencia -> impresion .)
    STRING          reduce using rule 6 (sentencia -> impresion .)
    BOOL            reduce using rule 6 (sentencia -> impresion .)
    NULL            reduce using rule 6 (sentencia -> impresion .)
    ARRAY           reduce using rule 6 (sentencia -> impresion .)
    IF              reduce using rule 6 (sentencia -> impresion .)
    WHILE           reduce using rule 6 (sentencia -> impresion .)
    SWITCH          reduce using rule 6 (sentencia -> impresion .)
    FOR             reduce using rule 6 (sentencia -> impresion .)
    CLOSETAG        reduce using rule 6 (sentencia -> impresion .)
    RBRACE          reduce using rule 6 (sentencia -> impresion .)
    BREAK           reduce using rule 6 (sentencia -> impresion .)
    ENDSWITCH       reduce using rule 6 (sentencia -> impresion .)
    CASE            reduce using rule 6 (sentencia -> impresion .)
    DEFAULT         reduce using rule 6 (sentencia -> impresion .)
    ELSE            reduce using rule 6 (sentencia -> impresion .)
    ELSEIF          reduce using rule 6 (sentencia -> impresion .)


state 8

    (7) sentencia -> estructurasPrograma .

    VARIABLE        reduce using rule 7 (sentencia -> estructurasPrograma .)
    ECHO            reduce using rule 7 (sentencia -> estructurasPrograma .)
    PRINT           reduce using rule 7 (sentencia -> estructurasPrograma .)
    FUNCTION        reduce using rule 7 (sentencia -> estructurasPrograma .)
    RETURN          reduce using rule 7 (sentencia -> estructurasPrograma .)
    ID              reduce using rule 7 (sentencia -> estructurasPrograma .)
    INT             reduce using rule 7 (sentencia -> estructurasPrograma .)
    FLOAT           reduce using rule 7 (sentencia -> estructurasPrograma .)
    STRING          reduce using rule 7 (sentencia -> estructurasPrograma .)
    BOOL            reduce using rule 7 (sentencia -> estructurasPrograma .)
    NULL            reduce using rule 7 (sentencia -> estructurasPrograma .)
    ARRAY           reduce using rule 7 (sentencia -> estructurasPrograma .)
    IF              reduce using rule 7 (sentencia -> estructurasPrograma .)
    WHILE           reduce using rule 7 (sentencia -> estructurasPrograma .)
    SWITCH          reduce using rule 7 (sentencia -> estructurasPrograma .)
    FOR             reduce using rule 7 (sentencia -> estructurasPrograma .)
    CLOSETAG        reduce using rule 7 (sentencia -> estructurasPrograma .)
    RBRACE          reduce using rule 7 (sentencia -> estructurasPrograma .)
    BREAK           reduce using rule 7 (sentencia -> estructurasPrograma .)
    ENDSWITCH       reduce using rule 7 (sentencia -> estructurasPrograma .)
    CASE            reduce using rule 7 (sentencia -> estructurasPrograma .)
    DEFAULT         reduce using rule 7 (sentencia -> estructurasPrograma .)
    ELSE            reduce using rule 7 (sentencia -> estructurasPrograma .)
    ELSEIF          reduce using rule 7 (sentencia -> estructurasPrograma .)


state 9

    (8) sentencia -> funcionDeclaration .

    VARIABLE        reduce using rule 8 (sentencia -> funcionDeclaration .)
    ECHO            reduce using rule 8 (sentencia -> funcionDeclaration .)
    PRINT           reduce using rule 8 (sentencia -> funcionDeclaration .)
    FUNCTION        reduce using rule 8 (sentencia -> funcionDeclaration .)
    RETURN          reduce using rule 8 (sentencia -> funcionDeclaration .)
    ID              reduce using rule 8 (sentencia -> funcionDeclaration .)
    INT             reduce using rule 8 (sentencia -> funcionDeclaration .)
    FLOAT           reduce using rule 8 (sentencia -> funcionDeclaration .)
    STRING          reduce using rule 8 (sentencia -> funcionDeclaration .)
    BOOL            reduce using rule 8 (sentencia -> funcionDeclaration .)
    NULL            reduce using rule 8 (sentencia -> funcionDeclaration .)
    ARRAY           reduce using rule 8 (sentencia -> funcionDeclaration .)
    IF              reduce using rule 8 (sentencia -> funcionDeclaration .)
    WHILE           reduce using rule 8 (sentencia -> funcionDeclaration .)
    SWITCH          reduce using rule 8 (sentencia -> funcionDeclaration .)
    FOR             reduce using rule 8 (sentencia -> funcionDeclaration .)
    CLOSETAG        reduce using rule 8 (sentencia -> funcionDeclaration .)
    RBRACE          reduce using rule 8 (sentencia -> funcionDeclaration .)
    BREAK           reduce using rule 8 (sentencia -> funcionDeclaration .)
    ENDSWITCH       reduce using rule 8 (sentencia -> funcionDeclaration .)
    CASE            reduce using rule 8 (sentencia -> funcionDeclaration .)
    DEFAULT         reduce using rule 8 (sentencia -> funcionDeclaration .)
    ELSE            reduce using rule 8 (sentencia -> funcionDeclaration .)
    ELSEIF          reduce using rule 8 (sentencia -> funcionDeclaration .)


state 10

    (9) sentencia -> returnStatement .

    VARIABLE        reduce using rule 9 (sentencia -> returnStatement .)
    ECHO            reduce using rule 9 (sentencia -> returnStatement .)
    PRINT           reduce using rule 9 (sentencia -> returnStatement .)
    FUNCTION        reduce using rule 9 (sentencia -> returnStatement .)
    RETURN          reduce using rule 9 (sentencia -> returnStatement .)
    ID              reduce using rule 9 (sentencia -> returnStatement .)
    INT             reduce using rule 9 (sentencia -> returnStatement .)
    FLOAT           reduce using rule 9 (sentencia -> returnStatement .)
    STRING          reduce using rule 9 (sentencia -> returnStatement .)
    BOOL            reduce using rule 9 (sentencia -> returnStatement .)
    NULL            reduce using rule 9 (sentencia -> returnStatement .)
    ARRAY           reduce using rule 9 (sentencia -> returnStatement .)
    IF              reduce using rule 9 (sentencia -> returnStatement .)
    WHILE           reduce using rule 9 (sentencia -> returnStatement .)
    SWITCH          reduce using rule 9 (sentencia -> returnStatement .)
    FOR             reduce using rule 9 (sentencia -> returnStatement .)
    CLOSETAG        reduce using rule 9 (sentencia -> returnStatement .)
    RBRACE          reduce using rule 9 (sentencia -> returnStatement .)
    BREAK           reduce using rule 9 (sentencia -> returnStatement .)
    ENDSWITCH       reduce using rule 9 (sentencia -> returnStatement .)
    CASE            reduce using rule 9 (sentencia -> returnStatement .)
    DEFAULT         reduce using rule 9 (sentencia -> returnStatement .)
    ELSE            reduce using rule 9 (sentencia -> returnStatement .)
    ELSEIF          reduce using rule 9 (sentencia -> returnStatement .)


state 11

    (10) sentencia -> llamadaFuncion .

    VARIABLE        reduce using rule 10 (sentencia -> llamadaFuncion .)
    ECHO            reduce using rule 10 (sentencia -> llamadaFuncion .)
    PRINT           reduce using rule 10 (sentencia -> llamadaFuncion .)
    FUNCTION        reduce using rule 10 (sentencia -> llamadaFuncion .)
    RETURN          reduce using rule 10 (sentencia -> llamadaFuncion .)
    ID              reduce using rule 10 (sentencia -> llamadaFuncion .)
    INT             reduce using rule 10 (sentencia -> llamadaFuncion .)
    FLOAT           reduce using rule 10 (sentencia -> llamadaFuncion .)
    STRING          reduce using rule 10 (sentencia -> llamadaFuncion .)
    BOOL            reduce using rule 10 (sentencia -> llamadaFuncion .)
    NULL            reduce using rule 10 (sentencia -> llamadaFuncion .)
    ARRAY           reduce using rule 10 (sentencia -> llamadaFuncion .)
    IF              reduce using rule 10 (sentencia -> llamadaFuncion .)
    WHILE           reduce using rule 10 (sentencia -> llamadaFuncion .)
    SWITCH          reduce using rule 10 (sentencia -> llamadaFuncion .)
    FOR             reduce using rule 10 (sentencia -> llamadaFuncion .)
    CLOSETAG        reduce using rule 10 (sentencia -> llamadaFuncion .)
    RBRACE          reduce using rule 10 (sentencia -> llamadaFuncion .)
    BREAK           reduce using rule 10 (sentencia -> llamadaFuncion .)
    ENDSWITCH       reduce using rule 10 (sentencia -> llamadaFuncion .)
    CASE            reduce using rule 10 (sentencia -> llamadaFuncion .)
    DEFAULT         reduce using rule 10 (sentencia -> llamadaFuncion .)
    ELSE            reduce using rule 10 (sentencia -> llamadaFuncion .)
    ELSEIF          reduce using rule 10 (sentencia -> llamadaFuncion .)


state 12

    (13) asignacion -> VARIABLE . EQUALS operaArit SEMICOLON
    (18) valor -> VARIABLE .

    EQUALS          shift and go to state 37
    LT              reduce using rule 18 (valor -> VARIABLE .)
    GT              reduce using rule 18 (valor -> VARIABLE .)
    LEQ             reduce using rule 18 (valor -> VARIABLE .)
    GEQ             reduce using rule 18 (valor -> VARIABLE .)


state 13

    (28) comparacion -> valor . comparador valor
    (29) comparador -> . LT
    (30) comparador -> . GT
    (31) comparador -> . LEQ
    (32) comparador -> . GEQ

    LT              shift and go to state 39
    GT              shift and go to state 40
    LEQ             shift and go to state 41
    GEQ             shift and go to state 42

    comparador                     shift and go to state 38

state 14

    (33) impresion -> ECHO . imprimir SEMICOLON
    (35) imprimir -> . LPAREN repiteValores RPAREN
    (36) imprimir -> . LPAREN RPAREN
    (37) imprimir -> . repiteValores
    (38) imprimir -> . empty
    (39) repiteValores -> . valor
    (40) repiteValores -> . valor COMMA repiteValores
    (41) empty -> .
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY

    LPAREN          shift and go to state 44
    SEMICOLON       reduce using rule 41 (empty -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    VARIABLE        shift and go to state 48
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    imprimir                       shift and go to state 43
    repiteValores                  shift and go to state 45
    empty                          shift and go to state 46
    valor                          shift and go to state 47

state 15

    (34) impresion -> PRINT . imprimir SEMICOLON
    (35) imprimir -> . LPAREN repiteValores RPAREN
    (36) imprimir -> . LPAREN RPAREN
    (37) imprimir -> . repiteValores
    (38) imprimir -> . empty
    (39) repiteValores -> . valor
    (40) repiteValores -> . valor COMMA repiteValores
    (41) empty -> .
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY

    LPAREN          shift and go to state 44
    SEMICOLON       reduce using rule 41 (empty -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    VARIABLE        shift and go to state 48
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    imprimir                       shift and go to state 49
    repiteValores                  shift and go to state 45
    empty                          shift and go to state 46
    valor                          shift and go to state 47

state 16

    (42) estructurasPrograma -> controlStructure .

    VARIABLE        reduce using rule 42 (estructurasPrograma -> controlStructure .)
    ECHO            reduce using rule 42 (estructurasPrograma -> controlStructure .)
    PRINT           reduce using rule 42 (estructurasPrograma -> controlStructure .)
    FUNCTION        reduce using rule 42 (estructurasPrograma -> controlStructure .)
    RETURN          reduce using rule 42 (estructurasPrograma -> controlStructure .)
    ID              reduce using rule 42 (estructurasPrograma -> controlStructure .)
    INT             reduce using rule 42 (estructurasPrograma -> controlStructure .)
    FLOAT           reduce using rule 42 (estructurasPrograma -> controlStructure .)
    STRING          reduce using rule 42 (estructurasPrograma -> controlStructure .)
    BOOL            reduce using rule 42 (estructurasPrograma -> controlStructure .)
    NULL            reduce using rule 42 (estructurasPrograma -> controlStructure .)
    ARRAY           reduce using rule 42 (estructurasPrograma -> controlStructure .)
    IF              reduce using rule 42 (estructurasPrograma -> controlStructure .)
    WHILE           reduce using rule 42 (estructurasPrograma -> controlStructure .)
    SWITCH          reduce using rule 42 (estructurasPrograma -> controlStructure .)
    FOR             reduce using rule 42 (estructurasPrograma -> controlStructure .)
    CLOSETAG        reduce using rule 42 (estructurasPrograma -> controlStructure .)
    RBRACE          reduce using rule 42 (estructurasPrograma -> controlStructure .)
    BREAK           reduce using rule 42 (estructurasPrograma -> controlStructure .)
    ENDSWITCH       reduce using rule 42 (estructurasPrograma -> controlStructure .)
    CASE            reduce using rule 42 (estructurasPrograma -> controlStructure .)
    DEFAULT         reduce using rule 42 (estructurasPrograma -> controlStructure .)
    ELSE            reduce using rule 42 (estructurasPrograma -> controlStructure .)
    ELSEIF          reduce using rule 42 (estructurasPrograma -> controlStructure .)


state 17

    (118) funcionDeclaration -> FUNCTION . ID LPAREN argumentos RPAREN LBRACE body RBRACE

    ID              shift and go to state 50


state 18

    (119) llamadaFuncion -> ID . LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 51


state 19

    (11) returnStatement -> RETURN . valor SEMICOLON
    (12) returnStatement -> RETURN . SEMICOLON
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY

    SEMICOLON       shift and go to state 53
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    VARIABLE        shift and go to state 48
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    valor                          shift and go to state 52

state 20

    (16) valor -> INT .

    LT              reduce using rule 16 (valor -> INT .)
    GT              reduce using rule 16 (valor -> INT .)
    LEQ             reduce using rule 16 (valor -> INT .)
    GEQ             reduce using rule 16 (valor -> INT .)
    COMMA           reduce using rule 16 (valor -> INT .)
    SEMICOLON       reduce using rule 16 (valor -> INT .)
    PLUS            reduce using rule 16 (valor -> INT .)
    MINUS           reduce using rule 16 (valor -> INT .)
    TIMES           reduce using rule 16 (valor -> INT .)
    DIVIDE          reduce using rule 16 (valor -> INT .)
    MODULO          reduce using rule 16 (valor -> INT .)
    VARIABLE        reduce using rule 16 (valor -> INT .)
    ECHO            reduce using rule 16 (valor -> INT .)
    PRINT           reduce using rule 16 (valor -> INT .)
    FUNCTION        reduce using rule 16 (valor -> INT .)
    RETURN          reduce using rule 16 (valor -> INT .)
    ID              reduce using rule 16 (valor -> INT .)
    INT             reduce using rule 16 (valor -> INT .)
    FLOAT           reduce using rule 16 (valor -> INT .)
    STRING          reduce using rule 16 (valor -> INT .)
    BOOL            reduce using rule 16 (valor -> INT .)
    NULL            reduce using rule 16 (valor -> INT .)
    ARRAY           reduce using rule 16 (valor -> INT .)
    IF              reduce using rule 16 (valor -> INT .)
    WHILE           reduce using rule 16 (valor -> INT .)
    SWITCH          reduce using rule 16 (valor -> INT .)
    FOR             reduce using rule 16 (valor -> INT .)
    CLOSETAG        reduce using rule 16 (valor -> INT .)
    RBRACE          reduce using rule 16 (valor -> INT .)
    BREAK           reduce using rule 16 (valor -> INT .)
    ENDSWITCH       reduce using rule 16 (valor -> INT .)
    CASE            reduce using rule 16 (valor -> INT .)
    DEFAULT         reduce using rule 16 (valor -> INT .)
    ELSE            reduce using rule 16 (valor -> INT .)
    ELSEIF          reduce using rule 16 (valor -> INT .)
    RPAREN          reduce using rule 16 (valor -> INT .)
    EQ              reduce using rule 16 (valor -> INT .)
    NEQ             reduce using rule 16 (valor -> INT .)
    STRICTEQ        reduce using rule 16 (valor -> INT .)
    STRICTNEQ       reduce using rule 16 (valor -> INT .)
    AND             reduce using rule 16 (valor -> INT .)
    LOGICAL_AND     reduce using rule 16 (valor -> INT .)
    OR              reduce using rule 16 (valor -> INT .)
    LOGICAL_OR      reduce using rule 16 (valor -> INT .)
    COLON           reduce using rule 16 (valor -> INT .)


state 21

    (17) valor -> FLOAT .

    LT              reduce using rule 17 (valor -> FLOAT .)
    GT              reduce using rule 17 (valor -> FLOAT .)
    LEQ             reduce using rule 17 (valor -> FLOAT .)
    GEQ             reduce using rule 17 (valor -> FLOAT .)
    COMMA           reduce using rule 17 (valor -> FLOAT .)
    SEMICOLON       reduce using rule 17 (valor -> FLOAT .)
    PLUS            reduce using rule 17 (valor -> FLOAT .)
    MINUS           reduce using rule 17 (valor -> FLOAT .)
    TIMES           reduce using rule 17 (valor -> FLOAT .)
    DIVIDE          reduce using rule 17 (valor -> FLOAT .)
    MODULO          reduce using rule 17 (valor -> FLOAT .)
    VARIABLE        reduce using rule 17 (valor -> FLOAT .)
    ECHO            reduce using rule 17 (valor -> FLOAT .)
    PRINT           reduce using rule 17 (valor -> FLOAT .)
    FUNCTION        reduce using rule 17 (valor -> FLOAT .)
    RETURN          reduce using rule 17 (valor -> FLOAT .)
    ID              reduce using rule 17 (valor -> FLOAT .)
    INT             reduce using rule 17 (valor -> FLOAT .)
    FLOAT           reduce using rule 17 (valor -> FLOAT .)
    STRING          reduce using rule 17 (valor -> FLOAT .)
    BOOL            reduce using rule 17 (valor -> FLOAT .)
    NULL            reduce using rule 17 (valor -> FLOAT .)
    ARRAY           reduce using rule 17 (valor -> FLOAT .)
    IF              reduce using rule 17 (valor -> FLOAT .)
    WHILE           reduce using rule 17 (valor -> FLOAT .)
    SWITCH          reduce using rule 17 (valor -> FLOAT .)
    FOR             reduce using rule 17 (valor -> FLOAT .)
    CLOSETAG        reduce using rule 17 (valor -> FLOAT .)
    RBRACE          reduce using rule 17 (valor -> FLOAT .)
    BREAK           reduce using rule 17 (valor -> FLOAT .)
    ENDSWITCH       reduce using rule 17 (valor -> FLOAT .)
    CASE            reduce using rule 17 (valor -> FLOAT .)
    DEFAULT         reduce using rule 17 (valor -> FLOAT .)
    ELSE            reduce using rule 17 (valor -> FLOAT .)
    ELSEIF          reduce using rule 17 (valor -> FLOAT .)
    RPAREN          reduce using rule 17 (valor -> FLOAT .)
    EQ              reduce using rule 17 (valor -> FLOAT .)
    NEQ             reduce using rule 17 (valor -> FLOAT .)
    STRICTEQ        reduce using rule 17 (valor -> FLOAT .)
    STRICTNEQ       reduce using rule 17 (valor -> FLOAT .)
    AND             reduce using rule 17 (valor -> FLOAT .)
    LOGICAL_AND     reduce using rule 17 (valor -> FLOAT .)
    OR              reduce using rule 17 (valor -> FLOAT .)
    LOGICAL_OR      reduce using rule 17 (valor -> FLOAT .)
    COLON           reduce using rule 17 (valor -> FLOAT .)


state 22

    (19) valor -> STRING .

    LT              reduce using rule 19 (valor -> STRING .)
    GT              reduce using rule 19 (valor -> STRING .)
    LEQ             reduce using rule 19 (valor -> STRING .)
    GEQ             reduce using rule 19 (valor -> STRING .)
    COMMA           reduce using rule 19 (valor -> STRING .)
    SEMICOLON       reduce using rule 19 (valor -> STRING .)
    PLUS            reduce using rule 19 (valor -> STRING .)
    MINUS           reduce using rule 19 (valor -> STRING .)
    TIMES           reduce using rule 19 (valor -> STRING .)
    DIVIDE          reduce using rule 19 (valor -> STRING .)
    MODULO          reduce using rule 19 (valor -> STRING .)
    VARIABLE        reduce using rule 19 (valor -> STRING .)
    ECHO            reduce using rule 19 (valor -> STRING .)
    PRINT           reduce using rule 19 (valor -> STRING .)
    FUNCTION        reduce using rule 19 (valor -> STRING .)
    RETURN          reduce using rule 19 (valor -> STRING .)
    ID              reduce using rule 19 (valor -> STRING .)
    INT             reduce using rule 19 (valor -> STRING .)
    FLOAT           reduce using rule 19 (valor -> STRING .)
    STRING          reduce using rule 19 (valor -> STRING .)
    BOOL            reduce using rule 19 (valor -> STRING .)
    NULL            reduce using rule 19 (valor -> STRING .)
    ARRAY           reduce using rule 19 (valor -> STRING .)
    IF              reduce using rule 19 (valor -> STRING .)
    WHILE           reduce using rule 19 (valor -> STRING .)
    SWITCH          reduce using rule 19 (valor -> STRING .)
    FOR             reduce using rule 19 (valor -> STRING .)
    CLOSETAG        reduce using rule 19 (valor -> STRING .)
    RBRACE          reduce using rule 19 (valor -> STRING .)
    BREAK           reduce using rule 19 (valor -> STRING .)
    ENDSWITCH       reduce using rule 19 (valor -> STRING .)
    CASE            reduce using rule 19 (valor -> STRING .)
    DEFAULT         reduce using rule 19 (valor -> STRING .)
    ELSE            reduce using rule 19 (valor -> STRING .)
    ELSEIF          reduce using rule 19 (valor -> STRING .)
    RPAREN          reduce using rule 19 (valor -> STRING .)
    EQ              reduce using rule 19 (valor -> STRING .)
    NEQ             reduce using rule 19 (valor -> STRING .)
    STRICTEQ        reduce using rule 19 (valor -> STRING .)
    STRICTNEQ       reduce using rule 19 (valor -> STRING .)
    AND             reduce using rule 19 (valor -> STRING .)
    LOGICAL_AND     reduce using rule 19 (valor -> STRING .)
    OR              reduce using rule 19 (valor -> STRING .)
    LOGICAL_OR      reduce using rule 19 (valor -> STRING .)
    COLON           reduce using rule 19 (valor -> STRING .)


state 23

    (20) valor -> BOOL .

    LT              reduce using rule 20 (valor -> BOOL .)
    GT              reduce using rule 20 (valor -> BOOL .)
    LEQ             reduce using rule 20 (valor -> BOOL .)
    GEQ             reduce using rule 20 (valor -> BOOL .)
    COMMA           reduce using rule 20 (valor -> BOOL .)
    SEMICOLON       reduce using rule 20 (valor -> BOOL .)
    PLUS            reduce using rule 20 (valor -> BOOL .)
    MINUS           reduce using rule 20 (valor -> BOOL .)
    TIMES           reduce using rule 20 (valor -> BOOL .)
    DIVIDE          reduce using rule 20 (valor -> BOOL .)
    MODULO          reduce using rule 20 (valor -> BOOL .)
    VARIABLE        reduce using rule 20 (valor -> BOOL .)
    ECHO            reduce using rule 20 (valor -> BOOL .)
    PRINT           reduce using rule 20 (valor -> BOOL .)
    FUNCTION        reduce using rule 20 (valor -> BOOL .)
    RETURN          reduce using rule 20 (valor -> BOOL .)
    ID              reduce using rule 20 (valor -> BOOL .)
    INT             reduce using rule 20 (valor -> BOOL .)
    FLOAT           reduce using rule 20 (valor -> BOOL .)
    STRING          reduce using rule 20 (valor -> BOOL .)
    BOOL            reduce using rule 20 (valor -> BOOL .)
    NULL            reduce using rule 20 (valor -> BOOL .)
    ARRAY           reduce using rule 20 (valor -> BOOL .)
    IF              reduce using rule 20 (valor -> BOOL .)
    WHILE           reduce using rule 20 (valor -> BOOL .)
    SWITCH          reduce using rule 20 (valor -> BOOL .)
    FOR             reduce using rule 20 (valor -> BOOL .)
    CLOSETAG        reduce using rule 20 (valor -> BOOL .)
    RBRACE          reduce using rule 20 (valor -> BOOL .)
    BREAK           reduce using rule 20 (valor -> BOOL .)
    ENDSWITCH       reduce using rule 20 (valor -> BOOL .)
    CASE            reduce using rule 20 (valor -> BOOL .)
    DEFAULT         reduce using rule 20 (valor -> BOOL .)
    ELSE            reduce using rule 20 (valor -> BOOL .)
    ELSEIF          reduce using rule 20 (valor -> BOOL .)
    RPAREN          reduce using rule 20 (valor -> BOOL .)
    EQ              reduce using rule 20 (valor -> BOOL .)
    NEQ             reduce using rule 20 (valor -> BOOL .)
    STRICTEQ        reduce using rule 20 (valor -> BOOL .)
    STRICTNEQ       reduce using rule 20 (valor -> BOOL .)
    AND             reduce using rule 20 (valor -> BOOL .)
    LOGICAL_AND     reduce using rule 20 (valor -> BOOL .)
    OR              reduce using rule 20 (valor -> BOOL .)
    LOGICAL_OR      reduce using rule 20 (valor -> BOOL .)
    COLON           reduce using rule 20 (valor -> BOOL .)


state 24

    (21) valor -> NULL .

    LT              reduce using rule 21 (valor -> NULL .)
    GT              reduce using rule 21 (valor -> NULL .)
    LEQ             reduce using rule 21 (valor -> NULL .)
    GEQ             reduce using rule 21 (valor -> NULL .)
    COMMA           reduce using rule 21 (valor -> NULL .)
    SEMICOLON       reduce using rule 21 (valor -> NULL .)
    PLUS            reduce using rule 21 (valor -> NULL .)
    MINUS           reduce using rule 21 (valor -> NULL .)
    TIMES           reduce using rule 21 (valor -> NULL .)
    DIVIDE          reduce using rule 21 (valor -> NULL .)
    MODULO          reduce using rule 21 (valor -> NULL .)
    VARIABLE        reduce using rule 21 (valor -> NULL .)
    ECHO            reduce using rule 21 (valor -> NULL .)
    PRINT           reduce using rule 21 (valor -> NULL .)
    FUNCTION        reduce using rule 21 (valor -> NULL .)
    RETURN          reduce using rule 21 (valor -> NULL .)
    ID              reduce using rule 21 (valor -> NULL .)
    INT             reduce using rule 21 (valor -> NULL .)
    FLOAT           reduce using rule 21 (valor -> NULL .)
    STRING          reduce using rule 21 (valor -> NULL .)
    BOOL            reduce using rule 21 (valor -> NULL .)
    NULL            reduce using rule 21 (valor -> NULL .)
    ARRAY           reduce using rule 21 (valor -> NULL .)
    IF              reduce using rule 21 (valor -> NULL .)
    WHILE           reduce using rule 21 (valor -> NULL .)
    SWITCH          reduce using rule 21 (valor -> NULL .)
    FOR             reduce using rule 21 (valor -> NULL .)
    CLOSETAG        reduce using rule 21 (valor -> NULL .)
    RBRACE          reduce using rule 21 (valor -> NULL .)
    BREAK           reduce using rule 21 (valor -> NULL .)
    ENDSWITCH       reduce using rule 21 (valor -> NULL .)
    CASE            reduce using rule 21 (valor -> NULL .)
    DEFAULT         reduce using rule 21 (valor -> NULL .)
    ELSE            reduce using rule 21 (valor -> NULL .)
    ELSEIF          reduce using rule 21 (valor -> NULL .)
    RPAREN          reduce using rule 21 (valor -> NULL .)
    EQ              reduce using rule 21 (valor -> NULL .)
    NEQ             reduce using rule 21 (valor -> NULL .)
    STRICTEQ        reduce using rule 21 (valor -> NULL .)
    STRICTNEQ       reduce using rule 21 (valor -> NULL .)
    AND             reduce using rule 21 (valor -> NULL .)
    LOGICAL_AND     reduce using rule 21 (valor -> NULL .)
    OR              reduce using rule 21 (valor -> NULL .)
    LOGICAL_OR      reduce using rule 21 (valor -> NULL .)
    COLON           reduce using rule 21 (valor -> NULL .)


state 25

    (22) valor -> ARRAY .

    LT              reduce using rule 22 (valor -> ARRAY .)
    GT              reduce using rule 22 (valor -> ARRAY .)
    LEQ             reduce using rule 22 (valor -> ARRAY .)
    GEQ             reduce using rule 22 (valor -> ARRAY .)
    COMMA           reduce using rule 22 (valor -> ARRAY .)
    SEMICOLON       reduce using rule 22 (valor -> ARRAY .)
    PLUS            reduce using rule 22 (valor -> ARRAY .)
    MINUS           reduce using rule 22 (valor -> ARRAY .)
    TIMES           reduce using rule 22 (valor -> ARRAY .)
    DIVIDE          reduce using rule 22 (valor -> ARRAY .)
    MODULO          reduce using rule 22 (valor -> ARRAY .)
    VARIABLE        reduce using rule 22 (valor -> ARRAY .)
    ECHO            reduce using rule 22 (valor -> ARRAY .)
    PRINT           reduce using rule 22 (valor -> ARRAY .)
    FUNCTION        reduce using rule 22 (valor -> ARRAY .)
    RETURN          reduce using rule 22 (valor -> ARRAY .)
    ID              reduce using rule 22 (valor -> ARRAY .)
    INT             reduce using rule 22 (valor -> ARRAY .)
    FLOAT           reduce using rule 22 (valor -> ARRAY .)
    STRING          reduce using rule 22 (valor -> ARRAY .)
    BOOL            reduce using rule 22 (valor -> ARRAY .)
    NULL            reduce using rule 22 (valor -> ARRAY .)
    ARRAY           reduce using rule 22 (valor -> ARRAY .)
    IF              reduce using rule 22 (valor -> ARRAY .)
    WHILE           reduce using rule 22 (valor -> ARRAY .)
    SWITCH          reduce using rule 22 (valor -> ARRAY .)
    FOR             reduce using rule 22 (valor -> ARRAY .)
    CLOSETAG        reduce using rule 22 (valor -> ARRAY .)
    RBRACE          reduce using rule 22 (valor -> ARRAY .)
    BREAK           reduce using rule 22 (valor -> ARRAY .)
    ENDSWITCH       reduce using rule 22 (valor -> ARRAY .)
    CASE            reduce using rule 22 (valor -> ARRAY .)
    DEFAULT         reduce using rule 22 (valor -> ARRAY .)
    ELSE            reduce using rule 22 (valor -> ARRAY .)
    ELSEIF          reduce using rule 22 (valor -> ARRAY .)
    RPAREN          reduce using rule 22 (valor -> ARRAY .)
    EQ              reduce using rule 22 (valor -> ARRAY .)
    NEQ             reduce using rule 22 (valor -> ARRAY .)
    STRICTEQ        reduce using rule 22 (valor -> ARRAY .)
    STRICTNEQ       reduce using rule 22 (valor -> ARRAY .)
    AND             reduce using rule 22 (valor -> ARRAY .)
    LOGICAL_AND     reduce using rule 22 (valor -> ARRAY .)
    OR              reduce using rule 22 (valor -> ARRAY .)
    LOGICAL_OR      reduce using rule 22 (valor -> ARRAY .)
    COLON           reduce using rule 22 (valor -> ARRAY .)


state 26

    (43) controlStructure -> if .

    VARIABLE        reduce using rule 43 (controlStructure -> if .)
    ECHO            reduce using rule 43 (controlStructure -> if .)
    PRINT           reduce using rule 43 (controlStructure -> if .)
    FUNCTION        reduce using rule 43 (controlStructure -> if .)
    RETURN          reduce using rule 43 (controlStructure -> if .)
    ID              reduce using rule 43 (controlStructure -> if .)
    INT             reduce using rule 43 (controlStructure -> if .)
    FLOAT           reduce using rule 43 (controlStructure -> if .)
    STRING          reduce using rule 43 (controlStructure -> if .)
    BOOL            reduce using rule 43 (controlStructure -> if .)
    NULL            reduce using rule 43 (controlStructure -> if .)
    ARRAY           reduce using rule 43 (controlStructure -> if .)
    IF              reduce using rule 43 (controlStructure -> if .)
    WHILE           reduce using rule 43 (controlStructure -> if .)
    SWITCH          reduce using rule 43 (controlStructure -> if .)
    FOR             reduce using rule 43 (controlStructure -> if .)
    CLOSETAG        reduce using rule 43 (controlStructure -> if .)
    RBRACE          reduce using rule 43 (controlStructure -> if .)
    BREAK           reduce using rule 43 (controlStructure -> if .)
    ENDSWITCH       reduce using rule 43 (controlStructure -> if .)
    CASE            reduce using rule 43 (controlStructure -> if .)
    DEFAULT         reduce using rule 43 (controlStructure -> if .)
    ELSE            reduce using rule 43 (controlStructure -> if .)
    ELSEIF          reduce using rule 43 (controlStructure -> if .)


state 27

    (44) controlStructure -> for .

    VARIABLE        reduce using rule 44 (controlStructure -> for .)
    ECHO            reduce using rule 44 (controlStructure -> for .)
    PRINT           reduce using rule 44 (controlStructure -> for .)
    FUNCTION        reduce using rule 44 (controlStructure -> for .)
    RETURN          reduce using rule 44 (controlStructure -> for .)
    ID              reduce using rule 44 (controlStructure -> for .)
    INT             reduce using rule 44 (controlStructure -> for .)
    FLOAT           reduce using rule 44 (controlStructure -> for .)
    STRING          reduce using rule 44 (controlStructure -> for .)
    BOOL            reduce using rule 44 (controlStructure -> for .)
    NULL            reduce using rule 44 (controlStructure -> for .)
    ARRAY           reduce using rule 44 (controlStructure -> for .)
    IF              reduce using rule 44 (controlStructure -> for .)
    WHILE           reduce using rule 44 (controlStructure -> for .)
    SWITCH          reduce using rule 44 (controlStructure -> for .)
    FOR             reduce using rule 44 (controlStructure -> for .)
    CLOSETAG        reduce using rule 44 (controlStructure -> for .)
    RBRACE          reduce using rule 44 (controlStructure -> for .)
    BREAK           reduce using rule 44 (controlStructure -> for .)
    ENDSWITCH       reduce using rule 44 (controlStructure -> for .)
    CASE            reduce using rule 44 (controlStructure -> for .)
    DEFAULT         reduce using rule 44 (controlStructure -> for .)
    ELSE            reduce using rule 44 (controlStructure -> for .)
    ELSEIF          reduce using rule 44 (controlStructure -> for .)


state 28

    (45) controlStructure -> while .

    VARIABLE        reduce using rule 45 (controlStructure -> while .)
    ECHO            reduce using rule 45 (controlStructure -> while .)
    PRINT           reduce using rule 45 (controlStructure -> while .)
    FUNCTION        reduce using rule 45 (controlStructure -> while .)
    RETURN          reduce using rule 45 (controlStructure -> while .)
    ID              reduce using rule 45 (controlStructure -> while .)
    INT             reduce using rule 45 (controlStructure -> while .)
    FLOAT           reduce using rule 45 (controlStructure -> while .)
    STRING          reduce using rule 45 (controlStructure -> while .)
    BOOL            reduce using rule 45 (controlStructure -> while .)
    NULL            reduce using rule 45 (controlStructure -> while .)
    ARRAY           reduce using rule 45 (controlStructure -> while .)
    IF              reduce using rule 45 (controlStructure -> while .)
    WHILE           reduce using rule 45 (controlStructure -> while .)
    SWITCH          reduce using rule 45 (controlStructure -> while .)
    FOR             reduce using rule 45 (controlStructure -> while .)
    CLOSETAG        reduce using rule 45 (controlStructure -> while .)
    RBRACE          reduce using rule 45 (controlStructure -> while .)
    BREAK           reduce using rule 45 (controlStructure -> while .)
    ENDSWITCH       reduce using rule 45 (controlStructure -> while .)
    CASE            reduce using rule 45 (controlStructure -> while .)
    DEFAULT         reduce using rule 45 (controlStructure -> while .)
    ELSE            reduce using rule 45 (controlStructure -> while .)
    ELSEIF          reduce using rule 45 (controlStructure -> while .)


state 29

    (46) controlStructure -> switch .

    VARIABLE        reduce using rule 46 (controlStructure -> switch .)
    ECHO            reduce using rule 46 (controlStructure -> switch .)
    PRINT           reduce using rule 46 (controlStructure -> switch .)
    FUNCTION        reduce using rule 46 (controlStructure -> switch .)
    RETURN          reduce using rule 46 (controlStructure -> switch .)
    ID              reduce using rule 46 (controlStructure -> switch .)
    INT             reduce using rule 46 (controlStructure -> switch .)
    FLOAT           reduce using rule 46 (controlStructure -> switch .)
    STRING          reduce using rule 46 (controlStructure -> switch .)
    BOOL            reduce using rule 46 (controlStructure -> switch .)
    NULL            reduce using rule 46 (controlStructure -> switch .)
    ARRAY           reduce using rule 46 (controlStructure -> switch .)
    IF              reduce using rule 46 (controlStructure -> switch .)
    WHILE           reduce using rule 46 (controlStructure -> switch .)
    SWITCH          reduce using rule 46 (controlStructure -> switch .)
    FOR             reduce using rule 46 (controlStructure -> switch .)
    CLOSETAG        reduce using rule 46 (controlStructure -> switch .)
    RBRACE          reduce using rule 46 (controlStructure -> switch .)
    BREAK           reduce using rule 46 (controlStructure -> switch .)
    ENDSWITCH       reduce using rule 46 (controlStructure -> switch .)
    CASE            reduce using rule 46 (controlStructure -> switch .)
    DEFAULT         reduce using rule 46 (controlStructure -> switch .)
    ELSE            reduce using rule 46 (controlStructure -> switch .)
    ELSEIF          reduce using rule 46 (controlStructure -> switch .)


state 30

    (47) if -> IF . LPAREN conditions RPAREN LBRACE body RBRACE
    (48) if -> IF . LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (49) if -> IF . LPAREN conditions RPAREN body

    LPAREN          shift and go to state 54


state 31

    (80) for -> forStatement .

    VARIABLE        reduce using rule 80 (for -> forStatement .)
    ECHO            reduce using rule 80 (for -> forStatement .)
    PRINT           reduce using rule 80 (for -> forStatement .)
    FUNCTION        reduce using rule 80 (for -> forStatement .)
    RETURN          reduce using rule 80 (for -> forStatement .)
    ID              reduce using rule 80 (for -> forStatement .)
    INT             reduce using rule 80 (for -> forStatement .)
    FLOAT           reduce using rule 80 (for -> forStatement .)
    STRING          reduce using rule 80 (for -> forStatement .)
    BOOL            reduce using rule 80 (for -> forStatement .)
    NULL            reduce using rule 80 (for -> forStatement .)
    ARRAY           reduce using rule 80 (for -> forStatement .)
    IF              reduce using rule 80 (for -> forStatement .)
    WHILE           reduce using rule 80 (for -> forStatement .)
    SWITCH          reduce using rule 80 (for -> forStatement .)
    FOR             reduce using rule 80 (for -> forStatement .)
    CLOSETAG        reduce using rule 80 (for -> forStatement .)
    RBRACE          reduce using rule 80 (for -> forStatement .)
    BREAK           reduce using rule 80 (for -> forStatement .)
    ENDSWITCH       reduce using rule 80 (for -> forStatement .)
    CASE            reduce using rule 80 (for -> forStatement .)
    DEFAULT         reduce using rule 80 (for -> forStatement .)
    ELSE            reduce using rule 80 (for -> forStatement .)
    ELSEIF          reduce using rule 80 (for -> forStatement .)


state 32

    (84) while -> WHILE . LPAREN condition RPAREN LBRACE body RBRACE
    (85) while -> WHILE . LPAREN condition RPAREN LBRACE RBRACE

    LPAREN          shift and go to state 55


state 33

    (86) switch -> SWITCH . LPAREN valor RPAREN LBRACE caseLists RBRACE
    (87) switch -> SWITCH . LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON

    LPAREN          shift and go to state 56


state 34

    (81) forStatement -> FOR . LPAREN forcondition RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 57


state 35

    (1) inicio -> OPENTAG programa CLOSETAG .

    $end            reduce using rule 1 (inicio -> OPENTAG programa CLOSETAG .)


state 36

    (3) programa -> sentencia programa .

    CLOSETAG        reduce using rule 3 (programa -> sentencia programa .)


state 37

    (13) asignacion -> VARIABLE EQUALS . operaArit SEMICOLON
    (14) operaArit -> . valor
    (15) operaArit -> . valor operador operaArit
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    VARIABLE        shift and go to state 48
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    operaArit                      shift and go to state 58
    valor                          shift and go to state 59

state 38

    (28) comparacion -> valor comparador . valor
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    VARIABLE        shift and go to state 48
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    valor                          shift and go to state 60

state 39

    (29) comparador -> LT .

    INT             reduce using rule 29 (comparador -> LT .)
    FLOAT           reduce using rule 29 (comparador -> LT .)
    VARIABLE        reduce using rule 29 (comparador -> LT .)
    STRING          reduce using rule 29 (comparador -> LT .)
    BOOL            reduce using rule 29 (comparador -> LT .)
    NULL            reduce using rule 29 (comparador -> LT .)
    ARRAY           reduce using rule 29 (comparador -> LT .)


state 40

    (30) comparador -> GT .

    INT             reduce using rule 30 (comparador -> GT .)
    FLOAT           reduce using rule 30 (comparador -> GT .)
    VARIABLE        reduce using rule 30 (comparador -> GT .)
    STRING          reduce using rule 30 (comparador -> GT .)
    BOOL            reduce using rule 30 (comparador -> GT .)
    NULL            reduce using rule 30 (comparador -> GT .)
    ARRAY           reduce using rule 30 (comparador -> GT .)


state 41

    (31) comparador -> LEQ .

    INT             reduce using rule 31 (comparador -> LEQ .)
    FLOAT           reduce using rule 31 (comparador -> LEQ .)
    VARIABLE        reduce using rule 31 (comparador -> LEQ .)
    STRING          reduce using rule 31 (comparador -> LEQ .)
    BOOL            reduce using rule 31 (comparador -> LEQ .)
    NULL            reduce using rule 31 (comparador -> LEQ .)
    ARRAY           reduce using rule 31 (comparador -> LEQ .)


state 42

    (32) comparador -> GEQ .

    INT             reduce using rule 32 (comparador -> GEQ .)
    FLOAT           reduce using rule 32 (comparador -> GEQ .)
    VARIABLE        reduce using rule 32 (comparador -> GEQ .)
    STRING          reduce using rule 32 (comparador -> GEQ .)
    BOOL            reduce using rule 32 (comparador -> GEQ .)
    NULL            reduce using rule 32 (comparador -> GEQ .)
    ARRAY           reduce using rule 32 (comparador -> GEQ .)


state 43

    (33) impresion -> ECHO imprimir . SEMICOLON

    SEMICOLON       shift and go to state 61


state 44

    (35) imprimir -> LPAREN . repiteValores RPAREN
    (36) imprimir -> LPAREN . RPAREN
    (39) repiteValores -> . valor
    (40) repiteValores -> . valor COMMA repiteValores
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY

    RPAREN          shift and go to state 63
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    VARIABLE        shift and go to state 48
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    repiteValores                  shift and go to state 62
    valor                          shift and go to state 47

state 45

    (37) imprimir -> repiteValores .

    SEMICOLON       reduce using rule 37 (imprimir -> repiteValores .)


state 46

    (38) imprimir -> empty .

    SEMICOLON       reduce using rule 38 (imprimir -> empty .)


state 47

    (39) repiteValores -> valor .
    (40) repiteValores -> valor . COMMA repiteValores

    SEMICOLON       reduce using rule 39 (repiteValores -> valor .)
    RPAREN          reduce using rule 39 (repiteValores -> valor .)
    COMMA           shift and go to state 64


state 48

    (18) valor -> VARIABLE .

    COMMA           reduce using rule 18 (valor -> VARIABLE .)
    SEMICOLON       reduce using rule 18 (valor -> VARIABLE .)
    PLUS            reduce using rule 18 (valor -> VARIABLE .)
    MINUS           reduce using rule 18 (valor -> VARIABLE .)
    TIMES           reduce using rule 18 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 18 (valor -> VARIABLE .)
    MODULO          reduce using rule 18 (valor -> VARIABLE .)
    VARIABLE        reduce using rule 18 (valor -> VARIABLE .)
    ECHO            reduce using rule 18 (valor -> VARIABLE .)
    PRINT           reduce using rule 18 (valor -> VARIABLE .)
    FUNCTION        reduce using rule 18 (valor -> VARIABLE .)
    RETURN          reduce using rule 18 (valor -> VARIABLE .)
    ID              reduce using rule 18 (valor -> VARIABLE .)
    INT             reduce using rule 18 (valor -> VARIABLE .)
    FLOAT           reduce using rule 18 (valor -> VARIABLE .)
    STRING          reduce using rule 18 (valor -> VARIABLE .)
    BOOL            reduce using rule 18 (valor -> VARIABLE .)
    NULL            reduce using rule 18 (valor -> VARIABLE .)
    ARRAY           reduce using rule 18 (valor -> VARIABLE .)
    IF              reduce using rule 18 (valor -> VARIABLE .)
    WHILE           reduce using rule 18 (valor -> VARIABLE .)
    SWITCH          reduce using rule 18 (valor -> VARIABLE .)
    FOR             reduce using rule 18 (valor -> VARIABLE .)
    CLOSETAG        reduce using rule 18 (valor -> VARIABLE .)
    RBRACE          reduce using rule 18 (valor -> VARIABLE .)
    BREAK           reduce using rule 18 (valor -> VARIABLE .)
    ENDSWITCH       reduce using rule 18 (valor -> VARIABLE .)
    CASE            reduce using rule 18 (valor -> VARIABLE .)
    DEFAULT         reduce using rule 18 (valor -> VARIABLE .)
    ELSE            reduce using rule 18 (valor -> VARIABLE .)
    ELSEIF          reduce using rule 18 (valor -> VARIABLE .)
    RPAREN          reduce using rule 18 (valor -> VARIABLE .)
    EQ              reduce using rule 18 (valor -> VARIABLE .)
    NEQ             reduce using rule 18 (valor -> VARIABLE .)
    STRICTEQ        reduce using rule 18 (valor -> VARIABLE .)
    STRICTNEQ       reduce using rule 18 (valor -> VARIABLE .)
    LT              reduce using rule 18 (valor -> VARIABLE .)
    GT              reduce using rule 18 (valor -> VARIABLE .)
    LEQ             reduce using rule 18 (valor -> VARIABLE .)
    GEQ             reduce using rule 18 (valor -> VARIABLE .)
    AND             reduce using rule 18 (valor -> VARIABLE .)
    LOGICAL_AND     reduce using rule 18 (valor -> VARIABLE .)
    OR              reduce using rule 18 (valor -> VARIABLE .)
    LOGICAL_OR      reduce using rule 18 (valor -> VARIABLE .)
    COLON           reduce using rule 18 (valor -> VARIABLE .)


state 49

    (34) impresion -> PRINT imprimir . SEMICOLON

    SEMICOLON       shift and go to state 65


state 50

    (118) funcionDeclaration -> FUNCTION ID . LPAREN argumentos RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 66


state 51

    (119) llamadaFuncion -> ID LPAREN . argumentos RPAREN SEMICOLON
    (104) argumentos -> . argumento
    (105) argumentos -> . argumento COMMA argumentos
    (106) argumentos -> . empty
    (107) argumento -> . VARIABLE
    (108) argumento -> . type VARIABLE
    (109) argumento -> . VARIABLE EQUALS valor
    (110) argumento -> . type VARIABLE EQUALS valor
    (111) argumento -> . operaArit
    (41) empty -> .
    (112) type -> . INT_TYPE
    (113) type -> . FLOAT_TYPE
    (114) type -> . STRING_TYPE
    (115) type -> . BOOL_TYPE
    (116) type -> . ARRAY_TYPE
    (117) type -> . VOID
    (14) operaArit -> . valor
    (15) operaArit -> . valor operador operaArit
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY

    VARIABLE        shift and go to state 70
    RPAREN          reduce using rule 41 (empty -> .)
    INT_TYPE        shift and go to state 73
    FLOAT_TYPE      shift and go to state 74
    STRING_TYPE     shift and go to state 75
    BOOL_TYPE       shift and go to state 76
    ARRAY_TYPE      shift and go to state 77
    VOID            shift and go to state 78
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    argumentos                     shift and go to state 67
    argumento                      shift and go to state 68
    empty                          shift and go to state 69
    type                           shift and go to state 71
    valor                          shift and go to state 59
    operaArit                      shift and go to state 72

state 52

    (11) returnStatement -> RETURN valor . SEMICOLON

    SEMICOLON       shift and go to state 79


state 53

    (12) returnStatement -> RETURN SEMICOLON .

    VARIABLE        reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    ECHO            reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    PRINT           reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    FUNCTION        reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    ID              reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    INT             reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    STRING          reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    BOOL            reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    NULL            reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    ARRAY           reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    IF              reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    FOR             reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    CLOSETAG        reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    ENDSWITCH       reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    CASE            reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)
    ELSEIF          reduce using rule 12 (returnStatement -> RETURN SEMICOLON .)


state 54

    (47) if -> IF LPAREN . conditions RPAREN LBRACE body RBRACE
    (48) if -> IF LPAREN . conditions RPAREN LBRACE body RBRACE else_blocks
    (49) if -> IF LPAREN . conditions RPAREN body
    (54) conditions -> . LPAREN condition RPAREN
    (55) conditions -> . condition opLogic conditions
    (56) conditions -> . unaryLogic condition
    (57) conditions -> . condition
    (58) condition -> . valor
    (59) condition -> . valor opSymbol valor
    (60) condition -> . operaArit opSymbol operaArit
    (73) unaryLogic -> . NOT
    (74) unaryLogic -> . LOGICAL_NOT
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (14) operaArit -> . valor
    (15) operaArit -> . valor operador operaArit

    LPAREN          shift and go to state 80
    NOT             shift and go to state 86
    LOGICAL_NOT     shift and go to state 87
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    VARIABLE        shift and go to state 48
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    conditions                     shift and go to state 81
    condition                      shift and go to state 82
    unaryLogic                     shift and go to state 83
    valor                          shift and go to state 84
    operaArit                      shift and go to state 85

state 55

    (84) while -> WHILE LPAREN . condition RPAREN LBRACE body RBRACE
    (85) while -> WHILE LPAREN . condition RPAREN LBRACE RBRACE
    (58) condition -> . valor
    (59) condition -> . valor opSymbol valor
    (60) condition -> . operaArit opSymbol operaArit
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (14) operaArit -> . valor
    (15) operaArit -> . valor operador operaArit

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    VARIABLE        shift and go to state 48
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    condition                      shift and go to state 88
    valor                          shift and go to state 84
    operaArit                      shift and go to state 85

state 56

    (86) switch -> SWITCH LPAREN . valor RPAREN LBRACE caseLists RBRACE
    (87) switch -> SWITCH LPAREN . valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    VARIABLE        shift and go to state 48
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    valor                          shift and go to state 89

state 57

    (81) forStatement -> FOR LPAREN . forcondition RPAREN LBRACE body RBRACE
    (82) forcondition -> . VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (83) forcondition -> . VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    VARIABLE        shift and go to state 91

    forcondition                   shift and go to state 90

state 58

    (13) asignacion -> VARIABLE EQUALS operaArit . SEMICOLON

    SEMICOLON       shift and go to state 92


state 59

    (14) operaArit -> valor .
    (15) operaArit -> valor . operador operaArit
    (23) operador -> . PLUS
    (24) operador -> . MINUS
    (25) operador -> . TIMES
    (26) operador -> . DIVIDE
    (27) operador -> . MODULO

    SEMICOLON       reduce using rule 14 (operaArit -> valor .)
    COMMA           reduce using rule 14 (operaArit -> valor .)
    RPAREN          reduce using rule 14 (operaArit -> valor .)
    EQ              reduce using rule 14 (operaArit -> valor .)
    NEQ             reduce using rule 14 (operaArit -> valor .)
    STRICTEQ        reduce using rule 14 (operaArit -> valor .)
    STRICTNEQ       reduce using rule 14 (operaArit -> valor .)
    LT              reduce using rule 14 (operaArit -> valor .)
    GT              reduce using rule 14 (operaArit -> valor .)
    LEQ             reduce using rule 14 (operaArit -> valor .)
    GEQ             reduce using rule 14 (operaArit -> valor .)
    AND             reduce using rule 14 (operaArit -> valor .)
    LOGICAL_AND     reduce using rule 14 (operaArit -> valor .)
    OR              reduce using rule 14 (operaArit -> valor .)
    LOGICAL_OR      reduce using rule 14 (operaArit -> valor .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97
    MODULO          shift and go to state 98

    operador                       shift and go to state 93

state 60

    (28) comparacion -> valor comparador valor .

    VARIABLE        reduce using rule 28 (comparacion -> valor comparador valor .)
    ECHO            reduce using rule 28 (comparacion -> valor comparador valor .)
    PRINT           reduce using rule 28 (comparacion -> valor comparador valor .)
    FUNCTION        reduce using rule 28 (comparacion -> valor comparador valor .)
    RETURN          reduce using rule 28 (comparacion -> valor comparador valor .)
    ID              reduce using rule 28 (comparacion -> valor comparador valor .)
    INT             reduce using rule 28 (comparacion -> valor comparador valor .)
    FLOAT           reduce using rule 28 (comparacion -> valor comparador valor .)
    STRING          reduce using rule 28 (comparacion -> valor comparador valor .)
    BOOL            reduce using rule 28 (comparacion -> valor comparador valor .)
    NULL            reduce using rule 28 (comparacion -> valor comparador valor .)
    ARRAY           reduce using rule 28 (comparacion -> valor comparador valor .)
    IF              reduce using rule 28 (comparacion -> valor comparador valor .)
    WHILE           reduce using rule 28 (comparacion -> valor comparador valor .)
    SWITCH          reduce using rule 28 (comparacion -> valor comparador valor .)
    FOR             reduce using rule 28 (comparacion -> valor comparador valor .)
    CLOSETAG        reduce using rule 28 (comparacion -> valor comparador valor .)
    RBRACE          reduce using rule 28 (comparacion -> valor comparador valor .)
    BREAK           reduce using rule 28 (comparacion -> valor comparador valor .)
    ENDSWITCH       reduce using rule 28 (comparacion -> valor comparador valor .)
    CASE            reduce using rule 28 (comparacion -> valor comparador valor .)
    DEFAULT         reduce using rule 28 (comparacion -> valor comparador valor .)
    ELSE            reduce using rule 28 (comparacion -> valor comparador valor .)
    ELSEIF          reduce using rule 28 (comparacion -> valor comparador valor .)


state 61

    (33) impresion -> ECHO imprimir SEMICOLON .

    VARIABLE        reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    ECHO            reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    PRINT           reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    FUNCTION        reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    RETURN          reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    ID              reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    INT             reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    FLOAT           reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    STRING          reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    BOOL            reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    NULL            reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    ARRAY           reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    IF              reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    WHILE           reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    SWITCH          reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    FOR             reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    CLOSETAG        reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    RBRACE          reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    BREAK           reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    ENDSWITCH       reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    CASE            reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    DEFAULT         reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    ELSE            reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)
    ELSEIF          reduce using rule 33 (impresion -> ECHO imprimir SEMICOLON .)


state 62

    (35) imprimir -> LPAREN repiteValores . RPAREN

    RPAREN          shift and go to state 99


state 63

    (36) imprimir -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 36 (imprimir -> LPAREN RPAREN .)


state 64

    (40) repiteValores -> valor COMMA . repiteValores
    (39) repiteValores -> . valor
    (40) repiteValores -> . valor COMMA repiteValores
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    VARIABLE        shift and go to state 48
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    valor                          shift and go to state 47
    repiteValores                  shift and go to state 100

state 65

    (34) impresion -> PRINT imprimir SEMICOLON .

    VARIABLE        reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    ECHO            reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    PRINT           reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    FUNCTION        reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    RETURN          reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    ID              reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    INT             reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    FLOAT           reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    STRING          reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    BOOL            reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    NULL            reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    ARRAY           reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    IF              reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    WHILE           reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    SWITCH          reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    FOR             reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    CLOSETAG        reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    RBRACE          reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    BREAK           reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    ENDSWITCH       reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    CASE            reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    DEFAULT         reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    ELSE            reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)
    ELSEIF          reduce using rule 34 (impresion -> PRINT imprimir SEMICOLON .)


state 66

    (118) funcionDeclaration -> FUNCTION ID LPAREN . argumentos RPAREN LBRACE body RBRACE
    (104) argumentos -> . argumento
    (105) argumentos -> . argumento COMMA argumentos
    (106) argumentos -> . empty
    (107) argumento -> . VARIABLE
    (108) argumento -> . type VARIABLE
    (109) argumento -> . VARIABLE EQUALS valor
    (110) argumento -> . type VARIABLE EQUALS valor
    (111) argumento -> . operaArit
    (41) empty -> .
    (112) type -> . INT_TYPE
    (113) type -> . FLOAT_TYPE
    (114) type -> . STRING_TYPE
    (115) type -> . BOOL_TYPE
    (116) type -> . ARRAY_TYPE
    (117) type -> . VOID
    (14) operaArit -> . valor
    (15) operaArit -> . valor operador operaArit
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY

    VARIABLE        shift and go to state 70
    RPAREN          reduce using rule 41 (empty -> .)
    INT_TYPE        shift and go to state 73
    FLOAT_TYPE      shift and go to state 74
    STRING_TYPE     shift and go to state 75
    BOOL_TYPE       shift and go to state 76
    ARRAY_TYPE      shift and go to state 77
    VOID            shift and go to state 78
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    argumentos                     shift and go to state 101
    argumento                      shift and go to state 68
    empty                          shift and go to state 69
    type                           shift and go to state 71
    valor                          shift and go to state 59
    operaArit                      shift and go to state 72

state 67

    (119) llamadaFuncion -> ID LPAREN argumentos . RPAREN SEMICOLON

    RPAREN          shift and go to state 102


state 68

    (104) argumentos -> argumento .
    (105) argumentos -> argumento . COMMA argumentos

    RPAREN          reduce using rule 104 (argumentos -> argumento .)
    COMMA           shift and go to state 103


state 69

    (106) argumentos -> empty .

    RPAREN          reduce using rule 106 (argumentos -> empty .)


state 70

    (107) argumento -> VARIABLE .
    (109) argumento -> VARIABLE . EQUALS valor
    (18) valor -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 18 (valor -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 18 (valor -> VARIABLE .)
    EQUALS          shift and go to state 104
    PLUS            reduce using rule 18 (valor -> VARIABLE .)
    MINUS           reduce using rule 18 (valor -> VARIABLE .)
    TIMES           reduce using rule 18 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 18 (valor -> VARIABLE .)
    MODULO          reduce using rule 18 (valor -> VARIABLE .)
    COMMA           reduce using rule 18 (valor -> VARIABLE .)
    RPAREN          reduce using rule 18 (valor -> VARIABLE .)

  ! COMMA           [ reduce using rule 107 (argumento -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 107 (argumento -> VARIABLE .) ]


state 71

    (108) argumento -> type . VARIABLE
    (110) argumento -> type . VARIABLE EQUALS valor

    VARIABLE        shift and go to state 105


state 72

    (111) argumento -> operaArit .

    COMMA           reduce using rule 111 (argumento -> operaArit .)
    RPAREN          reduce using rule 111 (argumento -> operaArit .)


state 73

    (112) type -> INT_TYPE .

    VARIABLE        reduce using rule 112 (type -> INT_TYPE .)


state 74

    (113) type -> FLOAT_TYPE .

    VARIABLE        reduce using rule 113 (type -> FLOAT_TYPE .)


state 75

    (114) type -> STRING_TYPE .

    VARIABLE        reduce using rule 114 (type -> STRING_TYPE .)


state 76

    (115) type -> BOOL_TYPE .

    VARIABLE        reduce using rule 115 (type -> BOOL_TYPE .)


state 77

    (116) type -> ARRAY_TYPE .

    VARIABLE        reduce using rule 116 (type -> ARRAY_TYPE .)


state 78

    (117) type -> VOID .

    VARIABLE        reduce using rule 117 (type -> VOID .)


state 79

    (11) returnStatement -> RETURN valor SEMICOLON .

    VARIABLE        reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    ECHO            reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    PRINT           reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    FUNCTION        reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    RETURN          reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    ID              reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    INT             reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    FLOAT           reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    STRING          reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    BOOL            reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    NULL            reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    ARRAY           reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    IF              reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    WHILE           reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    SWITCH          reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    FOR             reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    CLOSETAG        reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    RBRACE          reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    BREAK           reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    ENDSWITCH       reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    CASE            reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    DEFAULT         reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    ELSE            reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)
    ELSEIF          reduce using rule 11 (returnStatement -> RETURN valor SEMICOLON .)


state 80

    (54) conditions -> LPAREN . condition RPAREN
    (58) condition -> . valor
    (59) condition -> . valor opSymbol valor
    (60) condition -> . operaArit opSymbol operaArit
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (14) operaArit -> . valor
    (15) operaArit -> . valor operador operaArit

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    VARIABLE        shift and go to state 48
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    condition                      shift and go to state 106
    valor                          shift and go to state 84
    operaArit                      shift and go to state 85

state 81

    (47) if -> IF LPAREN conditions . RPAREN LBRACE body RBRACE
    (48) if -> IF LPAREN conditions . RPAREN LBRACE body RBRACE else_blocks
    (49) if -> IF LPAREN conditions . RPAREN body

    RPAREN          shift and go to state 107


state 82

    (55) conditions -> condition . opLogic conditions
    (57) conditions -> condition .
    (69) opLogic -> . AND
    (70) opLogic -> . LOGICAL_AND
    (71) opLogic -> . OR
    (72) opLogic -> . LOGICAL_OR

    RPAREN          reduce using rule 57 (conditions -> condition .)
    AND             shift and go to state 109
    LOGICAL_AND     shift and go to state 110
    OR              shift and go to state 111
    LOGICAL_OR      shift and go to state 112

    opLogic                        shift and go to state 108

state 83

    (56) conditions -> unaryLogic . condition
    (58) condition -> . valor
    (59) condition -> . valor opSymbol valor
    (60) condition -> . operaArit opSymbol operaArit
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (14) operaArit -> . valor
    (15) operaArit -> . valor operador operaArit

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    VARIABLE        shift and go to state 48
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    condition                      shift and go to state 113
    valor                          shift and go to state 84
    operaArit                      shift and go to state 85

state 84

    (58) condition -> valor .
    (59) condition -> valor . opSymbol valor
    (14) operaArit -> valor .
    (15) operaArit -> valor . operador operaArit
    (61) opSymbol -> . EQ
    (62) opSymbol -> . NEQ
    (63) opSymbol -> . STRICTEQ
    (64) opSymbol -> . STRICTNEQ
    (65) opSymbol -> . LT
    (66) opSymbol -> . GT
    (67) opSymbol -> . LEQ
    (68) opSymbol -> . GEQ
    (23) operador -> . PLUS
    (24) operador -> . MINUS
    (25) operador -> . TIMES
    (26) operador -> . DIVIDE
    (27) operador -> . MODULO

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICTEQ resolved as shift
  ! shift/reduce conflict for STRICTNEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
    AND             reduce using rule 58 (condition -> valor .)
    LOGICAL_AND     reduce using rule 58 (condition -> valor .)
    OR              reduce using rule 58 (condition -> valor .)
    LOGICAL_OR      reduce using rule 58 (condition -> valor .)
    RPAREN          reduce using rule 58 (condition -> valor .)
    EQ              shift and go to state 115
    NEQ             shift and go to state 116
    STRICTEQ        shift and go to state 117
    STRICTNEQ       shift and go to state 118
    LT              shift and go to state 119
    GT              shift and go to state 120
    LEQ             shift and go to state 121
    GEQ             shift and go to state 122
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97
    MODULO          shift and go to state 98

  ! EQ              [ reduce using rule 14 (operaArit -> valor .) ]
  ! NEQ             [ reduce using rule 14 (operaArit -> valor .) ]
  ! STRICTEQ        [ reduce using rule 14 (operaArit -> valor .) ]
  ! STRICTNEQ       [ reduce using rule 14 (operaArit -> valor .) ]
  ! LT              [ reduce using rule 14 (operaArit -> valor .) ]
  ! GT              [ reduce using rule 14 (operaArit -> valor .) ]
  ! LEQ             [ reduce using rule 14 (operaArit -> valor .) ]
  ! GEQ             [ reduce using rule 14 (operaArit -> valor .) ]

    opSymbol                       shift and go to state 114
    operador                       shift and go to state 93

state 85

    (60) condition -> operaArit . opSymbol operaArit
    (61) opSymbol -> . EQ
    (62) opSymbol -> . NEQ
    (63) opSymbol -> . STRICTEQ
    (64) opSymbol -> . STRICTNEQ
    (65) opSymbol -> . LT
    (66) opSymbol -> . GT
    (67) opSymbol -> . LEQ
    (68) opSymbol -> . GEQ

    EQ              shift and go to state 115
    NEQ             shift and go to state 116
    STRICTEQ        shift and go to state 117
    STRICTNEQ       shift and go to state 118
    LT              shift and go to state 119
    GT              shift and go to state 120
    LEQ             shift and go to state 121
    GEQ             shift and go to state 122

    opSymbol                       shift and go to state 123

state 86

    (73) unaryLogic -> NOT .

    INT             reduce using rule 73 (unaryLogic -> NOT .)
    FLOAT           reduce using rule 73 (unaryLogic -> NOT .)
    VARIABLE        reduce using rule 73 (unaryLogic -> NOT .)
    STRING          reduce using rule 73 (unaryLogic -> NOT .)
    BOOL            reduce using rule 73 (unaryLogic -> NOT .)
    NULL            reduce using rule 73 (unaryLogic -> NOT .)
    ARRAY           reduce using rule 73 (unaryLogic -> NOT .)


state 87

    (74) unaryLogic -> LOGICAL_NOT .

    INT             reduce using rule 74 (unaryLogic -> LOGICAL_NOT .)
    FLOAT           reduce using rule 74 (unaryLogic -> LOGICAL_NOT .)
    VARIABLE        reduce using rule 74 (unaryLogic -> LOGICAL_NOT .)
    STRING          reduce using rule 74 (unaryLogic -> LOGICAL_NOT .)
    BOOL            reduce using rule 74 (unaryLogic -> LOGICAL_NOT .)
    NULL            reduce using rule 74 (unaryLogic -> LOGICAL_NOT .)
    ARRAY           reduce using rule 74 (unaryLogic -> LOGICAL_NOT .)


state 88

    (84) while -> WHILE LPAREN condition . RPAREN LBRACE body RBRACE
    (85) while -> WHILE LPAREN condition . RPAREN LBRACE RBRACE

    RPAREN          shift and go to state 124


state 89

    (86) switch -> SWITCH LPAREN valor . RPAREN LBRACE caseLists RBRACE
    (87) switch -> SWITCH LPAREN valor . RPAREN COLON caseLists ENDSWITCH SEMICOLON

    RPAREN          shift and go to state 125


state 90

    (81) forStatement -> FOR LPAREN forcondition . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 126


state 91

    (82) forcondition -> VARIABLE . EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (83) forcondition -> VARIABLE . EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    EQUALS          shift and go to state 127


state 92

    (13) asignacion -> VARIABLE EQUALS operaArit SEMICOLON .

    VARIABLE        reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    ECHO            reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    PRINT           reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    FUNCTION        reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    RETURN          reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    ID              reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    INT             reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    FLOAT           reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    STRING          reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    BOOL            reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    NULL            reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    ARRAY           reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    IF              reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    WHILE           reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    SWITCH          reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    FOR             reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    CLOSETAG        reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    RBRACE          reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    BREAK           reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    ENDSWITCH       reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    CASE            reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    DEFAULT         reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    ELSE            reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    ELSEIF          reduce using rule 13 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)


state 93

    (15) operaArit -> valor operador . operaArit
    (14) operaArit -> . valor
    (15) operaArit -> . valor operador operaArit
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    VARIABLE        shift and go to state 48
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    valor                          shift and go to state 59
    operaArit                      shift and go to state 128

state 94

    (23) operador -> PLUS .

    INT             reduce using rule 23 (operador -> PLUS .)
    FLOAT           reduce using rule 23 (operador -> PLUS .)
    VARIABLE        reduce using rule 23 (operador -> PLUS .)
    STRING          reduce using rule 23 (operador -> PLUS .)
    BOOL            reduce using rule 23 (operador -> PLUS .)
    NULL            reduce using rule 23 (operador -> PLUS .)
    ARRAY           reduce using rule 23 (operador -> PLUS .)


state 95

    (24) operador -> MINUS .

    INT             reduce using rule 24 (operador -> MINUS .)
    FLOAT           reduce using rule 24 (operador -> MINUS .)
    VARIABLE        reduce using rule 24 (operador -> MINUS .)
    STRING          reduce using rule 24 (operador -> MINUS .)
    BOOL            reduce using rule 24 (operador -> MINUS .)
    NULL            reduce using rule 24 (operador -> MINUS .)
    ARRAY           reduce using rule 24 (operador -> MINUS .)


state 96

    (25) operador -> TIMES .

    INT             reduce using rule 25 (operador -> TIMES .)
    FLOAT           reduce using rule 25 (operador -> TIMES .)
    VARIABLE        reduce using rule 25 (operador -> TIMES .)
    STRING          reduce using rule 25 (operador -> TIMES .)
    BOOL            reduce using rule 25 (operador -> TIMES .)
    NULL            reduce using rule 25 (operador -> TIMES .)
    ARRAY           reduce using rule 25 (operador -> TIMES .)


state 97

    (26) operador -> DIVIDE .

    INT             reduce using rule 26 (operador -> DIVIDE .)
    FLOAT           reduce using rule 26 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 26 (operador -> DIVIDE .)
    STRING          reduce using rule 26 (operador -> DIVIDE .)
    BOOL            reduce using rule 26 (operador -> DIVIDE .)
    NULL            reduce using rule 26 (operador -> DIVIDE .)
    ARRAY           reduce using rule 26 (operador -> DIVIDE .)


state 98

    (27) operador -> MODULO .

    INT             reduce using rule 27 (operador -> MODULO .)
    FLOAT           reduce using rule 27 (operador -> MODULO .)
    VARIABLE        reduce using rule 27 (operador -> MODULO .)
    STRING          reduce using rule 27 (operador -> MODULO .)
    BOOL            reduce using rule 27 (operador -> MODULO .)
    NULL            reduce using rule 27 (operador -> MODULO .)
    ARRAY           reduce using rule 27 (operador -> MODULO .)


state 99

    (35) imprimir -> LPAREN repiteValores RPAREN .

    SEMICOLON       reduce using rule 35 (imprimir -> LPAREN repiteValores RPAREN .)


state 100

    (40) repiteValores -> valor COMMA repiteValores .

    SEMICOLON       reduce using rule 40 (repiteValores -> valor COMMA repiteValores .)
    RPAREN          reduce using rule 40 (repiteValores -> valor COMMA repiteValores .)


state 101

    (118) funcionDeclaration -> FUNCTION ID LPAREN argumentos . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 129


state 102

    (119) llamadaFuncion -> ID LPAREN argumentos RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 130


state 103

    (105) argumentos -> argumento COMMA . argumentos
    (104) argumentos -> . argumento
    (105) argumentos -> . argumento COMMA argumentos
    (106) argumentos -> . empty
    (107) argumento -> . VARIABLE
    (108) argumento -> . type VARIABLE
    (109) argumento -> . VARIABLE EQUALS valor
    (110) argumento -> . type VARIABLE EQUALS valor
    (111) argumento -> . operaArit
    (41) empty -> .
    (112) type -> . INT_TYPE
    (113) type -> . FLOAT_TYPE
    (114) type -> . STRING_TYPE
    (115) type -> . BOOL_TYPE
    (116) type -> . ARRAY_TYPE
    (117) type -> . VOID
    (14) operaArit -> . valor
    (15) operaArit -> . valor operador operaArit
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY

    VARIABLE        shift and go to state 70
    RPAREN          reduce using rule 41 (empty -> .)
    INT_TYPE        shift and go to state 73
    FLOAT_TYPE      shift and go to state 74
    STRING_TYPE     shift and go to state 75
    BOOL_TYPE       shift and go to state 76
    ARRAY_TYPE      shift and go to state 77
    VOID            shift and go to state 78
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    argumento                      shift and go to state 68
    argumentos                     shift and go to state 131
    empty                          shift and go to state 69
    type                           shift and go to state 71
    valor                          shift and go to state 59
    operaArit                      shift and go to state 72

state 104

    (109) argumento -> VARIABLE EQUALS . valor
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    VARIABLE        shift and go to state 48
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    valor                          shift and go to state 132

state 105

    (108) argumento -> type VARIABLE .
    (110) argumento -> type VARIABLE . EQUALS valor

    COMMA           reduce using rule 108 (argumento -> type VARIABLE .)
    RPAREN          reduce using rule 108 (argumento -> type VARIABLE .)
    EQUALS          shift and go to state 133


state 106

    (54) conditions -> LPAREN condition . RPAREN

    RPAREN          shift and go to state 134


state 107

    (47) if -> IF LPAREN conditions RPAREN . LBRACE body RBRACE
    (48) if -> IF LPAREN conditions RPAREN . LBRACE body RBRACE else_blocks
    (49) if -> IF LPAREN conditions RPAREN . body
    (75) body -> . sentenciaList
    (76) body -> . sentencia
    (77) body -> . empty
    (78) sentenciaList -> . sentencia
    (79) sentenciaList -> . sentencia sentenciaList
    (4) sentencia -> . asignacion
    (5) sentencia -> . comparacion
    (6) sentencia -> . impresion
    (7) sentencia -> . estructurasPrograma
    (8) sentencia -> . funcionDeclaration
    (9) sentencia -> . returnStatement
    (10) sentencia -> . llamadaFuncion
    (41) empty -> .
    (13) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) comparacion -> . valor comparador valor
    (33) impresion -> . ECHO imprimir SEMICOLON
    (34) impresion -> . PRINT imprimir SEMICOLON
    (42) estructurasPrograma -> . controlStructure
    (118) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (11) returnStatement -> . RETURN valor SEMICOLON
    (12) returnStatement -> . RETURN SEMICOLON
    (119) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (43) controlStructure -> . if
    (44) controlStructure -> . for
    (45) controlStructure -> . while
    (46) controlStructure -> . switch
    (47) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE
    (48) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (49) if -> . IF LPAREN conditions RPAREN body
    (80) for -> . forStatement
    (84) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (85) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (86) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (87) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (81) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    LBRACE          shift and go to state 135
    CLOSETAG        reduce using rule 41 (empty -> .)
    RBRACE          reduce using rule 41 (empty -> .)
    BREAK           reduce using rule 41 (empty -> .)
    ENDSWITCH       reduce using rule 41 (empty -> .)
    CASE            reduce using rule 41 (empty -> .)
    DEFAULT         reduce using rule 41 (empty -> .)
    ELSE            reduce using rule 41 (empty -> .)
    ELSEIF          reduce using rule 41 (empty -> .)
    VARIABLE        shift and go to state 12
    ECHO            shift and go to state 14
    PRINT           shift and go to state 15
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 19
    ID              shift and go to state 18
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    SWITCH          shift and go to state 33
    FOR             shift and go to state 34

  ! VARIABLE        [ reduce using rule 41 (empty -> .) ]
  ! ECHO            [ reduce using rule 41 (empty -> .) ]
  ! PRINT           [ reduce using rule 41 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 41 (empty -> .) ]
  ! RETURN          [ reduce using rule 41 (empty -> .) ]
  ! ID              [ reduce using rule 41 (empty -> .) ]
  ! INT             [ reduce using rule 41 (empty -> .) ]
  ! FLOAT           [ reduce using rule 41 (empty -> .) ]
  ! STRING          [ reduce using rule 41 (empty -> .) ]
  ! BOOL            [ reduce using rule 41 (empty -> .) ]
  ! NULL            [ reduce using rule 41 (empty -> .) ]
  ! ARRAY           [ reduce using rule 41 (empty -> .) ]
  ! IF              [ reduce using rule 41 (empty -> .) ]
  ! WHILE           [ reduce using rule 41 (empty -> .) ]
  ! SWITCH          [ reduce using rule 41 (empty -> .) ]
  ! FOR             [ reduce using rule 41 (empty -> .) ]

    body                           shift and go to state 136
    sentenciaList                  shift and go to state 137
    sentencia                      shift and go to state 138
    empty                          shift and go to state 139
    asignacion                     shift and go to state 5
    comparacion                    shift and go to state 6
    impresion                      shift and go to state 7
    estructurasPrograma            shift and go to state 8
    funcionDeclaration             shift and go to state 9
    returnStatement                shift and go to state 10
    llamadaFuncion                 shift and go to state 11
    valor                          shift and go to state 13
    controlStructure               shift and go to state 16
    if                             shift and go to state 26
    for                            shift and go to state 27
    while                          shift and go to state 28
    switch                         shift and go to state 29
    forStatement                   shift and go to state 31

state 108

    (55) conditions -> condition opLogic . conditions
    (54) conditions -> . LPAREN condition RPAREN
    (55) conditions -> . condition opLogic conditions
    (56) conditions -> . unaryLogic condition
    (57) conditions -> . condition
    (58) condition -> . valor
    (59) condition -> . valor opSymbol valor
    (60) condition -> . operaArit opSymbol operaArit
    (73) unaryLogic -> . NOT
    (74) unaryLogic -> . LOGICAL_NOT
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (14) operaArit -> . valor
    (15) operaArit -> . valor operador operaArit

    LPAREN          shift and go to state 80
    NOT             shift and go to state 86
    LOGICAL_NOT     shift and go to state 87
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    VARIABLE        shift and go to state 48
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    condition                      shift and go to state 82
    conditions                     shift and go to state 140
    unaryLogic                     shift and go to state 83
    valor                          shift and go to state 84
    operaArit                      shift and go to state 85

state 109

    (69) opLogic -> AND .

    LPAREN          reduce using rule 69 (opLogic -> AND .)
    NOT             reduce using rule 69 (opLogic -> AND .)
    LOGICAL_NOT     reduce using rule 69 (opLogic -> AND .)
    INT             reduce using rule 69 (opLogic -> AND .)
    FLOAT           reduce using rule 69 (opLogic -> AND .)
    VARIABLE        reduce using rule 69 (opLogic -> AND .)
    STRING          reduce using rule 69 (opLogic -> AND .)
    BOOL            reduce using rule 69 (opLogic -> AND .)
    NULL            reduce using rule 69 (opLogic -> AND .)
    ARRAY           reduce using rule 69 (opLogic -> AND .)


state 110

    (70) opLogic -> LOGICAL_AND .

    LPAREN          reduce using rule 70 (opLogic -> LOGICAL_AND .)
    NOT             reduce using rule 70 (opLogic -> LOGICAL_AND .)
    LOGICAL_NOT     reduce using rule 70 (opLogic -> LOGICAL_AND .)
    INT             reduce using rule 70 (opLogic -> LOGICAL_AND .)
    FLOAT           reduce using rule 70 (opLogic -> LOGICAL_AND .)
    VARIABLE        reduce using rule 70 (opLogic -> LOGICAL_AND .)
    STRING          reduce using rule 70 (opLogic -> LOGICAL_AND .)
    BOOL            reduce using rule 70 (opLogic -> LOGICAL_AND .)
    NULL            reduce using rule 70 (opLogic -> LOGICAL_AND .)
    ARRAY           reduce using rule 70 (opLogic -> LOGICAL_AND .)


state 111

    (71) opLogic -> OR .

    LPAREN          reduce using rule 71 (opLogic -> OR .)
    NOT             reduce using rule 71 (opLogic -> OR .)
    LOGICAL_NOT     reduce using rule 71 (opLogic -> OR .)
    INT             reduce using rule 71 (opLogic -> OR .)
    FLOAT           reduce using rule 71 (opLogic -> OR .)
    VARIABLE        reduce using rule 71 (opLogic -> OR .)
    STRING          reduce using rule 71 (opLogic -> OR .)
    BOOL            reduce using rule 71 (opLogic -> OR .)
    NULL            reduce using rule 71 (opLogic -> OR .)
    ARRAY           reduce using rule 71 (opLogic -> OR .)


state 112

    (72) opLogic -> LOGICAL_OR .

    LPAREN          reduce using rule 72 (opLogic -> LOGICAL_OR .)
    NOT             reduce using rule 72 (opLogic -> LOGICAL_OR .)
    LOGICAL_NOT     reduce using rule 72 (opLogic -> LOGICAL_OR .)
    INT             reduce using rule 72 (opLogic -> LOGICAL_OR .)
    FLOAT           reduce using rule 72 (opLogic -> LOGICAL_OR .)
    VARIABLE        reduce using rule 72 (opLogic -> LOGICAL_OR .)
    STRING          reduce using rule 72 (opLogic -> LOGICAL_OR .)
    BOOL            reduce using rule 72 (opLogic -> LOGICAL_OR .)
    NULL            reduce using rule 72 (opLogic -> LOGICAL_OR .)
    ARRAY           reduce using rule 72 (opLogic -> LOGICAL_OR .)


state 113

    (56) conditions -> unaryLogic condition .

    RPAREN          reduce using rule 56 (conditions -> unaryLogic condition .)


state 114

    (59) condition -> valor opSymbol . valor
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    VARIABLE        shift and go to state 48
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    valor                          shift and go to state 141

state 115

    (61) opSymbol -> EQ .

    INT             reduce using rule 61 (opSymbol -> EQ .)
    FLOAT           reduce using rule 61 (opSymbol -> EQ .)
    VARIABLE        reduce using rule 61 (opSymbol -> EQ .)
    STRING          reduce using rule 61 (opSymbol -> EQ .)
    BOOL            reduce using rule 61 (opSymbol -> EQ .)
    NULL            reduce using rule 61 (opSymbol -> EQ .)
    ARRAY           reduce using rule 61 (opSymbol -> EQ .)


state 116

    (62) opSymbol -> NEQ .

    INT             reduce using rule 62 (opSymbol -> NEQ .)
    FLOAT           reduce using rule 62 (opSymbol -> NEQ .)
    VARIABLE        reduce using rule 62 (opSymbol -> NEQ .)
    STRING          reduce using rule 62 (opSymbol -> NEQ .)
    BOOL            reduce using rule 62 (opSymbol -> NEQ .)
    NULL            reduce using rule 62 (opSymbol -> NEQ .)
    ARRAY           reduce using rule 62 (opSymbol -> NEQ .)


state 117

    (63) opSymbol -> STRICTEQ .

    INT             reduce using rule 63 (opSymbol -> STRICTEQ .)
    FLOAT           reduce using rule 63 (opSymbol -> STRICTEQ .)
    VARIABLE        reduce using rule 63 (opSymbol -> STRICTEQ .)
    STRING          reduce using rule 63 (opSymbol -> STRICTEQ .)
    BOOL            reduce using rule 63 (opSymbol -> STRICTEQ .)
    NULL            reduce using rule 63 (opSymbol -> STRICTEQ .)
    ARRAY           reduce using rule 63 (opSymbol -> STRICTEQ .)


state 118

    (64) opSymbol -> STRICTNEQ .

    INT             reduce using rule 64 (opSymbol -> STRICTNEQ .)
    FLOAT           reduce using rule 64 (opSymbol -> STRICTNEQ .)
    VARIABLE        reduce using rule 64 (opSymbol -> STRICTNEQ .)
    STRING          reduce using rule 64 (opSymbol -> STRICTNEQ .)
    BOOL            reduce using rule 64 (opSymbol -> STRICTNEQ .)
    NULL            reduce using rule 64 (opSymbol -> STRICTNEQ .)
    ARRAY           reduce using rule 64 (opSymbol -> STRICTNEQ .)


state 119

    (65) opSymbol -> LT .

    INT             reduce using rule 65 (opSymbol -> LT .)
    FLOAT           reduce using rule 65 (opSymbol -> LT .)
    VARIABLE        reduce using rule 65 (opSymbol -> LT .)
    STRING          reduce using rule 65 (opSymbol -> LT .)
    BOOL            reduce using rule 65 (opSymbol -> LT .)
    NULL            reduce using rule 65 (opSymbol -> LT .)
    ARRAY           reduce using rule 65 (opSymbol -> LT .)


state 120

    (66) opSymbol -> GT .

    INT             reduce using rule 66 (opSymbol -> GT .)
    FLOAT           reduce using rule 66 (opSymbol -> GT .)
    VARIABLE        reduce using rule 66 (opSymbol -> GT .)
    STRING          reduce using rule 66 (opSymbol -> GT .)
    BOOL            reduce using rule 66 (opSymbol -> GT .)
    NULL            reduce using rule 66 (opSymbol -> GT .)
    ARRAY           reduce using rule 66 (opSymbol -> GT .)


state 121

    (67) opSymbol -> LEQ .

    INT             reduce using rule 67 (opSymbol -> LEQ .)
    FLOAT           reduce using rule 67 (opSymbol -> LEQ .)
    VARIABLE        reduce using rule 67 (opSymbol -> LEQ .)
    STRING          reduce using rule 67 (opSymbol -> LEQ .)
    BOOL            reduce using rule 67 (opSymbol -> LEQ .)
    NULL            reduce using rule 67 (opSymbol -> LEQ .)
    ARRAY           reduce using rule 67 (opSymbol -> LEQ .)


state 122

    (68) opSymbol -> GEQ .

    INT             reduce using rule 68 (opSymbol -> GEQ .)
    FLOAT           reduce using rule 68 (opSymbol -> GEQ .)
    VARIABLE        reduce using rule 68 (opSymbol -> GEQ .)
    STRING          reduce using rule 68 (opSymbol -> GEQ .)
    BOOL            reduce using rule 68 (opSymbol -> GEQ .)
    NULL            reduce using rule 68 (opSymbol -> GEQ .)
    ARRAY           reduce using rule 68 (opSymbol -> GEQ .)


state 123

    (60) condition -> operaArit opSymbol . operaArit
    (14) operaArit -> . valor
    (15) operaArit -> . valor operador operaArit
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    VARIABLE        shift and go to state 48
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    operaArit                      shift and go to state 142
    valor                          shift and go to state 59

state 124

    (84) while -> WHILE LPAREN condition RPAREN . LBRACE body RBRACE
    (85) while -> WHILE LPAREN condition RPAREN . LBRACE RBRACE

    LBRACE          shift and go to state 143


state 125

    (86) switch -> SWITCH LPAREN valor RPAREN . LBRACE caseLists RBRACE
    (87) switch -> SWITCH LPAREN valor RPAREN . COLON caseLists ENDSWITCH SEMICOLON

    LBRACE          shift and go to state 144
    COLON           shift and go to state 145


state 126

    (81) forStatement -> FOR LPAREN forcondition RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 146


state 127

    (82) forcondition -> VARIABLE EQUALS . INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (83) forcondition -> VARIABLE EQUALS . INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    INT             shift and go to state 147


state 128

    (15) operaArit -> valor operador operaArit .

    SEMICOLON       reduce using rule 15 (operaArit -> valor operador operaArit .)
    COMMA           reduce using rule 15 (operaArit -> valor operador operaArit .)
    RPAREN          reduce using rule 15 (operaArit -> valor operador operaArit .)
    EQ              reduce using rule 15 (operaArit -> valor operador operaArit .)
    NEQ             reduce using rule 15 (operaArit -> valor operador operaArit .)
    STRICTEQ        reduce using rule 15 (operaArit -> valor operador operaArit .)
    STRICTNEQ       reduce using rule 15 (operaArit -> valor operador operaArit .)
    LT              reduce using rule 15 (operaArit -> valor operador operaArit .)
    GT              reduce using rule 15 (operaArit -> valor operador operaArit .)
    LEQ             reduce using rule 15 (operaArit -> valor operador operaArit .)
    GEQ             reduce using rule 15 (operaArit -> valor operador operaArit .)
    AND             reduce using rule 15 (operaArit -> valor operador operaArit .)
    LOGICAL_AND     reduce using rule 15 (operaArit -> valor operador operaArit .)
    OR              reduce using rule 15 (operaArit -> valor operador operaArit .)
    LOGICAL_OR      reduce using rule 15 (operaArit -> valor operador operaArit .)


state 129

    (118) funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 148


state 130

    (119) llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .

    VARIABLE        reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ECHO            reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    PRINT           reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    RETURN          reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ID              reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    INT             reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FLOAT           reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    STRING          reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    BOOL            reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    NULL            reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ARRAY           reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    IF              reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    WHILE           reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    SWITCH          reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FOR             reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    RBRACE          reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    BREAK           reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    CASE            reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ELSE            reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ELSEIF          reduce using rule 119 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)


state 131

    (105) argumentos -> argumento COMMA argumentos .

    RPAREN          reduce using rule 105 (argumentos -> argumento COMMA argumentos .)


state 132

    (109) argumento -> VARIABLE EQUALS valor .

    COMMA           reduce using rule 109 (argumento -> VARIABLE EQUALS valor .)
    RPAREN          reduce using rule 109 (argumento -> VARIABLE EQUALS valor .)


state 133

    (110) argumento -> type VARIABLE EQUALS . valor
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    VARIABLE        shift and go to state 48
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    valor                          shift and go to state 149

state 134

    (54) conditions -> LPAREN condition RPAREN .

    RPAREN          reduce using rule 54 (conditions -> LPAREN condition RPAREN .)


state 135

    (47) if -> IF LPAREN conditions RPAREN LBRACE . body RBRACE
    (48) if -> IF LPAREN conditions RPAREN LBRACE . body RBRACE else_blocks
    (75) body -> . sentenciaList
    (76) body -> . sentencia
    (77) body -> . empty
    (78) sentenciaList -> . sentencia
    (79) sentenciaList -> . sentencia sentenciaList
    (4) sentencia -> . asignacion
    (5) sentencia -> . comparacion
    (6) sentencia -> . impresion
    (7) sentencia -> . estructurasPrograma
    (8) sentencia -> . funcionDeclaration
    (9) sentencia -> . returnStatement
    (10) sentencia -> . llamadaFuncion
    (41) empty -> .
    (13) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) comparacion -> . valor comparador valor
    (33) impresion -> . ECHO imprimir SEMICOLON
    (34) impresion -> . PRINT imprimir SEMICOLON
    (42) estructurasPrograma -> . controlStructure
    (118) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (11) returnStatement -> . RETURN valor SEMICOLON
    (12) returnStatement -> . RETURN SEMICOLON
    (119) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (43) controlStructure -> . if
    (44) controlStructure -> . for
    (45) controlStructure -> . while
    (46) controlStructure -> . switch
    (47) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE
    (48) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (49) if -> . IF LPAREN conditions RPAREN body
    (80) for -> . forStatement
    (84) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (85) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (86) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (87) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (81) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE

    RBRACE          reduce using rule 41 (empty -> .)
    VARIABLE        shift and go to state 12
    ECHO            shift and go to state 14
    PRINT           shift and go to state 15
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 19
    ID              shift and go to state 18
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    SWITCH          shift and go to state 33
    FOR             shift and go to state 34

    body                           shift and go to state 150
    sentenciaList                  shift and go to state 137
    sentencia                      shift and go to state 138
    empty                          shift and go to state 139
    asignacion                     shift and go to state 5
    comparacion                    shift and go to state 6
    impresion                      shift and go to state 7
    estructurasPrograma            shift and go to state 8
    funcionDeclaration             shift and go to state 9
    returnStatement                shift and go to state 10
    llamadaFuncion                 shift and go to state 11
    valor                          shift and go to state 13
    controlStructure               shift and go to state 16
    if                             shift and go to state 26
    for                            shift and go to state 27
    while                          shift and go to state 28
    switch                         shift and go to state 29
    forStatement                   shift and go to state 31

state 136

    (49) if -> IF LPAREN conditions RPAREN body .

    VARIABLE        reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    ECHO            reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    PRINT           reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    FUNCTION        reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    RETURN          reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    ID              reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    INT             reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    FLOAT           reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    STRING          reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    BOOL            reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    NULL            reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    ARRAY           reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    IF              reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    WHILE           reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    SWITCH          reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    FOR             reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    CLOSETAG        reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    RBRACE          reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    BREAK           reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    ENDSWITCH       reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    CASE            reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    DEFAULT         reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    ELSE            reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)
    ELSEIF          reduce using rule 49 (if -> IF LPAREN conditions RPAREN body .)


state 137

    (75) body -> sentenciaList .

    VARIABLE        reduce using rule 75 (body -> sentenciaList .)
    ECHO            reduce using rule 75 (body -> sentenciaList .)
    PRINT           reduce using rule 75 (body -> sentenciaList .)
    FUNCTION        reduce using rule 75 (body -> sentenciaList .)
    RETURN          reduce using rule 75 (body -> sentenciaList .)
    ID              reduce using rule 75 (body -> sentenciaList .)
    INT             reduce using rule 75 (body -> sentenciaList .)
    FLOAT           reduce using rule 75 (body -> sentenciaList .)
    STRING          reduce using rule 75 (body -> sentenciaList .)
    BOOL            reduce using rule 75 (body -> sentenciaList .)
    NULL            reduce using rule 75 (body -> sentenciaList .)
    ARRAY           reduce using rule 75 (body -> sentenciaList .)
    IF              reduce using rule 75 (body -> sentenciaList .)
    WHILE           reduce using rule 75 (body -> sentenciaList .)
    SWITCH          reduce using rule 75 (body -> sentenciaList .)
    FOR             reduce using rule 75 (body -> sentenciaList .)
    CLOSETAG        reduce using rule 75 (body -> sentenciaList .)
    RBRACE          reduce using rule 75 (body -> sentenciaList .)
    BREAK           reduce using rule 75 (body -> sentenciaList .)
    ENDSWITCH       reduce using rule 75 (body -> sentenciaList .)
    CASE            reduce using rule 75 (body -> sentenciaList .)
    DEFAULT         reduce using rule 75 (body -> sentenciaList .)
    ELSE            reduce using rule 75 (body -> sentenciaList .)
    ELSEIF          reduce using rule 75 (body -> sentenciaList .)


state 138

    (76) body -> sentencia .
    (78) sentenciaList -> sentencia .
    (79) sentenciaList -> sentencia . sentenciaList
    (78) sentenciaList -> . sentencia
    (79) sentenciaList -> . sentencia sentenciaList
    (4) sentencia -> . asignacion
    (5) sentencia -> . comparacion
    (6) sentencia -> . impresion
    (7) sentencia -> . estructurasPrograma
    (8) sentencia -> . funcionDeclaration
    (9) sentencia -> . returnStatement
    (10) sentencia -> . llamadaFuncion
    (13) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) comparacion -> . valor comparador valor
    (33) impresion -> . ECHO imprimir SEMICOLON
    (34) impresion -> . PRINT imprimir SEMICOLON
    (42) estructurasPrograma -> . controlStructure
    (118) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (11) returnStatement -> . RETURN valor SEMICOLON
    (12) returnStatement -> . RETURN SEMICOLON
    (119) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (43) controlStructure -> . if
    (44) controlStructure -> . for
    (45) controlStructure -> . while
    (46) controlStructure -> . switch
    (47) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE
    (48) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (49) if -> . IF LPAREN conditions RPAREN body
    (80) for -> . forStatement
    (84) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (85) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (86) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (87) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (81) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE

  ! reduce/reduce conflict for VARIABLE resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for ECHO resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for PRINT resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for RETURN resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for ID resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for INT resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for FLOAT resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for STRING resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for BOOL resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for NULL resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for ARRAY resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for IF resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for WHILE resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for SWITCH resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for FOR resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for CLOSETAG resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for RBRACE resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for BREAK resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for ENDSWITCH resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for CASE resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for ELSE resolved using rule 76 (body -> sentencia .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 76 (body -> sentencia .)
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CLOSETAG        reduce using rule 76 (body -> sentencia .)
    RBRACE          reduce using rule 76 (body -> sentencia .)
    BREAK           reduce using rule 76 (body -> sentencia .)
    ENDSWITCH       reduce using rule 76 (body -> sentencia .)
    CASE            reduce using rule 76 (body -> sentencia .)
    DEFAULT         reduce using rule 76 (body -> sentencia .)
    ELSE            reduce using rule 76 (body -> sentencia .)
    ELSEIF          reduce using rule 76 (body -> sentencia .)
    VARIABLE        shift and go to state 12
    ECHO            shift and go to state 14
    PRINT           shift and go to state 15
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 19
    ID              shift and go to state 18
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    SWITCH          shift and go to state 33
    FOR             shift and go to state 34

  ! VARIABLE        [ reduce using rule 76 (body -> sentencia .) ]
  ! ECHO            [ reduce using rule 76 (body -> sentencia .) ]
  ! PRINT           [ reduce using rule 76 (body -> sentencia .) ]
  ! FUNCTION        [ reduce using rule 76 (body -> sentencia .) ]
  ! RETURN          [ reduce using rule 76 (body -> sentencia .) ]
  ! ID              [ reduce using rule 76 (body -> sentencia .) ]
  ! INT             [ reduce using rule 76 (body -> sentencia .) ]
  ! FLOAT           [ reduce using rule 76 (body -> sentencia .) ]
  ! STRING          [ reduce using rule 76 (body -> sentencia .) ]
  ! BOOL            [ reduce using rule 76 (body -> sentencia .) ]
  ! NULL            [ reduce using rule 76 (body -> sentencia .) ]
  ! ARRAY           [ reduce using rule 76 (body -> sentencia .) ]
  ! IF              [ reduce using rule 76 (body -> sentencia .) ]
  ! WHILE           [ reduce using rule 76 (body -> sentencia .) ]
  ! SWITCH          [ reduce using rule 76 (body -> sentencia .) ]
  ! FOR             [ reduce using rule 76 (body -> sentencia .) ]
  ! VARIABLE        [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! ECHO            [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! PRINT           [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! FUNCTION        [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! RETURN          [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! ID              [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! INT             [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! FLOAT           [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! STRING          [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! BOOL            [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! NULL            [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! ARRAY           [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! IF              [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! WHILE           [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! SWITCH          [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! FOR             [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! CLOSETAG        [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! RBRACE          [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! BREAK           [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! ENDSWITCH       [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! CASE            [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! DEFAULT         [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! ELSE            [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! ELSEIF          [ reduce using rule 78 (sentenciaList -> sentencia .) ]

    sentencia                      shift and go to state 151
    sentenciaList                  shift and go to state 152
    asignacion                     shift and go to state 5
    comparacion                    shift and go to state 6
    impresion                      shift and go to state 7
    estructurasPrograma            shift and go to state 8
    funcionDeclaration             shift and go to state 9
    returnStatement                shift and go to state 10
    llamadaFuncion                 shift and go to state 11
    valor                          shift and go to state 13
    controlStructure               shift and go to state 16
    if                             shift and go to state 26
    for                            shift and go to state 27
    while                          shift and go to state 28
    switch                         shift and go to state 29
    forStatement                   shift and go to state 31

state 139

    (77) body -> empty .

    VARIABLE        reduce using rule 77 (body -> empty .)
    ECHO            reduce using rule 77 (body -> empty .)
    PRINT           reduce using rule 77 (body -> empty .)
    FUNCTION        reduce using rule 77 (body -> empty .)
    RETURN          reduce using rule 77 (body -> empty .)
    ID              reduce using rule 77 (body -> empty .)
    INT             reduce using rule 77 (body -> empty .)
    FLOAT           reduce using rule 77 (body -> empty .)
    STRING          reduce using rule 77 (body -> empty .)
    BOOL            reduce using rule 77 (body -> empty .)
    NULL            reduce using rule 77 (body -> empty .)
    ARRAY           reduce using rule 77 (body -> empty .)
    IF              reduce using rule 77 (body -> empty .)
    WHILE           reduce using rule 77 (body -> empty .)
    SWITCH          reduce using rule 77 (body -> empty .)
    FOR             reduce using rule 77 (body -> empty .)
    CLOSETAG        reduce using rule 77 (body -> empty .)
    RBRACE          reduce using rule 77 (body -> empty .)
    BREAK           reduce using rule 77 (body -> empty .)
    ENDSWITCH       reduce using rule 77 (body -> empty .)
    CASE            reduce using rule 77 (body -> empty .)
    DEFAULT         reduce using rule 77 (body -> empty .)
    ELSE            reduce using rule 77 (body -> empty .)
    ELSEIF          reduce using rule 77 (body -> empty .)


state 140

    (55) conditions -> condition opLogic conditions .

    RPAREN          reduce using rule 55 (conditions -> condition opLogic conditions .)


state 141

    (59) condition -> valor opSymbol valor .

    AND             reduce using rule 59 (condition -> valor opSymbol valor .)
    LOGICAL_AND     reduce using rule 59 (condition -> valor opSymbol valor .)
    OR              reduce using rule 59 (condition -> valor opSymbol valor .)
    LOGICAL_OR      reduce using rule 59 (condition -> valor opSymbol valor .)
    RPAREN          reduce using rule 59 (condition -> valor opSymbol valor .)


state 142

    (60) condition -> operaArit opSymbol operaArit .

    AND             reduce using rule 60 (condition -> operaArit opSymbol operaArit .)
    LOGICAL_AND     reduce using rule 60 (condition -> operaArit opSymbol operaArit .)
    OR              reduce using rule 60 (condition -> operaArit opSymbol operaArit .)
    LOGICAL_OR      reduce using rule 60 (condition -> operaArit opSymbol operaArit .)
    RPAREN          reduce using rule 60 (condition -> operaArit opSymbol operaArit .)


state 143

    (84) while -> WHILE LPAREN condition RPAREN LBRACE . body RBRACE
    (85) while -> WHILE LPAREN condition RPAREN LBRACE . RBRACE
    (75) body -> . sentenciaList
    (76) body -> . sentencia
    (77) body -> . empty
    (78) sentenciaList -> . sentencia
    (79) sentenciaList -> . sentencia sentenciaList
    (4) sentencia -> . asignacion
    (5) sentencia -> . comparacion
    (6) sentencia -> . impresion
    (7) sentencia -> . estructurasPrograma
    (8) sentencia -> . funcionDeclaration
    (9) sentencia -> . returnStatement
    (10) sentencia -> . llamadaFuncion
    (41) empty -> .
    (13) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) comparacion -> . valor comparador valor
    (33) impresion -> . ECHO imprimir SEMICOLON
    (34) impresion -> . PRINT imprimir SEMICOLON
    (42) estructurasPrograma -> . controlStructure
    (118) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (11) returnStatement -> . RETURN valor SEMICOLON
    (12) returnStatement -> . RETURN SEMICOLON
    (119) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (43) controlStructure -> . if
    (44) controlStructure -> . for
    (45) controlStructure -> . while
    (46) controlStructure -> . switch
    (47) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE
    (48) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (49) if -> . IF LPAREN conditions RPAREN body
    (80) for -> . forStatement
    (84) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (85) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (86) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (87) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (81) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 154
    VARIABLE        shift and go to state 12
    ECHO            shift and go to state 14
    PRINT           shift and go to state 15
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 19
    ID              shift and go to state 18
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    SWITCH          shift and go to state 33
    FOR             shift and go to state 34

  ! RBRACE          [ reduce using rule 41 (empty -> .) ]

    body                           shift and go to state 153
    sentenciaList                  shift and go to state 137
    sentencia                      shift and go to state 138
    empty                          shift and go to state 139
    asignacion                     shift and go to state 5
    comparacion                    shift and go to state 6
    impresion                      shift and go to state 7
    estructurasPrograma            shift and go to state 8
    funcionDeclaration             shift and go to state 9
    returnStatement                shift and go to state 10
    llamadaFuncion                 shift and go to state 11
    valor                          shift and go to state 13
    controlStructure               shift and go to state 16
    if                             shift and go to state 26
    for                            shift and go to state 27
    while                          shift and go to state 28
    switch                         shift and go to state 29
    forStatement                   shift and go to state 31

state 144

    (86) switch -> SWITCH LPAREN valor RPAREN LBRACE . caseLists RBRACE
    (88) caseLists -> . cases
    (89) caseLists -> . cases default
    (90) caseLists -> . default
    (91) caseLists -> . empty
    (92) cases -> . case
    (93) cases -> . case cases
    (99) default -> . DEFAULT COLON body BREAK SEMICOLON
    (100) default -> . DEFAULT SEMICOLON body BREAK SEMICOLON
    (101) default -> . DEFAULT COLON body
    (102) default -> . DEFAULT SEMICOLON body
    (103) default -> . DEFAULT
    (41) empty -> .
    (94) case -> . CASE valor COLON body BREAK SEMICOLON
    (95) case -> . CASE valor SEMICOLON body BREAK SEMICOLON
    (96) case -> . CASE valor COLON body
    (97) case -> . CASE valor SEMICOLON
    (98) case -> . CASE valor

    DEFAULT         shift and go to state 160
    RBRACE          reduce using rule 41 (empty -> .)
    CASE            shift and go to state 161

    caseLists                      shift and go to state 155
    cases                          shift and go to state 156
    default                        shift and go to state 157
    empty                          shift and go to state 158
    case                           shift and go to state 159

state 145

    (87) switch -> SWITCH LPAREN valor RPAREN COLON . caseLists ENDSWITCH SEMICOLON
    (88) caseLists -> . cases
    (89) caseLists -> . cases default
    (90) caseLists -> . default
    (91) caseLists -> . empty
    (92) cases -> . case
    (93) cases -> . case cases
    (99) default -> . DEFAULT COLON body BREAK SEMICOLON
    (100) default -> . DEFAULT SEMICOLON body BREAK SEMICOLON
    (101) default -> . DEFAULT COLON body
    (102) default -> . DEFAULT SEMICOLON body
    (103) default -> . DEFAULT
    (41) empty -> .
    (94) case -> . CASE valor COLON body BREAK SEMICOLON
    (95) case -> . CASE valor SEMICOLON body BREAK SEMICOLON
    (96) case -> . CASE valor COLON body
    (97) case -> . CASE valor SEMICOLON
    (98) case -> . CASE valor

    DEFAULT         shift and go to state 160
    ENDSWITCH       reduce using rule 41 (empty -> .)
    CASE            shift and go to state 161

    caseLists                      shift and go to state 162
    cases                          shift and go to state 156
    default                        shift and go to state 157
    empty                          shift and go to state 158
    case                           shift and go to state 159

state 146

    (81) forStatement -> FOR LPAREN forcondition RPAREN LBRACE . body RBRACE
    (75) body -> . sentenciaList
    (76) body -> . sentencia
    (77) body -> . empty
    (78) sentenciaList -> . sentencia
    (79) sentenciaList -> . sentencia sentenciaList
    (4) sentencia -> . asignacion
    (5) sentencia -> . comparacion
    (6) sentencia -> . impresion
    (7) sentencia -> . estructurasPrograma
    (8) sentencia -> . funcionDeclaration
    (9) sentencia -> . returnStatement
    (10) sentencia -> . llamadaFuncion
    (41) empty -> .
    (13) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) comparacion -> . valor comparador valor
    (33) impresion -> . ECHO imprimir SEMICOLON
    (34) impresion -> . PRINT imprimir SEMICOLON
    (42) estructurasPrograma -> . controlStructure
    (118) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (11) returnStatement -> . RETURN valor SEMICOLON
    (12) returnStatement -> . RETURN SEMICOLON
    (119) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (43) controlStructure -> . if
    (44) controlStructure -> . for
    (45) controlStructure -> . while
    (46) controlStructure -> . switch
    (47) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE
    (48) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (49) if -> . IF LPAREN conditions RPAREN body
    (80) for -> . forStatement
    (84) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (85) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (86) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (87) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (81) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE

    RBRACE          reduce using rule 41 (empty -> .)
    VARIABLE        shift and go to state 12
    ECHO            shift and go to state 14
    PRINT           shift and go to state 15
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 19
    ID              shift and go to state 18
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    SWITCH          shift and go to state 33
    FOR             shift and go to state 34

    body                           shift and go to state 163
    sentenciaList                  shift and go to state 137
    sentencia                      shift and go to state 138
    empty                          shift and go to state 139
    asignacion                     shift and go to state 5
    comparacion                    shift and go to state 6
    impresion                      shift and go to state 7
    estructurasPrograma            shift and go to state 8
    funcionDeclaration             shift and go to state 9
    returnStatement                shift and go to state 10
    llamadaFuncion                 shift and go to state 11
    valor                          shift and go to state 13
    controlStructure               shift and go to state 16
    if                             shift and go to state 26
    for                            shift and go to state 27
    while                          shift and go to state 28
    switch                         shift and go to state 29
    forStatement                   shift and go to state 31

state 147

    (82) forcondition -> VARIABLE EQUALS INT . SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (83) forcondition -> VARIABLE EQUALS INT . SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    SEMICOLON       shift and go to state 164


state 148

    (118) funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE . body RBRACE
    (75) body -> . sentenciaList
    (76) body -> . sentencia
    (77) body -> . empty
    (78) sentenciaList -> . sentencia
    (79) sentenciaList -> . sentencia sentenciaList
    (4) sentencia -> . asignacion
    (5) sentencia -> . comparacion
    (6) sentencia -> . impresion
    (7) sentencia -> . estructurasPrograma
    (8) sentencia -> . funcionDeclaration
    (9) sentencia -> . returnStatement
    (10) sentencia -> . llamadaFuncion
    (41) empty -> .
    (13) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) comparacion -> . valor comparador valor
    (33) impresion -> . ECHO imprimir SEMICOLON
    (34) impresion -> . PRINT imprimir SEMICOLON
    (42) estructurasPrograma -> . controlStructure
    (118) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (11) returnStatement -> . RETURN valor SEMICOLON
    (12) returnStatement -> . RETURN SEMICOLON
    (119) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (43) controlStructure -> . if
    (44) controlStructure -> . for
    (45) controlStructure -> . while
    (46) controlStructure -> . switch
    (47) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE
    (48) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (49) if -> . IF LPAREN conditions RPAREN body
    (80) for -> . forStatement
    (84) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (85) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (86) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (87) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (81) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE

    RBRACE          reduce using rule 41 (empty -> .)
    VARIABLE        shift and go to state 12
    ECHO            shift and go to state 14
    PRINT           shift and go to state 15
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 19
    ID              shift and go to state 18
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    SWITCH          shift and go to state 33
    FOR             shift and go to state 34

    body                           shift and go to state 165
    sentenciaList                  shift and go to state 137
    sentencia                      shift and go to state 138
    empty                          shift and go to state 139
    asignacion                     shift and go to state 5
    comparacion                    shift and go to state 6
    impresion                      shift and go to state 7
    estructurasPrograma            shift and go to state 8
    funcionDeclaration             shift and go to state 9
    returnStatement                shift and go to state 10
    llamadaFuncion                 shift and go to state 11
    valor                          shift and go to state 13
    controlStructure               shift and go to state 16
    if                             shift and go to state 26
    for                            shift and go to state 27
    while                          shift and go to state 28
    switch                         shift and go to state 29
    forStatement                   shift and go to state 31

state 149

    (110) argumento -> type VARIABLE EQUALS valor .

    COMMA           reduce using rule 110 (argumento -> type VARIABLE EQUALS valor .)
    RPAREN          reduce using rule 110 (argumento -> type VARIABLE EQUALS valor .)


state 150

    (47) if -> IF LPAREN conditions RPAREN LBRACE body . RBRACE
    (48) if -> IF LPAREN conditions RPAREN LBRACE body . RBRACE else_blocks

    RBRACE          shift and go to state 166


state 151

    (78) sentenciaList -> sentencia .
    (79) sentenciaList -> sentencia . sentenciaList
    (78) sentenciaList -> . sentencia
    (79) sentenciaList -> . sentencia sentenciaList
    (4) sentencia -> . asignacion
    (5) sentencia -> . comparacion
    (6) sentencia -> . impresion
    (7) sentencia -> . estructurasPrograma
    (8) sentencia -> . funcionDeclaration
    (9) sentencia -> . returnStatement
    (10) sentencia -> . llamadaFuncion
    (13) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) comparacion -> . valor comparador valor
    (33) impresion -> . ECHO imprimir SEMICOLON
    (34) impresion -> . PRINT imprimir SEMICOLON
    (42) estructurasPrograma -> . controlStructure
    (118) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (11) returnStatement -> . RETURN valor SEMICOLON
    (12) returnStatement -> . RETURN SEMICOLON
    (119) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (43) controlStructure -> . if
    (44) controlStructure -> . for
    (45) controlStructure -> . while
    (46) controlStructure -> . switch
    (47) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE
    (48) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (49) if -> . IF LPAREN conditions RPAREN body
    (80) for -> . forStatement
    (84) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (85) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (86) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (87) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (81) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CLOSETAG        reduce using rule 78 (sentenciaList -> sentencia .)
    RBRACE          reduce using rule 78 (sentenciaList -> sentencia .)
    BREAK           reduce using rule 78 (sentenciaList -> sentencia .)
    ENDSWITCH       reduce using rule 78 (sentenciaList -> sentencia .)
    CASE            reduce using rule 78 (sentenciaList -> sentencia .)
    DEFAULT         reduce using rule 78 (sentenciaList -> sentencia .)
    ELSE            reduce using rule 78 (sentenciaList -> sentencia .)
    ELSEIF          reduce using rule 78 (sentenciaList -> sentencia .)
    VARIABLE        shift and go to state 12
    ECHO            shift and go to state 14
    PRINT           shift and go to state 15
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 19
    ID              shift and go to state 18
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    SWITCH          shift and go to state 33
    FOR             shift and go to state 34

  ! VARIABLE        [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! ECHO            [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! PRINT           [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! FUNCTION        [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! RETURN          [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! ID              [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! INT             [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! FLOAT           [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! STRING          [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! BOOL            [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! NULL            [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! ARRAY           [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! IF              [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! WHILE           [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! SWITCH          [ reduce using rule 78 (sentenciaList -> sentencia .) ]
  ! FOR             [ reduce using rule 78 (sentenciaList -> sentencia .) ]

    sentencia                      shift and go to state 151
    sentenciaList                  shift and go to state 152
    asignacion                     shift and go to state 5
    comparacion                    shift and go to state 6
    impresion                      shift and go to state 7
    estructurasPrograma            shift and go to state 8
    funcionDeclaration             shift and go to state 9
    returnStatement                shift and go to state 10
    llamadaFuncion                 shift and go to state 11
    valor                          shift and go to state 13
    controlStructure               shift and go to state 16
    if                             shift and go to state 26
    for                            shift and go to state 27
    while                          shift and go to state 28
    switch                         shift and go to state 29
    forStatement                   shift and go to state 31

state 152

    (79) sentenciaList -> sentencia sentenciaList .

    VARIABLE        reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    ECHO            reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    PRINT           reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    FUNCTION        reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    RETURN          reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    ID              reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    INT             reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    FLOAT           reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    STRING          reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    BOOL            reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    NULL            reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    ARRAY           reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    IF              reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    WHILE           reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    SWITCH          reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    FOR             reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    CLOSETAG        reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    RBRACE          reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    BREAK           reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    ENDSWITCH       reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    CASE            reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    DEFAULT         reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    ELSE            reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)
    ELSEIF          reduce using rule 79 (sentenciaList -> sentencia sentenciaList .)


state 153

    (84) while -> WHILE LPAREN condition RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 167


state 154

    (85) while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .

    VARIABLE        reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ECHO            reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    PRINT           reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FUNCTION        reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ID              reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    INT             reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FLOAT           reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    STRING          reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    BOOL            reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    NULL            reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ARRAY           reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    IF              reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    WHILE           reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    SWITCH          reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FOR             reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    CLOSETAG        reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    RBRACE          reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    BREAK           reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ENDSWITCH       reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    CASE            reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    DEFAULT         reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ELSE            reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ELSEIF          reduce using rule 85 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)


state 155

    (86) switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists . RBRACE

    RBRACE          shift and go to state 168


state 156

    (88) caseLists -> cases .
    (89) caseLists -> cases . default
    (99) default -> . DEFAULT COLON body BREAK SEMICOLON
    (100) default -> . DEFAULT SEMICOLON body BREAK SEMICOLON
    (101) default -> . DEFAULT COLON body
    (102) default -> . DEFAULT SEMICOLON body
    (103) default -> . DEFAULT

    RBRACE          reduce using rule 88 (caseLists -> cases .)
    ENDSWITCH       reduce using rule 88 (caseLists -> cases .)
    DEFAULT         shift and go to state 160

    default                        shift and go to state 169

state 157

    (90) caseLists -> default .

    RBRACE          reduce using rule 90 (caseLists -> default .)
    ENDSWITCH       reduce using rule 90 (caseLists -> default .)


state 158

    (91) caseLists -> empty .

    RBRACE          reduce using rule 91 (caseLists -> empty .)
    ENDSWITCH       reduce using rule 91 (caseLists -> empty .)


state 159

    (92) cases -> case .
    (93) cases -> case . cases
    (92) cases -> . case
    (93) cases -> . case cases
    (94) case -> . CASE valor COLON body BREAK SEMICOLON
    (95) case -> . CASE valor SEMICOLON body BREAK SEMICOLON
    (96) case -> . CASE valor COLON body
    (97) case -> . CASE valor SEMICOLON
    (98) case -> . CASE valor

    DEFAULT         reduce using rule 92 (cases -> case .)
    RBRACE          reduce using rule 92 (cases -> case .)
    ENDSWITCH       reduce using rule 92 (cases -> case .)
    CASE            shift and go to state 161

    case                           shift and go to state 159
    cases                          shift and go to state 170

state 160

    (99) default -> DEFAULT . COLON body BREAK SEMICOLON
    (100) default -> DEFAULT . SEMICOLON body BREAK SEMICOLON
    (101) default -> DEFAULT . COLON body
    (102) default -> DEFAULT . SEMICOLON body
    (103) default -> DEFAULT .

    COLON           shift and go to state 171
    SEMICOLON       shift and go to state 172
    RBRACE          reduce using rule 103 (default -> DEFAULT .)
    ENDSWITCH       reduce using rule 103 (default -> DEFAULT .)


state 161

    (94) case -> CASE . valor COLON body BREAK SEMICOLON
    (95) case -> CASE . valor SEMICOLON body BREAK SEMICOLON
    (96) case -> CASE . valor COLON body
    (97) case -> CASE . valor SEMICOLON
    (98) case -> CASE . valor
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    VARIABLE        shift and go to state 48
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    valor                          shift and go to state 173

state 162

    (87) switch -> SWITCH LPAREN valor RPAREN COLON caseLists . ENDSWITCH SEMICOLON

    ENDSWITCH       shift and go to state 174


state 163

    (81) forStatement -> FOR LPAREN forcondition RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 175


state 164

    (82) forcondition -> VARIABLE EQUALS INT SEMICOLON . VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (83) forcondition -> VARIABLE EQUALS INT SEMICOLON . VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    VARIABLE        shift and go to state 176


state 165

    (118) funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 177


state 166

    (47) if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .
    (48) if -> IF LPAREN conditions RPAREN LBRACE body RBRACE . else_blocks
    (50) else_blocks -> . ELSE LBRACE body RBRACE
    (51) else_blocks -> . ELSE COLON body
    (52) else_blocks -> . ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (53) else_blocks -> . ELSEIF LPAREN conditions RPAREN COLON body else_blocks

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    VARIABLE        reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .)
    ELSE            shift and go to state 179
    ELSEIF          shift and go to state 180

  ! ELSE            [ reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .) ]
  ! ELSEIF          [ reduce using rule 47 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE .) ]

    else_blocks                    shift and go to state 178

state 167

    (84) while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .

    VARIABLE        reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ELSE            reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ELSEIF          reduce using rule 84 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)


state 168

    (86) switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .

    VARIABLE        reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ECHO            reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    PRINT           reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FUNCTION        reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    RETURN          reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ID              reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    INT             reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FLOAT           reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    STRING          reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    BOOL            reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    NULL            reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ARRAY           reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    IF              reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    WHILE           reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    SWITCH          reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FOR             reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    CLOSETAG        reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    RBRACE          reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    BREAK           reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ENDSWITCH       reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    CASE            reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    DEFAULT         reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ELSE            reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ELSEIF          reduce using rule 86 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)


state 169

    (89) caseLists -> cases default .

    RBRACE          reduce using rule 89 (caseLists -> cases default .)
    ENDSWITCH       reduce using rule 89 (caseLists -> cases default .)


state 170

    (93) cases -> case cases .

    DEFAULT         reduce using rule 93 (cases -> case cases .)
    RBRACE          reduce using rule 93 (cases -> case cases .)
    ENDSWITCH       reduce using rule 93 (cases -> case cases .)


state 171

    (99) default -> DEFAULT COLON . body BREAK SEMICOLON
    (101) default -> DEFAULT COLON . body
    (75) body -> . sentenciaList
    (76) body -> . sentencia
    (77) body -> . empty
    (78) sentenciaList -> . sentencia
    (79) sentenciaList -> . sentencia sentenciaList
    (4) sentencia -> . asignacion
    (5) sentencia -> . comparacion
    (6) sentencia -> . impresion
    (7) sentencia -> . estructurasPrograma
    (8) sentencia -> . funcionDeclaration
    (9) sentencia -> . returnStatement
    (10) sentencia -> . llamadaFuncion
    (41) empty -> .
    (13) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) comparacion -> . valor comparador valor
    (33) impresion -> . ECHO imprimir SEMICOLON
    (34) impresion -> . PRINT imprimir SEMICOLON
    (42) estructurasPrograma -> . controlStructure
    (118) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (11) returnStatement -> . RETURN valor SEMICOLON
    (12) returnStatement -> . RETURN SEMICOLON
    (119) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (43) controlStructure -> . if
    (44) controlStructure -> . for
    (45) controlStructure -> . while
    (46) controlStructure -> . switch
    (47) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE
    (48) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (49) if -> . IF LPAREN conditions RPAREN body
    (80) for -> . forStatement
    (84) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (85) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (86) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (87) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (81) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE

    BREAK           reduce using rule 41 (empty -> .)
    RBRACE          reduce using rule 41 (empty -> .)
    ENDSWITCH       reduce using rule 41 (empty -> .)
    VARIABLE        shift and go to state 12
    ECHO            shift and go to state 14
    PRINT           shift and go to state 15
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 19
    ID              shift and go to state 18
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    SWITCH          shift and go to state 33
    FOR             shift and go to state 34

    body                           shift and go to state 181
    sentenciaList                  shift and go to state 137
    sentencia                      shift and go to state 138
    empty                          shift and go to state 139
    asignacion                     shift and go to state 5
    comparacion                    shift and go to state 6
    impresion                      shift and go to state 7
    estructurasPrograma            shift and go to state 8
    funcionDeclaration             shift and go to state 9
    returnStatement                shift and go to state 10
    llamadaFuncion                 shift and go to state 11
    valor                          shift and go to state 13
    controlStructure               shift and go to state 16
    if                             shift and go to state 26
    for                            shift and go to state 27
    while                          shift and go to state 28
    switch                         shift and go to state 29
    forStatement                   shift and go to state 31

state 172

    (100) default -> DEFAULT SEMICOLON . body BREAK SEMICOLON
    (102) default -> DEFAULT SEMICOLON . body
    (75) body -> . sentenciaList
    (76) body -> . sentencia
    (77) body -> . empty
    (78) sentenciaList -> . sentencia
    (79) sentenciaList -> . sentencia sentenciaList
    (4) sentencia -> . asignacion
    (5) sentencia -> . comparacion
    (6) sentencia -> . impresion
    (7) sentencia -> . estructurasPrograma
    (8) sentencia -> . funcionDeclaration
    (9) sentencia -> . returnStatement
    (10) sentencia -> . llamadaFuncion
    (41) empty -> .
    (13) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) comparacion -> . valor comparador valor
    (33) impresion -> . ECHO imprimir SEMICOLON
    (34) impresion -> . PRINT imprimir SEMICOLON
    (42) estructurasPrograma -> . controlStructure
    (118) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (11) returnStatement -> . RETURN valor SEMICOLON
    (12) returnStatement -> . RETURN SEMICOLON
    (119) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (43) controlStructure -> . if
    (44) controlStructure -> . for
    (45) controlStructure -> . while
    (46) controlStructure -> . switch
    (47) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE
    (48) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (49) if -> . IF LPAREN conditions RPAREN body
    (80) for -> . forStatement
    (84) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (85) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (86) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (87) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (81) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE

    BREAK           reduce using rule 41 (empty -> .)
    RBRACE          reduce using rule 41 (empty -> .)
    ENDSWITCH       reduce using rule 41 (empty -> .)
    VARIABLE        shift and go to state 12
    ECHO            shift and go to state 14
    PRINT           shift and go to state 15
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 19
    ID              shift and go to state 18
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    SWITCH          shift and go to state 33
    FOR             shift and go to state 34

    body                           shift and go to state 182
    sentenciaList                  shift and go to state 137
    sentencia                      shift and go to state 138
    empty                          shift and go to state 139
    asignacion                     shift and go to state 5
    comparacion                    shift and go to state 6
    impresion                      shift and go to state 7
    estructurasPrograma            shift and go to state 8
    funcionDeclaration             shift and go to state 9
    returnStatement                shift and go to state 10
    llamadaFuncion                 shift and go to state 11
    valor                          shift and go to state 13
    controlStructure               shift and go to state 16
    if                             shift and go to state 26
    for                            shift and go to state 27
    while                          shift and go to state 28
    switch                         shift and go to state 29
    forStatement                   shift and go to state 31

state 173

    (94) case -> CASE valor . COLON body BREAK SEMICOLON
    (95) case -> CASE valor . SEMICOLON body BREAK SEMICOLON
    (96) case -> CASE valor . COLON body
    (97) case -> CASE valor . SEMICOLON
    (98) case -> CASE valor .

    COLON           shift and go to state 183
    SEMICOLON       shift and go to state 184
    CASE            reduce using rule 98 (case -> CASE valor .)
    DEFAULT         reduce using rule 98 (case -> CASE valor .)
    RBRACE          reduce using rule 98 (case -> CASE valor .)
    ENDSWITCH       reduce using rule 98 (case -> CASE valor .)


state 174

    (87) switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH . SEMICOLON

    SEMICOLON       shift and go to state 185


state 175

    (81) forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .

    VARIABLE        reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ELSE            reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ELSEIF          reduce using rule 81 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)


state 176

    (82) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE . opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (83) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE . opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS
    (61) opSymbol -> . EQ
    (62) opSymbol -> . NEQ
    (63) opSymbol -> . STRICTEQ
    (64) opSymbol -> . STRICTNEQ
    (65) opSymbol -> . LT
    (66) opSymbol -> . GT
    (67) opSymbol -> . LEQ
    (68) opSymbol -> . GEQ

    EQ              shift and go to state 115
    NEQ             shift and go to state 116
    STRICTEQ        shift and go to state 117
    STRICTNEQ       shift and go to state 118
    LT              shift and go to state 119
    GT              shift and go to state 120
    LEQ             shift and go to state 121
    GEQ             shift and go to state 122

    opSymbol                       shift and go to state 186

state 177

    (118) funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .

    VARIABLE        reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ELSE            reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ELSEIF          reduce using rule 118 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)


state 178

    (48) if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .

    VARIABLE        reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ECHO            reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PRINT           reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FUNCTION        reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    RETURN          reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ID              reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INT             reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FLOAT           reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    STRING          reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    BOOL            reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    NULL            reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ARRAY           reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    IF              reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    WHILE           reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    SWITCH          reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FOR             reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CLOSETAG        reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    RBRACE          reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    BREAK           reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ENDSWITCH       reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CASE            reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    DEFAULT         reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ELSE            reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ELSEIF          reduce using rule 48 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)


state 179

    (50) else_blocks -> ELSE . LBRACE body RBRACE
    (51) else_blocks -> ELSE . COLON body

    LBRACE          shift and go to state 187
    COLON           shift and go to state 188


state 180

    (52) else_blocks -> ELSEIF . LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (53) else_blocks -> ELSEIF . LPAREN conditions RPAREN COLON body else_blocks

    LPAREN          shift and go to state 189


state 181

    (99) default -> DEFAULT COLON body . BREAK SEMICOLON
    (101) default -> DEFAULT COLON body .

    BREAK           shift and go to state 190
    RBRACE          reduce using rule 101 (default -> DEFAULT COLON body .)
    ENDSWITCH       reduce using rule 101 (default -> DEFAULT COLON body .)


state 182

    (100) default -> DEFAULT SEMICOLON body . BREAK SEMICOLON
    (102) default -> DEFAULT SEMICOLON body .

    BREAK           shift and go to state 191
    RBRACE          reduce using rule 102 (default -> DEFAULT SEMICOLON body .)
    ENDSWITCH       reduce using rule 102 (default -> DEFAULT SEMICOLON body .)


state 183

    (94) case -> CASE valor COLON . body BREAK SEMICOLON
    (96) case -> CASE valor COLON . body
    (75) body -> . sentenciaList
    (76) body -> . sentencia
    (77) body -> . empty
    (78) sentenciaList -> . sentencia
    (79) sentenciaList -> . sentencia sentenciaList
    (4) sentencia -> . asignacion
    (5) sentencia -> . comparacion
    (6) sentencia -> . impresion
    (7) sentencia -> . estructurasPrograma
    (8) sentencia -> . funcionDeclaration
    (9) sentencia -> . returnStatement
    (10) sentencia -> . llamadaFuncion
    (41) empty -> .
    (13) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) comparacion -> . valor comparador valor
    (33) impresion -> . ECHO imprimir SEMICOLON
    (34) impresion -> . PRINT imprimir SEMICOLON
    (42) estructurasPrograma -> . controlStructure
    (118) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (11) returnStatement -> . RETURN valor SEMICOLON
    (12) returnStatement -> . RETURN SEMICOLON
    (119) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (43) controlStructure -> . if
    (44) controlStructure -> . for
    (45) controlStructure -> . while
    (46) controlStructure -> . switch
    (47) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE
    (48) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (49) if -> . IF LPAREN conditions RPAREN body
    (80) for -> . forStatement
    (84) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (85) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (86) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (87) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (81) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE

    BREAK           reduce using rule 41 (empty -> .)
    CASE            reduce using rule 41 (empty -> .)
    DEFAULT         reduce using rule 41 (empty -> .)
    RBRACE          reduce using rule 41 (empty -> .)
    ENDSWITCH       reduce using rule 41 (empty -> .)
    VARIABLE        shift and go to state 12
    ECHO            shift and go to state 14
    PRINT           shift and go to state 15
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 19
    ID              shift and go to state 18
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    SWITCH          shift and go to state 33
    FOR             shift and go to state 34

    valor                          shift and go to state 13
    body                           shift and go to state 192
    sentenciaList                  shift and go to state 137
    sentencia                      shift and go to state 138
    empty                          shift and go to state 139
    asignacion                     shift and go to state 5
    comparacion                    shift and go to state 6
    impresion                      shift and go to state 7
    estructurasPrograma            shift and go to state 8
    funcionDeclaration             shift and go to state 9
    returnStatement                shift and go to state 10
    llamadaFuncion                 shift and go to state 11
    controlStructure               shift and go to state 16
    if                             shift and go to state 26
    for                            shift and go to state 27
    while                          shift and go to state 28
    switch                         shift and go to state 29
    forStatement                   shift and go to state 31

state 184

    (95) case -> CASE valor SEMICOLON . body BREAK SEMICOLON
    (97) case -> CASE valor SEMICOLON .
    (75) body -> . sentenciaList
    (76) body -> . sentencia
    (77) body -> . empty
    (78) sentenciaList -> . sentencia
    (79) sentenciaList -> . sentencia sentenciaList
    (4) sentencia -> . asignacion
    (5) sentencia -> . comparacion
    (6) sentencia -> . impresion
    (7) sentencia -> . estructurasPrograma
    (8) sentencia -> . funcionDeclaration
    (9) sentencia -> . returnStatement
    (10) sentencia -> . llamadaFuncion
    (41) empty -> .
    (13) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) comparacion -> . valor comparador valor
    (33) impresion -> . ECHO imprimir SEMICOLON
    (34) impresion -> . PRINT imprimir SEMICOLON
    (42) estructurasPrograma -> . controlStructure
    (118) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (11) returnStatement -> . RETURN valor SEMICOLON
    (12) returnStatement -> . RETURN SEMICOLON
    (119) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (43) controlStructure -> . if
    (44) controlStructure -> . for
    (45) controlStructure -> . while
    (46) controlStructure -> . switch
    (47) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE
    (48) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (49) if -> . IF LPAREN conditions RPAREN body
    (80) for -> . forStatement
    (84) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (85) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (86) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (87) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (81) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE

    CASE            reduce using rule 97 (case -> CASE valor SEMICOLON .)
    DEFAULT         reduce using rule 97 (case -> CASE valor SEMICOLON .)
    RBRACE          reduce using rule 97 (case -> CASE valor SEMICOLON .)
    ENDSWITCH       reduce using rule 97 (case -> CASE valor SEMICOLON .)
    BREAK           reduce using rule 41 (empty -> .)
    VARIABLE        shift and go to state 12
    ECHO            shift and go to state 14
    PRINT           shift and go to state 15
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 19
    ID              shift and go to state 18
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    SWITCH          shift and go to state 33
    FOR             shift and go to state 34

    valor                          shift and go to state 13
    body                           shift and go to state 193
    sentenciaList                  shift and go to state 137
    sentencia                      shift and go to state 138
    empty                          shift and go to state 139
    asignacion                     shift and go to state 5
    comparacion                    shift and go to state 6
    impresion                      shift and go to state 7
    estructurasPrograma            shift and go to state 8
    funcionDeclaration             shift and go to state 9
    returnStatement                shift and go to state 10
    llamadaFuncion                 shift and go to state 11
    controlStructure               shift and go to state 16
    if                             shift and go to state 26
    for                            shift and go to state 27
    while                          shift and go to state 28
    switch                         shift and go to state 29
    forStatement                   shift and go to state 31

state 185

    (87) switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .

    VARIABLE        reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ECHO            reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    PRINT           reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FUNCTION        reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    RETURN          reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ID              reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    INT             reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FLOAT           reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    STRING          reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    BOOL            reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    NULL            reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ARRAY           reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    IF              reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    WHILE           reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    SWITCH          reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FOR             reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    CLOSETAG        reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    RBRACE          reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    BREAK           reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ENDSWITCH       reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    CASE            reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    DEFAULT         reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ELSE            reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ELSEIF          reduce using rule 87 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)


state 186

    (82) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol . INT SEMICOLON VARIABLE DOUBLEPLUS
    (83) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol . INT SEMICOLON VARIABLE DOUBLEMINUS

    INT             shift and go to state 194


state 187

    (50) else_blocks -> ELSE LBRACE . body RBRACE
    (75) body -> . sentenciaList
    (76) body -> . sentencia
    (77) body -> . empty
    (78) sentenciaList -> . sentencia
    (79) sentenciaList -> . sentencia sentenciaList
    (4) sentencia -> . asignacion
    (5) sentencia -> . comparacion
    (6) sentencia -> . impresion
    (7) sentencia -> . estructurasPrograma
    (8) sentencia -> . funcionDeclaration
    (9) sentencia -> . returnStatement
    (10) sentencia -> . llamadaFuncion
    (41) empty -> .
    (13) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) comparacion -> . valor comparador valor
    (33) impresion -> . ECHO imprimir SEMICOLON
    (34) impresion -> . PRINT imprimir SEMICOLON
    (42) estructurasPrograma -> . controlStructure
    (118) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (11) returnStatement -> . RETURN valor SEMICOLON
    (12) returnStatement -> . RETURN SEMICOLON
    (119) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (43) controlStructure -> . if
    (44) controlStructure -> . for
    (45) controlStructure -> . while
    (46) controlStructure -> . switch
    (47) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE
    (48) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (49) if -> . IF LPAREN conditions RPAREN body
    (80) for -> . forStatement
    (84) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (85) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (86) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (87) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (81) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE

    RBRACE          reduce using rule 41 (empty -> .)
    VARIABLE        shift and go to state 12
    ECHO            shift and go to state 14
    PRINT           shift and go to state 15
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 19
    ID              shift and go to state 18
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    SWITCH          shift and go to state 33
    FOR             shift and go to state 34

    body                           shift and go to state 195
    sentenciaList                  shift and go to state 137
    sentencia                      shift and go to state 138
    empty                          shift and go to state 139
    asignacion                     shift and go to state 5
    comparacion                    shift and go to state 6
    impresion                      shift and go to state 7
    estructurasPrograma            shift and go to state 8
    funcionDeclaration             shift and go to state 9
    returnStatement                shift and go to state 10
    llamadaFuncion                 shift and go to state 11
    valor                          shift and go to state 13
    controlStructure               shift and go to state 16
    if                             shift and go to state 26
    for                            shift and go to state 27
    while                          shift and go to state 28
    switch                         shift and go to state 29
    forStatement                   shift and go to state 31

state 188

    (51) else_blocks -> ELSE COLON . body
    (75) body -> . sentenciaList
    (76) body -> . sentencia
    (77) body -> . empty
    (78) sentenciaList -> . sentencia
    (79) sentenciaList -> . sentencia sentenciaList
    (4) sentencia -> . asignacion
    (5) sentencia -> . comparacion
    (6) sentencia -> . impresion
    (7) sentencia -> . estructurasPrograma
    (8) sentencia -> . funcionDeclaration
    (9) sentencia -> . returnStatement
    (10) sentencia -> . llamadaFuncion
    (41) empty -> .
    (13) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) comparacion -> . valor comparador valor
    (33) impresion -> . ECHO imprimir SEMICOLON
    (34) impresion -> . PRINT imprimir SEMICOLON
    (42) estructurasPrograma -> . controlStructure
    (118) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (11) returnStatement -> . RETURN valor SEMICOLON
    (12) returnStatement -> . RETURN SEMICOLON
    (119) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (43) controlStructure -> . if
    (44) controlStructure -> . for
    (45) controlStructure -> . while
    (46) controlStructure -> . switch
    (47) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE
    (48) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (49) if -> . IF LPAREN conditions RPAREN body
    (80) for -> . forStatement
    (84) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (85) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (86) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (87) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (81) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    CLOSETAG        reduce using rule 41 (empty -> .)
    RBRACE          reduce using rule 41 (empty -> .)
    BREAK           reduce using rule 41 (empty -> .)
    ENDSWITCH       reduce using rule 41 (empty -> .)
    CASE            reduce using rule 41 (empty -> .)
    DEFAULT         reduce using rule 41 (empty -> .)
    ELSE            reduce using rule 41 (empty -> .)
    ELSEIF          reduce using rule 41 (empty -> .)
    VARIABLE        shift and go to state 12
    ECHO            shift and go to state 14
    PRINT           shift and go to state 15
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 19
    ID              shift and go to state 18
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    SWITCH          shift and go to state 33
    FOR             shift and go to state 34

  ! VARIABLE        [ reduce using rule 41 (empty -> .) ]
  ! ECHO            [ reduce using rule 41 (empty -> .) ]
  ! PRINT           [ reduce using rule 41 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 41 (empty -> .) ]
  ! RETURN          [ reduce using rule 41 (empty -> .) ]
  ! ID              [ reduce using rule 41 (empty -> .) ]
  ! INT             [ reduce using rule 41 (empty -> .) ]
  ! FLOAT           [ reduce using rule 41 (empty -> .) ]
  ! STRING          [ reduce using rule 41 (empty -> .) ]
  ! BOOL            [ reduce using rule 41 (empty -> .) ]
  ! NULL            [ reduce using rule 41 (empty -> .) ]
  ! ARRAY           [ reduce using rule 41 (empty -> .) ]
  ! IF              [ reduce using rule 41 (empty -> .) ]
  ! WHILE           [ reduce using rule 41 (empty -> .) ]
  ! SWITCH          [ reduce using rule 41 (empty -> .) ]
  ! FOR             [ reduce using rule 41 (empty -> .) ]

    body                           shift and go to state 196
    sentenciaList                  shift and go to state 137
    sentencia                      shift and go to state 138
    empty                          shift and go to state 139
    asignacion                     shift and go to state 5
    comparacion                    shift and go to state 6
    impresion                      shift and go to state 7
    estructurasPrograma            shift and go to state 8
    funcionDeclaration             shift and go to state 9
    returnStatement                shift and go to state 10
    llamadaFuncion                 shift and go to state 11
    valor                          shift and go to state 13
    controlStructure               shift and go to state 16
    if                             shift and go to state 26
    for                            shift and go to state 27
    while                          shift and go to state 28
    switch                         shift and go to state 29
    forStatement                   shift and go to state 31

state 189

    (52) else_blocks -> ELSEIF LPAREN . conditions RPAREN LBRACE body RBRACE else_blocks
    (53) else_blocks -> ELSEIF LPAREN . conditions RPAREN COLON body else_blocks
    (54) conditions -> . LPAREN condition RPAREN
    (55) conditions -> . condition opLogic conditions
    (56) conditions -> . unaryLogic condition
    (57) conditions -> . condition
    (58) condition -> . valor
    (59) condition -> . valor opSymbol valor
    (60) condition -> . operaArit opSymbol operaArit
    (73) unaryLogic -> . NOT
    (74) unaryLogic -> . LOGICAL_NOT
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (14) operaArit -> . valor
    (15) operaArit -> . valor operador operaArit

    LPAREN          shift and go to state 80
    NOT             shift and go to state 86
    LOGICAL_NOT     shift and go to state 87
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    VARIABLE        shift and go to state 48
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25

    conditions                     shift and go to state 197
    condition                      shift and go to state 82
    unaryLogic                     shift and go to state 83
    valor                          shift and go to state 84
    operaArit                      shift and go to state 85

state 190

    (99) default -> DEFAULT COLON body BREAK . SEMICOLON

    SEMICOLON       shift and go to state 198


state 191

    (100) default -> DEFAULT SEMICOLON body BREAK . SEMICOLON

    SEMICOLON       shift and go to state 199


state 192

    (94) case -> CASE valor COLON body . BREAK SEMICOLON
    (96) case -> CASE valor COLON body .

    BREAK           shift and go to state 200
    CASE            reduce using rule 96 (case -> CASE valor COLON body .)
    DEFAULT         reduce using rule 96 (case -> CASE valor COLON body .)
    RBRACE          reduce using rule 96 (case -> CASE valor COLON body .)
    ENDSWITCH       reduce using rule 96 (case -> CASE valor COLON body .)


state 193

    (95) case -> CASE valor SEMICOLON body . BREAK SEMICOLON

    BREAK           shift and go to state 201


state 194

    (82) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT . SEMICOLON VARIABLE DOUBLEPLUS
    (83) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT . SEMICOLON VARIABLE DOUBLEMINUS

    SEMICOLON       shift and go to state 202


state 195

    (50) else_blocks -> ELSE LBRACE body . RBRACE

    RBRACE          shift and go to state 203


state 196

    (51) else_blocks -> ELSE COLON body .

    VARIABLE        reduce using rule 51 (else_blocks -> ELSE COLON body .)
    ECHO            reduce using rule 51 (else_blocks -> ELSE COLON body .)
    PRINT           reduce using rule 51 (else_blocks -> ELSE COLON body .)
    FUNCTION        reduce using rule 51 (else_blocks -> ELSE COLON body .)
    RETURN          reduce using rule 51 (else_blocks -> ELSE COLON body .)
    ID              reduce using rule 51 (else_blocks -> ELSE COLON body .)
    INT             reduce using rule 51 (else_blocks -> ELSE COLON body .)
    FLOAT           reduce using rule 51 (else_blocks -> ELSE COLON body .)
    STRING          reduce using rule 51 (else_blocks -> ELSE COLON body .)
    BOOL            reduce using rule 51 (else_blocks -> ELSE COLON body .)
    NULL            reduce using rule 51 (else_blocks -> ELSE COLON body .)
    ARRAY           reduce using rule 51 (else_blocks -> ELSE COLON body .)
    IF              reduce using rule 51 (else_blocks -> ELSE COLON body .)
    WHILE           reduce using rule 51 (else_blocks -> ELSE COLON body .)
    SWITCH          reduce using rule 51 (else_blocks -> ELSE COLON body .)
    FOR             reduce using rule 51 (else_blocks -> ELSE COLON body .)
    CLOSETAG        reduce using rule 51 (else_blocks -> ELSE COLON body .)
    RBRACE          reduce using rule 51 (else_blocks -> ELSE COLON body .)
    BREAK           reduce using rule 51 (else_blocks -> ELSE COLON body .)
    ENDSWITCH       reduce using rule 51 (else_blocks -> ELSE COLON body .)
    CASE            reduce using rule 51 (else_blocks -> ELSE COLON body .)
    DEFAULT         reduce using rule 51 (else_blocks -> ELSE COLON body .)
    ELSE            reduce using rule 51 (else_blocks -> ELSE COLON body .)
    ELSEIF          reduce using rule 51 (else_blocks -> ELSE COLON body .)


state 197

    (52) else_blocks -> ELSEIF LPAREN conditions . RPAREN LBRACE body RBRACE else_blocks
    (53) else_blocks -> ELSEIF LPAREN conditions . RPAREN COLON body else_blocks

    RPAREN          shift and go to state 204


state 198

    (99) default -> DEFAULT COLON body BREAK SEMICOLON .

    RBRACE          reduce using rule 99 (default -> DEFAULT COLON body BREAK SEMICOLON .)
    ENDSWITCH       reduce using rule 99 (default -> DEFAULT COLON body BREAK SEMICOLON .)


state 199

    (100) default -> DEFAULT SEMICOLON body BREAK SEMICOLON .

    RBRACE          reduce using rule 100 (default -> DEFAULT SEMICOLON body BREAK SEMICOLON .)
    ENDSWITCH       reduce using rule 100 (default -> DEFAULT SEMICOLON body BREAK SEMICOLON .)


state 200

    (94) case -> CASE valor COLON body BREAK . SEMICOLON

    SEMICOLON       shift and go to state 205


state 201

    (95) case -> CASE valor SEMICOLON body BREAK . SEMICOLON

    SEMICOLON       shift and go to state 206


state 202

    (82) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON . VARIABLE DOUBLEPLUS
    (83) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON . VARIABLE DOUBLEMINUS

    VARIABLE        shift and go to state 207


state 203

    (50) else_blocks -> ELSE LBRACE body RBRACE .

    VARIABLE        reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    ECHO            reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    PRINT           reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    FUNCTION        reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    RETURN          reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    ID              reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    INT             reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    FLOAT           reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    STRING          reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    BOOL            reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    NULL            reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    ARRAY           reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    IF              reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    WHILE           reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    SWITCH          reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    FOR             reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    RBRACE          reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    BREAK           reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    CASE            reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    DEFAULT         reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    ELSE            reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)
    ELSEIF          reduce using rule 50 (else_blocks -> ELSE LBRACE body RBRACE .)


state 204

    (52) else_blocks -> ELSEIF LPAREN conditions RPAREN . LBRACE body RBRACE else_blocks
    (53) else_blocks -> ELSEIF LPAREN conditions RPAREN . COLON body else_blocks

    LBRACE          shift and go to state 208
    COLON           shift and go to state 209


state 205

    (94) case -> CASE valor COLON body BREAK SEMICOLON .

    CASE            reduce using rule 94 (case -> CASE valor COLON body BREAK SEMICOLON .)
    DEFAULT         reduce using rule 94 (case -> CASE valor COLON body BREAK SEMICOLON .)
    RBRACE          reduce using rule 94 (case -> CASE valor COLON body BREAK SEMICOLON .)
    ENDSWITCH       reduce using rule 94 (case -> CASE valor COLON body BREAK SEMICOLON .)


state 206

    (95) case -> CASE valor SEMICOLON body BREAK SEMICOLON .

    CASE            reduce using rule 95 (case -> CASE valor SEMICOLON body BREAK SEMICOLON .)
    DEFAULT         reduce using rule 95 (case -> CASE valor SEMICOLON body BREAK SEMICOLON .)
    RBRACE          reduce using rule 95 (case -> CASE valor SEMICOLON body BREAK SEMICOLON .)
    ENDSWITCH       reduce using rule 95 (case -> CASE valor SEMICOLON body BREAK SEMICOLON .)


state 207

    (82) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE . DOUBLEPLUS
    (83) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE . DOUBLEMINUS

    DOUBLEPLUS      shift and go to state 210
    DOUBLEMINUS     shift and go to state 211


state 208

    (52) else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE . body RBRACE else_blocks
    (75) body -> . sentenciaList
    (76) body -> . sentencia
    (77) body -> . empty
    (78) sentenciaList -> . sentencia
    (79) sentenciaList -> . sentencia sentenciaList
    (4) sentencia -> . asignacion
    (5) sentencia -> . comparacion
    (6) sentencia -> . impresion
    (7) sentencia -> . estructurasPrograma
    (8) sentencia -> . funcionDeclaration
    (9) sentencia -> . returnStatement
    (10) sentencia -> . llamadaFuncion
    (41) empty -> .
    (13) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) comparacion -> . valor comparador valor
    (33) impresion -> . ECHO imprimir SEMICOLON
    (34) impresion -> . PRINT imprimir SEMICOLON
    (42) estructurasPrograma -> . controlStructure
    (118) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (11) returnStatement -> . RETURN valor SEMICOLON
    (12) returnStatement -> . RETURN SEMICOLON
    (119) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (43) controlStructure -> . if
    (44) controlStructure -> . for
    (45) controlStructure -> . while
    (46) controlStructure -> . switch
    (47) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE
    (48) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (49) if -> . IF LPAREN conditions RPAREN body
    (80) for -> . forStatement
    (84) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (85) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (86) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (87) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (81) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE

    RBRACE          reduce using rule 41 (empty -> .)
    VARIABLE        shift and go to state 12
    ECHO            shift and go to state 14
    PRINT           shift and go to state 15
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 19
    ID              shift and go to state 18
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    SWITCH          shift and go to state 33
    FOR             shift and go to state 34

    body                           shift and go to state 212
    sentenciaList                  shift and go to state 137
    sentencia                      shift and go to state 138
    empty                          shift and go to state 139
    asignacion                     shift and go to state 5
    comparacion                    shift and go to state 6
    impresion                      shift and go to state 7
    estructurasPrograma            shift and go to state 8
    funcionDeclaration             shift and go to state 9
    returnStatement                shift and go to state 10
    llamadaFuncion                 shift and go to state 11
    valor                          shift and go to state 13
    controlStructure               shift and go to state 16
    if                             shift and go to state 26
    for                            shift and go to state 27
    while                          shift and go to state 28
    switch                         shift and go to state 29
    forStatement                   shift and go to state 31

state 209

    (53) else_blocks -> ELSEIF LPAREN conditions RPAREN COLON . body else_blocks
    (75) body -> . sentenciaList
    (76) body -> . sentencia
    (77) body -> . empty
    (78) sentenciaList -> . sentencia
    (79) sentenciaList -> . sentencia sentenciaList
    (4) sentencia -> . asignacion
    (5) sentencia -> . comparacion
    (6) sentencia -> . impresion
    (7) sentencia -> . estructurasPrograma
    (8) sentencia -> . funcionDeclaration
    (9) sentencia -> . returnStatement
    (10) sentencia -> . llamadaFuncion
    (41) empty -> .
    (13) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) comparacion -> . valor comparador valor
    (33) impresion -> . ECHO imprimir SEMICOLON
    (34) impresion -> . PRINT imprimir SEMICOLON
    (42) estructurasPrograma -> . controlStructure
    (118) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (11) returnStatement -> . RETURN valor SEMICOLON
    (12) returnStatement -> . RETURN SEMICOLON
    (119) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (16) valor -> . INT
    (17) valor -> . FLOAT
    (18) valor -> . VARIABLE
    (19) valor -> . STRING
    (20) valor -> . BOOL
    (21) valor -> . NULL
    (22) valor -> . ARRAY
    (43) controlStructure -> . if
    (44) controlStructure -> . for
    (45) controlStructure -> . while
    (46) controlStructure -> . switch
    (47) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE
    (48) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (49) if -> . IF LPAREN conditions RPAREN body
    (80) for -> . forStatement
    (84) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (85) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (86) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (87) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (81) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE

    ELSE            reduce using rule 41 (empty -> .)
    ELSEIF          reduce using rule 41 (empty -> .)
    VARIABLE        shift and go to state 12
    ECHO            shift and go to state 14
    PRINT           shift and go to state 15
    FUNCTION        shift and go to state 17
    RETURN          shift and go to state 19
    ID              shift and go to state 18
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    STRING          shift and go to state 22
    BOOL            shift and go to state 23
    NULL            shift and go to state 24
    ARRAY           shift and go to state 25
    IF              shift and go to state 30
    WHILE           shift and go to state 32
    SWITCH          shift and go to state 33
    FOR             shift and go to state 34

    body                           shift and go to state 213
    sentenciaList                  shift and go to state 137
    sentencia                      shift and go to state 138
    empty                          shift and go to state 139
    asignacion                     shift and go to state 5
    comparacion                    shift and go to state 6
    impresion                      shift and go to state 7
    estructurasPrograma            shift and go to state 8
    funcionDeclaration             shift and go to state 9
    returnStatement                shift and go to state 10
    llamadaFuncion                 shift and go to state 11
    valor                          shift and go to state 13
    controlStructure               shift and go to state 16
    if                             shift and go to state 26
    for                            shift and go to state 27
    while                          shift and go to state 28
    switch                         shift and go to state 29
    forStatement                   shift and go to state 31

state 210

    (82) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS .

    RPAREN          reduce using rule 82 (forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS .)


state 211

    (83) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS .

    RPAREN          reduce using rule 83 (forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS .)


state 212

    (52) else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body . RBRACE else_blocks

    RBRACE          shift and go to state 214


state 213

    (53) else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body . else_blocks
    (50) else_blocks -> . ELSE LBRACE body RBRACE
    (51) else_blocks -> . ELSE COLON body
    (52) else_blocks -> . ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (53) else_blocks -> . ELSEIF LPAREN conditions RPAREN COLON body else_blocks

    ELSE            shift and go to state 179
    ELSEIF          shift and go to state 180

    else_blocks                    shift and go to state 215

state 214

    (52) else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE . else_blocks
    (50) else_blocks -> . ELSE LBRACE body RBRACE
    (51) else_blocks -> . ELSE COLON body
    (52) else_blocks -> . ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (53) else_blocks -> . ELSEIF LPAREN conditions RPAREN COLON body else_blocks

    ELSE            shift and go to state 179
    ELSEIF          shift and go to state 180

    else_blocks                    shift and go to state 216

state 215

    (53) else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .

    VARIABLE        reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    ECHO            reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    PRINT           reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    FUNCTION        reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    RETURN          reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    ID              reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    INT             reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    FLOAT           reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    STRING          reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    BOOL            reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    NULL            reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    ARRAY           reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    IF              reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    WHILE           reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    SWITCH          reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    FOR             reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    CLOSETAG        reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    RBRACE          reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    BREAK           reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    ENDSWITCH       reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    CASE            reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    DEFAULT         reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    ELSE            reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)
    ELSEIF          reduce using rule 53 (else_blocks -> ELSEIF LPAREN conditions RPAREN COLON body else_blocks .)


state 216

    (52) else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .

    VARIABLE        reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ECHO            reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PRINT           reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FUNCTION        reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    RETURN          reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ID              reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INT             reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FLOAT           reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    STRING          reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    BOOL            reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    NULL            reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ARRAY           reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    IF              reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    WHILE           reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    SWITCH          reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FOR             reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CLOSETAG        reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    RBRACE          reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    BREAK           reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ENDSWITCH       reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CASE            reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    DEFAULT         reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ELSE            reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ELSEIF          reduce using rule 52 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQ in state 84 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 84 resolved as shift
WARNING: shift/reduce conflict for STRICTEQ in state 84 resolved as shift
WARNING: shift/reduce conflict for STRICTNEQ in state 84 resolved as shift
WARNING: shift/reduce conflict for LT in state 84 resolved as shift
WARNING: shift/reduce conflict for GT in state 84 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 84 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 84 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 107 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 107 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 107 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 107 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 107 resolved as shift
WARNING: shift/reduce conflict for ID in state 107 resolved as shift
WARNING: shift/reduce conflict for INT in state 107 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 107 resolved as shift
WARNING: shift/reduce conflict for STRING in state 107 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 107 resolved as shift
WARNING: shift/reduce conflict for NULL in state 107 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 107 resolved as shift
WARNING: shift/reduce conflict for IF in state 107 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 107 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 107 resolved as shift
WARNING: shift/reduce conflict for FOR in state 107 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 138 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 138 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 138 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 138 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 138 resolved as shift
WARNING: shift/reduce conflict for ID in state 138 resolved as shift
WARNING: shift/reduce conflict for INT in state 138 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 138 resolved as shift
WARNING: shift/reduce conflict for STRING in state 138 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 138 resolved as shift
WARNING: shift/reduce conflict for NULL in state 138 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 138 resolved as shift
WARNING: shift/reduce conflict for IF in state 138 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 138 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 138 resolved as shift
WARNING: shift/reduce conflict for FOR in state 138 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 143 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 151 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 151 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 151 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 151 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 151 resolved as shift
WARNING: shift/reduce conflict for ID in state 151 resolved as shift
WARNING: shift/reduce conflict for INT in state 151 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 151 resolved as shift
WARNING: shift/reduce conflict for STRING in state 151 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 151 resolved as shift
WARNING: shift/reduce conflict for NULL in state 151 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 151 resolved as shift
WARNING: shift/reduce conflict for IF in state 151 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 151 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 151 resolved as shift
WARNING: shift/reduce conflict for FOR in state 151 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 166 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 166 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 188 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 188 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 188 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 188 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 188 resolved as shift
WARNING: shift/reduce conflict for ID in state 188 resolved as shift
WARNING: shift/reduce conflict for INT in state 188 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 188 resolved as shift
WARNING: shift/reduce conflict for STRING in state 188 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 188 resolved as shift
WARNING: shift/reduce conflict for NULL in state 188 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 188 resolved as shift
WARNING: shift/reduce conflict for IF in state 188 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 188 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 188 resolved as shift
WARNING: shift/reduce conflict for FOR in state 188 resolved as shift
WARNING: reduce/reduce conflict in state 70 resolved using rule (valor -> VARIABLE)
WARNING: rejected rule (argumento -> VARIABLE) in state 70
WARNING: reduce/reduce conflict in state 138 resolved using rule (body -> sentencia)
WARNING: rejected rule (sentenciaList -> sentencia) in state 138
WARNING: Rule (argumento -> VARIABLE) is never reduced
