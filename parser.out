Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    OBJECT_TYPE

Grammar

Rule 0     S' -> inicio
Rule 1     inicio -> OPENTAG programa CLOSETAG
Rule 2     programa -> sentencia
Rule 3     programa -> sentencia programa
Rule 4     sentencia -> asignacion
Rule 5     sentencia -> asignacion_fgets
Rule 6     sentencia -> comparacion
Rule 7     sentencia -> impresion
Rule 8     sentencia -> estructurasPrograma
Rule 9     sentencia -> try
Rule 10    sentencia -> funcionDeclaration
Rule 11    sentencia -> returnStatement
Rule 12    sentencia -> llamadaFuncion
Rule 13    sentencia -> classDeclarate
Rule 14    sentencia -> interface
Rule 15    sentencia -> objeto
Rule 16    sentencia -> includes
Rule 17    sentencia -> namespace
Rule 18    sentencia -> anonymousFunction
Rule 19    sentencia -> throw
Rule 20    sentencia -> instance
Rule 21    sentencia -> constdeclaration
Rule 22    sentencia -> thisdeclaration
Rule 23    sentencia -> concatenate
Rule 24    sentencia -> minuse
Rule 25    returnStatement -> RETURN expresion SEMICOLON
Rule 26    returnStatement -> RETURN SEMICOLON
Rule 27    asignacion -> VARIABLE EQUALS expresion SEMICOLON
Rule 28    expresion -> valor
Rule 29    expresion -> expresion opLogic expresion
Rule 30    expresion -> comparacion
Rule 31    expresion -> LPAREN comparacion RPAREN
Rule 32    expresion -> operaArit
Rule 33    expresion -> LPAREN expresion RPAREN
Rule 34    asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
Rule 35    operaArit -> valor
Rule 36    operaArit -> operaArit operador operaArit
Rule 37    operaArit -> LPAREN operaArit RPAREN
Rule 38    valornumerico -> INT
Rule 39    valornumerico -> FLOAT
Rule 40    valornumerico -> VARIABLE
Rule 41    valor -> INT
Rule 42    valor -> VARIABLE
Rule 43    valor -> FLOAT
Rule 44    valor -> STRING
Rule 45    valor -> BOOL
Rule 46    valor -> NULL
Rule 47    valor -> ARRAY
Rule 48    valor -> llamadaFuncion
Rule 49    operador -> PLUS
Rule 50    operador -> MINUS
Rule 51    operador -> TIMES
Rule 52    operador -> DIVIDE
Rule 53    operador -> MODULO
Rule 54    operador -> POTENCIA
Rule 55    operador -> PLUSEQUAL
Rule 56    comparacion -> valor opSymbol valor
Rule 57    comparacion -> expresion opSymbol expresion
Rule 58    impresion -> ECHO imprimir SEMICOLON
Rule 59    impresion -> PRINT imprimir SEMICOLON
Rule 60    imprimir -> LPAREN repiteValores RPAREN
Rule 61    imprimir -> LPAREN RPAREN
Rule 62    imprimir -> repiteValores
Rule 63    imprimir -> empty
Rule 64    repiteValores -> valor
Rule 65    repiteValores -> valor COMMA repiteValores
Rule 66    empty -> <empty>
Rule 67    estructurasPrograma -> controlStructure
Rule 68    estructurasPrograma -> dataStructure
Rule 69    controlStructure -> if
Rule 70    controlStructure -> for
Rule 71    controlStructure -> while
Rule 72    controlStructure -> dowhile
Rule 73    controlStructure -> switch
Rule 74    controlStructure -> foreach
Rule 75    if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
Rule 76    if -> IF LPAREN conditions RPAREN body
Rule 77    else_blocks -> ELSE LBRACE body RBRACE
Rule 78    else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
Rule 79    else_blocks -> empty
Rule 80    conditions -> condition
Rule 81    conditions -> condition opLogic conditions
Rule 82    conditions -> LPAREN conditions RPAREN
Rule 83    condition -> valor
Rule 84    condition -> valor opSymbol valor
Rule 85    condition -> NOT condition
Rule 86    condition -> LPAREN conditions RPAREN
Rule 87    opSymbol -> EQ
Rule 88    opSymbol -> NEQ
Rule 89    opSymbol -> STRICTEQ
Rule 90    opSymbol -> STRICTNEQ
Rule 91    opSymbol -> LT
Rule 92    opSymbol -> GT
Rule 93    opSymbol -> LEQ
Rule 94    opSymbol -> GEQ
Rule 95    opLogic -> AND
Rule 96    opLogic -> LOGICAL_AND
Rule 97    opLogic -> OR
Rule 98    opLogic -> LOGICAL_OR
Rule 99    body -> sentenciaList
Rule 100   body -> empty
Rule 101   sentenciaList -> sentencia
Rule 102   sentenciaList -> sentencia sentenciaList
Rule 103   for -> forStatement
Rule 104   forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE
Rule 105   forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
Rule 106   forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS
Rule 107   while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE
Rule 108   while -> WHILE LPAREN condition RPAREN LBRACE RBRACE
Rule 109   dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
Rule 110   switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
Rule 111   switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
Rule 112   caseLists -> cases
Rule 113   caseLists -> cases default
Rule 114   caseLists -> default
Rule 115   caseLists -> empty
Rule 116   cases -> case
Rule 117   cases -> case cases
Rule 118   foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
Rule 119   case -> CASE valor COLON body BREAK SEMICOLON
Rule 120   case -> CASE valor SEMICOLON body BREAK SEMICOLON
Rule 121   case -> CASE valor COLON body
Rule 122   case -> CASE valor SEMICOLON
Rule 123   case -> CASE valor
Rule 124   dataStructure -> array
Rule 125   array -> VARIABLE EQUALS arrays SEMICOLON
Rule 126   array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
Rule 127   array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
Rule 128   array -> map
Rule 129   arrays -> LBRACKET repiteValores RBRACKET
Rule 130   arrayAnidado -> arrays
Rule 131   arrayAnidado -> arrays COMMA arrayAnidado
Rule 132   map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
Rule 133   map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON
Rule 134   maps -> mapArrow
Rule 135   maps -> mapArrow COMMA maps
Rule 136   mapArrow -> valor ARROWMAP valor
Rule 137   default -> DEFAULT COLON body BREAK SEMICOLON
Rule 138   default -> DEFAULT SEMICOLON body BREAK SEMICOLON
Rule 139   default -> DEFAULT COLON body
Rule 140   default -> DEFAULT SEMICOLON body
Rule 141   default -> DEFAULT
Rule 142   argumentos -> argumento
Rule 143   argumentos -> argumento COMMA argumentos
Rule 144   argumentos -> empty
Rule 145   argumento -> type VARIABLE
Rule 146   argumento -> VARIABLE EQUALS valor
Rule 147   argumento -> type VARIABLE EQUALS valor
Rule 148   argumento -> operaArit
Rule 149   type -> INT_TYPE
Rule 150   type -> FLOAT_TYPE
Rule 151   type -> STRING_TYPE
Rule 152   type -> BOOL_TYPE
Rule 153   type -> ARRAY_TYPE
Rule 154   type -> VOID
Rule 155   try -> TRY LBRACE body RBRACE catchs
Rule 156   try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
Rule 157   catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE
Rule 158   catchs -> catch
Rule 159   catchs -> catch catchs
Rule 160   objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
Rule 161   funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
Rule 162   llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON
Rule 163   llamadaFuncion -> EMPTY LPAREN argumentos RPAREN
Rule 164   llamadaFuncion -> ID LPAREN argumentos RPAREN
Rule 165   llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON
Rule 166   classDeclarate -> CLASS ID LBRACE classBody RBRACE
Rule 167   classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE
Rule 168   classDeclarate -> data CLASS ID LBRACE classBody RBRACE
Rule 169   classDeclarate -> classInterface
Rule 170   classBody -> classMember
Rule 171   classBody -> classMember classBody
Rule 172   classMember -> type VARIABLE SEMICOLON
Rule 173   classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
Rule 174   classMember -> objectInstantiation
Rule 175   objectInstantiation -> NEW ID LPAREN argumentos RPAREN
Rule 176   objectInstantiation -> NEW ID LPAREN RPAREN
Rule 177   classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
Rule 178   classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
Rule 179   classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
Rule 180   classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
Rule 181   impInterface -> ID
Rule 182   impInterface -> ID COMMA impInterface
Rule 183   data -> ABSTRACT
Rule 184   data -> PRIVATE
Rule 185   data -> PROTECTED
Rule 186   data -> PUBLIC
Rule 187   data -> STATIC
Rule 188   data -> FINAL
Rule 189   interface -> INTERFACE ID LBRACE classBody RBRACE
Rule 190   includes -> INCLUDE STRING SEMICOLON
Rule 191   includes -> INCLUDE STRING DOT STRING SEMICOLON
Rule 192   namespace -> NAMESPACE ID SEMICOLON
Rule 193   anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
Rule 194   throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
Rule 195   throw -> THROW valor SEMICOLON
Rule 196   instance -> VARIABLE INSTANCEOF ID
Rule 197   constdeclaration -> CONST ID EQUALS valor SEMICOLON
Rule 198   thisdeclaration -> THIS ARROW ID SEMICOLON
Rule 199   thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON
Rule 200   concatenate -> VARIABLE CONCATENATEEQUAL STRING
Rule 201   minuse -> VARIABLE MINUSEQUAL INT
Rule 202   funcion -> STRLEN LPAREN STRING RPAREN
Rule 203   statement_valor -> VARIABLE EQUALS valor
Rule 204   statement_plusequal -> VARIABLE EQUALS VARIABLE PLUSEQUAL INT
Rule 205   expr -> INT
Rule 206   expr -> STRING

Terminals, with rules where they appear

ABSTRACT             : 183
AND                  : 95
ARRAY                : 47 127 133
ARRAY_TYPE           : 153
ARROW                : 160 198 199
ARROWMAP             : 136 193
AS                   : 118
BOOL                 : 45
BOOL_TYPE            : 152
BREAK                : 119 120 137 138
CASE                 : 119 120 121 122 123
CATCH                : 157
CLASS                : 166 167 168 177 178 179 180
CLOSETAG             : 1
COLON                : 111 119 121 137 139
COMMA                : 65 131 135 143 182
CONCATENATEEQUAL     : 200
CONST                : 197
DEFAULT              : 137 138 139 140 141
DIVIDE               : 52
DO                   : 109
DOT                  : 191
DOUBLEMINUS          : 106
DOUBLEPLUS           : 105
ECHO                 : 58
ELSE                 : 77
ELSEIF               : 78
EMPTY                : 163 165
ENDSWITCH            : 111
EQ                   : 87
EQUALS               : 27 34 105 106 125 126 127 132 133 146 147 193 197 203 204
EXCEPTION            : 157 194
EXTENDS              : 167 178 180
FGETS                : 34
FINAL                : 188
FINALLY              : 156
FLOAT                : 39 43
FLOAT_TYPE           : 150
FN                   : 193
FOR                  : 104
FOREACH              : 118
FUNCTION             : 161 173
GEQ                  : 94
GT                   : 92
ID                   : 160 161 162 164 166 167 167 168 173 175 176 177 178 178 179 180 180 181 182 189 192 196 197 198 199
IF                   : 75 76
IMPLEMENTS           : 177 178 179 180
INCLUDE              : 190 191
INSTANCEOF           : 196
INT                  : 38 41 105 105 106 106 201 204 205
INTERFACE            : 189
INT_TYPE             : 149
LBRACE               : 75 77 78 104 107 108 109 110 118 155 156 156 157 161 166 167 168 173 177 178 179 180 189
LBRACKET             : 126 129 132
LEQ                  : 93
LOGICAL_AND          : 96
LOGICAL_OR           : 98
LPAREN               : 31 33 34 37 60 61 75 76 78 82 86 104 107 108 109 110 111 118 127 133 157 160 161 162 163 164 165 173 175 176 193 194 199 202
LT                   : 91
MINUS                : 50
MINUSEQUAL           : 201
MODULO               : 53
NAMESPACE            : 192
NEQ                  : 88
NEW                  : 175 176 194
NOT                  : 85
NULL                 : 46
OBJECT_TYPE          : 
OPENTAG              : 1
OR                   : 97
PLUS                 : 49
PLUSEQUAL            : 55 204
POTENCIA             : 54
PRINT                : 59
PRIVATE              : 184
PROTECTED            : 185
PUBLIC               : 186
RBRACE               : 75 77 78 104 107 108 109 110 118 155 156 156 157 161 166 167 168 173 177 178 179 180 189
RBRACKET             : 126 129 132
RETURN               : 25 26
RPAREN               : 31 33 34 37 60 61 75 76 78 82 86 104 107 108 109 110 111 118 127 133 157 160 161 162 163 164 165 173 175 176 193 194 199 202
SEMICOLON            : 25 26 27 34 58 59 105 105 106 106 109 111 119 120 120 122 125 126 127 132 133 137 138 138 140 160 162 165 172 190 191 192 193 194 195 197 198 199
STATIC               : 187
STDIN                : 34
STRICTEQ             : 89
STRICTNEQ            : 90
STRING               : 44 190 191 191 200 202 206
STRING_TYPE          : 151
STRLEN               : 202
SWITCH               : 110 111
THIS                 : 198 199
THROW                : 194 195
TIMES                : 51
TRY                  : 155 156
VARIABLE             : 27 34 40 42 105 105 105 106 106 106 118 118 125 126 127 132 133 145 146 147 157 160 172 193 196 200 201 203 204 204
VOID                 : 154
WHILE                : 107 108 109
error                : 

Nonterminals, with rules where they appear

anonymousFunction    : 18
argumento            : 142 143
argumentos           : 143 160 161 162 163 164 165 173 175
array                : 124
arrayAnidado         : 126 131
arrays               : 125 130 131
asignacion           : 4
asignacion_fgets     : 5
body                 : 75 76 77 78 104 107 109 118 119 120 121 137 138 139 140 155 156 156 157 161 173
case                 : 116 117
caseLists            : 110 111
cases                : 112 113 117
catch                : 158 159
catchs               : 155 156 159
classBody            : 166 167 168 171 177 178 179 180 189
classDeclarate       : 13
classInterface       : 169
classMember          : 170 171
comparacion          : 6 30 31 193
concatenate          : 23
condition            : 80 81 85 107 108 109
conditions           : 75 76 78 81 82 86
constdeclaration     : 21
controlStructure     : 67
data                 : 168 179 180
dataStructure        : 68
default              : 113 114
dowhile              : 72
else_blocks          : 75 78
empty                : 63 79 100 115 144
estructurasPrograma  : 8
expr                 : 
expresion            : 25 27 29 29 33 57 57
for                  : 70
forStatement         : 103
forcondition         : 104
foreach              : 74
funcion              : 
funcionDeclaration   : 10
if                   : 69
impInterface         : 177 178 179 180 182
impresion            : 7
imprimir             : 58 59
includes             : 16
inicio               : 0
instance             : 20
interface            : 14
llamadaFuncion       : 12 48
map                  : 128
mapArrow             : 134 135
maps                 : 132 133 135
minuse               : 24
namespace            : 17
objectInstantiation  : 174
objeto               : 15
opLogic              : 29 81
opSymbol             : 56 57 84 105 106
operaArit            : 32 36 36 37 148
operador             : 36
programa             : 1 3
repiteValores        : 60 62 65 127 129 194
returnStatement      : 11
sentencia            : 2 3 101 102
sentenciaList        : 99 102
statement_plusequal  : 
statement_valor      : 
switch               : 73
thisdeclaration      : 22
throw                : 19
try                  : 9
type                 : 145 147 172 173
valor                : 28 35 56 56 64 65 83 84 84 110 111 119 120 121 122 123 136 136 146 147 195 197 203
valornumerico        : 
while                : 71

Parsing method: LALR

state 0

    (0) S' -> . inicio
    (1) inicio -> . OPENTAG programa CLOSETAG

    OPENTAG         shift and go to state 2

    inicio                         shift and go to state 1

state 1

    (0) S' -> inicio .



state 2

    (1) inicio -> OPENTAG . programa CLOSETAG
    (2) programa -> . sentencia
    (3) programa -> . sentencia programa
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (58) impresion -> . ECHO imprimir SEMICOLON
    (59) impresion -> . PRINT imprimir SEMICOLON
    (67) estructurasPrograma -> . controlStructure
    (68) estructurasPrograma -> . dataStructure
    (155) try -> . TRY LBRACE body RBRACE catchs
    (156) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (161) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN expresion SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (166) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (167) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (168) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . classInterface
    (189) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (160) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (190) includes -> . INCLUDE STRING SEMICOLON
    (191) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (192) namespace -> . NAMESPACE ID SEMICOLON
    (193) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (194) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> . THROW valor SEMICOLON
    (196) instance -> . VARIABLE INSTANCEOF ID
    (197) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (198) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (199) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (200) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (201) minuse -> . VARIABLE MINUSEQUAL INT
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (69) controlStructure -> . if
    (70) controlStructure -> . for
    (71) controlStructure -> . while
    (72) controlStructure -> . dowhile
    (73) controlStructure -> . switch
    (74) controlStructure -> . foreach
    (124) dataStructure -> . array
    (183) data -> . ABSTRACT
    (184) data -> . PRIVATE
    (185) data -> . PROTECTED
    (186) data -> . PUBLIC
    (187) data -> . STATIC
    (188) data -> . FINAL
    (177) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (179) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (75) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> . IF LPAREN conditions RPAREN body
    (103) for -> . forStatement
    (107) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (109) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (110) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (118) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (125) array -> . VARIABLE EQUALS arrays SEMICOLON
    (126) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) array -> . map
    (104) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (132) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 30
    PRINT           shift and go to state 31
    TRY             shift and go to state 34
    FUNCTION        shift and go to state 35
    RETURN          shift and go to state 37
    ID              shift and go to state 36
    EMPTY           shift and go to state 38
    CLASS           shift and go to state 39
    INTERFACE       shift and go to state 42
    INCLUDE         shift and go to state 43
    NAMESPACE       shift and go to state 45
    THROW           shift and go to state 46
    CONST           shift and go to state 47
    THIS            shift and go to state 48
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ABSTRACT        shift and go to state 62
    PRIVATE         shift and go to state 63
    PROTECTED       shift and go to state 64
    PUBLIC          shift and go to state 65
    STATIC          shift and go to state 66
    FINAL           shift and go to state 67
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    DO              shift and go to state 71
    SWITCH          shift and go to state 72
    FOREACH         shift and go to state 73
    FOR             shift and go to state 75

    programa                       shift and go to state 3
    sentencia                      shift and go to state 4
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    expresion                      shift and go to state 27
    valor                          shift and go to state 29
    controlStructure               shift and go to state 32
    dataStructure                  shift and go to state 33
    data                           shift and go to state 40
    classInterface                 shift and go to state 41
    operaArit                      shift and go to state 54
    if                             shift and go to state 55
    for                            shift and go to state 56
    while                          shift and go to state 57
    dowhile                        shift and go to state 58
    switch                         shift and go to state 59
    foreach                        shift and go to state 60
    array                          shift and go to state 61
    forStatement                   shift and go to state 69
    map                            shift and go to state 74

state 3

    (1) inicio -> OPENTAG programa . CLOSETAG

    CLOSETAG        shift and go to state 76


state 4

    (2) programa -> sentencia .
    (3) programa -> sentencia . programa
    (2) programa -> . sentencia
    (3) programa -> . sentencia programa
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (58) impresion -> . ECHO imprimir SEMICOLON
    (59) impresion -> . PRINT imprimir SEMICOLON
    (67) estructurasPrograma -> . controlStructure
    (68) estructurasPrograma -> . dataStructure
    (155) try -> . TRY LBRACE body RBRACE catchs
    (156) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (161) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN expresion SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (166) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (167) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (168) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . classInterface
    (189) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (160) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (190) includes -> . INCLUDE STRING SEMICOLON
    (191) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (192) namespace -> . NAMESPACE ID SEMICOLON
    (193) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (194) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> . THROW valor SEMICOLON
    (196) instance -> . VARIABLE INSTANCEOF ID
    (197) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (198) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (199) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (200) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (201) minuse -> . VARIABLE MINUSEQUAL INT
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (69) controlStructure -> . if
    (70) controlStructure -> . for
    (71) controlStructure -> . while
    (72) controlStructure -> . dowhile
    (73) controlStructure -> . switch
    (74) controlStructure -> . foreach
    (124) dataStructure -> . array
    (183) data -> . ABSTRACT
    (184) data -> . PRIVATE
    (185) data -> . PROTECTED
    (186) data -> . PUBLIC
    (187) data -> . STATIC
    (188) data -> . FINAL
    (177) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (179) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (75) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> . IF LPAREN conditions RPAREN body
    (103) for -> . forStatement
    (107) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (109) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (110) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (118) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (125) array -> . VARIABLE EQUALS arrays SEMICOLON
    (126) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) array -> . map
    (104) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (132) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    CLOSETAG        reduce using rule 2 (programa -> sentencia .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 30
    PRINT           shift and go to state 31
    TRY             shift and go to state 34
    FUNCTION        shift and go to state 35
    RETURN          shift and go to state 37
    ID              shift and go to state 36
    EMPTY           shift and go to state 38
    CLASS           shift and go to state 39
    INTERFACE       shift and go to state 42
    INCLUDE         shift and go to state 43
    NAMESPACE       shift and go to state 45
    THROW           shift and go to state 46
    CONST           shift and go to state 47
    THIS            shift and go to state 48
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ABSTRACT        shift and go to state 62
    PRIVATE         shift and go to state 63
    PROTECTED       shift and go to state 64
    PUBLIC          shift and go to state 65
    STATIC          shift and go to state 66
    FINAL           shift and go to state 67
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    DO              shift and go to state 71
    SWITCH          shift and go to state 72
    FOREACH         shift and go to state 73
    FOR             shift and go to state 75

    sentencia                      shift and go to state 4
    programa                       shift and go to state 77
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    expresion                      shift and go to state 27
    valor                          shift and go to state 29
    controlStructure               shift and go to state 32
    dataStructure                  shift and go to state 33
    data                           shift and go to state 40
    classInterface                 shift and go to state 41
    operaArit                      shift and go to state 54
    if                             shift and go to state 55
    for                            shift and go to state 56
    while                          shift and go to state 57
    dowhile                        shift and go to state 58
    switch                         shift and go to state 59
    foreach                        shift and go to state 60
    array                          shift and go to state 61
    forStatement                   shift and go to state 69
    map                            shift and go to state 74

state 5

    (4) sentencia -> asignacion .

    VARIABLE        reduce using rule 4 (sentencia -> asignacion .)
    ECHO            reduce using rule 4 (sentencia -> asignacion .)
    PRINT           reduce using rule 4 (sentencia -> asignacion .)
    TRY             reduce using rule 4 (sentencia -> asignacion .)
    FUNCTION        reduce using rule 4 (sentencia -> asignacion .)
    RETURN          reduce using rule 4 (sentencia -> asignacion .)
    ID              reduce using rule 4 (sentencia -> asignacion .)
    EMPTY           reduce using rule 4 (sentencia -> asignacion .)
    CLASS           reduce using rule 4 (sentencia -> asignacion .)
    INTERFACE       reduce using rule 4 (sentencia -> asignacion .)
    INCLUDE         reduce using rule 4 (sentencia -> asignacion .)
    NAMESPACE       reduce using rule 4 (sentencia -> asignacion .)
    THROW           reduce using rule 4 (sentencia -> asignacion .)
    CONST           reduce using rule 4 (sentencia -> asignacion .)
    THIS            reduce using rule 4 (sentencia -> asignacion .)
    INT             reduce using rule 4 (sentencia -> asignacion .)
    FLOAT           reduce using rule 4 (sentencia -> asignacion .)
    STRING          reduce using rule 4 (sentencia -> asignacion .)
    BOOL            reduce using rule 4 (sentencia -> asignacion .)
    NULL            reduce using rule 4 (sentencia -> asignacion .)
    ARRAY           reduce using rule 4 (sentencia -> asignacion .)
    LPAREN          reduce using rule 4 (sentencia -> asignacion .)
    ABSTRACT        reduce using rule 4 (sentencia -> asignacion .)
    PRIVATE         reduce using rule 4 (sentencia -> asignacion .)
    PROTECTED       reduce using rule 4 (sentencia -> asignacion .)
    PUBLIC          reduce using rule 4 (sentencia -> asignacion .)
    STATIC          reduce using rule 4 (sentencia -> asignacion .)
    FINAL           reduce using rule 4 (sentencia -> asignacion .)
    IF              reduce using rule 4 (sentencia -> asignacion .)
    WHILE           reduce using rule 4 (sentencia -> asignacion .)
    DO              reduce using rule 4 (sentencia -> asignacion .)
    SWITCH          reduce using rule 4 (sentencia -> asignacion .)
    FOREACH         reduce using rule 4 (sentencia -> asignacion .)
    FOR             reduce using rule 4 (sentencia -> asignacion .)
    CLOSETAG        reduce using rule 4 (sentencia -> asignacion .)
    RBRACE          reduce using rule 4 (sentencia -> asignacion .)
    BREAK           reduce using rule 4 (sentencia -> asignacion .)
    ENDSWITCH       reduce using rule 4 (sentencia -> asignacion .)
    CASE            reduce using rule 4 (sentencia -> asignacion .)
    DEFAULT         reduce using rule 4 (sentencia -> asignacion .)


state 6

    (5) sentencia -> asignacion_fgets .

    VARIABLE        reduce using rule 5 (sentencia -> asignacion_fgets .)
    ECHO            reduce using rule 5 (sentencia -> asignacion_fgets .)
    PRINT           reduce using rule 5 (sentencia -> asignacion_fgets .)
    TRY             reduce using rule 5 (sentencia -> asignacion_fgets .)
    FUNCTION        reduce using rule 5 (sentencia -> asignacion_fgets .)
    RETURN          reduce using rule 5 (sentencia -> asignacion_fgets .)
    ID              reduce using rule 5 (sentencia -> asignacion_fgets .)
    EMPTY           reduce using rule 5 (sentencia -> asignacion_fgets .)
    CLASS           reduce using rule 5 (sentencia -> asignacion_fgets .)
    INTERFACE       reduce using rule 5 (sentencia -> asignacion_fgets .)
    INCLUDE         reduce using rule 5 (sentencia -> asignacion_fgets .)
    NAMESPACE       reduce using rule 5 (sentencia -> asignacion_fgets .)
    THROW           reduce using rule 5 (sentencia -> asignacion_fgets .)
    CONST           reduce using rule 5 (sentencia -> asignacion_fgets .)
    THIS            reduce using rule 5 (sentencia -> asignacion_fgets .)
    INT             reduce using rule 5 (sentencia -> asignacion_fgets .)
    FLOAT           reduce using rule 5 (sentencia -> asignacion_fgets .)
    STRING          reduce using rule 5 (sentencia -> asignacion_fgets .)
    BOOL            reduce using rule 5 (sentencia -> asignacion_fgets .)
    NULL            reduce using rule 5 (sentencia -> asignacion_fgets .)
    ARRAY           reduce using rule 5 (sentencia -> asignacion_fgets .)
    LPAREN          reduce using rule 5 (sentencia -> asignacion_fgets .)
    ABSTRACT        reduce using rule 5 (sentencia -> asignacion_fgets .)
    PRIVATE         reduce using rule 5 (sentencia -> asignacion_fgets .)
    PROTECTED       reduce using rule 5 (sentencia -> asignacion_fgets .)
    PUBLIC          reduce using rule 5 (sentencia -> asignacion_fgets .)
    STATIC          reduce using rule 5 (sentencia -> asignacion_fgets .)
    FINAL           reduce using rule 5 (sentencia -> asignacion_fgets .)
    IF              reduce using rule 5 (sentencia -> asignacion_fgets .)
    WHILE           reduce using rule 5 (sentencia -> asignacion_fgets .)
    DO              reduce using rule 5 (sentencia -> asignacion_fgets .)
    SWITCH          reduce using rule 5 (sentencia -> asignacion_fgets .)
    FOREACH         reduce using rule 5 (sentencia -> asignacion_fgets .)
    FOR             reduce using rule 5 (sentencia -> asignacion_fgets .)
    CLOSETAG        reduce using rule 5 (sentencia -> asignacion_fgets .)
    RBRACE          reduce using rule 5 (sentencia -> asignacion_fgets .)
    BREAK           reduce using rule 5 (sentencia -> asignacion_fgets .)
    ENDSWITCH       reduce using rule 5 (sentencia -> asignacion_fgets .)
    CASE            reduce using rule 5 (sentencia -> asignacion_fgets .)
    DEFAULT         reduce using rule 5 (sentencia -> asignacion_fgets .)


state 7

    (6) sentencia -> comparacion .
    (30) expresion -> comparacion .

    VARIABLE        reduce using rule 6 (sentencia -> comparacion .)
    ECHO            reduce using rule 6 (sentencia -> comparacion .)
    PRINT           reduce using rule 6 (sentencia -> comparacion .)
    TRY             reduce using rule 6 (sentencia -> comparacion .)
    FUNCTION        reduce using rule 6 (sentencia -> comparacion .)
    RETURN          reduce using rule 6 (sentencia -> comparacion .)
    ID              reduce using rule 6 (sentencia -> comparacion .)
    EMPTY           reduce using rule 6 (sentencia -> comparacion .)
    CLASS           reduce using rule 6 (sentencia -> comparacion .)
    INTERFACE       reduce using rule 6 (sentencia -> comparacion .)
    INCLUDE         reduce using rule 6 (sentencia -> comparacion .)
    NAMESPACE       reduce using rule 6 (sentencia -> comparacion .)
    THROW           reduce using rule 6 (sentencia -> comparacion .)
    CONST           reduce using rule 6 (sentencia -> comparacion .)
    THIS            reduce using rule 6 (sentencia -> comparacion .)
    INT             reduce using rule 6 (sentencia -> comparacion .)
    FLOAT           reduce using rule 6 (sentencia -> comparacion .)
    STRING          reduce using rule 6 (sentencia -> comparacion .)
    BOOL            reduce using rule 6 (sentencia -> comparacion .)
    NULL            reduce using rule 6 (sentencia -> comparacion .)
    ARRAY           reduce using rule 6 (sentencia -> comparacion .)
    LPAREN          reduce using rule 6 (sentencia -> comparacion .)
    ABSTRACT        reduce using rule 6 (sentencia -> comparacion .)
    PRIVATE         reduce using rule 6 (sentencia -> comparacion .)
    PROTECTED       reduce using rule 6 (sentencia -> comparacion .)
    PUBLIC          reduce using rule 6 (sentencia -> comparacion .)
    STATIC          reduce using rule 6 (sentencia -> comparacion .)
    FINAL           reduce using rule 6 (sentencia -> comparacion .)
    IF              reduce using rule 6 (sentencia -> comparacion .)
    WHILE           reduce using rule 6 (sentencia -> comparacion .)
    DO              reduce using rule 6 (sentencia -> comparacion .)
    SWITCH          reduce using rule 6 (sentencia -> comparacion .)
    FOREACH         reduce using rule 6 (sentencia -> comparacion .)
    FOR             reduce using rule 6 (sentencia -> comparacion .)
    CLOSETAG        reduce using rule 6 (sentencia -> comparacion .)
    RBRACE          reduce using rule 6 (sentencia -> comparacion .)
    BREAK           reduce using rule 6 (sentencia -> comparacion .)
    ENDSWITCH       reduce using rule 6 (sentencia -> comparacion .)
    CASE            reduce using rule 6 (sentencia -> comparacion .)
    DEFAULT         reduce using rule 6 (sentencia -> comparacion .)
    EQ              reduce using rule 30 (expresion -> comparacion .)
    NEQ             reduce using rule 30 (expresion -> comparacion .)
    STRICTEQ        reduce using rule 30 (expresion -> comparacion .)
    STRICTNEQ       reduce using rule 30 (expresion -> comparacion .)
    LT              reduce using rule 30 (expresion -> comparacion .)
    GT              reduce using rule 30 (expresion -> comparacion .)
    LEQ             reduce using rule 30 (expresion -> comparacion .)
    GEQ             reduce using rule 30 (expresion -> comparacion .)
    AND             reduce using rule 30 (expresion -> comparacion .)
    LOGICAL_AND     reduce using rule 30 (expresion -> comparacion .)
    OR              reduce using rule 30 (expresion -> comparacion .)
    LOGICAL_OR      reduce using rule 30 (expresion -> comparacion .)


state 8

    (7) sentencia -> impresion .

    VARIABLE        reduce using rule 7 (sentencia -> impresion .)
    ECHO            reduce using rule 7 (sentencia -> impresion .)
    PRINT           reduce using rule 7 (sentencia -> impresion .)
    TRY             reduce using rule 7 (sentencia -> impresion .)
    FUNCTION        reduce using rule 7 (sentencia -> impresion .)
    RETURN          reduce using rule 7 (sentencia -> impresion .)
    ID              reduce using rule 7 (sentencia -> impresion .)
    EMPTY           reduce using rule 7 (sentencia -> impresion .)
    CLASS           reduce using rule 7 (sentencia -> impresion .)
    INTERFACE       reduce using rule 7 (sentencia -> impresion .)
    INCLUDE         reduce using rule 7 (sentencia -> impresion .)
    NAMESPACE       reduce using rule 7 (sentencia -> impresion .)
    THROW           reduce using rule 7 (sentencia -> impresion .)
    CONST           reduce using rule 7 (sentencia -> impresion .)
    THIS            reduce using rule 7 (sentencia -> impresion .)
    INT             reduce using rule 7 (sentencia -> impresion .)
    FLOAT           reduce using rule 7 (sentencia -> impresion .)
    STRING          reduce using rule 7 (sentencia -> impresion .)
    BOOL            reduce using rule 7 (sentencia -> impresion .)
    NULL            reduce using rule 7 (sentencia -> impresion .)
    ARRAY           reduce using rule 7 (sentencia -> impresion .)
    LPAREN          reduce using rule 7 (sentencia -> impresion .)
    ABSTRACT        reduce using rule 7 (sentencia -> impresion .)
    PRIVATE         reduce using rule 7 (sentencia -> impresion .)
    PROTECTED       reduce using rule 7 (sentencia -> impresion .)
    PUBLIC          reduce using rule 7 (sentencia -> impresion .)
    STATIC          reduce using rule 7 (sentencia -> impresion .)
    FINAL           reduce using rule 7 (sentencia -> impresion .)
    IF              reduce using rule 7 (sentencia -> impresion .)
    WHILE           reduce using rule 7 (sentencia -> impresion .)
    DO              reduce using rule 7 (sentencia -> impresion .)
    SWITCH          reduce using rule 7 (sentencia -> impresion .)
    FOREACH         reduce using rule 7 (sentencia -> impresion .)
    FOR             reduce using rule 7 (sentencia -> impresion .)
    CLOSETAG        reduce using rule 7 (sentencia -> impresion .)
    RBRACE          reduce using rule 7 (sentencia -> impresion .)
    BREAK           reduce using rule 7 (sentencia -> impresion .)
    ENDSWITCH       reduce using rule 7 (sentencia -> impresion .)
    CASE            reduce using rule 7 (sentencia -> impresion .)
    DEFAULT         reduce using rule 7 (sentencia -> impresion .)


state 9

    (8) sentencia -> estructurasPrograma .

    VARIABLE        reduce using rule 8 (sentencia -> estructurasPrograma .)
    ECHO            reduce using rule 8 (sentencia -> estructurasPrograma .)
    PRINT           reduce using rule 8 (sentencia -> estructurasPrograma .)
    TRY             reduce using rule 8 (sentencia -> estructurasPrograma .)
    FUNCTION        reduce using rule 8 (sentencia -> estructurasPrograma .)
    RETURN          reduce using rule 8 (sentencia -> estructurasPrograma .)
    ID              reduce using rule 8 (sentencia -> estructurasPrograma .)
    EMPTY           reduce using rule 8 (sentencia -> estructurasPrograma .)
    CLASS           reduce using rule 8 (sentencia -> estructurasPrograma .)
    INTERFACE       reduce using rule 8 (sentencia -> estructurasPrograma .)
    INCLUDE         reduce using rule 8 (sentencia -> estructurasPrograma .)
    NAMESPACE       reduce using rule 8 (sentencia -> estructurasPrograma .)
    THROW           reduce using rule 8 (sentencia -> estructurasPrograma .)
    CONST           reduce using rule 8 (sentencia -> estructurasPrograma .)
    THIS            reduce using rule 8 (sentencia -> estructurasPrograma .)
    INT             reduce using rule 8 (sentencia -> estructurasPrograma .)
    FLOAT           reduce using rule 8 (sentencia -> estructurasPrograma .)
    STRING          reduce using rule 8 (sentencia -> estructurasPrograma .)
    BOOL            reduce using rule 8 (sentencia -> estructurasPrograma .)
    NULL            reduce using rule 8 (sentencia -> estructurasPrograma .)
    ARRAY           reduce using rule 8 (sentencia -> estructurasPrograma .)
    LPAREN          reduce using rule 8 (sentencia -> estructurasPrograma .)
    ABSTRACT        reduce using rule 8 (sentencia -> estructurasPrograma .)
    PRIVATE         reduce using rule 8 (sentencia -> estructurasPrograma .)
    PROTECTED       reduce using rule 8 (sentencia -> estructurasPrograma .)
    PUBLIC          reduce using rule 8 (sentencia -> estructurasPrograma .)
    STATIC          reduce using rule 8 (sentencia -> estructurasPrograma .)
    FINAL           reduce using rule 8 (sentencia -> estructurasPrograma .)
    IF              reduce using rule 8 (sentencia -> estructurasPrograma .)
    WHILE           reduce using rule 8 (sentencia -> estructurasPrograma .)
    DO              reduce using rule 8 (sentencia -> estructurasPrograma .)
    SWITCH          reduce using rule 8 (sentencia -> estructurasPrograma .)
    FOREACH         reduce using rule 8 (sentencia -> estructurasPrograma .)
    FOR             reduce using rule 8 (sentencia -> estructurasPrograma .)
    CLOSETAG        reduce using rule 8 (sentencia -> estructurasPrograma .)
    RBRACE          reduce using rule 8 (sentencia -> estructurasPrograma .)
    BREAK           reduce using rule 8 (sentencia -> estructurasPrograma .)
    ENDSWITCH       reduce using rule 8 (sentencia -> estructurasPrograma .)
    CASE            reduce using rule 8 (sentencia -> estructurasPrograma .)
    DEFAULT         reduce using rule 8 (sentencia -> estructurasPrograma .)


state 10

    (9) sentencia -> try .

    VARIABLE        reduce using rule 9 (sentencia -> try .)
    ECHO            reduce using rule 9 (sentencia -> try .)
    PRINT           reduce using rule 9 (sentencia -> try .)
    TRY             reduce using rule 9 (sentencia -> try .)
    FUNCTION        reduce using rule 9 (sentencia -> try .)
    RETURN          reduce using rule 9 (sentencia -> try .)
    ID              reduce using rule 9 (sentencia -> try .)
    EMPTY           reduce using rule 9 (sentencia -> try .)
    CLASS           reduce using rule 9 (sentencia -> try .)
    INTERFACE       reduce using rule 9 (sentencia -> try .)
    INCLUDE         reduce using rule 9 (sentencia -> try .)
    NAMESPACE       reduce using rule 9 (sentencia -> try .)
    THROW           reduce using rule 9 (sentencia -> try .)
    CONST           reduce using rule 9 (sentencia -> try .)
    THIS            reduce using rule 9 (sentencia -> try .)
    INT             reduce using rule 9 (sentencia -> try .)
    FLOAT           reduce using rule 9 (sentencia -> try .)
    STRING          reduce using rule 9 (sentencia -> try .)
    BOOL            reduce using rule 9 (sentencia -> try .)
    NULL            reduce using rule 9 (sentencia -> try .)
    ARRAY           reduce using rule 9 (sentencia -> try .)
    LPAREN          reduce using rule 9 (sentencia -> try .)
    ABSTRACT        reduce using rule 9 (sentencia -> try .)
    PRIVATE         reduce using rule 9 (sentencia -> try .)
    PROTECTED       reduce using rule 9 (sentencia -> try .)
    PUBLIC          reduce using rule 9 (sentencia -> try .)
    STATIC          reduce using rule 9 (sentencia -> try .)
    FINAL           reduce using rule 9 (sentencia -> try .)
    IF              reduce using rule 9 (sentencia -> try .)
    WHILE           reduce using rule 9 (sentencia -> try .)
    DO              reduce using rule 9 (sentencia -> try .)
    SWITCH          reduce using rule 9 (sentencia -> try .)
    FOREACH         reduce using rule 9 (sentencia -> try .)
    FOR             reduce using rule 9 (sentencia -> try .)
    CLOSETAG        reduce using rule 9 (sentencia -> try .)
    RBRACE          reduce using rule 9 (sentencia -> try .)
    BREAK           reduce using rule 9 (sentencia -> try .)
    ENDSWITCH       reduce using rule 9 (sentencia -> try .)
    CASE            reduce using rule 9 (sentencia -> try .)
    DEFAULT         reduce using rule 9 (sentencia -> try .)


state 11

    (10) sentencia -> funcionDeclaration .

    VARIABLE        reduce using rule 10 (sentencia -> funcionDeclaration .)
    ECHO            reduce using rule 10 (sentencia -> funcionDeclaration .)
    PRINT           reduce using rule 10 (sentencia -> funcionDeclaration .)
    TRY             reduce using rule 10 (sentencia -> funcionDeclaration .)
    FUNCTION        reduce using rule 10 (sentencia -> funcionDeclaration .)
    RETURN          reduce using rule 10 (sentencia -> funcionDeclaration .)
    ID              reduce using rule 10 (sentencia -> funcionDeclaration .)
    EMPTY           reduce using rule 10 (sentencia -> funcionDeclaration .)
    CLASS           reduce using rule 10 (sentencia -> funcionDeclaration .)
    INTERFACE       reduce using rule 10 (sentencia -> funcionDeclaration .)
    INCLUDE         reduce using rule 10 (sentencia -> funcionDeclaration .)
    NAMESPACE       reduce using rule 10 (sentencia -> funcionDeclaration .)
    THROW           reduce using rule 10 (sentencia -> funcionDeclaration .)
    CONST           reduce using rule 10 (sentencia -> funcionDeclaration .)
    THIS            reduce using rule 10 (sentencia -> funcionDeclaration .)
    INT             reduce using rule 10 (sentencia -> funcionDeclaration .)
    FLOAT           reduce using rule 10 (sentencia -> funcionDeclaration .)
    STRING          reduce using rule 10 (sentencia -> funcionDeclaration .)
    BOOL            reduce using rule 10 (sentencia -> funcionDeclaration .)
    NULL            reduce using rule 10 (sentencia -> funcionDeclaration .)
    ARRAY           reduce using rule 10 (sentencia -> funcionDeclaration .)
    LPAREN          reduce using rule 10 (sentencia -> funcionDeclaration .)
    ABSTRACT        reduce using rule 10 (sentencia -> funcionDeclaration .)
    PRIVATE         reduce using rule 10 (sentencia -> funcionDeclaration .)
    PROTECTED       reduce using rule 10 (sentencia -> funcionDeclaration .)
    PUBLIC          reduce using rule 10 (sentencia -> funcionDeclaration .)
    STATIC          reduce using rule 10 (sentencia -> funcionDeclaration .)
    FINAL           reduce using rule 10 (sentencia -> funcionDeclaration .)
    IF              reduce using rule 10 (sentencia -> funcionDeclaration .)
    WHILE           reduce using rule 10 (sentencia -> funcionDeclaration .)
    DO              reduce using rule 10 (sentencia -> funcionDeclaration .)
    SWITCH          reduce using rule 10 (sentencia -> funcionDeclaration .)
    FOREACH         reduce using rule 10 (sentencia -> funcionDeclaration .)
    FOR             reduce using rule 10 (sentencia -> funcionDeclaration .)
    CLOSETAG        reduce using rule 10 (sentencia -> funcionDeclaration .)
    RBRACE          reduce using rule 10 (sentencia -> funcionDeclaration .)
    BREAK           reduce using rule 10 (sentencia -> funcionDeclaration .)
    ENDSWITCH       reduce using rule 10 (sentencia -> funcionDeclaration .)
    CASE            reduce using rule 10 (sentencia -> funcionDeclaration .)
    DEFAULT         reduce using rule 10 (sentencia -> funcionDeclaration .)


state 12

    (11) sentencia -> returnStatement .

    VARIABLE        reduce using rule 11 (sentencia -> returnStatement .)
    ECHO            reduce using rule 11 (sentencia -> returnStatement .)
    PRINT           reduce using rule 11 (sentencia -> returnStatement .)
    TRY             reduce using rule 11 (sentencia -> returnStatement .)
    FUNCTION        reduce using rule 11 (sentencia -> returnStatement .)
    RETURN          reduce using rule 11 (sentencia -> returnStatement .)
    ID              reduce using rule 11 (sentencia -> returnStatement .)
    EMPTY           reduce using rule 11 (sentencia -> returnStatement .)
    CLASS           reduce using rule 11 (sentencia -> returnStatement .)
    INTERFACE       reduce using rule 11 (sentencia -> returnStatement .)
    INCLUDE         reduce using rule 11 (sentencia -> returnStatement .)
    NAMESPACE       reduce using rule 11 (sentencia -> returnStatement .)
    THROW           reduce using rule 11 (sentencia -> returnStatement .)
    CONST           reduce using rule 11 (sentencia -> returnStatement .)
    THIS            reduce using rule 11 (sentencia -> returnStatement .)
    INT             reduce using rule 11 (sentencia -> returnStatement .)
    FLOAT           reduce using rule 11 (sentencia -> returnStatement .)
    STRING          reduce using rule 11 (sentencia -> returnStatement .)
    BOOL            reduce using rule 11 (sentencia -> returnStatement .)
    NULL            reduce using rule 11 (sentencia -> returnStatement .)
    ARRAY           reduce using rule 11 (sentencia -> returnStatement .)
    LPAREN          reduce using rule 11 (sentencia -> returnStatement .)
    ABSTRACT        reduce using rule 11 (sentencia -> returnStatement .)
    PRIVATE         reduce using rule 11 (sentencia -> returnStatement .)
    PROTECTED       reduce using rule 11 (sentencia -> returnStatement .)
    PUBLIC          reduce using rule 11 (sentencia -> returnStatement .)
    STATIC          reduce using rule 11 (sentencia -> returnStatement .)
    FINAL           reduce using rule 11 (sentencia -> returnStatement .)
    IF              reduce using rule 11 (sentencia -> returnStatement .)
    WHILE           reduce using rule 11 (sentencia -> returnStatement .)
    DO              reduce using rule 11 (sentencia -> returnStatement .)
    SWITCH          reduce using rule 11 (sentencia -> returnStatement .)
    FOREACH         reduce using rule 11 (sentencia -> returnStatement .)
    FOR             reduce using rule 11 (sentencia -> returnStatement .)
    CLOSETAG        reduce using rule 11 (sentencia -> returnStatement .)
    RBRACE          reduce using rule 11 (sentencia -> returnStatement .)
    BREAK           reduce using rule 11 (sentencia -> returnStatement .)
    ENDSWITCH       reduce using rule 11 (sentencia -> returnStatement .)
    CASE            reduce using rule 11 (sentencia -> returnStatement .)
    DEFAULT         reduce using rule 11 (sentencia -> returnStatement .)


state 13

    (12) sentencia -> llamadaFuncion .
    (48) valor -> llamadaFuncion .

    VARIABLE        reduce using rule 12 (sentencia -> llamadaFuncion .)
    ECHO            reduce using rule 12 (sentencia -> llamadaFuncion .)
    PRINT           reduce using rule 12 (sentencia -> llamadaFuncion .)
    TRY             reduce using rule 12 (sentencia -> llamadaFuncion .)
    FUNCTION        reduce using rule 12 (sentencia -> llamadaFuncion .)
    RETURN          reduce using rule 12 (sentencia -> llamadaFuncion .)
    ID              reduce using rule 12 (sentencia -> llamadaFuncion .)
    EMPTY           reduce using rule 12 (sentencia -> llamadaFuncion .)
    CLASS           reduce using rule 12 (sentencia -> llamadaFuncion .)
    INTERFACE       reduce using rule 12 (sentencia -> llamadaFuncion .)
    INCLUDE         reduce using rule 12 (sentencia -> llamadaFuncion .)
    NAMESPACE       reduce using rule 12 (sentencia -> llamadaFuncion .)
    THROW           reduce using rule 12 (sentencia -> llamadaFuncion .)
    CONST           reduce using rule 12 (sentencia -> llamadaFuncion .)
    THIS            reduce using rule 12 (sentencia -> llamadaFuncion .)
    INT             reduce using rule 12 (sentencia -> llamadaFuncion .)
    FLOAT           reduce using rule 12 (sentencia -> llamadaFuncion .)
    STRING          reduce using rule 12 (sentencia -> llamadaFuncion .)
    BOOL            reduce using rule 12 (sentencia -> llamadaFuncion .)
    NULL            reduce using rule 12 (sentencia -> llamadaFuncion .)
    ARRAY           reduce using rule 12 (sentencia -> llamadaFuncion .)
    LPAREN          reduce using rule 12 (sentencia -> llamadaFuncion .)
    ABSTRACT        reduce using rule 12 (sentencia -> llamadaFuncion .)
    PRIVATE         reduce using rule 12 (sentencia -> llamadaFuncion .)
    PROTECTED       reduce using rule 12 (sentencia -> llamadaFuncion .)
    PUBLIC          reduce using rule 12 (sentencia -> llamadaFuncion .)
    STATIC          reduce using rule 12 (sentencia -> llamadaFuncion .)
    FINAL           reduce using rule 12 (sentencia -> llamadaFuncion .)
    IF              reduce using rule 12 (sentencia -> llamadaFuncion .)
    WHILE           reduce using rule 12 (sentencia -> llamadaFuncion .)
    DO              reduce using rule 12 (sentencia -> llamadaFuncion .)
    SWITCH          reduce using rule 12 (sentencia -> llamadaFuncion .)
    FOREACH         reduce using rule 12 (sentencia -> llamadaFuncion .)
    FOR             reduce using rule 12 (sentencia -> llamadaFuncion .)
    CLOSETAG        reduce using rule 12 (sentencia -> llamadaFuncion .)
    RBRACE          reduce using rule 12 (sentencia -> llamadaFuncion .)
    BREAK           reduce using rule 12 (sentencia -> llamadaFuncion .)
    ENDSWITCH       reduce using rule 12 (sentencia -> llamadaFuncion .)
    CASE            reduce using rule 12 (sentencia -> llamadaFuncion .)
    DEFAULT         reduce using rule 12 (sentencia -> llamadaFuncion .)
    EQ              reduce using rule 48 (valor -> llamadaFuncion .)
    NEQ             reduce using rule 48 (valor -> llamadaFuncion .)
    STRICTEQ        reduce using rule 48 (valor -> llamadaFuncion .)
    STRICTNEQ       reduce using rule 48 (valor -> llamadaFuncion .)
    LT              reduce using rule 48 (valor -> llamadaFuncion .)
    GT              reduce using rule 48 (valor -> llamadaFuncion .)
    LEQ             reduce using rule 48 (valor -> llamadaFuncion .)
    GEQ             reduce using rule 48 (valor -> llamadaFuncion .)
    AND             reduce using rule 48 (valor -> llamadaFuncion .)
    LOGICAL_AND     reduce using rule 48 (valor -> llamadaFuncion .)
    OR              reduce using rule 48 (valor -> llamadaFuncion .)
    LOGICAL_OR      reduce using rule 48 (valor -> llamadaFuncion .)
    PLUS            reduce using rule 48 (valor -> llamadaFuncion .)
    MINUS           reduce using rule 48 (valor -> llamadaFuncion .)
    TIMES           reduce using rule 48 (valor -> llamadaFuncion .)
    DIVIDE          reduce using rule 48 (valor -> llamadaFuncion .)
    MODULO          reduce using rule 48 (valor -> llamadaFuncion .)
    POTENCIA        reduce using rule 48 (valor -> llamadaFuncion .)
    PLUSEQUAL       reduce using rule 48 (valor -> llamadaFuncion .)


state 14

    (13) sentencia -> classDeclarate .

    VARIABLE        reduce using rule 13 (sentencia -> classDeclarate .)
    ECHO            reduce using rule 13 (sentencia -> classDeclarate .)
    PRINT           reduce using rule 13 (sentencia -> classDeclarate .)
    TRY             reduce using rule 13 (sentencia -> classDeclarate .)
    FUNCTION        reduce using rule 13 (sentencia -> classDeclarate .)
    RETURN          reduce using rule 13 (sentencia -> classDeclarate .)
    ID              reduce using rule 13 (sentencia -> classDeclarate .)
    EMPTY           reduce using rule 13 (sentencia -> classDeclarate .)
    CLASS           reduce using rule 13 (sentencia -> classDeclarate .)
    INTERFACE       reduce using rule 13 (sentencia -> classDeclarate .)
    INCLUDE         reduce using rule 13 (sentencia -> classDeclarate .)
    NAMESPACE       reduce using rule 13 (sentencia -> classDeclarate .)
    THROW           reduce using rule 13 (sentencia -> classDeclarate .)
    CONST           reduce using rule 13 (sentencia -> classDeclarate .)
    THIS            reduce using rule 13 (sentencia -> classDeclarate .)
    INT             reduce using rule 13 (sentencia -> classDeclarate .)
    FLOAT           reduce using rule 13 (sentencia -> classDeclarate .)
    STRING          reduce using rule 13 (sentencia -> classDeclarate .)
    BOOL            reduce using rule 13 (sentencia -> classDeclarate .)
    NULL            reduce using rule 13 (sentencia -> classDeclarate .)
    ARRAY           reduce using rule 13 (sentencia -> classDeclarate .)
    LPAREN          reduce using rule 13 (sentencia -> classDeclarate .)
    ABSTRACT        reduce using rule 13 (sentencia -> classDeclarate .)
    PRIVATE         reduce using rule 13 (sentencia -> classDeclarate .)
    PROTECTED       reduce using rule 13 (sentencia -> classDeclarate .)
    PUBLIC          reduce using rule 13 (sentencia -> classDeclarate .)
    STATIC          reduce using rule 13 (sentencia -> classDeclarate .)
    FINAL           reduce using rule 13 (sentencia -> classDeclarate .)
    IF              reduce using rule 13 (sentencia -> classDeclarate .)
    WHILE           reduce using rule 13 (sentencia -> classDeclarate .)
    DO              reduce using rule 13 (sentencia -> classDeclarate .)
    SWITCH          reduce using rule 13 (sentencia -> classDeclarate .)
    FOREACH         reduce using rule 13 (sentencia -> classDeclarate .)
    FOR             reduce using rule 13 (sentencia -> classDeclarate .)
    CLOSETAG        reduce using rule 13 (sentencia -> classDeclarate .)
    RBRACE          reduce using rule 13 (sentencia -> classDeclarate .)
    BREAK           reduce using rule 13 (sentencia -> classDeclarate .)
    ENDSWITCH       reduce using rule 13 (sentencia -> classDeclarate .)
    CASE            reduce using rule 13 (sentencia -> classDeclarate .)
    DEFAULT         reduce using rule 13 (sentencia -> classDeclarate .)


state 15

    (14) sentencia -> interface .

    VARIABLE        reduce using rule 14 (sentencia -> interface .)
    ECHO            reduce using rule 14 (sentencia -> interface .)
    PRINT           reduce using rule 14 (sentencia -> interface .)
    TRY             reduce using rule 14 (sentencia -> interface .)
    FUNCTION        reduce using rule 14 (sentencia -> interface .)
    RETURN          reduce using rule 14 (sentencia -> interface .)
    ID              reduce using rule 14 (sentencia -> interface .)
    EMPTY           reduce using rule 14 (sentencia -> interface .)
    CLASS           reduce using rule 14 (sentencia -> interface .)
    INTERFACE       reduce using rule 14 (sentencia -> interface .)
    INCLUDE         reduce using rule 14 (sentencia -> interface .)
    NAMESPACE       reduce using rule 14 (sentencia -> interface .)
    THROW           reduce using rule 14 (sentencia -> interface .)
    CONST           reduce using rule 14 (sentencia -> interface .)
    THIS            reduce using rule 14 (sentencia -> interface .)
    INT             reduce using rule 14 (sentencia -> interface .)
    FLOAT           reduce using rule 14 (sentencia -> interface .)
    STRING          reduce using rule 14 (sentencia -> interface .)
    BOOL            reduce using rule 14 (sentencia -> interface .)
    NULL            reduce using rule 14 (sentencia -> interface .)
    ARRAY           reduce using rule 14 (sentencia -> interface .)
    LPAREN          reduce using rule 14 (sentencia -> interface .)
    ABSTRACT        reduce using rule 14 (sentencia -> interface .)
    PRIVATE         reduce using rule 14 (sentencia -> interface .)
    PROTECTED       reduce using rule 14 (sentencia -> interface .)
    PUBLIC          reduce using rule 14 (sentencia -> interface .)
    STATIC          reduce using rule 14 (sentencia -> interface .)
    FINAL           reduce using rule 14 (sentencia -> interface .)
    IF              reduce using rule 14 (sentencia -> interface .)
    WHILE           reduce using rule 14 (sentencia -> interface .)
    DO              reduce using rule 14 (sentencia -> interface .)
    SWITCH          reduce using rule 14 (sentencia -> interface .)
    FOREACH         reduce using rule 14 (sentencia -> interface .)
    FOR             reduce using rule 14 (sentencia -> interface .)
    CLOSETAG        reduce using rule 14 (sentencia -> interface .)
    RBRACE          reduce using rule 14 (sentencia -> interface .)
    BREAK           reduce using rule 14 (sentencia -> interface .)
    ENDSWITCH       reduce using rule 14 (sentencia -> interface .)
    CASE            reduce using rule 14 (sentencia -> interface .)
    DEFAULT         reduce using rule 14 (sentencia -> interface .)


state 16

    (15) sentencia -> objeto .

    VARIABLE        reduce using rule 15 (sentencia -> objeto .)
    ECHO            reduce using rule 15 (sentencia -> objeto .)
    PRINT           reduce using rule 15 (sentencia -> objeto .)
    TRY             reduce using rule 15 (sentencia -> objeto .)
    FUNCTION        reduce using rule 15 (sentencia -> objeto .)
    RETURN          reduce using rule 15 (sentencia -> objeto .)
    ID              reduce using rule 15 (sentencia -> objeto .)
    EMPTY           reduce using rule 15 (sentencia -> objeto .)
    CLASS           reduce using rule 15 (sentencia -> objeto .)
    INTERFACE       reduce using rule 15 (sentencia -> objeto .)
    INCLUDE         reduce using rule 15 (sentencia -> objeto .)
    NAMESPACE       reduce using rule 15 (sentencia -> objeto .)
    THROW           reduce using rule 15 (sentencia -> objeto .)
    CONST           reduce using rule 15 (sentencia -> objeto .)
    THIS            reduce using rule 15 (sentencia -> objeto .)
    INT             reduce using rule 15 (sentencia -> objeto .)
    FLOAT           reduce using rule 15 (sentencia -> objeto .)
    STRING          reduce using rule 15 (sentencia -> objeto .)
    BOOL            reduce using rule 15 (sentencia -> objeto .)
    NULL            reduce using rule 15 (sentencia -> objeto .)
    ARRAY           reduce using rule 15 (sentencia -> objeto .)
    LPAREN          reduce using rule 15 (sentencia -> objeto .)
    ABSTRACT        reduce using rule 15 (sentencia -> objeto .)
    PRIVATE         reduce using rule 15 (sentencia -> objeto .)
    PROTECTED       reduce using rule 15 (sentencia -> objeto .)
    PUBLIC          reduce using rule 15 (sentencia -> objeto .)
    STATIC          reduce using rule 15 (sentencia -> objeto .)
    FINAL           reduce using rule 15 (sentencia -> objeto .)
    IF              reduce using rule 15 (sentencia -> objeto .)
    WHILE           reduce using rule 15 (sentencia -> objeto .)
    DO              reduce using rule 15 (sentencia -> objeto .)
    SWITCH          reduce using rule 15 (sentencia -> objeto .)
    FOREACH         reduce using rule 15 (sentencia -> objeto .)
    FOR             reduce using rule 15 (sentencia -> objeto .)
    CLOSETAG        reduce using rule 15 (sentencia -> objeto .)
    RBRACE          reduce using rule 15 (sentencia -> objeto .)
    BREAK           reduce using rule 15 (sentencia -> objeto .)
    ENDSWITCH       reduce using rule 15 (sentencia -> objeto .)
    CASE            reduce using rule 15 (sentencia -> objeto .)
    DEFAULT         reduce using rule 15 (sentencia -> objeto .)


state 17

    (16) sentencia -> includes .

    VARIABLE        reduce using rule 16 (sentencia -> includes .)
    ECHO            reduce using rule 16 (sentencia -> includes .)
    PRINT           reduce using rule 16 (sentencia -> includes .)
    TRY             reduce using rule 16 (sentencia -> includes .)
    FUNCTION        reduce using rule 16 (sentencia -> includes .)
    RETURN          reduce using rule 16 (sentencia -> includes .)
    ID              reduce using rule 16 (sentencia -> includes .)
    EMPTY           reduce using rule 16 (sentencia -> includes .)
    CLASS           reduce using rule 16 (sentencia -> includes .)
    INTERFACE       reduce using rule 16 (sentencia -> includes .)
    INCLUDE         reduce using rule 16 (sentencia -> includes .)
    NAMESPACE       reduce using rule 16 (sentencia -> includes .)
    THROW           reduce using rule 16 (sentencia -> includes .)
    CONST           reduce using rule 16 (sentencia -> includes .)
    THIS            reduce using rule 16 (sentencia -> includes .)
    INT             reduce using rule 16 (sentencia -> includes .)
    FLOAT           reduce using rule 16 (sentencia -> includes .)
    STRING          reduce using rule 16 (sentencia -> includes .)
    BOOL            reduce using rule 16 (sentencia -> includes .)
    NULL            reduce using rule 16 (sentencia -> includes .)
    ARRAY           reduce using rule 16 (sentencia -> includes .)
    LPAREN          reduce using rule 16 (sentencia -> includes .)
    ABSTRACT        reduce using rule 16 (sentencia -> includes .)
    PRIVATE         reduce using rule 16 (sentencia -> includes .)
    PROTECTED       reduce using rule 16 (sentencia -> includes .)
    PUBLIC          reduce using rule 16 (sentencia -> includes .)
    STATIC          reduce using rule 16 (sentencia -> includes .)
    FINAL           reduce using rule 16 (sentencia -> includes .)
    IF              reduce using rule 16 (sentencia -> includes .)
    WHILE           reduce using rule 16 (sentencia -> includes .)
    DO              reduce using rule 16 (sentencia -> includes .)
    SWITCH          reduce using rule 16 (sentencia -> includes .)
    FOREACH         reduce using rule 16 (sentencia -> includes .)
    FOR             reduce using rule 16 (sentencia -> includes .)
    CLOSETAG        reduce using rule 16 (sentencia -> includes .)
    RBRACE          reduce using rule 16 (sentencia -> includes .)
    BREAK           reduce using rule 16 (sentencia -> includes .)
    ENDSWITCH       reduce using rule 16 (sentencia -> includes .)
    CASE            reduce using rule 16 (sentencia -> includes .)
    DEFAULT         reduce using rule 16 (sentencia -> includes .)


state 18

    (17) sentencia -> namespace .

    VARIABLE        reduce using rule 17 (sentencia -> namespace .)
    ECHO            reduce using rule 17 (sentencia -> namespace .)
    PRINT           reduce using rule 17 (sentencia -> namespace .)
    TRY             reduce using rule 17 (sentencia -> namespace .)
    FUNCTION        reduce using rule 17 (sentencia -> namespace .)
    RETURN          reduce using rule 17 (sentencia -> namespace .)
    ID              reduce using rule 17 (sentencia -> namespace .)
    EMPTY           reduce using rule 17 (sentencia -> namespace .)
    CLASS           reduce using rule 17 (sentencia -> namespace .)
    INTERFACE       reduce using rule 17 (sentencia -> namespace .)
    INCLUDE         reduce using rule 17 (sentencia -> namespace .)
    NAMESPACE       reduce using rule 17 (sentencia -> namespace .)
    THROW           reduce using rule 17 (sentencia -> namespace .)
    CONST           reduce using rule 17 (sentencia -> namespace .)
    THIS            reduce using rule 17 (sentencia -> namespace .)
    INT             reduce using rule 17 (sentencia -> namespace .)
    FLOAT           reduce using rule 17 (sentencia -> namespace .)
    STRING          reduce using rule 17 (sentencia -> namespace .)
    BOOL            reduce using rule 17 (sentencia -> namespace .)
    NULL            reduce using rule 17 (sentencia -> namespace .)
    ARRAY           reduce using rule 17 (sentencia -> namespace .)
    LPAREN          reduce using rule 17 (sentencia -> namespace .)
    ABSTRACT        reduce using rule 17 (sentencia -> namespace .)
    PRIVATE         reduce using rule 17 (sentencia -> namespace .)
    PROTECTED       reduce using rule 17 (sentencia -> namespace .)
    PUBLIC          reduce using rule 17 (sentencia -> namespace .)
    STATIC          reduce using rule 17 (sentencia -> namespace .)
    FINAL           reduce using rule 17 (sentencia -> namespace .)
    IF              reduce using rule 17 (sentencia -> namespace .)
    WHILE           reduce using rule 17 (sentencia -> namespace .)
    DO              reduce using rule 17 (sentencia -> namespace .)
    SWITCH          reduce using rule 17 (sentencia -> namespace .)
    FOREACH         reduce using rule 17 (sentencia -> namespace .)
    FOR             reduce using rule 17 (sentencia -> namespace .)
    CLOSETAG        reduce using rule 17 (sentencia -> namespace .)
    RBRACE          reduce using rule 17 (sentencia -> namespace .)
    BREAK           reduce using rule 17 (sentencia -> namespace .)
    ENDSWITCH       reduce using rule 17 (sentencia -> namespace .)
    CASE            reduce using rule 17 (sentencia -> namespace .)
    DEFAULT         reduce using rule 17 (sentencia -> namespace .)


state 19

    (18) sentencia -> anonymousFunction .

    VARIABLE        reduce using rule 18 (sentencia -> anonymousFunction .)
    ECHO            reduce using rule 18 (sentencia -> anonymousFunction .)
    PRINT           reduce using rule 18 (sentencia -> anonymousFunction .)
    TRY             reduce using rule 18 (sentencia -> anonymousFunction .)
    FUNCTION        reduce using rule 18 (sentencia -> anonymousFunction .)
    RETURN          reduce using rule 18 (sentencia -> anonymousFunction .)
    ID              reduce using rule 18 (sentencia -> anonymousFunction .)
    EMPTY           reduce using rule 18 (sentencia -> anonymousFunction .)
    CLASS           reduce using rule 18 (sentencia -> anonymousFunction .)
    INTERFACE       reduce using rule 18 (sentencia -> anonymousFunction .)
    INCLUDE         reduce using rule 18 (sentencia -> anonymousFunction .)
    NAMESPACE       reduce using rule 18 (sentencia -> anonymousFunction .)
    THROW           reduce using rule 18 (sentencia -> anonymousFunction .)
    CONST           reduce using rule 18 (sentencia -> anonymousFunction .)
    THIS            reduce using rule 18 (sentencia -> anonymousFunction .)
    INT             reduce using rule 18 (sentencia -> anonymousFunction .)
    FLOAT           reduce using rule 18 (sentencia -> anonymousFunction .)
    STRING          reduce using rule 18 (sentencia -> anonymousFunction .)
    BOOL            reduce using rule 18 (sentencia -> anonymousFunction .)
    NULL            reduce using rule 18 (sentencia -> anonymousFunction .)
    ARRAY           reduce using rule 18 (sentencia -> anonymousFunction .)
    LPAREN          reduce using rule 18 (sentencia -> anonymousFunction .)
    ABSTRACT        reduce using rule 18 (sentencia -> anonymousFunction .)
    PRIVATE         reduce using rule 18 (sentencia -> anonymousFunction .)
    PROTECTED       reduce using rule 18 (sentencia -> anonymousFunction .)
    PUBLIC          reduce using rule 18 (sentencia -> anonymousFunction .)
    STATIC          reduce using rule 18 (sentencia -> anonymousFunction .)
    FINAL           reduce using rule 18 (sentencia -> anonymousFunction .)
    IF              reduce using rule 18 (sentencia -> anonymousFunction .)
    WHILE           reduce using rule 18 (sentencia -> anonymousFunction .)
    DO              reduce using rule 18 (sentencia -> anonymousFunction .)
    SWITCH          reduce using rule 18 (sentencia -> anonymousFunction .)
    FOREACH         reduce using rule 18 (sentencia -> anonymousFunction .)
    FOR             reduce using rule 18 (sentencia -> anonymousFunction .)
    CLOSETAG        reduce using rule 18 (sentencia -> anonymousFunction .)
    RBRACE          reduce using rule 18 (sentencia -> anonymousFunction .)
    BREAK           reduce using rule 18 (sentencia -> anonymousFunction .)
    ENDSWITCH       reduce using rule 18 (sentencia -> anonymousFunction .)
    CASE            reduce using rule 18 (sentencia -> anonymousFunction .)
    DEFAULT         reduce using rule 18 (sentencia -> anonymousFunction .)


state 20

    (19) sentencia -> throw .

    VARIABLE        reduce using rule 19 (sentencia -> throw .)
    ECHO            reduce using rule 19 (sentencia -> throw .)
    PRINT           reduce using rule 19 (sentencia -> throw .)
    TRY             reduce using rule 19 (sentencia -> throw .)
    FUNCTION        reduce using rule 19 (sentencia -> throw .)
    RETURN          reduce using rule 19 (sentencia -> throw .)
    ID              reduce using rule 19 (sentencia -> throw .)
    EMPTY           reduce using rule 19 (sentencia -> throw .)
    CLASS           reduce using rule 19 (sentencia -> throw .)
    INTERFACE       reduce using rule 19 (sentencia -> throw .)
    INCLUDE         reduce using rule 19 (sentencia -> throw .)
    NAMESPACE       reduce using rule 19 (sentencia -> throw .)
    THROW           reduce using rule 19 (sentencia -> throw .)
    CONST           reduce using rule 19 (sentencia -> throw .)
    THIS            reduce using rule 19 (sentencia -> throw .)
    INT             reduce using rule 19 (sentencia -> throw .)
    FLOAT           reduce using rule 19 (sentencia -> throw .)
    STRING          reduce using rule 19 (sentencia -> throw .)
    BOOL            reduce using rule 19 (sentencia -> throw .)
    NULL            reduce using rule 19 (sentencia -> throw .)
    ARRAY           reduce using rule 19 (sentencia -> throw .)
    LPAREN          reduce using rule 19 (sentencia -> throw .)
    ABSTRACT        reduce using rule 19 (sentencia -> throw .)
    PRIVATE         reduce using rule 19 (sentencia -> throw .)
    PROTECTED       reduce using rule 19 (sentencia -> throw .)
    PUBLIC          reduce using rule 19 (sentencia -> throw .)
    STATIC          reduce using rule 19 (sentencia -> throw .)
    FINAL           reduce using rule 19 (sentencia -> throw .)
    IF              reduce using rule 19 (sentencia -> throw .)
    WHILE           reduce using rule 19 (sentencia -> throw .)
    DO              reduce using rule 19 (sentencia -> throw .)
    SWITCH          reduce using rule 19 (sentencia -> throw .)
    FOREACH         reduce using rule 19 (sentencia -> throw .)
    FOR             reduce using rule 19 (sentencia -> throw .)
    CLOSETAG        reduce using rule 19 (sentencia -> throw .)
    RBRACE          reduce using rule 19 (sentencia -> throw .)
    BREAK           reduce using rule 19 (sentencia -> throw .)
    ENDSWITCH       reduce using rule 19 (sentencia -> throw .)
    CASE            reduce using rule 19 (sentencia -> throw .)
    DEFAULT         reduce using rule 19 (sentencia -> throw .)


state 21

    (20) sentencia -> instance .

    VARIABLE        reduce using rule 20 (sentencia -> instance .)
    ECHO            reduce using rule 20 (sentencia -> instance .)
    PRINT           reduce using rule 20 (sentencia -> instance .)
    TRY             reduce using rule 20 (sentencia -> instance .)
    FUNCTION        reduce using rule 20 (sentencia -> instance .)
    RETURN          reduce using rule 20 (sentencia -> instance .)
    ID              reduce using rule 20 (sentencia -> instance .)
    EMPTY           reduce using rule 20 (sentencia -> instance .)
    CLASS           reduce using rule 20 (sentencia -> instance .)
    INTERFACE       reduce using rule 20 (sentencia -> instance .)
    INCLUDE         reduce using rule 20 (sentencia -> instance .)
    NAMESPACE       reduce using rule 20 (sentencia -> instance .)
    THROW           reduce using rule 20 (sentencia -> instance .)
    CONST           reduce using rule 20 (sentencia -> instance .)
    THIS            reduce using rule 20 (sentencia -> instance .)
    INT             reduce using rule 20 (sentencia -> instance .)
    FLOAT           reduce using rule 20 (sentencia -> instance .)
    STRING          reduce using rule 20 (sentencia -> instance .)
    BOOL            reduce using rule 20 (sentencia -> instance .)
    NULL            reduce using rule 20 (sentencia -> instance .)
    ARRAY           reduce using rule 20 (sentencia -> instance .)
    LPAREN          reduce using rule 20 (sentencia -> instance .)
    ABSTRACT        reduce using rule 20 (sentencia -> instance .)
    PRIVATE         reduce using rule 20 (sentencia -> instance .)
    PROTECTED       reduce using rule 20 (sentencia -> instance .)
    PUBLIC          reduce using rule 20 (sentencia -> instance .)
    STATIC          reduce using rule 20 (sentencia -> instance .)
    FINAL           reduce using rule 20 (sentencia -> instance .)
    IF              reduce using rule 20 (sentencia -> instance .)
    WHILE           reduce using rule 20 (sentencia -> instance .)
    DO              reduce using rule 20 (sentencia -> instance .)
    SWITCH          reduce using rule 20 (sentencia -> instance .)
    FOREACH         reduce using rule 20 (sentencia -> instance .)
    FOR             reduce using rule 20 (sentencia -> instance .)
    CLOSETAG        reduce using rule 20 (sentencia -> instance .)
    RBRACE          reduce using rule 20 (sentencia -> instance .)
    BREAK           reduce using rule 20 (sentencia -> instance .)
    ENDSWITCH       reduce using rule 20 (sentencia -> instance .)
    CASE            reduce using rule 20 (sentencia -> instance .)
    DEFAULT         reduce using rule 20 (sentencia -> instance .)


state 22

    (21) sentencia -> constdeclaration .

    VARIABLE        reduce using rule 21 (sentencia -> constdeclaration .)
    ECHO            reduce using rule 21 (sentencia -> constdeclaration .)
    PRINT           reduce using rule 21 (sentencia -> constdeclaration .)
    TRY             reduce using rule 21 (sentencia -> constdeclaration .)
    FUNCTION        reduce using rule 21 (sentencia -> constdeclaration .)
    RETURN          reduce using rule 21 (sentencia -> constdeclaration .)
    ID              reduce using rule 21 (sentencia -> constdeclaration .)
    EMPTY           reduce using rule 21 (sentencia -> constdeclaration .)
    CLASS           reduce using rule 21 (sentencia -> constdeclaration .)
    INTERFACE       reduce using rule 21 (sentencia -> constdeclaration .)
    INCLUDE         reduce using rule 21 (sentencia -> constdeclaration .)
    NAMESPACE       reduce using rule 21 (sentencia -> constdeclaration .)
    THROW           reduce using rule 21 (sentencia -> constdeclaration .)
    CONST           reduce using rule 21 (sentencia -> constdeclaration .)
    THIS            reduce using rule 21 (sentencia -> constdeclaration .)
    INT             reduce using rule 21 (sentencia -> constdeclaration .)
    FLOAT           reduce using rule 21 (sentencia -> constdeclaration .)
    STRING          reduce using rule 21 (sentencia -> constdeclaration .)
    BOOL            reduce using rule 21 (sentencia -> constdeclaration .)
    NULL            reduce using rule 21 (sentencia -> constdeclaration .)
    ARRAY           reduce using rule 21 (sentencia -> constdeclaration .)
    LPAREN          reduce using rule 21 (sentencia -> constdeclaration .)
    ABSTRACT        reduce using rule 21 (sentencia -> constdeclaration .)
    PRIVATE         reduce using rule 21 (sentencia -> constdeclaration .)
    PROTECTED       reduce using rule 21 (sentencia -> constdeclaration .)
    PUBLIC          reduce using rule 21 (sentencia -> constdeclaration .)
    STATIC          reduce using rule 21 (sentencia -> constdeclaration .)
    FINAL           reduce using rule 21 (sentencia -> constdeclaration .)
    IF              reduce using rule 21 (sentencia -> constdeclaration .)
    WHILE           reduce using rule 21 (sentencia -> constdeclaration .)
    DO              reduce using rule 21 (sentencia -> constdeclaration .)
    SWITCH          reduce using rule 21 (sentencia -> constdeclaration .)
    FOREACH         reduce using rule 21 (sentencia -> constdeclaration .)
    FOR             reduce using rule 21 (sentencia -> constdeclaration .)
    CLOSETAG        reduce using rule 21 (sentencia -> constdeclaration .)
    RBRACE          reduce using rule 21 (sentencia -> constdeclaration .)
    BREAK           reduce using rule 21 (sentencia -> constdeclaration .)
    ENDSWITCH       reduce using rule 21 (sentencia -> constdeclaration .)
    CASE            reduce using rule 21 (sentencia -> constdeclaration .)
    DEFAULT         reduce using rule 21 (sentencia -> constdeclaration .)


state 23

    (22) sentencia -> thisdeclaration .

    VARIABLE        reduce using rule 22 (sentencia -> thisdeclaration .)
    ECHO            reduce using rule 22 (sentencia -> thisdeclaration .)
    PRINT           reduce using rule 22 (sentencia -> thisdeclaration .)
    TRY             reduce using rule 22 (sentencia -> thisdeclaration .)
    FUNCTION        reduce using rule 22 (sentencia -> thisdeclaration .)
    RETURN          reduce using rule 22 (sentencia -> thisdeclaration .)
    ID              reduce using rule 22 (sentencia -> thisdeclaration .)
    EMPTY           reduce using rule 22 (sentencia -> thisdeclaration .)
    CLASS           reduce using rule 22 (sentencia -> thisdeclaration .)
    INTERFACE       reduce using rule 22 (sentencia -> thisdeclaration .)
    INCLUDE         reduce using rule 22 (sentencia -> thisdeclaration .)
    NAMESPACE       reduce using rule 22 (sentencia -> thisdeclaration .)
    THROW           reduce using rule 22 (sentencia -> thisdeclaration .)
    CONST           reduce using rule 22 (sentencia -> thisdeclaration .)
    THIS            reduce using rule 22 (sentencia -> thisdeclaration .)
    INT             reduce using rule 22 (sentencia -> thisdeclaration .)
    FLOAT           reduce using rule 22 (sentencia -> thisdeclaration .)
    STRING          reduce using rule 22 (sentencia -> thisdeclaration .)
    BOOL            reduce using rule 22 (sentencia -> thisdeclaration .)
    NULL            reduce using rule 22 (sentencia -> thisdeclaration .)
    ARRAY           reduce using rule 22 (sentencia -> thisdeclaration .)
    LPAREN          reduce using rule 22 (sentencia -> thisdeclaration .)
    ABSTRACT        reduce using rule 22 (sentencia -> thisdeclaration .)
    PRIVATE         reduce using rule 22 (sentencia -> thisdeclaration .)
    PROTECTED       reduce using rule 22 (sentencia -> thisdeclaration .)
    PUBLIC          reduce using rule 22 (sentencia -> thisdeclaration .)
    STATIC          reduce using rule 22 (sentencia -> thisdeclaration .)
    FINAL           reduce using rule 22 (sentencia -> thisdeclaration .)
    IF              reduce using rule 22 (sentencia -> thisdeclaration .)
    WHILE           reduce using rule 22 (sentencia -> thisdeclaration .)
    DO              reduce using rule 22 (sentencia -> thisdeclaration .)
    SWITCH          reduce using rule 22 (sentencia -> thisdeclaration .)
    FOREACH         reduce using rule 22 (sentencia -> thisdeclaration .)
    FOR             reduce using rule 22 (sentencia -> thisdeclaration .)
    CLOSETAG        reduce using rule 22 (sentencia -> thisdeclaration .)
    RBRACE          reduce using rule 22 (sentencia -> thisdeclaration .)
    BREAK           reduce using rule 22 (sentencia -> thisdeclaration .)
    ENDSWITCH       reduce using rule 22 (sentencia -> thisdeclaration .)
    CASE            reduce using rule 22 (sentencia -> thisdeclaration .)
    DEFAULT         reduce using rule 22 (sentencia -> thisdeclaration .)


state 24

    (23) sentencia -> concatenate .

    VARIABLE        reduce using rule 23 (sentencia -> concatenate .)
    ECHO            reduce using rule 23 (sentencia -> concatenate .)
    PRINT           reduce using rule 23 (sentencia -> concatenate .)
    TRY             reduce using rule 23 (sentencia -> concatenate .)
    FUNCTION        reduce using rule 23 (sentencia -> concatenate .)
    RETURN          reduce using rule 23 (sentencia -> concatenate .)
    ID              reduce using rule 23 (sentencia -> concatenate .)
    EMPTY           reduce using rule 23 (sentencia -> concatenate .)
    CLASS           reduce using rule 23 (sentencia -> concatenate .)
    INTERFACE       reduce using rule 23 (sentencia -> concatenate .)
    INCLUDE         reduce using rule 23 (sentencia -> concatenate .)
    NAMESPACE       reduce using rule 23 (sentencia -> concatenate .)
    THROW           reduce using rule 23 (sentencia -> concatenate .)
    CONST           reduce using rule 23 (sentencia -> concatenate .)
    THIS            reduce using rule 23 (sentencia -> concatenate .)
    INT             reduce using rule 23 (sentencia -> concatenate .)
    FLOAT           reduce using rule 23 (sentencia -> concatenate .)
    STRING          reduce using rule 23 (sentencia -> concatenate .)
    BOOL            reduce using rule 23 (sentencia -> concatenate .)
    NULL            reduce using rule 23 (sentencia -> concatenate .)
    ARRAY           reduce using rule 23 (sentencia -> concatenate .)
    LPAREN          reduce using rule 23 (sentencia -> concatenate .)
    ABSTRACT        reduce using rule 23 (sentencia -> concatenate .)
    PRIVATE         reduce using rule 23 (sentencia -> concatenate .)
    PROTECTED       reduce using rule 23 (sentencia -> concatenate .)
    PUBLIC          reduce using rule 23 (sentencia -> concatenate .)
    STATIC          reduce using rule 23 (sentencia -> concatenate .)
    FINAL           reduce using rule 23 (sentencia -> concatenate .)
    IF              reduce using rule 23 (sentencia -> concatenate .)
    WHILE           reduce using rule 23 (sentencia -> concatenate .)
    DO              reduce using rule 23 (sentencia -> concatenate .)
    SWITCH          reduce using rule 23 (sentencia -> concatenate .)
    FOREACH         reduce using rule 23 (sentencia -> concatenate .)
    FOR             reduce using rule 23 (sentencia -> concatenate .)
    CLOSETAG        reduce using rule 23 (sentencia -> concatenate .)
    RBRACE          reduce using rule 23 (sentencia -> concatenate .)
    BREAK           reduce using rule 23 (sentencia -> concatenate .)
    ENDSWITCH       reduce using rule 23 (sentencia -> concatenate .)
    CASE            reduce using rule 23 (sentencia -> concatenate .)
    DEFAULT         reduce using rule 23 (sentencia -> concatenate .)


state 25

    (24) sentencia -> minuse .

    VARIABLE        reduce using rule 24 (sentencia -> minuse .)
    ECHO            reduce using rule 24 (sentencia -> minuse .)
    PRINT           reduce using rule 24 (sentencia -> minuse .)
    TRY             reduce using rule 24 (sentencia -> minuse .)
    FUNCTION        reduce using rule 24 (sentencia -> minuse .)
    RETURN          reduce using rule 24 (sentencia -> minuse .)
    ID              reduce using rule 24 (sentencia -> minuse .)
    EMPTY           reduce using rule 24 (sentencia -> minuse .)
    CLASS           reduce using rule 24 (sentencia -> minuse .)
    INTERFACE       reduce using rule 24 (sentencia -> minuse .)
    INCLUDE         reduce using rule 24 (sentencia -> minuse .)
    NAMESPACE       reduce using rule 24 (sentencia -> minuse .)
    THROW           reduce using rule 24 (sentencia -> minuse .)
    CONST           reduce using rule 24 (sentencia -> minuse .)
    THIS            reduce using rule 24 (sentencia -> minuse .)
    INT             reduce using rule 24 (sentencia -> minuse .)
    FLOAT           reduce using rule 24 (sentencia -> minuse .)
    STRING          reduce using rule 24 (sentencia -> minuse .)
    BOOL            reduce using rule 24 (sentencia -> minuse .)
    NULL            reduce using rule 24 (sentencia -> minuse .)
    ARRAY           reduce using rule 24 (sentencia -> minuse .)
    LPAREN          reduce using rule 24 (sentencia -> minuse .)
    ABSTRACT        reduce using rule 24 (sentencia -> minuse .)
    PRIVATE         reduce using rule 24 (sentencia -> minuse .)
    PROTECTED       reduce using rule 24 (sentencia -> minuse .)
    PUBLIC          reduce using rule 24 (sentencia -> minuse .)
    STATIC          reduce using rule 24 (sentencia -> minuse .)
    FINAL           reduce using rule 24 (sentencia -> minuse .)
    IF              reduce using rule 24 (sentencia -> minuse .)
    WHILE           reduce using rule 24 (sentencia -> minuse .)
    DO              reduce using rule 24 (sentencia -> minuse .)
    SWITCH          reduce using rule 24 (sentencia -> minuse .)
    FOREACH         reduce using rule 24 (sentencia -> minuse .)
    FOR             reduce using rule 24 (sentencia -> minuse .)
    CLOSETAG        reduce using rule 24 (sentencia -> minuse .)
    RBRACE          reduce using rule 24 (sentencia -> minuse .)
    BREAK           reduce using rule 24 (sentencia -> minuse .)
    ENDSWITCH       reduce using rule 24 (sentencia -> minuse .)
    CASE            reduce using rule 24 (sentencia -> minuse .)
    DEFAULT         reduce using rule 24 (sentencia -> minuse .)


state 26

    (27) asignacion -> VARIABLE . EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> VARIABLE . EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (160) objeto -> VARIABLE . ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (193) anonymousFunction -> VARIABLE . EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) instance -> VARIABLE . INSTANCEOF ID
    (200) concatenate -> VARIABLE . CONCATENATEEQUAL STRING
    (201) minuse -> VARIABLE . MINUSEQUAL INT
    (42) valor -> VARIABLE .
    (125) array -> VARIABLE . EQUALS arrays SEMICOLON
    (126) array -> VARIABLE . EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> VARIABLE . EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (132) map -> VARIABLE . EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> VARIABLE . EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    EQUALS          shift and go to state 78
    ARROW           shift and go to state 79
    INSTANCEOF      shift and go to state 80
    CONCATENATEEQUAL shift and go to state 81
    MINUSEQUAL      shift and go to state 82
    EQ              reduce using rule 42 (valor -> VARIABLE .)
    NEQ             reduce using rule 42 (valor -> VARIABLE .)
    STRICTEQ        reduce using rule 42 (valor -> VARIABLE .)
    STRICTNEQ       reduce using rule 42 (valor -> VARIABLE .)
    LT              reduce using rule 42 (valor -> VARIABLE .)
    GT              reduce using rule 42 (valor -> VARIABLE .)
    LEQ             reduce using rule 42 (valor -> VARIABLE .)
    GEQ             reduce using rule 42 (valor -> VARIABLE .)
    AND             reduce using rule 42 (valor -> VARIABLE .)
    LOGICAL_AND     reduce using rule 42 (valor -> VARIABLE .)
    OR              reduce using rule 42 (valor -> VARIABLE .)
    LOGICAL_OR      reduce using rule 42 (valor -> VARIABLE .)
    PLUS            reduce using rule 42 (valor -> VARIABLE .)
    MINUS           reduce using rule 42 (valor -> VARIABLE .)
    TIMES           reduce using rule 42 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 42 (valor -> VARIABLE .)
    MODULO          reduce using rule 42 (valor -> VARIABLE .)
    POTENCIA        reduce using rule 42 (valor -> VARIABLE .)
    PLUSEQUAL       reduce using rule 42 (valor -> VARIABLE .)


state 27

    (57) comparacion -> expresion . opSymbol expresion
    (29) expresion -> expresion . opLogic expresion
    (87) opSymbol -> . EQ
    (88) opSymbol -> . NEQ
    (89) opSymbol -> . STRICTEQ
    (90) opSymbol -> . STRICTNEQ
    (91) opSymbol -> . LT
    (92) opSymbol -> . GT
    (93) opSymbol -> . LEQ
    (94) opSymbol -> . GEQ
    (95) opLogic -> . AND
    (96) opLogic -> . LOGICAL_AND
    (97) opLogic -> . OR
    (98) opLogic -> . LOGICAL_OR

    EQ              shift and go to state 85
    NEQ             shift and go to state 86
    STRICTEQ        shift and go to state 87
    STRICTNEQ       shift and go to state 88
    LT              shift and go to state 89
    GT              shift and go to state 90
    LEQ             shift and go to state 91
    GEQ             shift and go to state 92
    AND             shift and go to state 93
    LOGICAL_AND     shift and go to state 94
    OR              shift and go to state 95
    LOGICAL_OR      shift and go to state 96

    opSymbol                       shift and go to state 83
    opLogic                        shift and go to state 84

state 28

    (31) expresion -> LPAREN . comparacion RPAREN
    (33) expresion -> LPAREN . expresion RPAREN
    (37) operaArit -> LPAREN . operaArit RPAREN
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 28
    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    comparacion                    shift and go to state 97
    expresion                      shift and go to state 98
    operaArit                      shift and go to state 99
    valor                          shift and go to state 29
    llamadaFuncion                 shift and go to state 101

state 29

    (56) comparacion -> valor . opSymbol valor
    (28) expresion -> valor .
    (35) operaArit -> valor .
    (87) opSymbol -> . EQ
    (88) opSymbol -> . NEQ
    (89) opSymbol -> . STRICTEQ
    (90) opSymbol -> . STRICTNEQ
    (91) opSymbol -> . LT
    (92) opSymbol -> . GT
    (93) opSymbol -> . LEQ
    (94) opSymbol -> . GEQ

  ! reduce/reduce conflict for EQ resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for NEQ resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for STRICTEQ resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for STRICTNEQ resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for LT resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for GT resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for LEQ resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for GEQ resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for AND resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for LOGICAL_AND resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for OR resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for LOGICAL_OR resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for RPAREN resolved using rule 28 (expresion -> valor .)
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICTEQ resolved as shift
  ! shift/reduce conflict for STRICTNEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
    AND             reduce using rule 28 (expresion -> valor .)
    LOGICAL_AND     reduce using rule 28 (expresion -> valor .)
    OR              reduce using rule 28 (expresion -> valor .)
    LOGICAL_OR      reduce using rule 28 (expresion -> valor .)
    RPAREN          reduce using rule 28 (expresion -> valor .)
    PLUS            reduce using rule 35 (operaArit -> valor .)
    MINUS           reduce using rule 35 (operaArit -> valor .)
    TIMES           reduce using rule 35 (operaArit -> valor .)
    DIVIDE          reduce using rule 35 (operaArit -> valor .)
    MODULO          reduce using rule 35 (operaArit -> valor .)
    POTENCIA        reduce using rule 35 (operaArit -> valor .)
    PLUSEQUAL       reduce using rule 35 (operaArit -> valor .)
    EQ              shift and go to state 85
    NEQ             shift and go to state 86
    STRICTEQ        shift and go to state 87
    STRICTNEQ       shift and go to state 88
    LT              shift and go to state 89
    GT              shift and go to state 90
    LEQ             shift and go to state 91
    GEQ             shift and go to state 92

  ! EQ              [ reduce using rule 28 (expresion -> valor .) ]
  ! NEQ             [ reduce using rule 28 (expresion -> valor .) ]
  ! STRICTEQ        [ reduce using rule 28 (expresion -> valor .) ]
  ! STRICTNEQ       [ reduce using rule 28 (expresion -> valor .) ]
  ! LT              [ reduce using rule 28 (expresion -> valor .) ]
  ! GT              [ reduce using rule 28 (expresion -> valor .) ]
  ! LEQ             [ reduce using rule 28 (expresion -> valor .) ]
  ! GEQ             [ reduce using rule 28 (expresion -> valor .) ]
  ! EQ              [ reduce using rule 35 (operaArit -> valor .) ]
  ! NEQ             [ reduce using rule 35 (operaArit -> valor .) ]
  ! STRICTEQ        [ reduce using rule 35 (operaArit -> valor .) ]
  ! STRICTNEQ       [ reduce using rule 35 (operaArit -> valor .) ]
  ! LT              [ reduce using rule 35 (operaArit -> valor .) ]
  ! GT              [ reduce using rule 35 (operaArit -> valor .) ]
  ! LEQ             [ reduce using rule 35 (operaArit -> valor .) ]
  ! GEQ             [ reduce using rule 35 (operaArit -> valor .) ]
  ! AND             [ reduce using rule 35 (operaArit -> valor .) ]
  ! LOGICAL_AND     [ reduce using rule 35 (operaArit -> valor .) ]
  ! OR              [ reduce using rule 35 (operaArit -> valor .) ]
  ! LOGICAL_OR      [ reduce using rule 35 (operaArit -> valor .) ]
  ! RPAREN          [ reduce using rule 35 (operaArit -> valor .) ]

    opSymbol                       shift and go to state 102

state 30

    (58) impresion -> ECHO . imprimir SEMICOLON
    (60) imprimir -> . LPAREN repiteValores RPAREN
    (61) imprimir -> . LPAREN RPAREN
    (62) imprimir -> . repiteValores
    (63) imprimir -> . empty
    (64) repiteValores -> . valor
    (65) repiteValores -> . valor COMMA repiteValores
    (66) empty -> .
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 104
    SEMICOLON       reduce using rule 66 (empty -> .)
    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    imprimir                       shift and go to state 103
    repiteValores                  shift and go to state 105
    empty                          shift and go to state 106
    valor                          shift and go to state 107
    llamadaFuncion                 shift and go to state 101

state 31

    (59) impresion -> PRINT . imprimir SEMICOLON
    (60) imprimir -> . LPAREN repiteValores RPAREN
    (61) imprimir -> . LPAREN RPAREN
    (62) imprimir -> . repiteValores
    (63) imprimir -> . empty
    (64) repiteValores -> . valor
    (65) repiteValores -> . valor COMMA repiteValores
    (66) empty -> .
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 104
    SEMICOLON       reduce using rule 66 (empty -> .)
    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    imprimir                       shift and go to state 108
    repiteValores                  shift and go to state 105
    empty                          shift and go to state 106
    valor                          shift and go to state 107
    llamadaFuncion                 shift and go to state 101

state 32

    (67) estructurasPrograma -> controlStructure .

    VARIABLE        reduce using rule 67 (estructurasPrograma -> controlStructure .)
    ECHO            reduce using rule 67 (estructurasPrograma -> controlStructure .)
    PRINT           reduce using rule 67 (estructurasPrograma -> controlStructure .)
    TRY             reduce using rule 67 (estructurasPrograma -> controlStructure .)
    FUNCTION        reduce using rule 67 (estructurasPrograma -> controlStructure .)
    RETURN          reduce using rule 67 (estructurasPrograma -> controlStructure .)
    ID              reduce using rule 67 (estructurasPrograma -> controlStructure .)
    EMPTY           reduce using rule 67 (estructurasPrograma -> controlStructure .)
    CLASS           reduce using rule 67 (estructurasPrograma -> controlStructure .)
    INTERFACE       reduce using rule 67 (estructurasPrograma -> controlStructure .)
    INCLUDE         reduce using rule 67 (estructurasPrograma -> controlStructure .)
    NAMESPACE       reduce using rule 67 (estructurasPrograma -> controlStructure .)
    THROW           reduce using rule 67 (estructurasPrograma -> controlStructure .)
    CONST           reduce using rule 67 (estructurasPrograma -> controlStructure .)
    THIS            reduce using rule 67 (estructurasPrograma -> controlStructure .)
    INT             reduce using rule 67 (estructurasPrograma -> controlStructure .)
    FLOAT           reduce using rule 67 (estructurasPrograma -> controlStructure .)
    STRING          reduce using rule 67 (estructurasPrograma -> controlStructure .)
    BOOL            reduce using rule 67 (estructurasPrograma -> controlStructure .)
    NULL            reduce using rule 67 (estructurasPrograma -> controlStructure .)
    ARRAY           reduce using rule 67 (estructurasPrograma -> controlStructure .)
    LPAREN          reduce using rule 67 (estructurasPrograma -> controlStructure .)
    ABSTRACT        reduce using rule 67 (estructurasPrograma -> controlStructure .)
    PRIVATE         reduce using rule 67 (estructurasPrograma -> controlStructure .)
    PROTECTED       reduce using rule 67 (estructurasPrograma -> controlStructure .)
    PUBLIC          reduce using rule 67 (estructurasPrograma -> controlStructure .)
    STATIC          reduce using rule 67 (estructurasPrograma -> controlStructure .)
    FINAL           reduce using rule 67 (estructurasPrograma -> controlStructure .)
    IF              reduce using rule 67 (estructurasPrograma -> controlStructure .)
    WHILE           reduce using rule 67 (estructurasPrograma -> controlStructure .)
    DO              reduce using rule 67 (estructurasPrograma -> controlStructure .)
    SWITCH          reduce using rule 67 (estructurasPrograma -> controlStructure .)
    FOREACH         reduce using rule 67 (estructurasPrograma -> controlStructure .)
    FOR             reduce using rule 67 (estructurasPrograma -> controlStructure .)
    CLOSETAG        reduce using rule 67 (estructurasPrograma -> controlStructure .)
    RBRACE          reduce using rule 67 (estructurasPrograma -> controlStructure .)
    BREAK           reduce using rule 67 (estructurasPrograma -> controlStructure .)
    ENDSWITCH       reduce using rule 67 (estructurasPrograma -> controlStructure .)
    CASE            reduce using rule 67 (estructurasPrograma -> controlStructure .)
    DEFAULT         reduce using rule 67 (estructurasPrograma -> controlStructure .)


state 33

    (68) estructurasPrograma -> dataStructure .

    VARIABLE        reduce using rule 68 (estructurasPrograma -> dataStructure .)
    ECHO            reduce using rule 68 (estructurasPrograma -> dataStructure .)
    PRINT           reduce using rule 68 (estructurasPrograma -> dataStructure .)
    TRY             reduce using rule 68 (estructurasPrograma -> dataStructure .)
    FUNCTION        reduce using rule 68 (estructurasPrograma -> dataStructure .)
    RETURN          reduce using rule 68 (estructurasPrograma -> dataStructure .)
    ID              reduce using rule 68 (estructurasPrograma -> dataStructure .)
    EMPTY           reduce using rule 68 (estructurasPrograma -> dataStructure .)
    CLASS           reduce using rule 68 (estructurasPrograma -> dataStructure .)
    INTERFACE       reduce using rule 68 (estructurasPrograma -> dataStructure .)
    INCLUDE         reduce using rule 68 (estructurasPrograma -> dataStructure .)
    NAMESPACE       reduce using rule 68 (estructurasPrograma -> dataStructure .)
    THROW           reduce using rule 68 (estructurasPrograma -> dataStructure .)
    CONST           reduce using rule 68 (estructurasPrograma -> dataStructure .)
    THIS            reduce using rule 68 (estructurasPrograma -> dataStructure .)
    INT             reduce using rule 68 (estructurasPrograma -> dataStructure .)
    FLOAT           reduce using rule 68 (estructurasPrograma -> dataStructure .)
    STRING          reduce using rule 68 (estructurasPrograma -> dataStructure .)
    BOOL            reduce using rule 68 (estructurasPrograma -> dataStructure .)
    NULL            reduce using rule 68 (estructurasPrograma -> dataStructure .)
    ARRAY           reduce using rule 68 (estructurasPrograma -> dataStructure .)
    LPAREN          reduce using rule 68 (estructurasPrograma -> dataStructure .)
    ABSTRACT        reduce using rule 68 (estructurasPrograma -> dataStructure .)
    PRIVATE         reduce using rule 68 (estructurasPrograma -> dataStructure .)
    PROTECTED       reduce using rule 68 (estructurasPrograma -> dataStructure .)
    PUBLIC          reduce using rule 68 (estructurasPrograma -> dataStructure .)
    STATIC          reduce using rule 68 (estructurasPrograma -> dataStructure .)
    FINAL           reduce using rule 68 (estructurasPrograma -> dataStructure .)
    IF              reduce using rule 68 (estructurasPrograma -> dataStructure .)
    WHILE           reduce using rule 68 (estructurasPrograma -> dataStructure .)
    DO              reduce using rule 68 (estructurasPrograma -> dataStructure .)
    SWITCH          reduce using rule 68 (estructurasPrograma -> dataStructure .)
    FOREACH         reduce using rule 68 (estructurasPrograma -> dataStructure .)
    FOR             reduce using rule 68 (estructurasPrograma -> dataStructure .)
    CLOSETAG        reduce using rule 68 (estructurasPrograma -> dataStructure .)
    RBRACE          reduce using rule 68 (estructurasPrograma -> dataStructure .)
    BREAK           reduce using rule 68 (estructurasPrograma -> dataStructure .)
    ENDSWITCH       reduce using rule 68 (estructurasPrograma -> dataStructure .)
    CASE            reduce using rule 68 (estructurasPrograma -> dataStructure .)
    DEFAULT         reduce using rule 68 (estructurasPrograma -> dataStructure .)


state 34

    (155) try -> TRY . LBRACE body RBRACE catchs
    (156) try -> TRY . LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE

    LBRACE          shift and go to state 109


state 35

    (161) funcionDeclaration -> FUNCTION . ID LPAREN argumentos RPAREN LBRACE body RBRACE

    ID              shift and go to state 110


state 36

    (162) llamadaFuncion -> ID . LPAREN argumentos RPAREN SEMICOLON
    (164) llamadaFuncion -> ID . LPAREN argumentos RPAREN

    LPAREN          shift and go to state 111


state 37

    (25) returnStatement -> RETURN . expresion SEMICOLON
    (26) returnStatement -> RETURN . SEMICOLON
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    SEMICOLON       shift and go to state 113
    LPAREN          shift and go to state 28
    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    expresion                      shift and go to state 112
    valor                          shift and go to state 114
    comparacion                    shift and go to state 115
    operaArit                      shift and go to state 54
    llamadaFuncion                 shift and go to state 101

state 38

    (163) llamadaFuncion -> EMPTY . LPAREN argumentos RPAREN
    (165) llamadaFuncion -> EMPTY . LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 116


state 39

    (166) classDeclarate -> CLASS . ID LBRACE classBody RBRACE
    (167) classDeclarate -> CLASS . ID EXTENDS ID LBRACE classBody RBRACE
    (177) classInterface -> CLASS . ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> CLASS . ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    ID              shift and go to state 117


state 40

    (168) classDeclarate -> data . CLASS ID LBRACE classBody RBRACE
    (179) classInterface -> data . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> data . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    CLASS           shift and go to state 118


state 41

    (169) classDeclarate -> classInterface .

    VARIABLE        reduce using rule 169 (classDeclarate -> classInterface .)
    ECHO            reduce using rule 169 (classDeclarate -> classInterface .)
    PRINT           reduce using rule 169 (classDeclarate -> classInterface .)
    TRY             reduce using rule 169 (classDeclarate -> classInterface .)
    FUNCTION        reduce using rule 169 (classDeclarate -> classInterface .)
    RETURN          reduce using rule 169 (classDeclarate -> classInterface .)
    ID              reduce using rule 169 (classDeclarate -> classInterface .)
    EMPTY           reduce using rule 169 (classDeclarate -> classInterface .)
    CLASS           reduce using rule 169 (classDeclarate -> classInterface .)
    INTERFACE       reduce using rule 169 (classDeclarate -> classInterface .)
    INCLUDE         reduce using rule 169 (classDeclarate -> classInterface .)
    NAMESPACE       reduce using rule 169 (classDeclarate -> classInterface .)
    THROW           reduce using rule 169 (classDeclarate -> classInterface .)
    CONST           reduce using rule 169 (classDeclarate -> classInterface .)
    THIS            reduce using rule 169 (classDeclarate -> classInterface .)
    INT             reduce using rule 169 (classDeclarate -> classInterface .)
    FLOAT           reduce using rule 169 (classDeclarate -> classInterface .)
    STRING          reduce using rule 169 (classDeclarate -> classInterface .)
    BOOL            reduce using rule 169 (classDeclarate -> classInterface .)
    NULL            reduce using rule 169 (classDeclarate -> classInterface .)
    ARRAY           reduce using rule 169 (classDeclarate -> classInterface .)
    LPAREN          reduce using rule 169 (classDeclarate -> classInterface .)
    ABSTRACT        reduce using rule 169 (classDeclarate -> classInterface .)
    PRIVATE         reduce using rule 169 (classDeclarate -> classInterface .)
    PROTECTED       reduce using rule 169 (classDeclarate -> classInterface .)
    PUBLIC          reduce using rule 169 (classDeclarate -> classInterface .)
    STATIC          reduce using rule 169 (classDeclarate -> classInterface .)
    FINAL           reduce using rule 169 (classDeclarate -> classInterface .)
    IF              reduce using rule 169 (classDeclarate -> classInterface .)
    WHILE           reduce using rule 169 (classDeclarate -> classInterface .)
    DO              reduce using rule 169 (classDeclarate -> classInterface .)
    SWITCH          reduce using rule 169 (classDeclarate -> classInterface .)
    FOREACH         reduce using rule 169 (classDeclarate -> classInterface .)
    FOR             reduce using rule 169 (classDeclarate -> classInterface .)
    CLOSETAG        reduce using rule 169 (classDeclarate -> classInterface .)
    RBRACE          reduce using rule 169 (classDeclarate -> classInterface .)
    BREAK           reduce using rule 169 (classDeclarate -> classInterface .)
    ENDSWITCH       reduce using rule 169 (classDeclarate -> classInterface .)
    CASE            reduce using rule 169 (classDeclarate -> classInterface .)
    DEFAULT         reduce using rule 169 (classDeclarate -> classInterface .)


state 42

    (189) interface -> INTERFACE . ID LBRACE classBody RBRACE

    ID              shift and go to state 119


state 43

    (190) includes -> INCLUDE . STRING SEMICOLON
    (191) includes -> INCLUDE . STRING DOT STRING SEMICOLON

    STRING          shift and go to state 120


state 44

    (44) valor -> STRING .

    EQ              reduce using rule 44 (valor -> STRING .)
    NEQ             reduce using rule 44 (valor -> STRING .)
    STRICTEQ        reduce using rule 44 (valor -> STRING .)
    STRICTNEQ       reduce using rule 44 (valor -> STRING .)
    LT              reduce using rule 44 (valor -> STRING .)
    GT              reduce using rule 44 (valor -> STRING .)
    LEQ             reduce using rule 44 (valor -> STRING .)
    GEQ             reduce using rule 44 (valor -> STRING .)
    AND             reduce using rule 44 (valor -> STRING .)
    LOGICAL_AND     reduce using rule 44 (valor -> STRING .)
    OR              reduce using rule 44 (valor -> STRING .)
    LOGICAL_OR      reduce using rule 44 (valor -> STRING .)
    PLUS            reduce using rule 44 (valor -> STRING .)
    MINUS           reduce using rule 44 (valor -> STRING .)
    TIMES           reduce using rule 44 (valor -> STRING .)
    DIVIDE          reduce using rule 44 (valor -> STRING .)
    MODULO          reduce using rule 44 (valor -> STRING .)
    POTENCIA        reduce using rule 44 (valor -> STRING .)
    PLUSEQUAL       reduce using rule 44 (valor -> STRING .)
    RPAREN          reduce using rule 44 (valor -> STRING .)
    COMMA           reduce using rule 44 (valor -> STRING .)
    SEMICOLON       reduce using rule 44 (valor -> STRING .)
    VARIABLE        reduce using rule 44 (valor -> STRING .)
    ECHO            reduce using rule 44 (valor -> STRING .)
    PRINT           reduce using rule 44 (valor -> STRING .)
    TRY             reduce using rule 44 (valor -> STRING .)
    FUNCTION        reduce using rule 44 (valor -> STRING .)
    RETURN          reduce using rule 44 (valor -> STRING .)
    ID              reduce using rule 44 (valor -> STRING .)
    EMPTY           reduce using rule 44 (valor -> STRING .)
    CLASS           reduce using rule 44 (valor -> STRING .)
    INTERFACE       reduce using rule 44 (valor -> STRING .)
    INCLUDE         reduce using rule 44 (valor -> STRING .)
    NAMESPACE       reduce using rule 44 (valor -> STRING .)
    THROW           reduce using rule 44 (valor -> STRING .)
    CONST           reduce using rule 44 (valor -> STRING .)
    THIS            reduce using rule 44 (valor -> STRING .)
    INT             reduce using rule 44 (valor -> STRING .)
    FLOAT           reduce using rule 44 (valor -> STRING .)
    STRING          reduce using rule 44 (valor -> STRING .)
    BOOL            reduce using rule 44 (valor -> STRING .)
    NULL            reduce using rule 44 (valor -> STRING .)
    ARRAY           reduce using rule 44 (valor -> STRING .)
    LPAREN          reduce using rule 44 (valor -> STRING .)
    ABSTRACT        reduce using rule 44 (valor -> STRING .)
    PRIVATE         reduce using rule 44 (valor -> STRING .)
    PROTECTED       reduce using rule 44 (valor -> STRING .)
    PUBLIC          reduce using rule 44 (valor -> STRING .)
    STATIC          reduce using rule 44 (valor -> STRING .)
    FINAL           reduce using rule 44 (valor -> STRING .)
    IF              reduce using rule 44 (valor -> STRING .)
    WHILE           reduce using rule 44 (valor -> STRING .)
    DO              reduce using rule 44 (valor -> STRING .)
    SWITCH          reduce using rule 44 (valor -> STRING .)
    FOREACH         reduce using rule 44 (valor -> STRING .)
    FOR             reduce using rule 44 (valor -> STRING .)
    CLOSETAG        reduce using rule 44 (valor -> STRING .)
    RBRACE          reduce using rule 44 (valor -> STRING .)
    BREAK           reduce using rule 44 (valor -> STRING .)
    ENDSWITCH       reduce using rule 44 (valor -> STRING .)
    CASE            reduce using rule 44 (valor -> STRING .)
    DEFAULT         reduce using rule 44 (valor -> STRING .)
    ARROWMAP        reduce using rule 44 (valor -> STRING .)
    RBRACKET        reduce using rule 44 (valor -> STRING .)
    COLON           reduce using rule 44 (valor -> STRING .)


state 45

    (192) namespace -> NAMESPACE . ID SEMICOLON

    ID              shift and go to state 121


state 46

    (194) throw -> THROW . NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> THROW . valor SEMICOLON
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    NEW             shift and go to state 122
    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    valor                          shift and go to state 123
    llamadaFuncion                 shift and go to state 101

state 47

    (197) constdeclaration -> CONST . ID EQUALS valor SEMICOLON

    ID              shift and go to state 124


state 48

    (198) thisdeclaration -> THIS . ARROW ID SEMICOLON
    (199) thisdeclaration -> THIS . ARROW ID LPAREN RPAREN SEMICOLON

    ARROW           shift and go to state 125


state 49

    (41) valor -> INT .

    EQ              reduce using rule 41 (valor -> INT .)
    NEQ             reduce using rule 41 (valor -> INT .)
    STRICTEQ        reduce using rule 41 (valor -> INT .)
    STRICTNEQ       reduce using rule 41 (valor -> INT .)
    LT              reduce using rule 41 (valor -> INT .)
    GT              reduce using rule 41 (valor -> INT .)
    LEQ             reduce using rule 41 (valor -> INT .)
    GEQ             reduce using rule 41 (valor -> INT .)
    AND             reduce using rule 41 (valor -> INT .)
    LOGICAL_AND     reduce using rule 41 (valor -> INT .)
    OR              reduce using rule 41 (valor -> INT .)
    LOGICAL_OR      reduce using rule 41 (valor -> INT .)
    PLUS            reduce using rule 41 (valor -> INT .)
    MINUS           reduce using rule 41 (valor -> INT .)
    TIMES           reduce using rule 41 (valor -> INT .)
    DIVIDE          reduce using rule 41 (valor -> INT .)
    MODULO          reduce using rule 41 (valor -> INT .)
    POTENCIA        reduce using rule 41 (valor -> INT .)
    PLUSEQUAL       reduce using rule 41 (valor -> INT .)
    RPAREN          reduce using rule 41 (valor -> INT .)
    COMMA           reduce using rule 41 (valor -> INT .)
    SEMICOLON       reduce using rule 41 (valor -> INT .)
    VARIABLE        reduce using rule 41 (valor -> INT .)
    ECHO            reduce using rule 41 (valor -> INT .)
    PRINT           reduce using rule 41 (valor -> INT .)
    TRY             reduce using rule 41 (valor -> INT .)
    FUNCTION        reduce using rule 41 (valor -> INT .)
    RETURN          reduce using rule 41 (valor -> INT .)
    ID              reduce using rule 41 (valor -> INT .)
    EMPTY           reduce using rule 41 (valor -> INT .)
    CLASS           reduce using rule 41 (valor -> INT .)
    INTERFACE       reduce using rule 41 (valor -> INT .)
    INCLUDE         reduce using rule 41 (valor -> INT .)
    NAMESPACE       reduce using rule 41 (valor -> INT .)
    THROW           reduce using rule 41 (valor -> INT .)
    CONST           reduce using rule 41 (valor -> INT .)
    THIS            reduce using rule 41 (valor -> INT .)
    INT             reduce using rule 41 (valor -> INT .)
    FLOAT           reduce using rule 41 (valor -> INT .)
    STRING          reduce using rule 41 (valor -> INT .)
    BOOL            reduce using rule 41 (valor -> INT .)
    NULL            reduce using rule 41 (valor -> INT .)
    ARRAY           reduce using rule 41 (valor -> INT .)
    LPAREN          reduce using rule 41 (valor -> INT .)
    ABSTRACT        reduce using rule 41 (valor -> INT .)
    PRIVATE         reduce using rule 41 (valor -> INT .)
    PROTECTED       reduce using rule 41 (valor -> INT .)
    PUBLIC          reduce using rule 41 (valor -> INT .)
    STATIC          reduce using rule 41 (valor -> INT .)
    FINAL           reduce using rule 41 (valor -> INT .)
    IF              reduce using rule 41 (valor -> INT .)
    WHILE           reduce using rule 41 (valor -> INT .)
    DO              reduce using rule 41 (valor -> INT .)
    SWITCH          reduce using rule 41 (valor -> INT .)
    FOREACH         reduce using rule 41 (valor -> INT .)
    FOR             reduce using rule 41 (valor -> INT .)
    CLOSETAG        reduce using rule 41 (valor -> INT .)
    RBRACE          reduce using rule 41 (valor -> INT .)
    BREAK           reduce using rule 41 (valor -> INT .)
    ENDSWITCH       reduce using rule 41 (valor -> INT .)
    CASE            reduce using rule 41 (valor -> INT .)
    DEFAULT         reduce using rule 41 (valor -> INT .)
    ARROWMAP        reduce using rule 41 (valor -> INT .)
    RBRACKET        reduce using rule 41 (valor -> INT .)
    COLON           reduce using rule 41 (valor -> INT .)


state 50

    (43) valor -> FLOAT .

    EQ              reduce using rule 43 (valor -> FLOAT .)
    NEQ             reduce using rule 43 (valor -> FLOAT .)
    STRICTEQ        reduce using rule 43 (valor -> FLOAT .)
    STRICTNEQ       reduce using rule 43 (valor -> FLOAT .)
    LT              reduce using rule 43 (valor -> FLOAT .)
    GT              reduce using rule 43 (valor -> FLOAT .)
    LEQ             reduce using rule 43 (valor -> FLOAT .)
    GEQ             reduce using rule 43 (valor -> FLOAT .)
    AND             reduce using rule 43 (valor -> FLOAT .)
    LOGICAL_AND     reduce using rule 43 (valor -> FLOAT .)
    OR              reduce using rule 43 (valor -> FLOAT .)
    LOGICAL_OR      reduce using rule 43 (valor -> FLOAT .)
    PLUS            reduce using rule 43 (valor -> FLOAT .)
    MINUS           reduce using rule 43 (valor -> FLOAT .)
    TIMES           reduce using rule 43 (valor -> FLOAT .)
    DIVIDE          reduce using rule 43 (valor -> FLOAT .)
    MODULO          reduce using rule 43 (valor -> FLOAT .)
    POTENCIA        reduce using rule 43 (valor -> FLOAT .)
    PLUSEQUAL       reduce using rule 43 (valor -> FLOAT .)
    RPAREN          reduce using rule 43 (valor -> FLOAT .)
    COMMA           reduce using rule 43 (valor -> FLOAT .)
    SEMICOLON       reduce using rule 43 (valor -> FLOAT .)
    VARIABLE        reduce using rule 43 (valor -> FLOAT .)
    ECHO            reduce using rule 43 (valor -> FLOAT .)
    PRINT           reduce using rule 43 (valor -> FLOAT .)
    TRY             reduce using rule 43 (valor -> FLOAT .)
    FUNCTION        reduce using rule 43 (valor -> FLOAT .)
    RETURN          reduce using rule 43 (valor -> FLOAT .)
    ID              reduce using rule 43 (valor -> FLOAT .)
    EMPTY           reduce using rule 43 (valor -> FLOAT .)
    CLASS           reduce using rule 43 (valor -> FLOAT .)
    INTERFACE       reduce using rule 43 (valor -> FLOAT .)
    INCLUDE         reduce using rule 43 (valor -> FLOAT .)
    NAMESPACE       reduce using rule 43 (valor -> FLOAT .)
    THROW           reduce using rule 43 (valor -> FLOAT .)
    CONST           reduce using rule 43 (valor -> FLOAT .)
    THIS            reduce using rule 43 (valor -> FLOAT .)
    INT             reduce using rule 43 (valor -> FLOAT .)
    FLOAT           reduce using rule 43 (valor -> FLOAT .)
    STRING          reduce using rule 43 (valor -> FLOAT .)
    BOOL            reduce using rule 43 (valor -> FLOAT .)
    NULL            reduce using rule 43 (valor -> FLOAT .)
    ARRAY           reduce using rule 43 (valor -> FLOAT .)
    LPAREN          reduce using rule 43 (valor -> FLOAT .)
    ABSTRACT        reduce using rule 43 (valor -> FLOAT .)
    PRIVATE         reduce using rule 43 (valor -> FLOAT .)
    PROTECTED       reduce using rule 43 (valor -> FLOAT .)
    PUBLIC          reduce using rule 43 (valor -> FLOAT .)
    STATIC          reduce using rule 43 (valor -> FLOAT .)
    FINAL           reduce using rule 43 (valor -> FLOAT .)
    IF              reduce using rule 43 (valor -> FLOAT .)
    WHILE           reduce using rule 43 (valor -> FLOAT .)
    DO              reduce using rule 43 (valor -> FLOAT .)
    SWITCH          reduce using rule 43 (valor -> FLOAT .)
    FOREACH         reduce using rule 43 (valor -> FLOAT .)
    FOR             reduce using rule 43 (valor -> FLOAT .)
    CLOSETAG        reduce using rule 43 (valor -> FLOAT .)
    RBRACE          reduce using rule 43 (valor -> FLOAT .)
    BREAK           reduce using rule 43 (valor -> FLOAT .)
    ENDSWITCH       reduce using rule 43 (valor -> FLOAT .)
    CASE            reduce using rule 43 (valor -> FLOAT .)
    DEFAULT         reduce using rule 43 (valor -> FLOAT .)
    ARROWMAP        reduce using rule 43 (valor -> FLOAT .)
    RBRACKET        reduce using rule 43 (valor -> FLOAT .)
    COLON           reduce using rule 43 (valor -> FLOAT .)


state 51

    (45) valor -> BOOL .

    EQ              reduce using rule 45 (valor -> BOOL .)
    NEQ             reduce using rule 45 (valor -> BOOL .)
    STRICTEQ        reduce using rule 45 (valor -> BOOL .)
    STRICTNEQ       reduce using rule 45 (valor -> BOOL .)
    LT              reduce using rule 45 (valor -> BOOL .)
    GT              reduce using rule 45 (valor -> BOOL .)
    LEQ             reduce using rule 45 (valor -> BOOL .)
    GEQ             reduce using rule 45 (valor -> BOOL .)
    AND             reduce using rule 45 (valor -> BOOL .)
    LOGICAL_AND     reduce using rule 45 (valor -> BOOL .)
    OR              reduce using rule 45 (valor -> BOOL .)
    LOGICAL_OR      reduce using rule 45 (valor -> BOOL .)
    PLUS            reduce using rule 45 (valor -> BOOL .)
    MINUS           reduce using rule 45 (valor -> BOOL .)
    TIMES           reduce using rule 45 (valor -> BOOL .)
    DIVIDE          reduce using rule 45 (valor -> BOOL .)
    MODULO          reduce using rule 45 (valor -> BOOL .)
    POTENCIA        reduce using rule 45 (valor -> BOOL .)
    PLUSEQUAL       reduce using rule 45 (valor -> BOOL .)
    RPAREN          reduce using rule 45 (valor -> BOOL .)
    COMMA           reduce using rule 45 (valor -> BOOL .)
    SEMICOLON       reduce using rule 45 (valor -> BOOL .)
    VARIABLE        reduce using rule 45 (valor -> BOOL .)
    ECHO            reduce using rule 45 (valor -> BOOL .)
    PRINT           reduce using rule 45 (valor -> BOOL .)
    TRY             reduce using rule 45 (valor -> BOOL .)
    FUNCTION        reduce using rule 45 (valor -> BOOL .)
    RETURN          reduce using rule 45 (valor -> BOOL .)
    ID              reduce using rule 45 (valor -> BOOL .)
    EMPTY           reduce using rule 45 (valor -> BOOL .)
    CLASS           reduce using rule 45 (valor -> BOOL .)
    INTERFACE       reduce using rule 45 (valor -> BOOL .)
    INCLUDE         reduce using rule 45 (valor -> BOOL .)
    NAMESPACE       reduce using rule 45 (valor -> BOOL .)
    THROW           reduce using rule 45 (valor -> BOOL .)
    CONST           reduce using rule 45 (valor -> BOOL .)
    THIS            reduce using rule 45 (valor -> BOOL .)
    INT             reduce using rule 45 (valor -> BOOL .)
    FLOAT           reduce using rule 45 (valor -> BOOL .)
    STRING          reduce using rule 45 (valor -> BOOL .)
    BOOL            reduce using rule 45 (valor -> BOOL .)
    NULL            reduce using rule 45 (valor -> BOOL .)
    ARRAY           reduce using rule 45 (valor -> BOOL .)
    LPAREN          reduce using rule 45 (valor -> BOOL .)
    ABSTRACT        reduce using rule 45 (valor -> BOOL .)
    PRIVATE         reduce using rule 45 (valor -> BOOL .)
    PROTECTED       reduce using rule 45 (valor -> BOOL .)
    PUBLIC          reduce using rule 45 (valor -> BOOL .)
    STATIC          reduce using rule 45 (valor -> BOOL .)
    FINAL           reduce using rule 45 (valor -> BOOL .)
    IF              reduce using rule 45 (valor -> BOOL .)
    WHILE           reduce using rule 45 (valor -> BOOL .)
    DO              reduce using rule 45 (valor -> BOOL .)
    SWITCH          reduce using rule 45 (valor -> BOOL .)
    FOREACH         reduce using rule 45 (valor -> BOOL .)
    FOR             reduce using rule 45 (valor -> BOOL .)
    CLOSETAG        reduce using rule 45 (valor -> BOOL .)
    RBRACE          reduce using rule 45 (valor -> BOOL .)
    BREAK           reduce using rule 45 (valor -> BOOL .)
    ENDSWITCH       reduce using rule 45 (valor -> BOOL .)
    CASE            reduce using rule 45 (valor -> BOOL .)
    DEFAULT         reduce using rule 45 (valor -> BOOL .)
    ARROWMAP        reduce using rule 45 (valor -> BOOL .)
    RBRACKET        reduce using rule 45 (valor -> BOOL .)
    COLON           reduce using rule 45 (valor -> BOOL .)


state 52

    (46) valor -> NULL .

    EQ              reduce using rule 46 (valor -> NULL .)
    NEQ             reduce using rule 46 (valor -> NULL .)
    STRICTEQ        reduce using rule 46 (valor -> NULL .)
    STRICTNEQ       reduce using rule 46 (valor -> NULL .)
    LT              reduce using rule 46 (valor -> NULL .)
    GT              reduce using rule 46 (valor -> NULL .)
    LEQ             reduce using rule 46 (valor -> NULL .)
    GEQ             reduce using rule 46 (valor -> NULL .)
    AND             reduce using rule 46 (valor -> NULL .)
    LOGICAL_AND     reduce using rule 46 (valor -> NULL .)
    OR              reduce using rule 46 (valor -> NULL .)
    LOGICAL_OR      reduce using rule 46 (valor -> NULL .)
    PLUS            reduce using rule 46 (valor -> NULL .)
    MINUS           reduce using rule 46 (valor -> NULL .)
    TIMES           reduce using rule 46 (valor -> NULL .)
    DIVIDE          reduce using rule 46 (valor -> NULL .)
    MODULO          reduce using rule 46 (valor -> NULL .)
    POTENCIA        reduce using rule 46 (valor -> NULL .)
    PLUSEQUAL       reduce using rule 46 (valor -> NULL .)
    RPAREN          reduce using rule 46 (valor -> NULL .)
    COMMA           reduce using rule 46 (valor -> NULL .)
    SEMICOLON       reduce using rule 46 (valor -> NULL .)
    VARIABLE        reduce using rule 46 (valor -> NULL .)
    ECHO            reduce using rule 46 (valor -> NULL .)
    PRINT           reduce using rule 46 (valor -> NULL .)
    TRY             reduce using rule 46 (valor -> NULL .)
    FUNCTION        reduce using rule 46 (valor -> NULL .)
    RETURN          reduce using rule 46 (valor -> NULL .)
    ID              reduce using rule 46 (valor -> NULL .)
    EMPTY           reduce using rule 46 (valor -> NULL .)
    CLASS           reduce using rule 46 (valor -> NULL .)
    INTERFACE       reduce using rule 46 (valor -> NULL .)
    INCLUDE         reduce using rule 46 (valor -> NULL .)
    NAMESPACE       reduce using rule 46 (valor -> NULL .)
    THROW           reduce using rule 46 (valor -> NULL .)
    CONST           reduce using rule 46 (valor -> NULL .)
    THIS            reduce using rule 46 (valor -> NULL .)
    INT             reduce using rule 46 (valor -> NULL .)
    FLOAT           reduce using rule 46 (valor -> NULL .)
    STRING          reduce using rule 46 (valor -> NULL .)
    BOOL            reduce using rule 46 (valor -> NULL .)
    NULL            reduce using rule 46 (valor -> NULL .)
    ARRAY           reduce using rule 46 (valor -> NULL .)
    LPAREN          reduce using rule 46 (valor -> NULL .)
    ABSTRACT        reduce using rule 46 (valor -> NULL .)
    PRIVATE         reduce using rule 46 (valor -> NULL .)
    PROTECTED       reduce using rule 46 (valor -> NULL .)
    PUBLIC          reduce using rule 46 (valor -> NULL .)
    STATIC          reduce using rule 46 (valor -> NULL .)
    FINAL           reduce using rule 46 (valor -> NULL .)
    IF              reduce using rule 46 (valor -> NULL .)
    WHILE           reduce using rule 46 (valor -> NULL .)
    DO              reduce using rule 46 (valor -> NULL .)
    SWITCH          reduce using rule 46 (valor -> NULL .)
    FOREACH         reduce using rule 46 (valor -> NULL .)
    FOR             reduce using rule 46 (valor -> NULL .)
    CLOSETAG        reduce using rule 46 (valor -> NULL .)
    RBRACE          reduce using rule 46 (valor -> NULL .)
    BREAK           reduce using rule 46 (valor -> NULL .)
    ENDSWITCH       reduce using rule 46 (valor -> NULL .)
    CASE            reduce using rule 46 (valor -> NULL .)
    DEFAULT         reduce using rule 46 (valor -> NULL .)
    ARROWMAP        reduce using rule 46 (valor -> NULL .)
    RBRACKET        reduce using rule 46 (valor -> NULL .)
    COLON           reduce using rule 46 (valor -> NULL .)


state 53

    (47) valor -> ARRAY .

    EQ              reduce using rule 47 (valor -> ARRAY .)
    NEQ             reduce using rule 47 (valor -> ARRAY .)
    STRICTEQ        reduce using rule 47 (valor -> ARRAY .)
    STRICTNEQ       reduce using rule 47 (valor -> ARRAY .)
    LT              reduce using rule 47 (valor -> ARRAY .)
    GT              reduce using rule 47 (valor -> ARRAY .)
    LEQ             reduce using rule 47 (valor -> ARRAY .)
    GEQ             reduce using rule 47 (valor -> ARRAY .)
    AND             reduce using rule 47 (valor -> ARRAY .)
    LOGICAL_AND     reduce using rule 47 (valor -> ARRAY .)
    OR              reduce using rule 47 (valor -> ARRAY .)
    LOGICAL_OR      reduce using rule 47 (valor -> ARRAY .)
    PLUS            reduce using rule 47 (valor -> ARRAY .)
    MINUS           reduce using rule 47 (valor -> ARRAY .)
    TIMES           reduce using rule 47 (valor -> ARRAY .)
    DIVIDE          reduce using rule 47 (valor -> ARRAY .)
    MODULO          reduce using rule 47 (valor -> ARRAY .)
    POTENCIA        reduce using rule 47 (valor -> ARRAY .)
    PLUSEQUAL       reduce using rule 47 (valor -> ARRAY .)
    RPAREN          reduce using rule 47 (valor -> ARRAY .)
    COMMA           reduce using rule 47 (valor -> ARRAY .)
    SEMICOLON       reduce using rule 47 (valor -> ARRAY .)
    VARIABLE        reduce using rule 47 (valor -> ARRAY .)
    ECHO            reduce using rule 47 (valor -> ARRAY .)
    PRINT           reduce using rule 47 (valor -> ARRAY .)
    TRY             reduce using rule 47 (valor -> ARRAY .)
    FUNCTION        reduce using rule 47 (valor -> ARRAY .)
    RETURN          reduce using rule 47 (valor -> ARRAY .)
    ID              reduce using rule 47 (valor -> ARRAY .)
    EMPTY           reduce using rule 47 (valor -> ARRAY .)
    CLASS           reduce using rule 47 (valor -> ARRAY .)
    INTERFACE       reduce using rule 47 (valor -> ARRAY .)
    INCLUDE         reduce using rule 47 (valor -> ARRAY .)
    NAMESPACE       reduce using rule 47 (valor -> ARRAY .)
    THROW           reduce using rule 47 (valor -> ARRAY .)
    CONST           reduce using rule 47 (valor -> ARRAY .)
    THIS            reduce using rule 47 (valor -> ARRAY .)
    INT             reduce using rule 47 (valor -> ARRAY .)
    FLOAT           reduce using rule 47 (valor -> ARRAY .)
    STRING          reduce using rule 47 (valor -> ARRAY .)
    BOOL            reduce using rule 47 (valor -> ARRAY .)
    NULL            reduce using rule 47 (valor -> ARRAY .)
    ARRAY           reduce using rule 47 (valor -> ARRAY .)
    LPAREN          reduce using rule 47 (valor -> ARRAY .)
    ABSTRACT        reduce using rule 47 (valor -> ARRAY .)
    PRIVATE         reduce using rule 47 (valor -> ARRAY .)
    PROTECTED       reduce using rule 47 (valor -> ARRAY .)
    PUBLIC          reduce using rule 47 (valor -> ARRAY .)
    STATIC          reduce using rule 47 (valor -> ARRAY .)
    FINAL           reduce using rule 47 (valor -> ARRAY .)
    IF              reduce using rule 47 (valor -> ARRAY .)
    WHILE           reduce using rule 47 (valor -> ARRAY .)
    DO              reduce using rule 47 (valor -> ARRAY .)
    SWITCH          reduce using rule 47 (valor -> ARRAY .)
    FOREACH         reduce using rule 47 (valor -> ARRAY .)
    FOR             reduce using rule 47 (valor -> ARRAY .)
    CLOSETAG        reduce using rule 47 (valor -> ARRAY .)
    RBRACE          reduce using rule 47 (valor -> ARRAY .)
    BREAK           reduce using rule 47 (valor -> ARRAY .)
    ENDSWITCH       reduce using rule 47 (valor -> ARRAY .)
    CASE            reduce using rule 47 (valor -> ARRAY .)
    DEFAULT         reduce using rule 47 (valor -> ARRAY .)
    ARROWMAP        reduce using rule 47 (valor -> ARRAY .)
    RBRACKET        reduce using rule 47 (valor -> ARRAY .)
    COLON           reduce using rule 47 (valor -> ARRAY .)


state 54

    (32) expresion -> operaArit .
    (36) operaArit -> operaArit . operador operaArit
    (49) operador -> . PLUS
    (50) operador -> . MINUS
    (51) operador -> . TIMES
    (52) operador -> . DIVIDE
    (53) operador -> . MODULO
    (54) operador -> . POTENCIA
    (55) operador -> . PLUSEQUAL

    EQ              reduce using rule 32 (expresion -> operaArit .)
    NEQ             reduce using rule 32 (expresion -> operaArit .)
    STRICTEQ        reduce using rule 32 (expresion -> operaArit .)
    STRICTNEQ       reduce using rule 32 (expresion -> operaArit .)
    LT              reduce using rule 32 (expresion -> operaArit .)
    GT              reduce using rule 32 (expresion -> operaArit .)
    LEQ             reduce using rule 32 (expresion -> operaArit .)
    GEQ             reduce using rule 32 (expresion -> operaArit .)
    AND             reduce using rule 32 (expresion -> operaArit .)
    LOGICAL_AND     reduce using rule 32 (expresion -> operaArit .)
    OR              reduce using rule 32 (expresion -> operaArit .)
    LOGICAL_OR      reduce using rule 32 (expresion -> operaArit .)
    SEMICOLON       reduce using rule 32 (expresion -> operaArit .)
    VARIABLE        reduce using rule 32 (expresion -> operaArit .)
    ECHO            reduce using rule 32 (expresion -> operaArit .)
    PRINT           reduce using rule 32 (expresion -> operaArit .)
    TRY             reduce using rule 32 (expresion -> operaArit .)
    FUNCTION        reduce using rule 32 (expresion -> operaArit .)
    RETURN          reduce using rule 32 (expresion -> operaArit .)
    ID              reduce using rule 32 (expresion -> operaArit .)
    EMPTY           reduce using rule 32 (expresion -> operaArit .)
    CLASS           reduce using rule 32 (expresion -> operaArit .)
    INTERFACE       reduce using rule 32 (expresion -> operaArit .)
    INCLUDE         reduce using rule 32 (expresion -> operaArit .)
    NAMESPACE       reduce using rule 32 (expresion -> operaArit .)
    THROW           reduce using rule 32 (expresion -> operaArit .)
    CONST           reduce using rule 32 (expresion -> operaArit .)
    THIS            reduce using rule 32 (expresion -> operaArit .)
    INT             reduce using rule 32 (expresion -> operaArit .)
    FLOAT           reduce using rule 32 (expresion -> operaArit .)
    STRING          reduce using rule 32 (expresion -> operaArit .)
    BOOL            reduce using rule 32 (expresion -> operaArit .)
    NULL            reduce using rule 32 (expresion -> operaArit .)
    ARRAY           reduce using rule 32 (expresion -> operaArit .)
    LPAREN          reduce using rule 32 (expresion -> operaArit .)
    ABSTRACT        reduce using rule 32 (expresion -> operaArit .)
    PRIVATE         reduce using rule 32 (expresion -> operaArit .)
    PROTECTED       reduce using rule 32 (expresion -> operaArit .)
    PUBLIC          reduce using rule 32 (expresion -> operaArit .)
    STATIC          reduce using rule 32 (expresion -> operaArit .)
    FINAL           reduce using rule 32 (expresion -> operaArit .)
    IF              reduce using rule 32 (expresion -> operaArit .)
    WHILE           reduce using rule 32 (expresion -> operaArit .)
    DO              reduce using rule 32 (expresion -> operaArit .)
    SWITCH          reduce using rule 32 (expresion -> operaArit .)
    FOREACH         reduce using rule 32 (expresion -> operaArit .)
    FOR             reduce using rule 32 (expresion -> operaArit .)
    CLOSETAG        reduce using rule 32 (expresion -> operaArit .)
    RPAREN          reduce using rule 32 (expresion -> operaArit .)
    RBRACE          reduce using rule 32 (expresion -> operaArit .)
    BREAK           reduce using rule 32 (expresion -> operaArit .)
    ENDSWITCH       reduce using rule 32 (expresion -> operaArit .)
    CASE            reduce using rule 32 (expresion -> operaArit .)
    DEFAULT         reduce using rule 32 (expresion -> operaArit .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    TIMES           shift and go to state 129
    DIVIDE          shift and go to state 130
    MODULO          shift and go to state 131
    POTENCIA        shift and go to state 132
    PLUSEQUAL       shift and go to state 133

    operador                       shift and go to state 126

state 55

    (69) controlStructure -> if .

    VARIABLE        reduce using rule 69 (controlStructure -> if .)
    ECHO            reduce using rule 69 (controlStructure -> if .)
    PRINT           reduce using rule 69 (controlStructure -> if .)
    TRY             reduce using rule 69 (controlStructure -> if .)
    FUNCTION        reduce using rule 69 (controlStructure -> if .)
    RETURN          reduce using rule 69 (controlStructure -> if .)
    ID              reduce using rule 69 (controlStructure -> if .)
    EMPTY           reduce using rule 69 (controlStructure -> if .)
    CLASS           reduce using rule 69 (controlStructure -> if .)
    INTERFACE       reduce using rule 69 (controlStructure -> if .)
    INCLUDE         reduce using rule 69 (controlStructure -> if .)
    NAMESPACE       reduce using rule 69 (controlStructure -> if .)
    THROW           reduce using rule 69 (controlStructure -> if .)
    CONST           reduce using rule 69 (controlStructure -> if .)
    THIS            reduce using rule 69 (controlStructure -> if .)
    INT             reduce using rule 69 (controlStructure -> if .)
    FLOAT           reduce using rule 69 (controlStructure -> if .)
    STRING          reduce using rule 69 (controlStructure -> if .)
    BOOL            reduce using rule 69 (controlStructure -> if .)
    NULL            reduce using rule 69 (controlStructure -> if .)
    ARRAY           reduce using rule 69 (controlStructure -> if .)
    LPAREN          reduce using rule 69 (controlStructure -> if .)
    ABSTRACT        reduce using rule 69 (controlStructure -> if .)
    PRIVATE         reduce using rule 69 (controlStructure -> if .)
    PROTECTED       reduce using rule 69 (controlStructure -> if .)
    PUBLIC          reduce using rule 69 (controlStructure -> if .)
    STATIC          reduce using rule 69 (controlStructure -> if .)
    FINAL           reduce using rule 69 (controlStructure -> if .)
    IF              reduce using rule 69 (controlStructure -> if .)
    WHILE           reduce using rule 69 (controlStructure -> if .)
    DO              reduce using rule 69 (controlStructure -> if .)
    SWITCH          reduce using rule 69 (controlStructure -> if .)
    FOREACH         reduce using rule 69 (controlStructure -> if .)
    FOR             reduce using rule 69 (controlStructure -> if .)
    CLOSETAG        reduce using rule 69 (controlStructure -> if .)
    RBRACE          reduce using rule 69 (controlStructure -> if .)
    BREAK           reduce using rule 69 (controlStructure -> if .)
    ENDSWITCH       reduce using rule 69 (controlStructure -> if .)
    CASE            reduce using rule 69 (controlStructure -> if .)
    DEFAULT         reduce using rule 69 (controlStructure -> if .)


state 56

    (70) controlStructure -> for .

    VARIABLE        reduce using rule 70 (controlStructure -> for .)
    ECHO            reduce using rule 70 (controlStructure -> for .)
    PRINT           reduce using rule 70 (controlStructure -> for .)
    TRY             reduce using rule 70 (controlStructure -> for .)
    FUNCTION        reduce using rule 70 (controlStructure -> for .)
    RETURN          reduce using rule 70 (controlStructure -> for .)
    ID              reduce using rule 70 (controlStructure -> for .)
    EMPTY           reduce using rule 70 (controlStructure -> for .)
    CLASS           reduce using rule 70 (controlStructure -> for .)
    INTERFACE       reduce using rule 70 (controlStructure -> for .)
    INCLUDE         reduce using rule 70 (controlStructure -> for .)
    NAMESPACE       reduce using rule 70 (controlStructure -> for .)
    THROW           reduce using rule 70 (controlStructure -> for .)
    CONST           reduce using rule 70 (controlStructure -> for .)
    THIS            reduce using rule 70 (controlStructure -> for .)
    INT             reduce using rule 70 (controlStructure -> for .)
    FLOAT           reduce using rule 70 (controlStructure -> for .)
    STRING          reduce using rule 70 (controlStructure -> for .)
    BOOL            reduce using rule 70 (controlStructure -> for .)
    NULL            reduce using rule 70 (controlStructure -> for .)
    ARRAY           reduce using rule 70 (controlStructure -> for .)
    LPAREN          reduce using rule 70 (controlStructure -> for .)
    ABSTRACT        reduce using rule 70 (controlStructure -> for .)
    PRIVATE         reduce using rule 70 (controlStructure -> for .)
    PROTECTED       reduce using rule 70 (controlStructure -> for .)
    PUBLIC          reduce using rule 70 (controlStructure -> for .)
    STATIC          reduce using rule 70 (controlStructure -> for .)
    FINAL           reduce using rule 70 (controlStructure -> for .)
    IF              reduce using rule 70 (controlStructure -> for .)
    WHILE           reduce using rule 70 (controlStructure -> for .)
    DO              reduce using rule 70 (controlStructure -> for .)
    SWITCH          reduce using rule 70 (controlStructure -> for .)
    FOREACH         reduce using rule 70 (controlStructure -> for .)
    FOR             reduce using rule 70 (controlStructure -> for .)
    CLOSETAG        reduce using rule 70 (controlStructure -> for .)
    RBRACE          reduce using rule 70 (controlStructure -> for .)
    BREAK           reduce using rule 70 (controlStructure -> for .)
    ENDSWITCH       reduce using rule 70 (controlStructure -> for .)
    CASE            reduce using rule 70 (controlStructure -> for .)
    DEFAULT         reduce using rule 70 (controlStructure -> for .)


state 57

    (71) controlStructure -> while .

    VARIABLE        reduce using rule 71 (controlStructure -> while .)
    ECHO            reduce using rule 71 (controlStructure -> while .)
    PRINT           reduce using rule 71 (controlStructure -> while .)
    TRY             reduce using rule 71 (controlStructure -> while .)
    FUNCTION        reduce using rule 71 (controlStructure -> while .)
    RETURN          reduce using rule 71 (controlStructure -> while .)
    ID              reduce using rule 71 (controlStructure -> while .)
    EMPTY           reduce using rule 71 (controlStructure -> while .)
    CLASS           reduce using rule 71 (controlStructure -> while .)
    INTERFACE       reduce using rule 71 (controlStructure -> while .)
    INCLUDE         reduce using rule 71 (controlStructure -> while .)
    NAMESPACE       reduce using rule 71 (controlStructure -> while .)
    THROW           reduce using rule 71 (controlStructure -> while .)
    CONST           reduce using rule 71 (controlStructure -> while .)
    THIS            reduce using rule 71 (controlStructure -> while .)
    INT             reduce using rule 71 (controlStructure -> while .)
    FLOAT           reduce using rule 71 (controlStructure -> while .)
    STRING          reduce using rule 71 (controlStructure -> while .)
    BOOL            reduce using rule 71 (controlStructure -> while .)
    NULL            reduce using rule 71 (controlStructure -> while .)
    ARRAY           reduce using rule 71 (controlStructure -> while .)
    LPAREN          reduce using rule 71 (controlStructure -> while .)
    ABSTRACT        reduce using rule 71 (controlStructure -> while .)
    PRIVATE         reduce using rule 71 (controlStructure -> while .)
    PROTECTED       reduce using rule 71 (controlStructure -> while .)
    PUBLIC          reduce using rule 71 (controlStructure -> while .)
    STATIC          reduce using rule 71 (controlStructure -> while .)
    FINAL           reduce using rule 71 (controlStructure -> while .)
    IF              reduce using rule 71 (controlStructure -> while .)
    WHILE           reduce using rule 71 (controlStructure -> while .)
    DO              reduce using rule 71 (controlStructure -> while .)
    SWITCH          reduce using rule 71 (controlStructure -> while .)
    FOREACH         reduce using rule 71 (controlStructure -> while .)
    FOR             reduce using rule 71 (controlStructure -> while .)
    CLOSETAG        reduce using rule 71 (controlStructure -> while .)
    RBRACE          reduce using rule 71 (controlStructure -> while .)
    BREAK           reduce using rule 71 (controlStructure -> while .)
    ENDSWITCH       reduce using rule 71 (controlStructure -> while .)
    CASE            reduce using rule 71 (controlStructure -> while .)
    DEFAULT         reduce using rule 71 (controlStructure -> while .)


state 58

    (72) controlStructure -> dowhile .

    VARIABLE        reduce using rule 72 (controlStructure -> dowhile .)
    ECHO            reduce using rule 72 (controlStructure -> dowhile .)
    PRINT           reduce using rule 72 (controlStructure -> dowhile .)
    TRY             reduce using rule 72 (controlStructure -> dowhile .)
    FUNCTION        reduce using rule 72 (controlStructure -> dowhile .)
    RETURN          reduce using rule 72 (controlStructure -> dowhile .)
    ID              reduce using rule 72 (controlStructure -> dowhile .)
    EMPTY           reduce using rule 72 (controlStructure -> dowhile .)
    CLASS           reduce using rule 72 (controlStructure -> dowhile .)
    INTERFACE       reduce using rule 72 (controlStructure -> dowhile .)
    INCLUDE         reduce using rule 72 (controlStructure -> dowhile .)
    NAMESPACE       reduce using rule 72 (controlStructure -> dowhile .)
    THROW           reduce using rule 72 (controlStructure -> dowhile .)
    CONST           reduce using rule 72 (controlStructure -> dowhile .)
    THIS            reduce using rule 72 (controlStructure -> dowhile .)
    INT             reduce using rule 72 (controlStructure -> dowhile .)
    FLOAT           reduce using rule 72 (controlStructure -> dowhile .)
    STRING          reduce using rule 72 (controlStructure -> dowhile .)
    BOOL            reduce using rule 72 (controlStructure -> dowhile .)
    NULL            reduce using rule 72 (controlStructure -> dowhile .)
    ARRAY           reduce using rule 72 (controlStructure -> dowhile .)
    LPAREN          reduce using rule 72 (controlStructure -> dowhile .)
    ABSTRACT        reduce using rule 72 (controlStructure -> dowhile .)
    PRIVATE         reduce using rule 72 (controlStructure -> dowhile .)
    PROTECTED       reduce using rule 72 (controlStructure -> dowhile .)
    PUBLIC          reduce using rule 72 (controlStructure -> dowhile .)
    STATIC          reduce using rule 72 (controlStructure -> dowhile .)
    FINAL           reduce using rule 72 (controlStructure -> dowhile .)
    IF              reduce using rule 72 (controlStructure -> dowhile .)
    WHILE           reduce using rule 72 (controlStructure -> dowhile .)
    DO              reduce using rule 72 (controlStructure -> dowhile .)
    SWITCH          reduce using rule 72 (controlStructure -> dowhile .)
    FOREACH         reduce using rule 72 (controlStructure -> dowhile .)
    FOR             reduce using rule 72 (controlStructure -> dowhile .)
    CLOSETAG        reduce using rule 72 (controlStructure -> dowhile .)
    RBRACE          reduce using rule 72 (controlStructure -> dowhile .)
    BREAK           reduce using rule 72 (controlStructure -> dowhile .)
    ENDSWITCH       reduce using rule 72 (controlStructure -> dowhile .)
    CASE            reduce using rule 72 (controlStructure -> dowhile .)
    DEFAULT         reduce using rule 72 (controlStructure -> dowhile .)


state 59

    (73) controlStructure -> switch .

    VARIABLE        reduce using rule 73 (controlStructure -> switch .)
    ECHO            reduce using rule 73 (controlStructure -> switch .)
    PRINT           reduce using rule 73 (controlStructure -> switch .)
    TRY             reduce using rule 73 (controlStructure -> switch .)
    FUNCTION        reduce using rule 73 (controlStructure -> switch .)
    RETURN          reduce using rule 73 (controlStructure -> switch .)
    ID              reduce using rule 73 (controlStructure -> switch .)
    EMPTY           reduce using rule 73 (controlStructure -> switch .)
    CLASS           reduce using rule 73 (controlStructure -> switch .)
    INTERFACE       reduce using rule 73 (controlStructure -> switch .)
    INCLUDE         reduce using rule 73 (controlStructure -> switch .)
    NAMESPACE       reduce using rule 73 (controlStructure -> switch .)
    THROW           reduce using rule 73 (controlStructure -> switch .)
    CONST           reduce using rule 73 (controlStructure -> switch .)
    THIS            reduce using rule 73 (controlStructure -> switch .)
    INT             reduce using rule 73 (controlStructure -> switch .)
    FLOAT           reduce using rule 73 (controlStructure -> switch .)
    STRING          reduce using rule 73 (controlStructure -> switch .)
    BOOL            reduce using rule 73 (controlStructure -> switch .)
    NULL            reduce using rule 73 (controlStructure -> switch .)
    ARRAY           reduce using rule 73 (controlStructure -> switch .)
    LPAREN          reduce using rule 73 (controlStructure -> switch .)
    ABSTRACT        reduce using rule 73 (controlStructure -> switch .)
    PRIVATE         reduce using rule 73 (controlStructure -> switch .)
    PROTECTED       reduce using rule 73 (controlStructure -> switch .)
    PUBLIC          reduce using rule 73 (controlStructure -> switch .)
    STATIC          reduce using rule 73 (controlStructure -> switch .)
    FINAL           reduce using rule 73 (controlStructure -> switch .)
    IF              reduce using rule 73 (controlStructure -> switch .)
    WHILE           reduce using rule 73 (controlStructure -> switch .)
    DO              reduce using rule 73 (controlStructure -> switch .)
    SWITCH          reduce using rule 73 (controlStructure -> switch .)
    FOREACH         reduce using rule 73 (controlStructure -> switch .)
    FOR             reduce using rule 73 (controlStructure -> switch .)
    CLOSETAG        reduce using rule 73 (controlStructure -> switch .)
    RBRACE          reduce using rule 73 (controlStructure -> switch .)
    BREAK           reduce using rule 73 (controlStructure -> switch .)
    ENDSWITCH       reduce using rule 73 (controlStructure -> switch .)
    CASE            reduce using rule 73 (controlStructure -> switch .)
    DEFAULT         reduce using rule 73 (controlStructure -> switch .)


state 60

    (74) controlStructure -> foreach .

    VARIABLE        reduce using rule 74 (controlStructure -> foreach .)
    ECHO            reduce using rule 74 (controlStructure -> foreach .)
    PRINT           reduce using rule 74 (controlStructure -> foreach .)
    TRY             reduce using rule 74 (controlStructure -> foreach .)
    FUNCTION        reduce using rule 74 (controlStructure -> foreach .)
    RETURN          reduce using rule 74 (controlStructure -> foreach .)
    ID              reduce using rule 74 (controlStructure -> foreach .)
    EMPTY           reduce using rule 74 (controlStructure -> foreach .)
    CLASS           reduce using rule 74 (controlStructure -> foreach .)
    INTERFACE       reduce using rule 74 (controlStructure -> foreach .)
    INCLUDE         reduce using rule 74 (controlStructure -> foreach .)
    NAMESPACE       reduce using rule 74 (controlStructure -> foreach .)
    THROW           reduce using rule 74 (controlStructure -> foreach .)
    CONST           reduce using rule 74 (controlStructure -> foreach .)
    THIS            reduce using rule 74 (controlStructure -> foreach .)
    INT             reduce using rule 74 (controlStructure -> foreach .)
    FLOAT           reduce using rule 74 (controlStructure -> foreach .)
    STRING          reduce using rule 74 (controlStructure -> foreach .)
    BOOL            reduce using rule 74 (controlStructure -> foreach .)
    NULL            reduce using rule 74 (controlStructure -> foreach .)
    ARRAY           reduce using rule 74 (controlStructure -> foreach .)
    LPAREN          reduce using rule 74 (controlStructure -> foreach .)
    ABSTRACT        reduce using rule 74 (controlStructure -> foreach .)
    PRIVATE         reduce using rule 74 (controlStructure -> foreach .)
    PROTECTED       reduce using rule 74 (controlStructure -> foreach .)
    PUBLIC          reduce using rule 74 (controlStructure -> foreach .)
    STATIC          reduce using rule 74 (controlStructure -> foreach .)
    FINAL           reduce using rule 74 (controlStructure -> foreach .)
    IF              reduce using rule 74 (controlStructure -> foreach .)
    WHILE           reduce using rule 74 (controlStructure -> foreach .)
    DO              reduce using rule 74 (controlStructure -> foreach .)
    SWITCH          reduce using rule 74 (controlStructure -> foreach .)
    FOREACH         reduce using rule 74 (controlStructure -> foreach .)
    FOR             reduce using rule 74 (controlStructure -> foreach .)
    CLOSETAG        reduce using rule 74 (controlStructure -> foreach .)
    RBRACE          reduce using rule 74 (controlStructure -> foreach .)
    BREAK           reduce using rule 74 (controlStructure -> foreach .)
    ENDSWITCH       reduce using rule 74 (controlStructure -> foreach .)
    CASE            reduce using rule 74 (controlStructure -> foreach .)
    DEFAULT         reduce using rule 74 (controlStructure -> foreach .)


state 61

    (124) dataStructure -> array .

    VARIABLE        reduce using rule 124 (dataStructure -> array .)
    ECHO            reduce using rule 124 (dataStructure -> array .)
    PRINT           reduce using rule 124 (dataStructure -> array .)
    TRY             reduce using rule 124 (dataStructure -> array .)
    FUNCTION        reduce using rule 124 (dataStructure -> array .)
    RETURN          reduce using rule 124 (dataStructure -> array .)
    ID              reduce using rule 124 (dataStructure -> array .)
    EMPTY           reduce using rule 124 (dataStructure -> array .)
    CLASS           reduce using rule 124 (dataStructure -> array .)
    INTERFACE       reduce using rule 124 (dataStructure -> array .)
    INCLUDE         reduce using rule 124 (dataStructure -> array .)
    NAMESPACE       reduce using rule 124 (dataStructure -> array .)
    THROW           reduce using rule 124 (dataStructure -> array .)
    CONST           reduce using rule 124 (dataStructure -> array .)
    THIS            reduce using rule 124 (dataStructure -> array .)
    INT             reduce using rule 124 (dataStructure -> array .)
    FLOAT           reduce using rule 124 (dataStructure -> array .)
    STRING          reduce using rule 124 (dataStructure -> array .)
    BOOL            reduce using rule 124 (dataStructure -> array .)
    NULL            reduce using rule 124 (dataStructure -> array .)
    ARRAY           reduce using rule 124 (dataStructure -> array .)
    LPAREN          reduce using rule 124 (dataStructure -> array .)
    ABSTRACT        reduce using rule 124 (dataStructure -> array .)
    PRIVATE         reduce using rule 124 (dataStructure -> array .)
    PROTECTED       reduce using rule 124 (dataStructure -> array .)
    PUBLIC          reduce using rule 124 (dataStructure -> array .)
    STATIC          reduce using rule 124 (dataStructure -> array .)
    FINAL           reduce using rule 124 (dataStructure -> array .)
    IF              reduce using rule 124 (dataStructure -> array .)
    WHILE           reduce using rule 124 (dataStructure -> array .)
    DO              reduce using rule 124 (dataStructure -> array .)
    SWITCH          reduce using rule 124 (dataStructure -> array .)
    FOREACH         reduce using rule 124 (dataStructure -> array .)
    FOR             reduce using rule 124 (dataStructure -> array .)
    CLOSETAG        reduce using rule 124 (dataStructure -> array .)
    RBRACE          reduce using rule 124 (dataStructure -> array .)
    BREAK           reduce using rule 124 (dataStructure -> array .)
    ENDSWITCH       reduce using rule 124 (dataStructure -> array .)
    CASE            reduce using rule 124 (dataStructure -> array .)
    DEFAULT         reduce using rule 124 (dataStructure -> array .)


state 62

    (183) data -> ABSTRACT .

    CLASS           reduce using rule 183 (data -> ABSTRACT .)


state 63

    (184) data -> PRIVATE .

    CLASS           reduce using rule 184 (data -> PRIVATE .)


state 64

    (185) data -> PROTECTED .

    CLASS           reduce using rule 185 (data -> PROTECTED .)


state 65

    (186) data -> PUBLIC .

    CLASS           reduce using rule 186 (data -> PUBLIC .)


state 66

    (187) data -> STATIC .

    CLASS           reduce using rule 187 (data -> STATIC .)


state 67

    (188) data -> FINAL .

    CLASS           reduce using rule 188 (data -> FINAL .)


state 68

    (75) if -> IF . LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> IF . LPAREN conditions RPAREN body

    LPAREN          shift and go to state 134


state 69

    (103) for -> forStatement .

    VARIABLE        reduce using rule 103 (for -> forStatement .)
    ECHO            reduce using rule 103 (for -> forStatement .)
    PRINT           reduce using rule 103 (for -> forStatement .)
    TRY             reduce using rule 103 (for -> forStatement .)
    FUNCTION        reduce using rule 103 (for -> forStatement .)
    RETURN          reduce using rule 103 (for -> forStatement .)
    ID              reduce using rule 103 (for -> forStatement .)
    EMPTY           reduce using rule 103 (for -> forStatement .)
    CLASS           reduce using rule 103 (for -> forStatement .)
    INTERFACE       reduce using rule 103 (for -> forStatement .)
    INCLUDE         reduce using rule 103 (for -> forStatement .)
    NAMESPACE       reduce using rule 103 (for -> forStatement .)
    THROW           reduce using rule 103 (for -> forStatement .)
    CONST           reduce using rule 103 (for -> forStatement .)
    THIS            reduce using rule 103 (for -> forStatement .)
    INT             reduce using rule 103 (for -> forStatement .)
    FLOAT           reduce using rule 103 (for -> forStatement .)
    STRING          reduce using rule 103 (for -> forStatement .)
    BOOL            reduce using rule 103 (for -> forStatement .)
    NULL            reduce using rule 103 (for -> forStatement .)
    ARRAY           reduce using rule 103 (for -> forStatement .)
    LPAREN          reduce using rule 103 (for -> forStatement .)
    ABSTRACT        reduce using rule 103 (for -> forStatement .)
    PRIVATE         reduce using rule 103 (for -> forStatement .)
    PROTECTED       reduce using rule 103 (for -> forStatement .)
    PUBLIC          reduce using rule 103 (for -> forStatement .)
    STATIC          reduce using rule 103 (for -> forStatement .)
    FINAL           reduce using rule 103 (for -> forStatement .)
    IF              reduce using rule 103 (for -> forStatement .)
    WHILE           reduce using rule 103 (for -> forStatement .)
    DO              reduce using rule 103 (for -> forStatement .)
    SWITCH          reduce using rule 103 (for -> forStatement .)
    FOREACH         reduce using rule 103 (for -> forStatement .)
    FOR             reduce using rule 103 (for -> forStatement .)
    CLOSETAG        reduce using rule 103 (for -> forStatement .)
    RBRACE          reduce using rule 103 (for -> forStatement .)
    BREAK           reduce using rule 103 (for -> forStatement .)
    ENDSWITCH       reduce using rule 103 (for -> forStatement .)
    CASE            reduce using rule 103 (for -> forStatement .)
    DEFAULT         reduce using rule 103 (for -> forStatement .)


state 70

    (107) while -> WHILE . LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> WHILE . LPAREN condition RPAREN LBRACE RBRACE

    LPAREN          shift and go to state 135


state 71

    (109) dowhile -> DO . LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON

    LBRACE          shift and go to state 136


state 72

    (110) switch -> SWITCH . LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> SWITCH . LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON

    LPAREN          shift and go to state 137


state 73

    (118) foreach -> FOREACH . LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 138


state 74

    (128) array -> map .

    VARIABLE        reduce using rule 128 (array -> map .)
    ECHO            reduce using rule 128 (array -> map .)
    PRINT           reduce using rule 128 (array -> map .)
    TRY             reduce using rule 128 (array -> map .)
    FUNCTION        reduce using rule 128 (array -> map .)
    RETURN          reduce using rule 128 (array -> map .)
    ID              reduce using rule 128 (array -> map .)
    EMPTY           reduce using rule 128 (array -> map .)
    CLASS           reduce using rule 128 (array -> map .)
    INTERFACE       reduce using rule 128 (array -> map .)
    INCLUDE         reduce using rule 128 (array -> map .)
    NAMESPACE       reduce using rule 128 (array -> map .)
    THROW           reduce using rule 128 (array -> map .)
    CONST           reduce using rule 128 (array -> map .)
    THIS            reduce using rule 128 (array -> map .)
    INT             reduce using rule 128 (array -> map .)
    FLOAT           reduce using rule 128 (array -> map .)
    STRING          reduce using rule 128 (array -> map .)
    BOOL            reduce using rule 128 (array -> map .)
    NULL            reduce using rule 128 (array -> map .)
    ARRAY           reduce using rule 128 (array -> map .)
    LPAREN          reduce using rule 128 (array -> map .)
    ABSTRACT        reduce using rule 128 (array -> map .)
    PRIVATE         reduce using rule 128 (array -> map .)
    PROTECTED       reduce using rule 128 (array -> map .)
    PUBLIC          reduce using rule 128 (array -> map .)
    STATIC          reduce using rule 128 (array -> map .)
    FINAL           reduce using rule 128 (array -> map .)
    IF              reduce using rule 128 (array -> map .)
    WHILE           reduce using rule 128 (array -> map .)
    DO              reduce using rule 128 (array -> map .)
    SWITCH          reduce using rule 128 (array -> map .)
    FOREACH         reduce using rule 128 (array -> map .)
    FOR             reduce using rule 128 (array -> map .)
    CLOSETAG        reduce using rule 128 (array -> map .)
    RBRACE          reduce using rule 128 (array -> map .)
    BREAK           reduce using rule 128 (array -> map .)
    ENDSWITCH       reduce using rule 128 (array -> map .)
    CASE            reduce using rule 128 (array -> map .)
    DEFAULT         reduce using rule 128 (array -> map .)


state 75

    (104) forStatement -> FOR . LPAREN forcondition RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 139


state 76

    (1) inicio -> OPENTAG programa CLOSETAG .

    $end            reduce using rule 1 (inicio -> OPENTAG programa CLOSETAG .)


state 77

    (3) programa -> sentencia programa .

    CLOSETAG        reduce using rule 3 (programa -> sentencia programa .)


state 78

    (27) asignacion -> VARIABLE EQUALS . expresion SEMICOLON
    (34) asignacion_fgets -> VARIABLE EQUALS . FGETS LPAREN STDIN RPAREN SEMICOLON
    (193) anonymousFunction -> VARIABLE EQUALS . FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (125) array -> VARIABLE EQUALS . arrays SEMICOLON
    (126) array -> VARIABLE EQUALS . LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> VARIABLE EQUALS . ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (132) map -> VARIABLE EQUALS . LBRACKET maps RBRACKET SEMICOLON
    (133) map -> VARIABLE EQUALS . ARRAY LPAREN maps RPAREN SEMICOLON
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (129) arrays -> . LBRACKET repiteValores RBRACKET
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    FGETS           shift and go to state 141
    FN              shift and go to state 142
    LBRACKET        shift and go to state 144
    ARRAY           shift and go to state 145
    LPAREN          shift and go to state 28
    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    expresion                      shift and go to state 140
    comparacion                    shift and go to state 115
    arrays                         shift and go to state 143
    valor                          shift and go to state 114
    operaArit                      shift and go to state 54
    llamadaFuncion                 shift and go to state 101

state 79

    (160) objeto -> VARIABLE ARROW . ID LPAREN argumentos RPAREN SEMICOLON

    ID              shift and go to state 146


state 80

    (196) instance -> VARIABLE INSTANCEOF . ID

    ID              shift and go to state 147


state 81

    (200) concatenate -> VARIABLE CONCATENATEEQUAL . STRING

    STRING          shift and go to state 148


state 82

    (201) minuse -> VARIABLE MINUSEQUAL . INT

    INT             shift and go to state 149


state 83

    (57) comparacion -> expresion opSymbol . expresion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 28
    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    expresion                      shift and go to state 150
    valor                          shift and go to state 114
    comparacion                    shift and go to state 115
    operaArit                      shift and go to state 54
    llamadaFuncion                 shift and go to state 101

state 84

    (29) expresion -> expresion opLogic . expresion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 28
    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    expresion                      shift and go to state 151
    valor                          shift and go to state 114
    comparacion                    shift and go to state 115
    operaArit                      shift and go to state 54
    llamadaFuncion                 shift and go to state 101

state 85

    (87) opSymbol -> EQ .

    LPAREN          reduce using rule 87 (opSymbol -> EQ .)
    INT             reduce using rule 87 (opSymbol -> EQ .)
    VARIABLE        reduce using rule 87 (opSymbol -> EQ .)
    FLOAT           reduce using rule 87 (opSymbol -> EQ .)
    STRING          reduce using rule 87 (opSymbol -> EQ .)
    BOOL            reduce using rule 87 (opSymbol -> EQ .)
    NULL            reduce using rule 87 (opSymbol -> EQ .)
    ARRAY           reduce using rule 87 (opSymbol -> EQ .)
    ID              reduce using rule 87 (opSymbol -> EQ .)
    EMPTY           reduce using rule 87 (opSymbol -> EQ .)


state 86

    (88) opSymbol -> NEQ .

    LPAREN          reduce using rule 88 (opSymbol -> NEQ .)
    INT             reduce using rule 88 (opSymbol -> NEQ .)
    VARIABLE        reduce using rule 88 (opSymbol -> NEQ .)
    FLOAT           reduce using rule 88 (opSymbol -> NEQ .)
    STRING          reduce using rule 88 (opSymbol -> NEQ .)
    BOOL            reduce using rule 88 (opSymbol -> NEQ .)
    NULL            reduce using rule 88 (opSymbol -> NEQ .)
    ARRAY           reduce using rule 88 (opSymbol -> NEQ .)
    ID              reduce using rule 88 (opSymbol -> NEQ .)
    EMPTY           reduce using rule 88 (opSymbol -> NEQ .)


state 87

    (89) opSymbol -> STRICTEQ .

    LPAREN          reduce using rule 89 (opSymbol -> STRICTEQ .)
    INT             reduce using rule 89 (opSymbol -> STRICTEQ .)
    VARIABLE        reduce using rule 89 (opSymbol -> STRICTEQ .)
    FLOAT           reduce using rule 89 (opSymbol -> STRICTEQ .)
    STRING          reduce using rule 89 (opSymbol -> STRICTEQ .)
    BOOL            reduce using rule 89 (opSymbol -> STRICTEQ .)
    NULL            reduce using rule 89 (opSymbol -> STRICTEQ .)
    ARRAY           reduce using rule 89 (opSymbol -> STRICTEQ .)
    ID              reduce using rule 89 (opSymbol -> STRICTEQ .)
    EMPTY           reduce using rule 89 (opSymbol -> STRICTEQ .)


state 88

    (90) opSymbol -> STRICTNEQ .

    LPAREN          reduce using rule 90 (opSymbol -> STRICTNEQ .)
    INT             reduce using rule 90 (opSymbol -> STRICTNEQ .)
    VARIABLE        reduce using rule 90 (opSymbol -> STRICTNEQ .)
    FLOAT           reduce using rule 90 (opSymbol -> STRICTNEQ .)
    STRING          reduce using rule 90 (opSymbol -> STRICTNEQ .)
    BOOL            reduce using rule 90 (opSymbol -> STRICTNEQ .)
    NULL            reduce using rule 90 (opSymbol -> STRICTNEQ .)
    ARRAY           reduce using rule 90 (opSymbol -> STRICTNEQ .)
    ID              reduce using rule 90 (opSymbol -> STRICTNEQ .)
    EMPTY           reduce using rule 90 (opSymbol -> STRICTNEQ .)


state 89

    (91) opSymbol -> LT .

    LPAREN          reduce using rule 91 (opSymbol -> LT .)
    INT             reduce using rule 91 (opSymbol -> LT .)
    VARIABLE        reduce using rule 91 (opSymbol -> LT .)
    FLOAT           reduce using rule 91 (opSymbol -> LT .)
    STRING          reduce using rule 91 (opSymbol -> LT .)
    BOOL            reduce using rule 91 (opSymbol -> LT .)
    NULL            reduce using rule 91 (opSymbol -> LT .)
    ARRAY           reduce using rule 91 (opSymbol -> LT .)
    ID              reduce using rule 91 (opSymbol -> LT .)
    EMPTY           reduce using rule 91 (opSymbol -> LT .)


state 90

    (92) opSymbol -> GT .

    LPAREN          reduce using rule 92 (opSymbol -> GT .)
    INT             reduce using rule 92 (opSymbol -> GT .)
    VARIABLE        reduce using rule 92 (opSymbol -> GT .)
    FLOAT           reduce using rule 92 (opSymbol -> GT .)
    STRING          reduce using rule 92 (opSymbol -> GT .)
    BOOL            reduce using rule 92 (opSymbol -> GT .)
    NULL            reduce using rule 92 (opSymbol -> GT .)
    ARRAY           reduce using rule 92 (opSymbol -> GT .)
    ID              reduce using rule 92 (opSymbol -> GT .)
    EMPTY           reduce using rule 92 (opSymbol -> GT .)


state 91

    (93) opSymbol -> LEQ .

    LPAREN          reduce using rule 93 (opSymbol -> LEQ .)
    INT             reduce using rule 93 (opSymbol -> LEQ .)
    VARIABLE        reduce using rule 93 (opSymbol -> LEQ .)
    FLOAT           reduce using rule 93 (opSymbol -> LEQ .)
    STRING          reduce using rule 93 (opSymbol -> LEQ .)
    BOOL            reduce using rule 93 (opSymbol -> LEQ .)
    NULL            reduce using rule 93 (opSymbol -> LEQ .)
    ARRAY           reduce using rule 93 (opSymbol -> LEQ .)
    ID              reduce using rule 93 (opSymbol -> LEQ .)
    EMPTY           reduce using rule 93 (opSymbol -> LEQ .)


state 92

    (94) opSymbol -> GEQ .

    LPAREN          reduce using rule 94 (opSymbol -> GEQ .)
    INT             reduce using rule 94 (opSymbol -> GEQ .)
    VARIABLE        reduce using rule 94 (opSymbol -> GEQ .)
    FLOAT           reduce using rule 94 (opSymbol -> GEQ .)
    STRING          reduce using rule 94 (opSymbol -> GEQ .)
    BOOL            reduce using rule 94 (opSymbol -> GEQ .)
    NULL            reduce using rule 94 (opSymbol -> GEQ .)
    ARRAY           reduce using rule 94 (opSymbol -> GEQ .)
    ID              reduce using rule 94 (opSymbol -> GEQ .)
    EMPTY           reduce using rule 94 (opSymbol -> GEQ .)


state 93

    (95) opLogic -> AND .

    LPAREN          reduce using rule 95 (opLogic -> AND .)
    INT             reduce using rule 95 (opLogic -> AND .)
    VARIABLE        reduce using rule 95 (opLogic -> AND .)
    FLOAT           reduce using rule 95 (opLogic -> AND .)
    STRING          reduce using rule 95 (opLogic -> AND .)
    BOOL            reduce using rule 95 (opLogic -> AND .)
    NULL            reduce using rule 95 (opLogic -> AND .)
    ARRAY           reduce using rule 95 (opLogic -> AND .)
    ID              reduce using rule 95 (opLogic -> AND .)
    EMPTY           reduce using rule 95 (opLogic -> AND .)
    NOT             reduce using rule 95 (opLogic -> AND .)


state 94

    (96) opLogic -> LOGICAL_AND .

    LPAREN          reduce using rule 96 (opLogic -> LOGICAL_AND .)
    INT             reduce using rule 96 (opLogic -> LOGICAL_AND .)
    VARIABLE        reduce using rule 96 (opLogic -> LOGICAL_AND .)
    FLOAT           reduce using rule 96 (opLogic -> LOGICAL_AND .)
    STRING          reduce using rule 96 (opLogic -> LOGICAL_AND .)
    BOOL            reduce using rule 96 (opLogic -> LOGICAL_AND .)
    NULL            reduce using rule 96 (opLogic -> LOGICAL_AND .)
    ARRAY           reduce using rule 96 (opLogic -> LOGICAL_AND .)
    ID              reduce using rule 96 (opLogic -> LOGICAL_AND .)
    EMPTY           reduce using rule 96 (opLogic -> LOGICAL_AND .)
    NOT             reduce using rule 96 (opLogic -> LOGICAL_AND .)


state 95

    (97) opLogic -> OR .

    LPAREN          reduce using rule 97 (opLogic -> OR .)
    INT             reduce using rule 97 (opLogic -> OR .)
    VARIABLE        reduce using rule 97 (opLogic -> OR .)
    FLOAT           reduce using rule 97 (opLogic -> OR .)
    STRING          reduce using rule 97 (opLogic -> OR .)
    BOOL            reduce using rule 97 (opLogic -> OR .)
    NULL            reduce using rule 97 (opLogic -> OR .)
    ARRAY           reduce using rule 97 (opLogic -> OR .)
    ID              reduce using rule 97 (opLogic -> OR .)
    EMPTY           reduce using rule 97 (opLogic -> OR .)
    NOT             reduce using rule 97 (opLogic -> OR .)


state 96

    (98) opLogic -> LOGICAL_OR .

    LPAREN          reduce using rule 98 (opLogic -> LOGICAL_OR .)
    INT             reduce using rule 98 (opLogic -> LOGICAL_OR .)
    VARIABLE        reduce using rule 98 (opLogic -> LOGICAL_OR .)
    FLOAT           reduce using rule 98 (opLogic -> LOGICAL_OR .)
    STRING          reduce using rule 98 (opLogic -> LOGICAL_OR .)
    BOOL            reduce using rule 98 (opLogic -> LOGICAL_OR .)
    NULL            reduce using rule 98 (opLogic -> LOGICAL_OR .)
    ARRAY           reduce using rule 98 (opLogic -> LOGICAL_OR .)
    ID              reduce using rule 98 (opLogic -> LOGICAL_OR .)
    EMPTY           reduce using rule 98 (opLogic -> LOGICAL_OR .)
    NOT             reduce using rule 98 (opLogic -> LOGICAL_OR .)


state 97

    (31) expresion -> LPAREN comparacion . RPAREN
    (30) expresion -> comparacion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 152
    EQ              reduce using rule 30 (expresion -> comparacion .)
    NEQ             reduce using rule 30 (expresion -> comparacion .)
    STRICTEQ        reduce using rule 30 (expresion -> comparacion .)
    STRICTNEQ       reduce using rule 30 (expresion -> comparacion .)
    LT              reduce using rule 30 (expresion -> comparacion .)
    GT              reduce using rule 30 (expresion -> comparacion .)
    LEQ             reduce using rule 30 (expresion -> comparacion .)
    GEQ             reduce using rule 30 (expresion -> comparacion .)
    AND             reduce using rule 30 (expresion -> comparacion .)
    LOGICAL_AND     reduce using rule 30 (expresion -> comparacion .)
    OR              reduce using rule 30 (expresion -> comparacion .)
    LOGICAL_OR      reduce using rule 30 (expresion -> comparacion .)

  ! RPAREN          [ reduce using rule 30 (expresion -> comparacion .) ]


state 98

    (33) expresion -> LPAREN expresion . RPAREN
    (57) comparacion -> expresion . opSymbol expresion
    (29) expresion -> expresion . opLogic expresion
    (87) opSymbol -> . EQ
    (88) opSymbol -> . NEQ
    (89) opSymbol -> . STRICTEQ
    (90) opSymbol -> . STRICTNEQ
    (91) opSymbol -> . LT
    (92) opSymbol -> . GT
    (93) opSymbol -> . LEQ
    (94) opSymbol -> . GEQ
    (95) opLogic -> . AND
    (96) opLogic -> . LOGICAL_AND
    (97) opLogic -> . OR
    (98) opLogic -> . LOGICAL_OR

    RPAREN          shift and go to state 153
    EQ              shift and go to state 85
    NEQ             shift and go to state 86
    STRICTEQ        shift and go to state 87
    STRICTNEQ       shift and go to state 88
    LT              shift and go to state 89
    GT              shift and go to state 90
    LEQ             shift and go to state 91
    GEQ             shift and go to state 92
    AND             shift and go to state 93
    LOGICAL_AND     shift and go to state 94
    OR              shift and go to state 95
    LOGICAL_OR      shift and go to state 96

    opSymbol                       shift and go to state 83
    opLogic                        shift and go to state 84

state 99

    (37) operaArit -> LPAREN operaArit . RPAREN
    (32) expresion -> operaArit .
    (36) operaArit -> operaArit . operador operaArit
    (49) operador -> . PLUS
    (50) operador -> . MINUS
    (51) operador -> . TIMES
    (52) operador -> . DIVIDE
    (53) operador -> . MODULO
    (54) operador -> . POTENCIA
    (55) operador -> . PLUSEQUAL

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 154
    EQ              reduce using rule 32 (expresion -> operaArit .)
    NEQ             reduce using rule 32 (expresion -> operaArit .)
    STRICTEQ        reduce using rule 32 (expresion -> operaArit .)
    STRICTNEQ       reduce using rule 32 (expresion -> operaArit .)
    LT              reduce using rule 32 (expresion -> operaArit .)
    GT              reduce using rule 32 (expresion -> operaArit .)
    LEQ             reduce using rule 32 (expresion -> operaArit .)
    GEQ             reduce using rule 32 (expresion -> operaArit .)
    AND             reduce using rule 32 (expresion -> operaArit .)
    LOGICAL_AND     reduce using rule 32 (expresion -> operaArit .)
    OR              reduce using rule 32 (expresion -> operaArit .)
    LOGICAL_OR      reduce using rule 32 (expresion -> operaArit .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    TIMES           shift and go to state 129
    DIVIDE          shift and go to state 130
    MODULO          shift and go to state 131
    POTENCIA        shift and go to state 132
    PLUSEQUAL       shift and go to state 133

  ! RPAREN          [ reduce using rule 32 (expresion -> operaArit .) ]

    operador                       shift and go to state 126

state 100

    (42) valor -> VARIABLE .

    EQ              reduce using rule 42 (valor -> VARIABLE .)
    NEQ             reduce using rule 42 (valor -> VARIABLE .)
    STRICTEQ        reduce using rule 42 (valor -> VARIABLE .)
    STRICTNEQ       reduce using rule 42 (valor -> VARIABLE .)
    LT              reduce using rule 42 (valor -> VARIABLE .)
    GT              reduce using rule 42 (valor -> VARIABLE .)
    LEQ             reduce using rule 42 (valor -> VARIABLE .)
    GEQ             reduce using rule 42 (valor -> VARIABLE .)
    RPAREN          reduce using rule 42 (valor -> VARIABLE .)
    AND             reduce using rule 42 (valor -> VARIABLE .)
    LOGICAL_AND     reduce using rule 42 (valor -> VARIABLE .)
    OR              reduce using rule 42 (valor -> VARIABLE .)
    LOGICAL_OR      reduce using rule 42 (valor -> VARIABLE .)
    PLUS            reduce using rule 42 (valor -> VARIABLE .)
    MINUS           reduce using rule 42 (valor -> VARIABLE .)
    TIMES           reduce using rule 42 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 42 (valor -> VARIABLE .)
    MODULO          reduce using rule 42 (valor -> VARIABLE .)
    POTENCIA        reduce using rule 42 (valor -> VARIABLE .)
    PLUSEQUAL       reduce using rule 42 (valor -> VARIABLE .)
    COMMA           reduce using rule 42 (valor -> VARIABLE .)
    SEMICOLON       reduce using rule 42 (valor -> VARIABLE .)
    VARIABLE        reduce using rule 42 (valor -> VARIABLE .)
    ECHO            reduce using rule 42 (valor -> VARIABLE .)
    PRINT           reduce using rule 42 (valor -> VARIABLE .)
    TRY             reduce using rule 42 (valor -> VARIABLE .)
    FUNCTION        reduce using rule 42 (valor -> VARIABLE .)
    RETURN          reduce using rule 42 (valor -> VARIABLE .)
    ID              reduce using rule 42 (valor -> VARIABLE .)
    EMPTY           reduce using rule 42 (valor -> VARIABLE .)
    CLASS           reduce using rule 42 (valor -> VARIABLE .)
    INTERFACE       reduce using rule 42 (valor -> VARIABLE .)
    INCLUDE         reduce using rule 42 (valor -> VARIABLE .)
    NAMESPACE       reduce using rule 42 (valor -> VARIABLE .)
    THROW           reduce using rule 42 (valor -> VARIABLE .)
    CONST           reduce using rule 42 (valor -> VARIABLE .)
    THIS            reduce using rule 42 (valor -> VARIABLE .)
    INT             reduce using rule 42 (valor -> VARIABLE .)
    FLOAT           reduce using rule 42 (valor -> VARIABLE .)
    STRING          reduce using rule 42 (valor -> VARIABLE .)
    BOOL            reduce using rule 42 (valor -> VARIABLE .)
    NULL            reduce using rule 42 (valor -> VARIABLE .)
    ARRAY           reduce using rule 42 (valor -> VARIABLE .)
    LPAREN          reduce using rule 42 (valor -> VARIABLE .)
    ABSTRACT        reduce using rule 42 (valor -> VARIABLE .)
    PRIVATE         reduce using rule 42 (valor -> VARIABLE .)
    PROTECTED       reduce using rule 42 (valor -> VARIABLE .)
    PUBLIC          reduce using rule 42 (valor -> VARIABLE .)
    STATIC          reduce using rule 42 (valor -> VARIABLE .)
    FINAL           reduce using rule 42 (valor -> VARIABLE .)
    IF              reduce using rule 42 (valor -> VARIABLE .)
    WHILE           reduce using rule 42 (valor -> VARIABLE .)
    DO              reduce using rule 42 (valor -> VARIABLE .)
    SWITCH          reduce using rule 42 (valor -> VARIABLE .)
    FOREACH         reduce using rule 42 (valor -> VARIABLE .)
    FOR             reduce using rule 42 (valor -> VARIABLE .)
    CLOSETAG        reduce using rule 42 (valor -> VARIABLE .)
    RBRACE          reduce using rule 42 (valor -> VARIABLE .)
    BREAK           reduce using rule 42 (valor -> VARIABLE .)
    ENDSWITCH       reduce using rule 42 (valor -> VARIABLE .)
    CASE            reduce using rule 42 (valor -> VARIABLE .)
    DEFAULT         reduce using rule 42 (valor -> VARIABLE .)
    ARROWMAP        reduce using rule 42 (valor -> VARIABLE .)
    RBRACKET        reduce using rule 42 (valor -> VARIABLE .)
    COLON           reduce using rule 42 (valor -> VARIABLE .)


state 101

    (48) valor -> llamadaFuncion .

    EQ              reduce using rule 48 (valor -> llamadaFuncion .)
    NEQ             reduce using rule 48 (valor -> llamadaFuncion .)
    STRICTEQ        reduce using rule 48 (valor -> llamadaFuncion .)
    STRICTNEQ       reduce using rule 48 (valor -> llamadaFuncion .)
    LT              reduce using rule 48 (valor -> llamadaFuncion .)
    GT              reduce using rule 48 (valor -> llamadaFuncion .)
    LEQ             reduce using rule 48 (valor -> llamadaFuncion .)
    GEQ             reduce using rule 48 (valor -> llamadaFuncion .)
    RPAREN          reduce using rule 48 (valor -> llamadaFuncion .)
    AND             reduce using rule 48 (valor -> llamadaFuncion .)
    LOGICAL_AND     reduce using rule 48 (valor -> llamadaFuncion .)
    OR              reduce using rule 48 (valor -> llamadaFuncion .)
    LOGICAL_OR      reduce using rule 48 (valor -> llamadaFuncion .)
    PLUS            reduce using rule 48 (valor -> llamadaFuncion .)
    MINUS           reduce using rule 48 (valor -> llamadaFuncion .)
    TIMES           reduce using rule 48 (valor -> llamadaFuncion .)
    DIVIDE          reduce using rule 48 (valor -> llamadaFuncion .)
    MODULO          reduce using rule 48 (valor -> llamadaFuncion .)
    POTENCIA        reduce using rule 48 (valor -> llamadaFuncion .)
    PLUSEQUAL       reduce using rule 48 (valor -> llamadaFuncion .)
    COMMA           reduce using rule 48 (valor -> llamadaFuncion .)
    SEMICOLON       reduce using rule 48 (valor -> llamadaFuncion .)
    VARIABLE        reduce using rule 48 (valor -> llamadaFuncion .)
    ECHO            reduce using rule 48 (valor -> llamadaFuncion .)
    PRINT           reduce using rule 48 (valor -> llamadaFuncion .)
    TRY             reduce using rule 48 (valor -> llamadaFuncion .)
    FUNCTION        reduce using rule 48 (valor -> llamadaFuncion .)
    RETURN          reduce using rule 48 (valor -> llamadaFuncion .)
    ID              reduce using rule 48 (valor -> llamadaFuncion .)
    EMPTY           reduce using rule 48 (valor -> llamadaFuncion .)
    CLASS           reduce using rule 48 (valor -> llamadaFuncion .)
    INTERFACE       reduce using rule 48 (valor -> llamadaFuncion .)
    INCLUDE         reduce using rule 48 (valor -> llamadaFuncion .)
    NAMESPACE       reduce using rule 48 (valor -> llamadaFuncion .)
    THROW           reduce using rule 48 (valor -> llamadaFuncion .)
    CONST           reduce using rule 48 (valor -> llamadaFuncion .)
    THIS            reduce using rule 48 (valor -> llamadaFuncion .)
    INT             reduce using rule 48 (valor -> llamadaFuncion .)
    FLOAT           reduce using rule 48 (valor -> llamadaFuncion .)
    STRING          reduce using rule 48 (valor -> llamadaFuncion .)
    BOOL            reduce using rule 48 (valor -> llamadaFuncion .)
    NULL            reduce using rule 48 (valor -> llamadaFuncion .)
    ARRAY           reduce using rule 48 (valor -> llamadaFuncion .)
    LPAREN          reduce using rule 48 (valor -> llamadaFuncion .)
    ABSTRACT        reduce using rule 48 (valor -> llamadaFuncion .)
    PRIVATE         reduce using rule 48 (valor -> llamadaFuncion .)
    PROTECTED       reduce using rule 48 (valor -> llamadaFuncion .)
    PUBLIC          reduce using rule 48 (valor -> llamadaFuncion .)
    STATIC          reduce using rule 48 (valor -> llamadaFuncion .)
    FINAL           reduce using rule 48 (valor -> llamadaFuncion .)
    IF              reduce using rule 48 (valor -> llamadaFuncion .)
    WHILE           reduce using rule 48 (valor -> llamadaFuncion .)
    DO              reduce using rule 48 (valor -> llamadaFuncion .)
    SWITCH          reduce using rule 48 (valor -> llamadaFuncion .)
    FOREACH         reduce using rule 48 (valor -> llamadaFuncion .)
    FOR             reduce using rule 48 (valor -> llamadaFuncion .)
    CLOSETAG        reduce using rule 48 (valor -> llamadaFuncion .)
    RBRACE          reduce using rule 48 (valor -> llamadaFuncion .)
    BREAK           reduce using rule 48 (valor -> llamadaFuncion .)
    ENDSWITCH       reduce using rule 48 (valor -> llamadaFuncion .)
    CASE            reduce using rule 48 (valor -> llamadaFuncion .)
    DEFAULT         reduce using rule 48 (valor -> llamadaFuncion .)
    ARROWMAP        reduce using rule 48 (valor -> llamadaFuncion .)
    RBRACKET        reduce using rule 48 (valor -> llamadaFuncion .)
    COLON           reduce using rule 48 (valor -> llamadaFuncion .)


state 102

    (56) comparacion -> valor opSymbol . valor
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    valor                          shift and go to state 155
    llamadaFuncion                 shift and go to state 101

state 103

    (58) impresion -> ECHO imprimir . SEMICOLON

    SEMICOLON       shift and go to state 156


state 104

    (60) imprimir -> LPAREN . repiteValores RPAREN
    (61) imprimir -> LPAREN . RPAREN
    (64) repiteValores -> . valor
    (65) repiteValores -> . valor COMMA repiteValores
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    RPAREN          shift and go to state 158
    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    repiteValores                  shift and go to state 157
    valor                          shift and go to state 107
    llamadaFuncion                 shift and go to state 101

state 105

    (62) imprimir -> repiteValores .

    SEMICOLON       reduce using rule 62 (imprimir -> repiteValores .)


state 106

    (63) imprimir -> empty .

    SEMICOLON       reduce using rule 63 (imprimir -> empty .)


state 107

    (64) repiteValores -> valor .
    (65) repiteValores -> valor . COMMA repiteValores

    SEMICOLON       reduce using rule 64 (repiteValores -> valor .)
    RPAREN          reduce using rule 64 (repiteValores -> valor .)
    RBRACKET        reduce using rule 64 (repiteValores -> valor .)
    COMMA           shift and go to state 159


state 108

    (59) impresion -> PRINT imprimir . SEMICOLON

    SEMICOLON       shift and go to state 160


state 109

    (155) try -> TRY LBRACE . body RBRACE catchs
    (156) try -> TRY LBRACE . body RBRACE catchs FINALLY LBRACE body RBRACE
    (99) body -> . sentenciaList
    (100) body -> . empty
    (101) sentenciaList -> . sentencia
    (102) sentenciaList -> . sentencia sentenciaList
    (66) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (58) impresion -> . ECHO imprimir SEMICOLON
    (59) impresion -> . PRINT imprimir SEMICOLON
    (67) estructurasPrograma -> . controlStructure
    (68) estructurasPrograma -> . dataStructure
    (155) try -> . TRY LBRACE body RBRACE catchs
    (156) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (161) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN expresion SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (166) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (167) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (168) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . classInterface
    (189) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (160) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (190) includes -> . INCLUDE STRING SEMICOLON
    (191) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (192) namespace -> . NAMESPACE ID SEMICOLON
    (193) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (194) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> . THROW valor SEMICOLON
    (196) instance -> . VARIABLE INSTANCEOF ID
    (197) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (198) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (199) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (200) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (201) minuse -> . VARIABLE MINUSEQUAL INT
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (69) controlStructure -> . if
    (70) controlStructure -> . for
    (71) controlStructure -> . while
    (72) controlStructure -> . dowhile
    (73) controlStructure -> . switch
    (74) controlStructure -> . foreach
    (124) dataStructure -> . array
    (183) data -> . ABSTRACT
    (184) data -> . PRIVATE
    (185) data -> . PROTECTED
    (186) data -> . PUBLIC
    (187) data -> . STATIC
    (188) data -> . FINAL
    (177) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (179) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (75) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> . IF LPAREN conditions RPAREN body
    (103) for -> . forStatement
    (107) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (109) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (110) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (118) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (125) array -> . VARIABLE EQUALS arrays SEMICOLON
    (126) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) array -> . map
    (104) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (132) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 66 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 30
    PRINT           shift and go to state 31
    TRY             shift and go to state 34
    FUNCTION        shift and go to state 35
    RETURN          shift and go to state 37
    ID              shift and go to state 36
    EMPTY           shift and go to state 38
    CLASS           shift and go to state 39
    INTERFACE       shift and go to state 42
    INCLUDE         shift and go to state 43
    NAMESPACE       shift and go to state 45
    THROW           shift and go to state 46
    CONST           shift and go to state 47
    THIS            shift and go to state 48
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ABSTRACT        shift and go to state 62
    PRIVATE         shift and go to state 63
    PROTECTED       shift and go to state 64
    PUBLIC          shift and go to state 65
    STATIC          shift and go to state 66
    FINAL           shift and go to state 67
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    DO              shift and go to state 71
    SWITCH          shift and go to state 72
    FOREACH         shift and go to state 73
    FOR             shift and go to state 75

    body                           shift and go to state 161
    sentenciaList                  shift and go to state 162
    empty                          shift and go to state 163
    sentencia                      shift and go to state 164
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    expresion                      shift and go to state 27
    valor                          shift and go to state 29
    controlStructure               shift and go to state 32
    dataStructure                  shift and go to state 33
    data                           shift and go to state 40
    classInterface                 shift and go to state 41
    operaArit                      shift and go to state 54
    if                             shift and go to state 55
    for                            shift and go to state 56
    while                          shift and go to state 57
    dowhile                        shift and go to state 58
    switch                         shift and go to state 59
    foreach                        shift and go to state 60
    array                          shift and go to state 61
    forStatement                   shift and go to state 69
    map                            shift and go to state 74

state 110

    (161) funcionDeclaration -> FUNCTION ID . LPAREN argumentos RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 165


state 111

    (162) llamadaFuncion -> ID LPAREN . argumentos RPAREN SEMICOLON
    (164) llamadaFuncion -> ID LPAREN . argumentos RPAREN
    (142) argumentos -> . argumento
    (143) argumentos -> . argumento COMMA argumentos
    (144) argumentos -> . empty
    (145) argumento -> . type VARIABLE
    (146) argumento -> . VARIABLE EQUALS valor
    (147) argumento -> . type VARIABLE EQUALS valor
    (148) argumento -> . operaArit
    (66) empty -> .
    (149) type -> . INT_TYPE
    (150) type -> . FLOAT_TYPE
    (151) type -> . STRING_TYPE
    (152) type -> . BOOL_TYPE
    (153) type -> . ARRAY_TYPE
    (154) type -> . VOID
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    VARIABLE        shift and go to state 171
    RPAREN          reduce using rule 66 (empty -> .)
    INT_TYPE        shift and go to state 174
    FLOAT_TYPE      shift and go to state 175
    STRING_TYPE     shift and go to state 176
    BOOL_TYPE       shift and go to state 177
    ARRAY_TYPE      shift and go to state 178
    VOID            shift and go to state 179
    LPAREN          shift and go to state 166
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    argumentos                     shift and go to state 167
    argumento                      shift and go to state 168
    empty                          shift and go to state 169
    type                           shift and go to state 170
    valor                          shift and go to state 172
    operaArit                      shift and go to state 173
    llamadaFuncion                 shift and go to state 101

state 112

    (25) returnStatement -> RETURN expresion . SEMICOLON
    (29) expresion -> expresion . opLogic expresion
    (57) comparacion -> expresion . opSymbol expresion
    (95) opLogic -> . AND
    (96) opLogic -> . LOGICAL_AND
    (97) opLogic -> . OR
    (98) opLogic -> . LOGICAL_OR
    (87) opSymbol -> . EQ
    (88) opSymbol -> . NEQ
    (89) opSymbol -> . STRICTEQ
    (90) opSymbol -> . STRICTNEQ
    (91) opSymbol -> . LT
    (92) opSymbol -> . GT
    (93) opSymbol -> . LEQ
    (94) opSymbol -> . GEQ

    SEMICOLON       shift and go to state 180
    AND             shift and go to state 93
    LOGICAL_AND     shift and go to state 94
    OR              shift and go to state 95
    LOGICAL_OR      shift and go to state 96
    EQ              shift and go to state 85
    NEQ             shift and go to state 86
    STRICTEQ        shift and go to state 87
    STRICTNEQ       shift and go to state 88
    LT              shift and go to state 89
    GT              shift and go to state 90
    LEQ             shift and go to state 91
    GEQ             shift and go to state 92

    opLogic                        shift and go to state 84
    opSymbol                       shift and go to state 83

state 113

    (26) returnStatement -> RETURN SEMICOLON .

    VARIABLE        reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    ECHO            reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    PRINT           reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    TRY             reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    FUNCTION        reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    ID              reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    EMPTY           reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    CLASS           reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    INTERFACE       reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    INCLUDE         reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    NAMESPACE       reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    THROW           reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    CONST           reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    THIS            reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    INT             reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    STRING          reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    BOOL            reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    NULL            reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    ARRAY           reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    ABSTRACT        reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    PRIVATE         reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    PROTECTED       reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    PUBLIC          reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    STATIC          reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    FINAL           reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    IF              reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    DO              reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    FOREACH         reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    FOR             reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    CLOSETAG        reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    ENDSWITCH       reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    CASE            reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)


state 114

    (28) expresion -> valor .
    (56) comparacion -> valor . opSymbol valor
    (35) operaArit -> valor .
    (87) opSymbol -> . EQ
    (88) opSymbol -> . NEQ
    (89) opSymbol -> . STRICTEQ
    (90) opSymbol -> . STRICTNEQ
    (91) opSymbol -> . LT
    (92) opSymbol -> . GT
    (93) opSymbol -> . LEQ
    (94) opSymbol -> . GEQ

  ! reduce/reduce conflict for SEMICOLON resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for AND resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for LOGICAL_AND resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for OR resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for LOGICAL_OR resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for EQ resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for NEQ resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for STRICTEQ resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for STRICTNEQ resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for LT resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for GT resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for LEQ resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for GEQ resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for ECHO resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for PRINT resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for TRY resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for RETURN resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for ID resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for EMPTY resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for CLASS resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for INCLUDE resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for NAMESPACE resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for THROW resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for CONST resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for THIS resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for INT resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for FLOAT resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for STRING resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for BOOL resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for NULL resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for ARRAY resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for LPAREN resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for ABSTRACT resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for STATIC resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for FINAL resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for IF resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for WHILE resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for DO resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for SWITCH resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for FOREACH resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for FOR resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for CLOSETAG resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for RPAREN resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for RBRACE resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for BREAK resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for ENDSWITCH resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for CASE resolved using rule 28 (expresion -> valor .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 28 (expresion -> valor .)
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICTEQ resolved as shift
  ! shift/reduce conflict for STRICTNEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
    SEMICOLON       reduce using rule 28 (expresion -> valor .)
    AND             reduce using rule 28 (expresion -> valor .)
    LOGICAL_AND     reduce using rule 28 (expresion -> valor .)
    OR              reduce using rule 28 (expresion -> valor .)
    LOGICAL_OR      reduce using rule 28 (expresion -> valor .)
    VARIABLE        reduce using rule 28 (expresion -> valor .)
    ECHO            reduce using rule 28 (expresion -> valor .)
    PRINT           reduce using rule 28 (expresion -> valor .)
    TRY             reduce using rule 28 (expresion -> valor .)
    FUNCTION        reduce using rule 28 (expresion -> valor .)
    RETURN          reduce using rule 28 (expresion -> valor .)
    ID              reduce using rule 28 (expresion -> valor .)
    EMPTY           reduce using rule 28 (expresion -> valor .)
    CLASS           reduce using rule 28 (expresion -> valor .)
    INTERFACE       reduce using rule 28 (expresion -> valor .)
    INCLUDE         reduce using rule 28 (expresion -> valor .)
    NAMESPACE       reduce using rule 28 (expresion -> valor .)
    THROW           reduce using rule 28 (expresion -> valor .)
    CONST           reduce using rule 28 (expresion -> valor .)
    THIS            reduce using rule 28 (expresion -> valor .)
    INT             reduce using rule 28 (expresion -> valor .)
    FLOAT           reduce using rule 28 (expresion -> valor .)
    STRING          reduce using rule 28 (expresion -> valor .)
    BOOL            reduce using rule 28 (expresion -> valor .)
    NULL            reduce using rule 28 (expresion -> valor .)
    ARRAY           reduce using rule 28 (expresion -> valor .)
    LPAREN          reduce using rule 28 (expresion -> valor .)
    ABSTRACT        reduce using rule 28 (expresion -> valor .)
    PRIVATE         reduce using rule 28 (expresion -> valor .)
    PROTECTED       reduce using rule 28 (expresion -> valor .)
    PUBLIC          reduce using rule 28 (expresion -> valor .)
    STATIC          reduce using rule 28 (expresion -> valor .)
    FINAL           reduce using rule 28 (expresion -> valor .)
    IF              reduce using rule 28 (expresion -> valor .)
    WHILE           reduce using rule 28 (expresion -> valor .)
    DO              reduce using rule 28 (expresion -> valor .)
    SWITCH          reduce using rule 28 (expresion -> valor .)
    FOREACH         reduce using rule 28 (expresion -> valor .)
    FOR             reduce using rule 28 (expresion -> valor .)
    CLOSETAG        reduce using rule 28 (expresion -> valor .)
    RPAREN          reduce using rule 28 (expresion -> valor .)
    RBRACE          reduce using rule 28 (expresion -> valor .)
    BREAK           reduce using rule 28 (expresion -> valor .)
    ENDSWITCH       reduce using rule 28 (expresion -> valor .)
    CASE            reduce using rule 28 (expresion -> valor .)
    DEFAULT         reduce using rule 28 (expresion -> valor .)
    PLUS            reduce using rule 35 (operaArit -> valor .)
    MINUS           reduce using rule 35 (operaArit -> valor .)
    TIMES           reduce using rule 35 (operaArit -> valor .)
    DIVIDE          reduce using rule 35 (operaArit -> valor .)
    MODULO          reduce using rule 35 (operaArit -> valor .)
    POTENCIA        reduce using rule 35 (operaArit -> valor .)
    PLUSEQUAL       reduce using rule 35 (operaArit -> valor .)
    EQ              shift and go to state 85
    NEQ             shift and go to state 86
    STRICTEQ        shift and go to state 87
    STRICTNEQ       shift and go to state 88
    LT              shift and go to state 89
    GT              shift and go to state 90
    LEQ             shift and go to state 91
    GEQ             shift and go to state 92

  ! EQ              [ reduce using rule 28 (expresion -> valor .) ]
  ! NEQ             [ reduce using rule 28 (expresion -> valor .) ]
  ! STRICTEQ        [ reduce using rule 28 (expresion -> valor .) ]
  ! STRICTNEQ       [ reduce using rule 28 (expresion -> valor .) ]
  ! LT              [ reduce using rule 28 (expresion -> valor .) ]
  ! GT              [ reduce using rule 28 (expresion -> valor .) ]
  ! LEQ             [ reduce using rule 28 (expresion -> valor .) ]
  ! GEQ             [ reduce using rule 28 (expresion -> valor .) ]
  ! SEMICOLON       [ reduce using rule 35 (operaArit -> valor .) ]
  ! AND             [ reduce using rule 35 (operaArit -> valor .) ]
  ! LOGICAL_AND     [ reduce using rule 35 (operaArit -> valor .) ]
  ! OR              [ reduce using rule 35 (operaArit -> valor .) ]
  ! LOGICAL_OR      [ reduce using rule 35 (operaArit -> valor .) ]
  ! EQ              [ reduce using rule 35 (operaArit -> valor .) ]
  ! NEQ             [ reduce using rule 35 (operaArit -> valor .) ]
  ! STRICTEQ        [ reduce using rule 35 (operaArit -> valor .) ]
  ! STRICTNEQ       [ reduce using rule 35 (operaArit -> valor .) ]
  ! LT              [ reduce using rule 35 (operaArit -> valor .) ]
  ! GT              [ reduce using rule 35 (operaArit -> valor .) ]
  ! LEQ             [ reduce using rule 35 (operaArit -> valor .) ]
  ! GEQ             [ reduce using rule 35 (operaArit -> valor .) ]
  ! VARIABLE        [ reduce using rule 35 (operaArit -> valor .) ]
  ! ECHO            [ reduce using rule 35 (operaArit -> valor .) ]
  ! PRINT           [ reduce using rule 35 (operaArit -> valor .) ]
  ! TRY             [ reduce using rule 35 (operaArit -> valor .) ]
  ! FUNCTION        [ reduce using rule 35 (operaArit -> valor .) ]
  ! RETURN          [ reduce using rule 35 (operaArit -> valor .) ]
  ! ID              [ reduce using rule 35 (operaArit -> valor .) ]
  ! EMPTY           [ reduce using rule 35 (operaArit -> valor .) ]
  ! CLASS           [ reduce using rule 35 (operaArit -> valor .) ]
  ! INTERFACE       [ reduce using rule 35 (operaArit -> valor .) ]
  ! INCLUDE         [ reduce using rule 35 (operaArit -> valor .) ]
  ! NAMESPACE       [ reduce using rule 35 (operaArit -> valor .) ]
  ! THROW           [ reduce using rule 35 (operaArit -> valor .) ]
  ! CONST           [ reduce using rule 35 (operaArit -> valor .) ]
  ! THIS            [ reduce using rule 35 (operaArit -> valor .) ]
  ! INT             [ reduce using rule 35 (operaArit -> valor .) ]
  ! FLOAT           [ reduce using rule 35 (operaArit -> valor .) ]
  ! STRING          [ reduce using rule 35 (operaArit -> valor .) ]
  ! BOOL            [ reduce using rule 35 (operaArit -> valor .) ]
  ! NULL            [ reduce using rule 35 (operaArit -> valor .) ]
  ! ARRAY           [ reduce using rule 35 (operaArit -> valor .) ]
  ! LPAREN          [ reduce using rule 35 (operaArit -> valor .) ]
  ! ABSTRACT        [ reduce using rule 35 (operaArit -> valor .) ]
  ! PRIVATE         [ reduce using rule 35 (operaArit -> valor .) ]
  ! PROTECTED       [ reduce using rule 35 (operaArit -> valor .) ]
  ! PUBLIC          [ reduce using rule 35 (operaArit -> valor .) ]
  ! STATIC          [ reduce using rule 35 (operaArit -> valor .) ]
  ! FINAL           [ reduce using rule 35 (operaArit -> valor .) ]
  ! IF              [ reduce using rule 35 (operaArit -> valor .) ]
  ! WHILE           [ reduce using rule 35 (operaArit -> valor .) ]
  ! DO              [ reduce using rule 35 (operaArit -> valor .) ]
  ! SWITCH          [ reduce using rule 35 (operaArit -> valor .) ]
  ! FOREACH         [ reduce using rule 35 (operaArit -> valor .) ]
  ! FOR             [ reduce using rule 35 (operaArit -> valor .) ]
  ! CLOSETAG        [ reduce using rule 35 (operaArit -> valor .) ]
  ! RPAREN          [ reduce using rule 35 (operaArit -> valor .) ]
  ! RBRACE          [ reduce using rule 35 (operaArit -> valor .) ]
  ! BREAK           [ reduce using rule 35 (operaArit -> valor .) ]
  ! ENDSWITCH       [ reduce using rule 35 (operaArit -> valor .) ]
  ! CASE            [ reduce using rule 35 (operaArit -> valor .) ]
  ! DEFAULT         [ reduce using rule 35 (operaArit -> valor .) ]

    opSymbol                       shift and go to state 102

state 115

    (30) expresion -> comparacion .

    SEMICOLON       reduce using rule 30 (expresion -> comparacion .)
    AND             reduce using rule 30 (expresion -> comparacion .)
    LOGICAL_AND     reduce using rule 30 (expresion -> comparacion .)
    OR              reduce using rule 30 (expresion -> comparacion .)
    LOGICAL_OR      reduce using rule 30 (expresion -> comparacion .)
    EQ              reduce using rule 30 (expresion -> comparacion .)
    NEQ             reduce using rule 30 (expresion -> comparacion .)
    STRICTEQ        reduce using rule 30 (expresion -> comparacion .)
    STRICTNEQ       reduce using rule 30 (expresion -> comparacion .)
    LT              reduce using rule 30 (expresion -> comparacion .)
    GT              reduce using rule 30 (expresion -> comparacion .)
    LEQ             reduce using rule 30 (expresion -> comparacion .)
    GEQ             reduce using rule 30 (expresion -> comparacion .)
    VARIABLE        reduce using rule 30 (expresion -> comparacion .)
    ECHO            reduce using rule 30 (expresion -> comparacion .)
    PRINT           reduce using rule 30 (expresion -> comparacion .)
    TRY             reduce using rule 30 (expresion -> comparacion .)
    FUNCTION        reduce using rule 30 (expresion -> comparacion .)
    RETURN          reduce using rule 30 (expresion -> comparacion .)
    ID              reduce using rule 30 (expresion -> comparacion .)
    EMPTY           reduce using rule 30 (expresion -> comparacion .)
    CLASS           reduce using rule 30 (expresion -> comparacion .)
    INTERFACE       reduce using rule 30 (expresion -> comparacion .)
    INCLUDE         reduce using rule 30 (expresion -> comparacion .)
    NAMESPACE       reduce using rule 30 (expresion -> comparacion .)
    THROW           reduce using rule 30 (expresion -> comparacion .)
    CONST           reduce using rule 30 (expresion -> comparacion .)
    THIS            reduce using rule 30 (expresion -> comparacion .)
    INT             reduce using rule 30 (expresion -> comparacion .)
    FLOAT           reduce using rule 30 (expresion -> comparacion .)
    STRING          reduce using rule 30 (expresion -> comparacion .)
    BOOL            reduce using rule 30 (expresion -> comparacion .)
    NULL            reduce using rule 30 (expresion -> comparacion .)
    ARRAY           reduce using rule 30 (expresion -> comparacion .)
    LPAREN          reduce using rule 30 (expresion -> comparacion .)
    ABSTRACT        reduce using rule 30 (expresion -> comparacion .)
    PRIVATE         reduce using rule 30 (expresion -> comparacion .)
    PROTECTED       reduce using rule 30 (expresion -> comparacion .)
    PUBLIC          reduce using rule 30 (expresion -> comparacion .)
    STATIC          reduce using rule 30 (expresion -> comparacion .)
    FINAL           reduce using rule 30 (expresion -> comparacion .)
    IF              reduce using rule 30 (expresion -> comparacion .)
    WHILE           reduce using rule 30 (expresion -> comparacion .)
    DO              reduce using rule 30 (expresion -> comparacion .)
    SWITCH          reduce using rule 30 (expresion -> comparacion .)
    FOREACH         reduce using rule 30 (expresion -> comparacion .)
    FOR             reduce using rule 30 (expresion -> comparacion .)
    CLOSETAG        reduce using rule 30 (expresion -> comparacion .)
    RPAREN          reduce using rule 30 (expresion -> comparacion .)
    RBRACE          reduce using rule 30 (expresion -> comparacion .)
    BREAK           reduce using rule 30 (expresion -> comparacion .)
    ENDSWITCH       reduce using rule 30 (expresion -> comparacion .)
    CASE            reduce using rule 30 (expresion -> comparacion .)
    DEFAULT         reduce using rule 30 (expresion -> comparacion .)


state 116

    (163) llamadaFuncion -> EMPTY LPAREN . argumentos RPAREN
    (165) llamadaFuncion -> EMPTY LPAREN . argumentos RPAREN SEMICOLON
    (142) argumentos -> . argumento
    (143) argumentos -> . argumento COMMA argumentos
    (144) argumentos -> . empty
    (145) argumento -> . type VARIABLE
    (146) argumento -> . VARIABLE EQUALS valor
    (147) argumento -> . type VARIABLE EQUALS valor
    (148) argumento -> . operaArit
    (66) empty -> .
    (149) type -> . INT_TYPE
    (150) type -> . FLOAT_TYPE
    (151) type -> . STRING_TYPE
    (152) type -> . BOOL_TYPE
    (153) type -> . ARRAY_TYPE
    (154) type -> . VOID
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    VARIABLE        shift and go to state 171
    RPAREN          reduce using rule 66 (empty -> .)
    INT_TYPE        shift and go to state 174
    FLOAT_TYPE      shift and go to state 175
    STRING_TYPE     shift and go to state 176
    BOOL_TYPE       shift and go to state 177
    ARRAY_TYPE      shift and go to state 178
    VOID            shift and go to state 179
    LPAREN          shift and go to state 166
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    argumentos                     shift and go to state 181
    argumento                      shift and go to state 168
    empty                          shift and go to state 169
    type                           shift and go to state 170
    valor                          shift and go to state 172
    operaArit                      shift and go to state 173
    llamadaFuncion                 shift and go to state 101

state 117

    (166) classDeclarate -> CLASS ID . LBRACE classBody RBRACE
    (167) classDeclarate -> CLASS ID . EXTENDS ID LBRACE classBody RBRACE
    (177) classInterface -> CLASS ID . IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> CLASS ID . EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    LBRACE          shift and go to state 182
    EXTENDS         shift and go to state 183
    IMPLEMENTS      shift and go to state 184


state 118

    (168) classDeclarate -> data CLASS . ID LBRACE classBody RBRACE
    (179) classInterface -> data CLASS . ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> data CLASS . ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    ID              shift and go to state 185


state 119

    (189) interface -> INTERFACE ID . LBRACE classBody RBRACE

    LBRACE          shift and go to state 186


state 120

    (190) includes -> INCLUDE STRING . SEMICOLON
    (191) includes -> INCLUDE STRING . DOT STRING SEMICOLON

    SEMICOLON       shift and go to state 187
    DOT             shift and go to state 188


state 121

    (192) namespace -> NAMESPACE ID . SEMICOLON

    SEMICOLON       shift and go to state 189


state 122

    (194) throw -> THROW NEW . EXCEPTION LPAREN repiteValores RPAREN SEMICOLON

    EXCEPTION       shift and go to state 190


state 123

    (195) throw -> THROW valor . SEMICOLON

    SEMICOLON       shift and go to state 191


state 124

    (197) constdeclaration -> CONST ID . EQUALS valor SEMICOLON

    EQUALS          shift and go to state 192


state 125

    (198) thisdeclaration -> THIS ARROW . ID SEMICOLON
    (199) thisdeclaration -> THIS ARROW . ID LPAREN RPAREN SEMICOLON

    ID              shift and go to state 193


state 126

    (36) operaArit -> operaArit operador . operaArit
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 166
    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    operaArit                      shift and go to state 194
    valor                          shift and go to state 172
    llamadaFuncion                 shift and go to state 101

state 127

    (49) operador -> PLUS .

    LPAREN          reduce using rule 49 (operador -> PLUS .)
    INT             reduce using rule 49 (operador -> PLUS .)
    VARIABLE        reduce using rule 49 (operador -> PLUS .)
    FLOAT           reduce using rule 49 (operador -> PLUS .)
    STRING          reduce using rule 49 (operador -> PLUS .)
    BOOL            reduce using rule 49 (operador -> PLUS .)
    NULL            reduce using rule 49 (operador -> PLUS .)
    ARRAY           reduce using rule 49 (operador -> PLUS .)
    ID              reduce using rule 49 (operador -> PLUS .)
    EMPTY           reduce using rule 49 (operador -> PLUS .)


state 128

    (50) operador -> MINUS .

    LPAREN          reduce using rule 50 (operador -> MINUS .)
    INT             reduce using rule 50 (operador -> MINUS .)
    VARIABLE        reduce using rule 50 (operador -> MINUS .)
    FLOAT           reduce using rule 50 (operador -> MINUS .)
    STRING          reduce using rule 50 (operador -> MINUS .)
    BOOL            reduce using rule 50 (operador -> MINUS .)
    NULL            reduce using rule 50 (operador -> MINUS .)
    ARRAY           reduce using rule 50 (operador -> MINUS .)
    ID              reduce using rule 50 (operador -> MINUS .)
    EMPTY           reduce using rule 50 (operador -> MINUS .)


state 129

    (51) operador -> TIMES .

    LPAREN          reduce using rule 51 (operador -> TIMES .)
    INT             reduce using rule 51 (operador -> TIMES .)
    VARIABLE        reduce using rule 51 (operador -> TIMES .)
    FLOAT           reduce using rule 51 (operador -> TIMES .)
    STRING          reduce using rule 51 (operador -> TIMES .)
    BOOL            reduce using rule 51 (operador -> TIMES .)
    NULL            reduce using rule 51 (operador -> TIMES .)
    ARRAY           reduce using rule 51 (operador -> TIMES .)
    ID              reduce using rule 51 (operador -> TIMES .)
    EMPTY           reduce using rule 51 (operador -> TIMES .)


state 130

    (52) operador -> DIVIDE .

    LPAREN          reduce using rule 52 (operador -> DIVIDE .)
    INT             reduce using rule 52 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 52 (operador -> DIVIDE .)
    FLOAT           reduce using rule 52 (operador -> DIVIDE .)
    STRING          reduce using rule 52 (operador -> DIVIDE .)
    BOOL            reduce using rule 52 (operador -> DIVIDE .)
    NULL            reduce using rule 52 (operador -> DIVIDE .)
    ARRAY           reduce using rule 52 (operador -> DIVIDE .)
    ID              reduce using rule 52 (operador -> DIVIDE .)
    EMPTY           reduce using rule 52 (operador -> DIVIDE .)


state 131

    (53) operador -> MODULO .

    LPAREN          reduce using rule 53 (operador -> MODULO .)
    INT             reduce using rule 53 (operador -> MODULO .)
    VARIABLE        reduce using rule 53 (operador -> MODULO .)
    FLOAT           reduce using rule 53 (operador -> MODULO .)
    STRING          reduce using rule 53 (operador -> MODULO .)
    BOOL            reduce using rule 53 (operador -> MODULO .)
    NULL            reduce using rule 53 (operador -> MODULO .)
    ARRAY           reduce using rule 53 (operador -> MODULO .)
    ID              reduce using rule 53 (operador -> MODULO .)
    EMPTY           reduce using rule 53 (operador -> MODULO .)


state 132

    (54) operador -> POTENCIA .

    LPAREN          reduce using rule 54 (operador -> POTENCIA .)
    INT             reduce using rule 54 (operador -> POTENCIA .)
    VARIABLE        reduce using rule 54 (operador -> POTENCIA .)
    FLOAT           reduce using rule 54 (operador -> POTENCIA .)
    STRING          reduce using rule 54 (operador -> POTENCIA .)
    BOOL            reduce using rule 54 (operador -> POTENCIA .)
    NULL            reduce using rule 54 (operador -> POTENCIA .)
    ARRAY           reduce using rule 54 (operador -> POTENCIA .)
    ID              reduce using rule 54 (operador -> POTENCIA .)
    EMPTY           reduce using rule 54 (operador -> POTENCIA .)


state 133

    (55) operador -> PLUSEQUAL .

    LPAREN          reduce using rule 55 (operador -> PLUSEQUAL .)
    INT             reduce using rule 55 (operador -> PLUSEQUAL .)
    VARIABLE        reduce using rule 55 (operador -> PLUSEQUAL .)
    FLOAT           reduce using rule 55 (operador -> PLUSEQUAL .)
    STRING          reduce using rule 55 (operador -> PLUSEQUAL .)
    BOOL            reduce using rule 55 (operador -> PLUSEQUAL .)
    NULL            reduce using rule 55 (operador -> PLUSEQUAL .)
    ARRAY           reduce using rule 55 (operador -> PLUSEQUAL .)
    ID              reduce using rule 55 (operador -> PLUSEQUAL .)
    EMPTY           reduce using rule 55 (operador -> PLUSEQUAL .)


state 134

    (75) if -> IF LPAREN . conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> IF LPAREN . conditions RPAREN body
    (80) conditions -> . condition
    (81) conditions -> . condition opLogic conditions
    (82) conditions -> . LPAREN conditions RPAREN
    (83) condition -> . valor
    (84) condition -> . valor opSymbol valor
    (85) condition -> . NOT condition
    (86) condition -> . LPAREN conditions RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 195
    NOT             shift and go to state 199
    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    conditions                     shift and go to state 196
    condition                      shift and go to state 197
    valor                          shift and go to state 198
    llamadaFuncion                 shift and go to state 101

state 135

    (107) while -> WHILE LPAREN . condition RPAREN LBRACE body RBRACE
    (108) while -> WHILE LPAREN . condition RPAREN LBRACE RBRACE
    (83) condition -> . valor
    (84) condition -> . valor opSymbol valor
    (85) condition -> . NOT condition
    (86) condition -> . LPAREN conditions RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    NOT             shift and go to state 199
    LPAREN          shift and go to state 200
    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    condition                      shift and go to state 201
    valor                          shift and go to state 198
    llamadaFuncion                 shift and go to state 101

state 136

    (109) dowhile -> DO LBRACE . body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (99) body -> . sentenciaList
    (100) body -> . empty
    (101) sentenciaList -> . sentencia
    (102) sentenciaList -> . sentencia sentenciaList
    (66) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (58) impresion -> . ECHO imprimir SEMICOLON
    (59) impresion -> . PRINT imprimir SEMICOLON
    (67) estructurasPrograma -> . controlStructure
    (68) estructurasPrograma -> . dataStructure
    (155) try -> . TRY LBRACE body RBRACE catchs
    (156) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (161) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN expresion SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (166) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (167) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (168) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . classInterface
    (189) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (160) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (190) includes -> . INCLUDE STRING SEMICOLON
    (191) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (192) namespace -> . NAMESPACE ID SEMICOLON
    (193) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (194) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> . THROW valor SEMICOLON
    (196) instance -> . VARIABLE INSTANCEOF ID
    (197) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (198) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (199) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (200) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (201) minuse -> . VARIABLE MINUSEQUAL INT
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (69) controlStructure -> . if
    (70) controlStructure -> . for
    (71) controlStructure -> . while
    (72) controlStructure -> . dowhile
    (73) controlStructure -> . switch
    (74) controlStructure -> . foreach
    (124) dataStructure -> . array
    (183) data -> . ABSTRACT
    (184) data -> . PRIVATE
    (185) data -> . PROTECTED
    (186) data -> . PUBLIC
    (187) data -> . STATIC
    (188) data -> . FINAL
    (177) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (179) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (75) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> . IF LPAREN conditions RPAREN body
    (103) for -> . forStatement
    (107) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (109) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (110) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (118) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (125) array -> . VARIABLE EQUALS arrays SEMICOLON
    (126) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) array -> . map
    (104) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (132) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 66 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 30
    PRINT           shift and go to state 31
    TRY             shift and go to state 34
    FUNCTION        shift and go to state 35
    RETURN          shift and go to state 37
    ID              shift and go to state 36
    EMPTY           shift and go to state 38
    CLASS           shift and go to state 39
    INTERFACE       shift and go to state 42
    INCLUDE         shift and go to state 43
    NAMESPACE       shift and go to state 45
    THROW           shift and go to state 46
    CONST           shift and go to state 47
    THIS            shift and go to state 48
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ABSTRACT        shift and go to state 62
    PRIVATE         shift and go to state 63
    PROTECTED       shift and go to state 64
    PUBLIC          shift and go to state 65
    STATIC          shift and go to state 66
    FINAL           shift and go to state 67
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    DO              shift and go to state 71
    SWITCH          shift and go to state 72
    FOREACH         shift and go to state 73
    FOR             shift and go to state 75

    body                           shift and go to state 202
    sentenciaList                  shift and go to state 162
    empty                          shift and go to state 163
    sentencia                      shift and go to state 164
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    expresion                      shift and go to state 27
    valor                          shift and go to state 29
    controlStructure               shift and go to state 32
    dataStructure                  shift and go to state 33
    data                           shift and go to state 40
    classInterface                 shift and go to state 41
    operaArit                      shift and go to state 54
    if                             shift and go to state 55
    for                            shift and go to state 56
    while                          shift and go to state 57
    dowhile                        shift and go to state 58
    switch                         shift and go to state 59
    foreach                        shift and go to state 60
    array                          shift and go to state 61
    forStatement                   shift and go to state 69
    map                            shift and go to state 74

state 137

    (110) switch -> SWITCH LPAREN . valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> SWITCH LPAREN . valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    valor                          shift and go to state 203
    llamadaFuncion                 shift and go to state 101

state 138

    (118) foreach -> FOREACH LPAREN . VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE

    VARIABLE        shift and go to state 204


state 139

    (104) forStatement -> FOR LPAREN . forcondition RPAREN LBRACE body RBRACE
    (105) forcondition -> . VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (106) forcondition -> . VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    VARIABLE        shift and go to state 206

    forcondition                   shift and go to state 205

state 140

    (27) asignacion -> VARIABLE EQUALS expresion . SEMICOLON
    (29) expresion -> expresion . opLogic expresion
    (57) comparacion -> expresion . opSymbol expresion
    (95) opLogic -> . AND
    (96) opLogic -> . LOGICAL_AND
    (97) opLogic -> . OR
    (98) opLogic -> . LOGICAL_OR
    (87) opSymbol -> . EQ
    (88) opSymbol -> . NEQ
    (89) opSymbol -> . STRICTEQ
    (90) opSymbol -> . STRICTNEQ
    (91) opSymbol -> . LT
    (92) opSymbol -> . GT
    (93) opSymbol -> . LEQ
    (94) opSymbol -> . GEQ

    SEMICOLON       shift and go to state 207
    AND             shift and go to state 93
    LOGICAL_AND     shift and go to state 94
    OR              shift and go to state 95
    LOGICAL_OR      shift and go to state 96
    EQ              shift and go to state 85
    NEQ             shift and go to state 86
    STRICTEQ        shift and go to state 87
    STRICTNEQ       shift and go to state 88
    LT              shift and go to state 89
    GT              shift and go to state 90
    LEQ             shift and go to state 91
    GEQ             shift and go to state 92

    opLogic                        shift and go to state 84
    opSymbol                       shift and go to state 83

state 141

    (34) asignacion_fgets -> VARIABLE EQUALS FGETS . LPAREN STDIN RPAREN SEMICOLON

    LPAREN          shift and go to state 208


state 142

    (193) anonymousFunction -> VARIABLE EQUALS FN . LPAREN RPAREN ARROWMAP comparacion SEMICOLON

    LPAREN          shift and go to state 209


state 143

    (125) array -> VARIABLE EQUALS arrays . SEMICOLON

    SEMICOLON       shift and go to state 210


state 144

    (126) array -> VARIABLE EQUALS LBRACKET . arrayAnidado RBRACKET SEMICOLON
    (132) map -> VARIABLE EQUALS LBRACKET . maps RBRACKET SEMICOLON
    (129) arrays -> LBRACKET . repiteValores RBRACKET
    (130) arrayAnidado -> . arrays
    (131) arrayAnidado -> . arrays COMMA arrayAnidado
    (134) maps -> . mapArrow
    (135) maps -> . mapArrow COMMA maps
    (64) repiteValores -> . valor
    (65) repiteValores -> . valor COMMA repiteValores
    (129) arrays -> . LBRACKET repiteValores RBRACKET
    (136) mapArrow -> . valor ARROWMAP valor
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LBRACKET        shift and go to state 211
    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    arrayAnidado                   shift and go to state 212
    maps                           shift and go to state 213
    repiteValores                  shift and go to state 214
    arrays                         shift and go to state 215
    mapArrow                       shift and go to state 216
    valor                          shift and go to state 217
    llamadaFuncion                 shift and go to state 101

state 145

    (127) array -> VARIABLE EQUALS ARRAY . LPAREN repiteValores RPAREN SEMICOLON
    (133) map -> VARIABLE EQUALS ARRAY . LPAREN maps RPAREN SEMICOLON
    (47) valor -> ARRAY .

    LPAREN          shift and go to state 218
    EQ              reduce using rule 47 (valor -> ARRAY .)
    NEQ             reduce using rule 47 (valor -> ARRAY .)
    STRICTEQ        reduce using rule 47 (valor -> ARRAY .)
    STRICTNEQ       reduce using rule 47 (valor -> ARRAY .)
    LT              reduce using rule 47 (valor -> ARRAY .)
    GT              reduce using rule 47 (valor -> ARRAY .)
    LEQ             reduce using rule 47 (valor -> ARRAY .)
    GEQ             reduce using rule 47 (valor -> ARRAY .)
    SEMICOLON       reduce using rule 47 (valor -> ARRAY .)
    AND             reduce using rule 47 (valor -> ARRAY .)
    LOGICAL_AND     reduce using rule 47 (valor -> ARRAY .)
    OR              reduce using rule 47 (valor -> ARRAY .)
    LOGICAL_OR      reduce using rule 47 (valor -> ARRAY .)
    PLUS            reduce using rule 47 (valor -> ARRAY .)
    MINUS           reduce using rule 47 (valor -> ARRAY .)
    TIMES           reduce using rule 47 (valor -> ARRAY .)
    DIVIDE          reduce using rule 47 (valor -> ARRAY .)
    MODULO          reduce using rule 47 (valor -> ARRAY .)
    POTENCIA        reduce using rule 47 (valor -> ARRAY .)
    PLUSEQUAL       reduce using rule 47 (valor -> ARRAY .)


state 146

    (160) objeto -> VARIABLE ARROW ID . LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 219


state 147

    (196) instance -> VARIABLE INSTANCEOF ID .

    VARIABLE        reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    ECHO            reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    PRINT           reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    TRY             reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    FUNCTION        reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    RETURN          reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    ID              reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    EMPTY           reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    CLASS           reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    INTERFACE       reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    INCLUDE         reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    NAMESPACE       reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    THROW           reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    CONST           reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    THIS            reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    INT             reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    FLOAT           reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    STRING          reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    BOOL            reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    NULL            reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    ARRAY           reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    LPAREN          reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    ABSTRACT        reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    PRIVATE         reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    PROTECTED       reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    PUBLIC          reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    STATIC          reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    FINAL           reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    IF              reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    WHILE           reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    DO              reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    SWITCH          reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    FOREACH         reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    FOR             reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    CLOSETAG        reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    RBRACE          reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    BREAK           reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    ENDSWITCH       reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    CASE            reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)
    DEFAULT         reduce using rule 196 (instance -> VARIABLE INSTANCEOF ID .)


state 148

    (200) concatenate -> VARIABLE CONCATENATEEQUAL STRING .

    VARIABLE        reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    ECHO            reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    PRINT           reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    TRY             reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    FUNCTION        reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    RETURN          reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    ID              reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    EMPTY           reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    CLASS           reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    INTERFACE       reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    INCLUDE         reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    NAMESPACE       reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    THROW           reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    CONST           reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    THIS            reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    INT             reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    FLOAT           reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    STRING          reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    BOOL            reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    NULL            reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    ARRAY           reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    LPAREN          reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    ABSTRACT        reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    PRIVATE         reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    PROTECTED       reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    PUBLIC          reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    STATIC          reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    FINAL           reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    IF              reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    WHILE           reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    DO              reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    SWITCH          reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    FOREACH         reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    FOR             reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    CLOSETAG        reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    RBRACE          reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    BREAK           reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    ENDSWITCH       reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    CASE            reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    DEFAULT         reduce using rule 200 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)


state 149

    (201) minuse -> VARIABLE MINUSEQUAL INT .

    VARIABLE        reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    ECHO            reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    PRINT           reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    TRY             reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    FUNCTION        reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    RETURN          reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    ID              reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    EMPTY           reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    CLASS           reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    INTERFACE       reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    INCLUDE         reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    NAMESPACE       reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    THROW           reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    CONST           reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    THIS            reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    INT             reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    FLOAT           reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    STRING          reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    BOOL            reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    NULL            reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    ARRAY           reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    LPAREN          reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    ABSTRACT        reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    PRIVATE         reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    PROTECTED       reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    PUBLIC          reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    STATIC          reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    FINAL           reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    IF              reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    WHILE           reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    DO              reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    SWITCH          reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    FOREACH         reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    FOR             reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    CLOSETAG        reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    RBRACE          reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    BREAK           reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    ENDSWITCH       reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    CASE            reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)
    DEFAULT         reduce using rule 201 (minuse -> VARIABLE MINUSEQUAL INT .)


state 150

    (57) comparacion -> expresion opSymbol expresion .
    (29) expresion -> expresion . opLogic expresion
    (57) comparacion -> expresion . opSymbol expresion
    (95) opLogic -> . AND
    (96) opLogic -> . LOGICAL_AND
    (97) opLogic -> . OR
    (98) opLogic -> . LOGICAL_OR
    (87) opSymbol -> . EQ
    (88) opSymbol -> . NEQ
    (89) opSymbol -> . STRICTEQ
    (90) opSymbol -> . STRICTNEQ
    (91) opSymbol -> . LT
    (92) opSymbol -> . GT
    (93) opSymbol -> . LEQ
    (94) opSymbol -> . GEQ

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICTEQ resolved as shift
  ! shift/reduce conflict for STRICTNEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
    VARIABLE        reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    ECHO            reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    PRINT           reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    TRY             reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    FUNCTION        reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    RETURN          reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    ID              reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    EMPTY           reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    CLASS           reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    INTERFACE       reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    INCLUDE         reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    NAMESPACE       reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    THROW           reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    CONST           reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    THIS            reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    INT             reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    FLOAT           reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    STRING          reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    BOOL            reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    NULL            reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    ARRAY           reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    LPAREN          reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    ABSTRACT        reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    PRIVATE         reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    PROTECTED       reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    PUBLIC          reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    STATIC          reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    FINAL           reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    IF              reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    WHILE           reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    DO              reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    SWITCH          reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    FOREACH         reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    FOR             reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    CLOSETAG        reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    RPAREN          reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    SEMICOLON       reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    RBRACE          reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    BREAK           reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    ENDSWITCH       reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    CASE            reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    DEFAULT         reduce using rule 57 (comparacion -> expresion opSymbol expresion .)
    AND             shift and go to state 93
    LOGICAL_AND     shift and go to state 94
    OR              shift and go to state 95
    LOGICAL_OR      shift and go to state 96
    EQ              shift and go to state 85
    NEQ             shift and go to state 86
    STRICTEQ        shift and go to state 87
    STRICTNEQ       shift and go to state 88
    LT              shift and go to state 89
    GT              shift and go to state 90
    LEQ             shift and go to state 91
    GEQ             shift and go to state 92

  ! EQ              [ reduce using rule 57 (comparacion -> expresion opSymbol expresion .) ]
  ! NEQ             [ reduce using rule 57 (comparacion -> expresion opSymbol expresion .) ]
  ! STRICTEQ        [ reduce using rule 57 (comparacion -> expresion opSymbol expresion .) ]
  ! STRICTNEQ       [ reduce using rule 57 (comparacion -> expresion opSymbol expresion .) ]
  ! LT              [ reduce using rule 57 (comparacion -> expresion opSymbol expresion .) ]
  ! GT              [ reduce using rule 57 (comparacion -> expresion opSymbol expresion .) ]
  ! LEQ             [ reduce using rule 57 (comparacion -> expresion opSymbol expresion .) ]
  ! GEQ             [ reduce using rule 57 (comparacion -> expresion opSymbol expresion .) ]
  ! AND             [ reduce using rule 57 (comparacion -> expresion opSymbol expresion .) ]
  ! LOGICAL_AND     [ reduce using rule 57 (comparacion -> expresion opSymbol expresion .) ]
  ! OR              [ reduce using rule 57 (comparacion -> expresion opSymbol expresion .) ]
  ! LOGICAL_OR      [ reduce using rule 57 (comparacion -> expresion opSymbol expresion .) ]

    opSymbol                       shift and go to state 83
    opLogic                        shift and go to state 84

state 151

    (29) expresion -> expresion opLogic expresion .
    (29) expresion -> expresion . opLogic expresion
    (57) comparacion -> expresion . opSymbol expresion
    (95) opLogic -> . AND
    (96) opLogic -> . LOGICAL_AND
    (97) opLogic -> . OR
    (98) opLogic -> . LOGICAL_OR
    (87) opSymbol -> . EQ
    (88) opSymbol -> . NEQ
    (89) opSymbol -> . STRICTEQ
    (90) opSymbol -> . STRICTNEQ
    (91) opSymbol -> . LT
    (92) opSymbol -> . GT
    (93) opSymbol -> . LEQ
    (94) opSymbol -> . GEQ

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for STRICTEQ resolved as shift
  ! shift/reduce conflict for STRICTNEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
    RPAREN          reduce using rule 29 (expresion -> expresion opLogic expresion .)
    SEMICOLON       reduce using rule 29 (expresion -> expresion opLogic expresion .)
    VARIABLE        reduce using rule 29 (expresion -> expresion opLogic expresion .)
    ECHO            reduce using rule 29 (expresion -> expresion opLogic expresion .)
    PRINT           reduce using rule 29 (expresion -> expresion opLogic expresion .)
    TRY             reduce using rule 29 (expresion -> expresion opLogic expresion .)
    FUNCTION        reduce using rule 29 (expresion -> expresion opLogic expresion .)
    RETURN          reduce using rule 29 (expresion -> expresion opLogic expresion .)
    ID              reduce using rule 29 (expresion -> expresion opLogic expresion .)
    EMPTY           reduce using rule 29 (expresion -> expresion opLogic expresion .)
    CLASS           reduce using rule 29 (expresion -> expresion opLogic expresion .)
    INTERFACE       reduce using rule 29 (expresion -> expresion opLogic expresion .)
    INCLUDE         reduce using rule 29 (expresion -> expresion opLogic expresion .)
    NAMESPACE       reduce using rule 29 (expresion -> expresion opLogic expresion .)
    THROW           reduce using rule 29 (expresion -> expresion opLogic expresion .)
    CONST           reduce using rule 29 (expresion -> expresion opLogic expresion .)
    THIS            reduce using rule 29 (expresion -> expresion opLogic expresion .)
    INT             reduce using rule 29 (expresion -> expresion opLogic expresion .)
    FLOAT           reduce using rule 29 (expresion -> expresion opLogic expresion .)
    STRING          reduce using rule 29 (expresion -> expresion opLogic expresion .)
    BOOL            reduce using rule 29 (expresion -> expresion opLogic expresion .)
    NULL            reduce using rule 29 (expresion -> expresion opLogic expresion .)
    ARRAY           reduce using rule 29 (expresion -> expresion opLogic expresion .)
    LPAREN          reduce using rule 29 (expresion -> expresion opLogic expresion .)
    ABSTRACT        reduce using rule 29 (expresion -> expresion opLogic expresion .)
    PRIVATE         reduce using rule 29 (expresion -> expresion opLogic expresion .)
    PROTECTED       reduce using rule 29 (expresion -> expresion opLogic expresion .)
    PUBLIC          reduce using rule 29 (expresion -> expresion opLogic expresion .)
    STATIC          reduce using rule 29 (expresion -> expresion opLogic expresion .)
    FINAL           reduce using rule 29 (expresion -> expresion opLogic expresion .)
    IF              reduce using rule 29 (expresion -> expresion opLogic expresion .)
    WHILE           reduce using rule 29 (expresion -> expresion opLogic expresion .)
    DO              reduce using rule 29 (expresion -> expresion opLogic expresion .)
    SWITCH          reduce using rule 29 (expresion -> expresion opLogic expresion .)
    FOREACH         reduce using rule 29 (expresion -> expresion opLogic expresion .)
    FOR             reduce using rule 29 (expresion -> expresion opLogic expresion .)
    CLOSETAG        reduce using rule 29 (expresion -> expresion opLogic expresion .)
    RBRACE          reduce using rule 29 (expresion -> expresion opLogic expresion .)
    BREAK           reduce using rule 29 (expresion -> expresion opLogic expresion .)
    ENDSWITCH       reduce using rule 29 (expresion -> expresion opLogic expresion .)
    CASE            reduce using rule 29 (expresion -> expresion opLogic expresion .)
    DEFAULT         reduce using rule 29 (expresion -> expresion opLogic expresion .)
    AND             shift and go to state 93
    LOGICAL_AND     shift and go to state 94
    OR              shift and go to state 95
    LOGICAL_OR      shift and go to state 96
    EQ              shift and go to state 85
    NEQ             shift and go to state 86
    STRICTEQ        shift and go to state 87
    STRICTNEQ       shift and go to state 88
    LT              shift and go to state 89
    GT              shift and go to state 90
    LEQ             shift and go to state 91
    GEQ             shift and go to state 92

  ! EQ              [ reduce using rule 29 (expresion -> expresion opLogic expresion .) ]
  ! NEQ             [ reduce using rule 29 (expresion -> expresion opLogic expresion .) ]
  ! STRICTEQ        [ reduce using rule 29 (expresion -> expresion opLogic expresion .) ]
  ! STRICTNEQ       [ reduce using rule 29 (expresion -> expresion opLogic expresion .) ]
  ! LT              [ reduce using rule 29 (expresion -> expresion opLogic expresion .) ]
  ! GT              [ reduce using rule 29 (expresion -> expresion opLogic expresion .) ]
  ! LEQ             [ reduce using rule 29 (expresion -> expresion opLogic expresion .) ]
  ! GEQ             [ reduce using rule 29 (expresion -> expresion opLogic expresion .) ]
  ! AND             [ reduce using rule 29 (expresion -> expresion opLogic expresion .) ]
  ! LOGICAL_AND     [ reduce using rule 29 (expresion -> expresion opLogic expresion .) ]
  ! OR              [ reduce using rule 29 (expresion -> expresion opLogic expresion .) ]
  ! LOGICAL_OR      [ reduce using rule 29 (expresion -> expresion opLogic expresion .) ]

    opLogic                        shift and go to state 84
    opSymbol                       shift and go to state 83

state 152

    (31) expresion -> LPAREN comparacion RPAREN .

    EQ              reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    NEQ             reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    STRICTEQ        reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    STRICTNEQ       reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    LT              reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    GT              reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    LEQ             reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    GEQ             reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    AND             reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    LOGICAL_AND     reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    OR              reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    LOGICAL_OR      reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    RPAREN          reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    SEMICOLON       reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    VARIABLE        reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    ECHO            reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    PRINT           reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    TRY             reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    FUNCTION        reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    RETURN          reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    ID              reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    EMPTY           reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    CLASS           reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    INTERFACE       reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    INCLUDE         reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    NAMESPACE       reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    THROW           reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    CONST           reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    THIS            reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    INT             reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    FLOAT           reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    STRING          reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    BOOL            reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    NULL            reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    ARRAY           reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    LPAREN          reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    ABSTRACT        reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    PRIVATE         reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    PROTECTED       reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    PUBLIC          reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    STATIC          reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    FINAL           reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    IF              reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    WHILE           reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    DO              reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    SWITCH          reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    FOREACH         reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    FOR             reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    CLOSETAG        reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    RBRACE          reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    BREAK           reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    ENDSWITCH       reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    CASE            reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)
    DEFAULT         reduce using rule 31 (expresion -> LPAREN comparacion RPAREN .)


state 153

    (33) expresion -> LPAREN expresion RPAREN .

    EQ              reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    NEQ             reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    STRICTEQ        reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    STRICTNEQ       reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    LT              reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    GT              reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    LEQ             reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    GEQ             reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    AND             reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    LOGICAL_AND     reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    OR              reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    LOGICAL_OR      reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    VARIABLE        reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    ECHO            reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    PRINT           reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    TRY             reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    FUNCTION        reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    RETURN          reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    ID              reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    EMPTY           reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    CLASS           reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    INTERFACE       reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    INCLUDE         reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    NAMESPACE       reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    THROW           reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    CONST           reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    THIS            reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    INT             reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    FLOAT           reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    STRING          reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    BOOL            reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    NULL            reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    ARRAY           reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    LPAREN          reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    ABSTRACT        reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    PRIVATE         reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    PROTECTED       reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    PUBLIC          reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    STATIC          reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    FINAL           reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    IF              reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    WHILE           reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    DO              reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    SWITCH          reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    FOREACH         reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    FOR             reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    CLOSETAG        reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    RBRACE          reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    BREAK           reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    ENDSWITCH       reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    CASE            reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)
    DEFAULT         reduce using rule 33 (expresion -> LPAREN expresion RPAREN .)


state 154

    (37) operaArit -> LPAREN operaArit RPAREN .

    PLUS            reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    MINUS           reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    TIMES           reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    DIVIDE          reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    MODULO          reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    POTENCIA        reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    PLUSEQUAL       reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    EQ              reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    NEQ             reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    STRICTEQ        reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    STRICTNEQ       reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    LT              reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    GT              reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    LEQ             reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    GEQ             reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    AND             reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    LOGICAL_AND     reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    OR              reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    LOGICAL_OR      reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    RPAREN          reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    SEMICOLON       reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    VARIABLE        reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    ECHO            reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    PRINT           reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    TRY             reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    FUNCTION        reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    RETURN          reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    ID              reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    EMPTY           reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    CLASS           reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    INTERFACE       reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    INCLUDE         reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    NAMESPACE       reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    THROW           reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    CONST           reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    THIS            reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    INT             reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    FLOAT           reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    STRING          reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    BOOL            reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    NULL            reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    ARRAY           reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    LPAREN          reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    ABSTRACT        reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    PRIVATE         reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    PROTECTED       reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    PUBLIC          reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    STATIC          reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    FINAL           reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    IF              reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    WHILE           reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    DO              reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    SWITCH          reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    FOREACH         reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    FOR             reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    CLOSETAG        reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    RBRACE          reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    BREAK           reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    ENDSWITCH       reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    CASE            reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    DEFAULT         reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)
    COMMA           reduce using rule 37 (operaArit -> LPAREN operaArit RPAREN .)


state 155

    (56) comparacion -> valor opSymbol valor .

    VARIABLE        reduce using rule 56 (comparacion -> valor opSymbol valor .)
    ECHO            reduce using rule 56 (comparacion -> valor opSymbol valor .)
    PRINT           reduce using rule 56 (comparacion -> valor opSymbol valor .)
    TRY             reduce using rule 56 (comparacion -> valor opSymbol valor .)
    FUNCTION        reduce using rule 56 (comparacion -> valor opSymbol valor .)
    RETURN          reduce using rule 56 (comparacion -> valor opSymbol valor .)
    ID              reduce using rule 56 (comparacion -> valor opSymbol valor .)
    EMPTY           reduce using rule 56 (comparacion -> valor opSymbol valor .)
    CLASS           reduce using rule 56 (comparacion -> valor opSymbol valor .)
    INTERFACE       reduce using rule 56 (comparacion -> valor opSymbol valor .)
    INCLUDE         reduce using rule 56 (comparacion -> valor opSymbol valor .)
    NAMESPACE       reduce using rule 56 (comparacion -> valor opSymbol valor .)
    THROW           reduce using rule 56 (comparacion -> valor opSymbol valor .)
    CONST           reduce using rule 56 (comparacion -> valor opSymbol valor .)
    THIS            reduce using rule 56 (comparacion -> valor opSymbol valor .)
    INT             reduce using rule 56 (comparacion -> valor opSymbol valor .)
    FLOAT           reduce using rule 56 (comparacion -> valor opSymbol valor .)
    STRING          reduce using rule 56 (comparacion -> valor opSymbol valor .)
    BOOL            reduce using rule 56 (comparacion -> valor opSymbol valor .)
    NULL            reduce using rule 56 (comparacion -> valor opSymbol valor .)
    ARRAY           reduce using rule 56 (comparacion -> valor opSymbol valor .)
    LPAREN          reduce using rule 56 (comparacion -> valor opSymbol valor .)
    ABSTRACT        reduce using rule 56 (comparacion -> valor opSymbol valor .)
    PRIVATE         reduce using rule 56 (comparacion -> valor opSymbol valor .)
    PROTECTED       reduce using rule 56 (comparacion -> valor opSymbol valor .)
    PUBLIC          reduce using rule 56 (comparacion -> valor opSymbol valor .)
    STATIC          reduce using rule 56 (comparacion -> valor opSymbol valor .)
    FINAL           reduce using rule 56 (comparacion -> valor opSymbol valor .)
    IF              reduce using rule 56 (comparacion -> valor opSymbol valor .)
    WHILE           reduce using rule 56 (comparacion -> valor opSymbol valor .)
    DO              reduce using rule 56 (comparacion -> valor opSymbol valor .)
    SWITCH          reduce using rule 56 (comparacion -> valor opSymbol valor .)
    FOREACH         reduce using rule 56 (comparacion -> valor opSymbol valor .)
    FOR             reduce using rule 56 (comparacion -> valor opSymbol valor .)
    CLOSETAG        reduce using rule 56 (comparacion -> valor opSymbol valor .)
    EQ              reduce using rule 56 (comparacion -> valor opSymbol valor .)
    NEQ             reduce using rule 56 (comparacion -> valor opSymbol valor .)
    STRICTEQ        reduce using rule 56 (comparacion -> valor opSymbol valor .)
    STRICTNEQ       reduce using rule 56 (comparacion -> valor opSymbol valor .)
    LT              reduce using rule 56 (comparacion -> valor opSymbol valor .)
    GT              reduce using rule 56 (comparacion -> valor opSymbol valor .)
    LEQ             reduce using rule 56 (comparacion -> valor opSymbol valor .)
    GEQ             reduce using rule 56 (comparacion -> valor opSymbol valor .)
    AND             reduce using rule 56 (comparacion -> valor opSymbol valor .)
    LOGICAL_AND     reduce using rule 56 (comparacion -> valor opSymbol valor .)
    OR              reduce using rule 56 (comparacion -> valor opSymbol valor .)
    LOGICAL_OR      reduce using rule 56 (comparacion -> valor opSymbol valor .)
    RPAREN          reduce using rule 56 (comparacion -> valor opSymbol valor .)
    SEMICOLON       reduce using rule 56 (comparacion -> valor opSymbol valor .)
    RBRACE          reduce using rule 56 (comparacion -> valor opSymbol valor .)
    BREAK           reduce using rule 56 (comparacion -> valor opSymbol valor .)
    ENDSWITCH       reduce using rule 56 (comparacion -> valor opSymbol valor .)
    CASE            reduce using rule 56 (comparacion -> valor opSymbol valor .)
    DEFAULT         reduce using rule 56 (comparacion -> valor opSymbol valor .)


state 156

    (58) impresion -> ECHO imprimir SEMICOLON .

    VARIABLE        reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    ECHO            reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    PRINT           reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    TRY             reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    FUNCTION        reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    RETURN          reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    ID              reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    EMPTY           reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    CLASS           reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    INTERFACE       reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    INCLUDE         reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    NAMESPACE       reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    THROW           reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    CONST           reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    THIS            reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    INT             reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    FLOAT           reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    STRING          reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    BOOL            reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    NULL            reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    ARRAY           reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    LPAREN          reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    ABSTRACT        reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    PRIVATE         reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    PROTECTED       reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    PUBLIC          reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    STATIC          reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    FINAL           reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    IF              reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    WHILE           reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    DO              reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    SWITCH          reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    FOREACH         reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    FOR             reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    CLOSETAG        reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    RBRACE          reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    BREAK           reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    ENDSWITCH       reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    CASE            reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)
    DEFAULT         reduce using rule 58 (impresion -> ECHO imprimir SEMICOLON .)


state 157

    (60) imprimir -> LPAREN repiteValores . RPAREN

    RPAREN          shift and go to state 220


state 158

    (61) imprimir -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 61 (imprimir -> LPAREN RPAREN .)


state 159

    (65) repiteValores -> valor COMMA . repiteValores
    (64) repiteValores -> . valor
    (65) repiteValores -> . valor COMMA repiteValores
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    valor                          shift and go to state 107
    repiteValores                  shift and go to state 221
    llamadaFuncion                 shift and go to state 101

state 160

    (59) impresion -> PRINT imprimir SEMICOLON .

    VARIABLE        reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    ECHO            reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    PRINT           reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    TRY             reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    FUNCTION        reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    RETURN          reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    ID              reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    EMPTY           reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    CLASS           reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    INTERFACE       reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    INCLUDE         reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    NAMESPACE       reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    THROW           reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    CONST           reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    THIS            reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    INT             reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    FLOAT           reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    STRING          reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    BOOL            reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    NULL            reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    ARRAY           reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    LPAREN          reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    ABSTRACT        reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    PRIVATE         reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    PROTECTED       reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    PUBLIC          reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    STATIC          reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    FINAL           reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    IF              reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    WHILE           reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    DO              reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    SWITCH          reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    FOREACH         reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    FOR             reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    CLOSETAG        reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    RBRACE          reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    BREAK           reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    ENDSWITCH       reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    CASE            reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)
    DEFAULT         reduce using rule 59 (impresion -> PRINT imprimir SEMICOLON .)


state 161

    (155) try -> TRY LBRACE body . RBRACE catchs
    (156) try -> TRY LBRACE body . RBRACE catchs FINALLY LBRACE body RBRACE

    RBRACE          shift and go to state 222


state 162

    (99) body -> sentenciaList .

    RBRACE          reduce using rule 99 (body -> sentenciaList .)
    VARIABLE        reduce using rule 99 (body -> sentenciaList .)
    ECHO            reduce using rule 99 (body -> sentenciaList .)
    PRINT           reduce using rule 99 (body -> sentenciaList .)
    TRY             reduce using rule 99 (body -> sentenciaList .)
    FUNCTION        reduce using rule 99 (body -> sentenciaList .)
    RETURN          reduce using rule 99 (body -> sentenciaList .)
    ID              reduce using rule 99 (body -> sentenciaList .)
    EMPTY           reduce using rule 99 (body -> sentenciaList .)
    CLASS           reduce using rule 99 (body -> sentenciaList .)
    INTERFACE       reduce using rule 99 (body -> sentenciaList .)
    INCLUDE         reduce using rule 99 (body -> sentenciaList .)
    NAMESPACE       reduce using rule 99 (body -> sentenciaList .)
    THROW           reduce using rule 99 (body -> sentenciaList .)
    CONST           reduce using rule 99 (body -> sentenciaList .)
    THIS            reduce using rule 99 (body -> sentenciaList .)
    INT             reduce using rule 99 (body -> sentenciaList .)
    FLOAT           reduce using rule 99 (body -> sentenciaList .)
    STRING          reduce using rule 99 (body -> sentenciaList .)
    BOOL            reduce using rule 99 (body -> sentenciaList .)
    NULL            reduce using rule 99 (body -> sentenciaList .)
    ARRAY           reduce using rule 99 (body -> sentenciaList .)
    LPAREN          reduce using rule 99 (body -> sentenciaList .)
    ABSTRACT        reduce using rule 99 (body -> sentenciaList .)
    PRIVATE         reduce using rule 99 (body -> sentenciaList .)
    PROTECTED       reduce using rule 99 (body -> sentenciaList .)
    PUBLIC          reduce using rule 99 (body -> sentenciaList .)
    STATIC          reduce using rule 99 (body -> sentenciaList .)
    FINAL           reduce using rule 99 (body -> sentenciaList .)
    IF              reduce using rule 99 (body -> sentenciaList .)
    WHILE           reduce using rule 99 (body -> sentenciaList .)
    DO              reduce using rule 99 (body -> sentenciaList .)
    SWITCH          reduce using rule 99 (body -> sentenciaList .)
    FOREACH         reduce using rule 99 (body -> sentenciaList .)
    FOR             reduce using rule 99 (body -> sentenciaList .)
    CLOSETAG        reduce using rule 99 (body -> sentenciaList .)
    BREAK           reduce using rule 99 (body -> sentenciaList .)
    ENDSWITCH       reduce using rule 99 (body -> sentenciaList .)
    CASE            reduce using rule 99 (body -> sentenciaList .)
    DEFAULT         reduce using rule 99 (body -> sentenciaList .)


state 163

    (100) body -> empty .

    RBRACE          reduce using rule 100 (body -> empty .)
    VARIABLE        reduce using rule 100 (body -> empty .)
    ECHO            reduce using rule 100 (body -> empty .)
    PRINT           reduce using rule 100 (body -> empty .)
    TRY             reduce using rule 100 (body -> empty .)
    FUNCTION        reduce using rule 100 (body -> empty .)
    RETURN          reduce using rule 100 (body -> empty .)
    ID              reduce using rule 100 (body -> empty .)
    EMPTY           reduce using rule 100 (body -> empty .)
    CLASS           reduce using rule 100 (body -> empty .)
    INTERFACE       reduce using rule 100 (body -> empty .)
    INCLUDE         reduce using rule 100 (body -> empty .)
    NAMESPACE       reduce using rule 100 (body -> empty .)
    THROW           reduce using rule 100 (body -> empty .)
    CONST           reduce using rule 100 (body -> empty .)
    THIS            reduce using rule 100 (body -> empty .)
    INT             reduce using rule 100 (body -> empty .)
    FLOAT           reduce using rule 100 (body -> empty .)
    STRING          reduce using rule 100 (body -> empty .)
    BOOL            reduce using rule 100 (body -> empty .)
    NULL            reduce using rule 100 (body -> empty .)
    ARRAY           reduce using rule 100 (body -> empty .)
    LPAREN          reduce using rule 100 (body -> empty .)
    ABSTRACT        reduce using rule 100 (body -> empty .)
    PRIVATE         reduce using rule 100 (body -> empty .)
    PROTECTED       reduce using rule 100 (body -> empty .)
    PUBLIC          reduce using rule 100 (body -> empty .)
    STATIC          reduce using rule 100 (body -> empty .)
    FINAL           reduce using rule 100 (body -> empty .)
    IF              reduce using rule 100 (body -> empty .)
    WHILE           reduce using rule 100 (body -> empty .)
    DO              reduce using rule 100 (body -> empty .)
    SWITCH          reduce using rule 100 (body -> empty .)
    FOREACH         reduce using rule 100 (body -> empty .)
    FOR             reduce using rule 100 (body -> empty .)
    CLOSETAG        reduce using rule 100 (body -> empty .)
    BREAK           reduce using rule 100 (body -> empty .)
    ENDSWITCH       reduce using rule 100 (body -> empty .)
    CASE            reduce using rule 100 (body -> empty .)
    DEFAULT         reduce using rule 100 (body -> empty .)


state 164

    (101) sentenciaList -> sentencia .
    (102) sentenciaList -> sentencia . sentenciaList
    (101) sentenciaList -> . sentencia
    (102) sentenciaList -> . sentencia sentenciaList
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (58) impresion -> . ECHO imprimir SEMICOLON
    (59) impresion -> . PRINT imprimir SEMICOLON
    (67) estructurasPrograma -> . controlStructure
    (68) estructurasPrograma -> . dataStructure
    (155) try -> . TRY LBRACE body RBRACE catchs
    (156) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (161) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN expresion SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (166) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (167) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (168) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . classInterface
    (189) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (160) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (190) includes -> . INCLUDE STRING SEMICOLON
    (191) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (192) namespace -> . NAMESPACE ID SEMICOLON
    (193) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (194) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> . THROW valor SEMICOLON
    (196) instance -> . VARIABLE INSTANCEOF ID
    (197) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (198) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (199) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (200) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (201) minuse -> . VARIABLE MINUSEQUAL INT
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (69) controlStructure -> . if
    (70) controlStructure -> . for
    (71) controlStructure -> . while
    (72) controlStructure -> . dowhile
    (73) controlStructure -> . switch
    (74) controlStructure -> . foreach
    (124) dataStructure -> . array
    (183) data -> . ABSTRACT
    (184) data -> . PRIVATE
    (185) data -> . PROTECTED
    (186) data -> . PUBLIC
    (187) data -> . STATIC
    (188) data -> . FINAL
    (177) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (179) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (75) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> . IF LPAREN conditions RPAREN body
    (103) for -> . forStatement
    (107) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (109) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (110) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (118) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (125) array -> . VARIABLE EQUALS arrays SEMICOLON
    (126) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) array -> . map
    (104) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (132) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for EMPTY resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for NAMESPACE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ABSTRACT resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    RBRACE          reduce using rule 101 (sentenciaList -> sentencia .)
    CLOSETAG        reduce using rule 101 (sentenciaList -> sentencia .)
    BREAK           reduce using rule 101 (sentenciaList -> sentencia .)
    ENDSWITCH       reduce using rule 101 (sentenciaList -> sentencia .)
    CASE            reduce using rule 101 (sentenciaList -> sentencia .)
    DEFAULT         reduce using rule 101 (sentenciaList -> sentencia .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 30
    PRINT           shift and go to state 31
    TRY             shift and go to state 34
    FUNCTION        shift and go to state 35
    RETURN          shift and go to state 37
    ID              shift and go to state 36
    EMPTY           shift and go to state 38
    CLASS           shift and go to state 39
    INTERFACE       shift and go to state 42
    INCLUDE         shift and go to state 43
    NAMESPACE       shift and go to state 45
    THROW           shift and go to state 46
    CONST           shift and go to state 47
    THIS            shift and go to state 48
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ABSTRACT        shift and go to state 62
    PRIVATE         shift and go to state 63
    PROTECTED       shift and go to state 64
    PUBLIC          shift and go to state 65
    STATIC          shift and go to state 66
    FINAL           shift and go to state 67
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    DO              shift and go to state 71
    SWITCH          shift and go to state 72
    FOREACH         shift and go to state 73
    FOR             shift and go to state 75

  ! VARIABLE        [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! ECHO            [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! PRINT           [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! TRY             [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! FUNCTION        [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! RETURN          [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! ID              [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! EMPTY           [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! CLASS           [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! INTERFACE       [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! INCLUDE         [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! NAMESPACE       [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! THROW           [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! CONST           [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! THIS            [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! INT             [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! FLOAT           [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! STRING          [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! BOOL            [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! NULL            [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! ARRAY           [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! LPAREN          [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! ABSTRACT        [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! PRIVATE         [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! PROTECTED       [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! PUBLIC          [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! STATIC          [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! FINAL           [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! IF              [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! WHILE           [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! DO              [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! SWITCH          [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! FOREACH         [ reduce using rule 101 (sentenciaList -> sentencia .) ]
  ! FOR             [ reduce using rule 101 (sentenciaList -> sentencia .) ]

    sentencia                      shift and go to state 164
    sentenciaList                  shift and go to state 223
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    expresion                      shift and go to state 27
    valor                          shift and go to state 29
    controlStructure               shift and go to state 32
    dataStructure                  shift and go to state 33
    data                           shift and go to state 40
    classInterface                 shift and go to state 41
    operaArit                      shift and go to state 54
    if                             shift and go to state 55
    for                            shift and go to state 56
    while                          shift and go to state 57
    dowhile                        shift and go to state 58
    switch                         shift and go to state 59
    foreach                        shift and go to state 60
    array                          shift and go to state 61
    forStatement                   shift and go to state 69
    map                            shift and go to state 74

state 165

    (161) funcionDeclaration -> FUNCTION ID LPAREN . argumentos RPAREN LBRACE body RBRACE
    (142) argumentos -> . argumento
    (143) argumentos -> . argumento COMMA argumentos
    (144) argumentos -> . empty
    (145) argumento -> . type VARIABLE
    (146) argumento -> . VARIABLE EQUALS valor
    (147) argumento -> . type VARIABLE EQUALS valor
    (148) argumento -> . operaArit
    (66) empty -> .
    (149) type -> . INT_TYPE
    (150) type -> . FLOAT_TYPE
    (151) type -> . STRING_TYPE
    (152) type -> . BOOL_TYPE
    (153) type -> . ARRAY_TYPE
    (154) type -> . VOID
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    VARIABLE        shift and go to state 171
    RPAREN          reduce using rule 66 (empty -> .)
    INT_TYPE        shift and go to state 174
    FLOAT_TYPE      shift and go to state 175
    STRING_TYPE     shift and go to state 176
    BOOL_TYPE       shift and go to state 177
    ARRAY_TYPE      shift and go to state 178
    VOID            shift and go to state 179
    LPAREN          shift and go to state 166
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    argumentos                     shift and go to state 224
    argumento                      shift and go to state 168
    empty                          shift and go to state 169
    type                           shift and go to state 170
    valor                          shift and go to state 172
    operaArit                      shift and go to state 173
    llamadaFuncion                 shift and go to state 101

state 166

    (37) operaArit -> LPAREN . operaArit RPAREN
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 166
    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    operaArit                      shift and go to state 225
    valor                          shift and go to state 172
    llamadaFuncion                 shift and go to state 101

state 167

    (162) llamadaFuncion -> ID LPAREN argumentos . RPAREN SEMICOLON
    (164) llamadaFuncion -> ID LPAREN argumentos . RPAREN

    RPAREN          shift and go to state 226


state 168

    (142) argumentos -> argumento .
    (143) argumentos -> argumento . COMMA argumentos

    RPAREN          reduce using rule 142 (argumentos -> argumento .)
    COMMA           shift and go to state 227


state 169

    (144) argumentos -> empty .

    RPAREN          reduce using rule 144 (argumentos -> empty .)


state 170

    (145) argumento -> type . VARIABLE
    (147) argumento -> type . VARIABLE EQUALS valor

    VARIABLE        shift and go to state 228


state 171

    (146) argumento -> VARIABLE . EQUALS valor
    (42) valor -> VARIABLE .

    EQUALS          shift and go to state 229
    PLUS            reduce using rule 42 (valor -> VARIABLE .)
    MINUS           reduce using rule 42 (valor -> VARIABLE .)
    TIMES           reduce using rule 42 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 42 (valor -> VARIABLE .)
    MODULO          reduce using rule 42 (valor -> VARIABLE .)
    POTENCIA        reduce using rule 42 (valor -> VARIABLE .)
    PLUSEQUAL       reduce using rule 42 (valor -> VARIABLE .)
    COMMA           reduce using rule 42 (valor -> VARIABLE .)
    RPAREN          reduce using rule 42 (valor -> VARIABLE .)


state 172

    (35) operaArit -> valor .

    PLUS            reduce using rule 35 (operaArit -> valor .)
    MINUS           reduce using rule 35 (operaArit -> valor .)
    TIMES           reduce using rule 35 (operaArit -> valor .)
    DIVIDE          reduce using rule 35 (operaArit -> valor .)
    MODULO          reduce using rule 35 (operaArit -> valor .)
    POTENCIA        reduce using rule 35 (operaArit -> valor .)
    PLUSEQUAL       reduce using rule 35 (operaArit -> valor .)
    COMMA           reduce using rule 35 (operaArit -> valor .)
    RPAREN          reduce using rule 35 (operaArit -> valor .)
    EQ              reduce using rule 35 (operaArit -> valor .)
    NEQ             reduce using rule 35 (operaArit -> valor .)
    STRICTEQ        reduce using rule 35 (operaArit -> valor .)
    STRICTNEQ       reduce using rule 35 (operaArit -> valor .)
    LT              reduce using rule 35 (operaArit -> valor .)
    GT              reduce using rule 35 (operaArit -> valor .)
    LEQ             reduce using rule 35 (operaArit -> valor .)
    GEQ             reduce using rule 35 (operaArit -> valor .)
    AND             reduce using rule 35 (operaArit -> valor .)
    LOGICAL_AND     reduce using rule 35 (operaArit -> valor .)
    OR              reduce using rule 35 (operaArit -> valor .)
    LOGICAL_OR      reduce using rule 35 (operaArit -> valor .)
    SEMICOLON       reduce using rule 35 (operaArit -> valor .)
    VARIABLE        reduce using rule 35 (operaArit -> valor .)
    ECHO            reduce using rule 35 (operaArit -> valor .)
    PRINT           reduce using rule 35 (operaArit -> valor .)
    TRY             reduce using rule 35 (operaArit -> valor .)
    FUNCTION        reduce using rule 35 (operaArit -> valor .)
    RETURN          reduce using rule 35 (operaArit -> valor .)
    ID              reduce using rule 35 (operaArit -> valor .)
    EMPTY           reduce using rule 35 (operaArit -> valor .)
    CLASS           reduce using rule 35 (operaArit -> valor .)
    INTERFACE       reduce using rule 35 (operaArit -> valor .)
    INCLUDE         reduce using rule 35 (operaArit -> valor .)
    NAMESPACE       reduce using rule 35 (operaArit -> valor .)
    THROW           reduce using rule 35 (operaArit -> valor .)
    CONST           reduce using rule 35 (operaArit -> valor .)
    THIS            reduce using rule 35 (operaArit -> valor .)
    INT             reduce using rule 35 (operaArit -> valor .)
    FLOAT           reduce using rule 35 (operaArit -> valor .)
    STRING          reduce using rule 35 (operaArit -> valor .)
    BOOL            reduce using rule 35 (operaArit -> valor .)
    NULL            reduce using rule 35 (operaArit -> valor .)
    ARRAY           reduce using rule 35 (operaArit -> valor .)
    LPAREN          reduce using rule 35 (operaArit -> valor .)
    ABSTRACT        reduce using rule 35 (operaArit -> valor .)
    PRIVATE         reduce using rule 35 (operaArit -> valor .)
    PROTECTED       reduce using rule 35 (operaArit -> valor .)
    PUBLIC          reduce using rule 35 (operaArit -> valor .)
    STATIC          reduce using rule 35 (operaArit -> valor .)
    FINAL           reduce using rule 35 (operaArit -> valor .)
    IF              reduce using rule 35 (operaArit -> valor .)
    WHILE           reduce using rule 35 (operaArit -> valor .)
    DO              reduce using rule 35 (operaArit -> valor .)
    SWITCH          reduce using rule 35 (operaArit -> valor .)
    FOREACH         reduce using rule 35 (operaArit -> valor .)
    FOR             reduce using rule 35 (operaArit -> valor .)
    CLOSETAG        reduce using rule 35 (operaArit -> valor .)
    RBRACE          reduce using rule 35 (operaArit -> valor .)
    BREAK           reduce using rule 35 (operaArit -> valor .)
    ENDSWITCH       reduce using rule 35 (operaArit -> valor .)
    CASE            reduce using rule 35 (operaArit -> valor .)
    DEFAULT         reduce using rule 35 (operaArit -> valor .)


state 173

    (148) argumento -> operaArit .
    (36) operaArit -> operaArit . operador operaArit
    (49) operador -> . PLUS
    (50) operador -> . MINUS
    (51) operador -> . TIMES
    (52) operador -> . DIVIDE
    (53) operador -> . MODULO
    (54) operador -> . POTENCIA
    (55) operador -> . PLUSEQUAL

    COMMA           reduce using rule 148 (argumento -> operaArit .)
    RPAREN          reduce using rule 148 (argumento -> operaArit .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    TIMES           shift and go to state 129
    DIVIDE          shift and go to state 130
    MODULO          shift and go to state 131
    POTENCIA        shift and go to state 132
    PLUSEQUAL       shift and go to state 133

    operador                       shift and go to state 126

state 174

    (149) type -> INT_TYPE .

    VARIABLE        reduce using rule 149 (type -> INT_TYPE .)
    FUNCTION        reduce using rule 149 (type -> INT_TYPE .)


state 175

    (150) type -> FLOAT_TYPE .

    VARIABLE        reduce using rule 150 (type -> FLOAT_TYPE .)
    FUNCTION        reduce using rule 150 (type -> FLOAT_TYPE .)


state 176

    (151) type -> STRING_TYPE .

    VARIABLE        reduce using rule 151 (type -> STRING_TYPE .)
    FUNCTION        reduce using rule 151 (type -> STRING_TYPE .)


state 177

    (152) type -> BOOL_TYPE .

    VARIABLE        reduce using rule 152 (type -> BOOL_TYPE .)
    FUNCTION        reduce using rule 152 (type -> BOOL_TYPE .)


state 178

    (153) type -> ARRAY_TYPE .

    VARIABLE        reduce using rule 153 (type -> ARRAY_TYPE .)
    FUNCTION        reduce using rule 153 (type -> ARRAY_TYPE .)


state 179

    (154) type -> VOID .

    VARIABLE        reduce using rule 154 (type -> VOID .)
    FUNCTION        reduce using rule 154 (type -> VOID .)


state 180

    (25) returnStatement -> RETURN expresion SEMICOLON .

    VARIABLE        reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    ECHO            reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    PRINT           reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    TRY             reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    FUNCTION        reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    RETURN          reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    ID              reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    EMPTY           reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    CLASS           reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    INTERFACE       reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    INCLUDE         reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    NAMESPACE       reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    THROW           reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    CONST           reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    THIS            reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    INT             reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    FLOAT           reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    STRING          reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    BOOL            reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    NULL            reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    ARRAY           reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    LPAREN          reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    ABSTRACT        reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    PRIVATE         reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    PROTECTED       reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    PUBLIC          reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    STATIC          reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    FINAL           reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    IF              reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    WHILE           reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    DO              reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    SWITCH          reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    FOREACH         reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    FOR             reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    CLOSETAG        reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    RBRACE          reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    BREAK           reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    ENDSWITCH       reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    CASE            reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)
    DEFAULT         reduce using rule 25 (returnStatement -> RETURN expresion SEMICOLON .)


state 181

    (163) llamadaFuncion -> EMPTY LPAREN argumentos . RPAREN
    (165) llamadaFuncion -> EMPTY LPAREN argumentos . RPAREN SEMICOLON

    RPAREN          shift and go to state 230


state 182

    (166) classDeclarate -> CLASS ID LBRACE . classBody RBRACE
    (170) classBody -> . classMember
    (171) classBody -> . classMember classBody
    (172) classMember -> . type VARIABLE SEMICOLON
    (173) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (174) classMember -> . objectInstantiation
    (149) type -> . INT_TYPE
    (150) type -> . FLOAT_TYPE
    (151) type -> . STRING_TYPE
    (152) type -> . BOOL_TYPE
    (153) type -> . ARRAY_TYPE
    (154) type -> . VOID
    (175) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (176) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 174
    FLOAT_TYPE      shift and go to state 175
    STRING_TYPE     shift and go to state 176
    BOOL_TYPE       shift and go to state 177
    ARRAY_TYPE      shift and go to state 178
    VOID            shift and go to state 179
    NEW             shift and go to state 235

    classBody                      shift and go to state 231
    classMember                    shift and go to state 232
    type                           shift and go to state 233
    objectInstantiation            shift and go to state 234

state 183

    (167) classDeclarate -> CLASS ID EXTENDS . ID LBRACE classBody RBRACE
    (178) classInterface -> CLASS ID EXTENDS . ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    ID              shift and go to state 236


state 184

    (177) classInterface -> CLASS ID IMPLEMENTS . impInterface LBRACE classBody RBRACE
    (181) impInterface -> . ID
    (182) impInterface -> . ID COMMA impInterface

    ID              shift and go to state 237

    impInterface                   shift and go to state 238

state 185

    (168) classDeclarate -> data CLASS ID . LBRACE classBody RBRACE
    (179) classInterface -> data CLASS ID . IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> data CLASS ID . EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    LBRACE          shift and go to state 239
    IMPLEMENTS      shift and go to state 240
    EXTENDS         shift and go to state 241


state 186

    (189) interface -> INTERFACE ID LBRACE . classBody RBRACE
    (170) classBody -> . classMember
    (171) classBody -> . classMember classBody
    (172) classMember -> . type VARIABLE SEMICOLON
    (173) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (174) classMember -> . objectInstantiation
    (149) type -> . INT_TYPE
    (150) type -> . FLOAT_TYPE
    (151) type -> . STRING_TYPE
    (152) type -> . BOOL_TYPE
    (153) type -> . ARRAY_TYPE
    (154) type -> . VOID
    (175) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (176) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 174
    FLOAT_TYPE      shift and go to state 175
    STRING_TYPE     shift and go to state 176
    BOOL_TYPE       shift and go to state 177
    ARRAY_TYPE      shift and go to state 178
    VOID            shift and go to state 179
    NEW             shift and go to state 235

    classBody                      shift and go to state 242
    classMember                    shift and go to state 232
    type                           shift and go to state 233
    objectInstantiation            shift and go to state 234

state 187

    (190) includes -> INCLUDE STRING SEMICOLON .

    VARIABLE        reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    ECHO            reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    PRINT           reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    TRY             reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    FUNCTION        reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    RETURN          reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    ID              reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    EMPTY           reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    CLASS           reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    INTERFACE       reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    INCLUDE         reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    NAMESPACE       reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    THROW           reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    CONST           reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    THIS            reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    INT             reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    FLOAT           reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    STRING          reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    BOOL            reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    NULL            reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    ARRAY           reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    LPAREN          reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    ABSTRACT        reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    PRIVATE         reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    PROTECTED       reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    PUBLIC          reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    STATIC          reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    FINAL           reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    IF              reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    WHILE           reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    DO              reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    SWITCH          reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    FOREACH         reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    FOR             reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    CLOSETAG        reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    RBRACE          reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    BREAK           reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    ENDSWITCH       reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    CASE            reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)
    DEFAULT         reduce using rule 190 (includes -> INCLUDE STRING SEMICOLON .)


state 188

    (191) includes -> INCLUDE STRING DOT . STRING SEMICOLON

    STRING          shift and go to state 243


state 189

    (192) namespace -> NAMESPACE ID SEMICOLON .

    VARIABLE        reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    ECHO            reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    PRINT           reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    TRY             reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    FUNCTION        reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    RETURN          reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    ID              reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    EMPTY           reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    CLASS           reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    INTERFACE       reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    INCLUDE         reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    NAMESPACE       reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    THROW           reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    CONST           reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    THIS            reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    INT             reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    FLOAT           reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    STRING          reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    BOOL            reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    NULL            reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    ARRAY           reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    LPAREN          reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    ABSTRACT        reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    PRIVATE         reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    PROTECTED       reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    PUBLIC          reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    STATIC          reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    FINAL           reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    IF              reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    WHILE           reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    DO              reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    SWITCH          reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    FOREACH         reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    FOR             reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    CLOSETAG        reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    RBRACE          reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    BREAK           reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    ENDSWITCH       reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    CASE            reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)
    DEFAULT         reduce using rule 192 (namespace -> NAMESPACE ID SEMICOLON .)


state 190

    (194) throw -> THROW NEW EXCEPTION . LPAREN repiteValores RPAREN SEMICOLON

    LPAREN          shift and go to state 244


state 191

    (195) throw -> THROW valor SEMICOLON .

    VARIABLE        reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    ECHO            reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    PRINT           reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    TRY             reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    FUNCTION        reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    RETURN          reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    ID              reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    EMPTY           reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    CLASS           reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    INTERFACE       reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    INCLUDE         reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    NAMESPACE       reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    THROW           reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    CONST           reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    THIS            reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    INT             reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    FLOAT           reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    STRING          reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    BOOL            reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    NULL            reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    ARRAY           reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    LPAREN          reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    ABSTRACT        reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    PRIVATE         reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    PROTECTED       reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    PUBLIC          reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    STATIC          reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    FINAL           reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    IF              reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    WHILE           reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    DO              reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    SWITCH          reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    FOREACH         reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    FOR             reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    CLOSETAG        reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    RBRACE          reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    BREAK           reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    ENDSWITCH       reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    CASE            reduce using rule 195 (throw -> THROW valor SEMICOLON .)
    DEFAULT         reduce using rule 195 (throw -> THROW valor SEMICOLON .)


state 192

    (197) constdeclaration -> CONST ID EQUALS . valor SEMICOLON
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    valor                          shift and go to state 245
    llamadaFuncion                 shift and go to state 101

state 193

    (198) thisdeclaration -> THIS ARROW ID . SEMICOLON
    (199) thisdeclaration -> THIS ARROW ID . LPAREN RPAREN SEMICOLON

    SEMICOLON       shift and go to state 246
    LPAREN          shift and go to state 247


state 194

    (36) operaArit -> operaArit operador operaArit .
    (36) operaArit -> operaArit . operador operaArit
    (49) operador -> . PLUS
    (50) operador -> . MINUS
    (51) operador -> . TIMES
    (52) operador -> . DIVIDE
    (53) operador -> . MODULO
    (54) operador -> . POTENCIA
    (55) operador -> . PLUSEQUAL

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for POTENCIA resolved as shift
  ! shift/reduce conflict for PLUSEQUAL resolved as shift
    EQ              reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    NEQ             reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    STRICTEQ        reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    STRICTNEQ       reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    LT              reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    GT              reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    LEQ             reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    GEQ             reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    AND             reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    LOGICAL_AND     reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    OR              reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    LOGICAL_OR      reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    RPAREN          reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    SEMICOLON       reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    VARIABLE        reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    ECHO            reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    PRINT           reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    TRY             reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    FUNCTION        reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    RETURN          reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    ID              reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    EMPTY           reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    CLASS           reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    INTERFACE       reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    INCLUDE         reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    NAMESPACE       reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    THROW           reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    CONST           reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    THIS            reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    INT             reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    FLOAT           reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    STRING          reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    BOOL            reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    NULL            reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    ARRAY           reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    LPAREN          reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    ABSTRACT        reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    PRIVATE         reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    PROTECTED       reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    PUBLIC          reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    STATIC          reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    FINAL           reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    IF              reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    WHILE           reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    DO              reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    SWITCH          reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    FOREACH         reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    FOR             reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    CLOSETAG        reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    RBRACE          reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    BREAK           reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    ENDSWITCH       reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    CASE            reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    DEFAULT         reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    COMMA           reduce using rule 36 (operaArit -> operaArit operador operaArit .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    TIMES           shift and go to state 129
    DIVIDE          shift and go to state 130
    MODULO          shift and go to state 131
    POTENCIA        shift and go to state 132
    PLUSEQUAL       shift and go to state 133

  ! PLUS            [ reduce using rule 36 (operaArit -> operaArit operador operaArit .) ]
  ! MINUS           [ reduce using rule 36 (operaArit -> operaArit operador operaArit .) ]
  ! TIMES           [ reduce using rule 36 (operaArit -> operaArit operador operaArit .) ]
  ! DIVIDE          [ reduce using rule 36 (operaArit -> operaArit operador operaArit .) ]
  ! MODULO          [ reduce using rule 36 (operaArit -> operaArit operador operaArit .) ]
  ! POTENCIA        [ reduce using rule 36 (operaArit -> operaArit operador operaArit .) ]
  ! PLUSEQUAL       [ reduce using rule 36 (operaArit -> operaArit operador operaArit .) ]

    operador                       shift and go to state 126

state 195

    (82) conditions -> LPAREN . conditions RPAREN
    (86) condition -> LPAREN . conditions RPAREN
    (80) conditions -> . condition
    (81) conditions -> . condition opLogic conditions
    (82) conditions -> . LPAREN conditions RPAREN
    (83) condition -> . valor
    (84) condition -> . valor opSymbol valor
    (85) condition -> . NOT condition
    (86) condition -> . LPAREN conditions RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 195
    NOT             shift and go to state 199
    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    conditions                     shift and go to state 248
    condition                      shift and go to state 197
    valor                          shift and go to state 198
    llamadaFuncion                 shift and go to state 101

state 196

    (75) if -> IF LPAREN conditions . RPAREN LBRACE body RBRACE else_blocks
    (76) if -> IF LPAREN conditions . RPAREN body

    RPAREN          shift and go to state 249


state 197

    (80) conditions -> condition .
    (81) conditions -> condition . opLogic conditions
    (95) opLogic -> . AND
    (96) opLogic -> . LOGICAL_AND
    (97) opLogic -> . OR
    (98) opLogic -> . LOGICAL_OR

    RPAREN          reduce using rule 80 (conditions -> condition .)
    AND             shift and go to state 93
    LOGICAL_AND     shift and go to state 94
    OR              shift and go to state 95
    LOGICAL_OR      shift and go to state 96

    opLogic                        shift and go to state 250

state 198

    (83) condition -> valor .
    (84) condition -> valor . opSymbol valor
    (87) opSymbol -> . EQ
    (88) opSymbol -> . NEQ
    (89) opSymbol -> . STRICTEQ
    (90) opSymbol -> . STRICTNEQ
    (91) opSymbol -> . LT
    (92) opSymbol -> . GT
    (93) opSymbol -> . LEQ
    (94) opSymbol -> . GEQ

    AND             reduce using rule 83 (condition -> valor .)
    LOGICAL_AND     reduce using rule 83 (condition -> valor .)
    OR              reduce using rule 83 (condition -> valor .)
    LOGICAL_OR      reduce using rule 83 (condition -> valor .)
    RPAREN          reduce using rule 83 (condition -> valor .)
    EQ              shift and go to state 85
    NEQ             shift and go to state 86
    STRICTEQ        shift and go to state 87
    STRICTNEQ       shift and go to state 88
    LT              shift and go to state 89
    GT              shift and go to state 90
    LEQ             shift and go to state 91
    GEQ             shift and go to state 92

    opSymbol                       shift and go to state 251

state 199

    (85) condition -> NOT . condition
    (83) condition -> . valor
    (84) condition -> . valor opSymbol valor
    (85) condition -> . NOT condition
    (86) condition -> . LPAREN conditions RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    NOT             shift and go to state 199
    LPAREN          shift and go to state 200
    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    condition                      shift and go to state 252
    valor                          shift and go to state 198
    llamadaFuncion                 shift and go to state 101

state 200

    (86) condition -> LPAREN . conditions RPAREN
    (80) conditions -> . condition
    (81) conditions -> . condition opLogic conditions
    (82) conditions -> . LPAREN conditions RPAREN
    (83) condition -> . valor
    (84) condition -> . valor opSymbol valor
    (85) condition -> . NOT condition
    (86) condition -> . LPAREN conditions RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 195
    NOT             shift and go to state 199
    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    conditions                     shift and go to state 253
    condition                      shift and go to state 197
    valor                          shift and go to state 198
    llamadaFuncion                 shift and go to state 101

state 201

    (107) while -> WHILE LPAREN condition . RPAREN LBRACE body RBRACE
    (108) while -> WHILE LPAREN condition . RPAREN LBRACE RBRACE

    RPAREN          shift and go to state 254


state 202

    (109) dowhile -> DO LBRACE body . RBRACE WHILE LPAREN condition RPAREN SEMICOLON

    RBRACE          shift and go to state 255


state 203

    (110) switch -> SWITCH LPAREN valor . RPAREN LBRACE caseLists RBRACE
    (111) switch -> SWITCH LPAREN valor . RPAREN COLON caseLists ENDSWITCH SEMICOLON

    RPAREN          shift and go to state 256


state 204

    (118) foreach -> FOREACH LPAREN VARIABLE . AS VARIABLE RPAREN LBRACE body RBRACE

    AS              shift and go to state 257


state 205

    (104) forStatement -> FOR LPAREN forcondition . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 258


state 206

    (105) forcondition -> VARIABLE . EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (106) forcondition -> VARIABLE . EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    EQUALS          shift and go to state 259


state 207

    (27) asignacion -> VARIABLE EQUALS expresion SEMICOLON .

    VARIABLE        reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    ECHO            reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    PRINT           reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    TRY             reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    FUNCTION        reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    RETURN          reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    ID              reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    EMPTY           reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    CLASS           reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    INTERFACE       reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    INCLUDE         reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    NAMESPACE       reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    THROW           reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    CONST           reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    THIS            reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    INT             reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    FLOAT           reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    STRING          reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    BOOL            reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    NULL            reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    ARRAY           reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    LPAREN          reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    ABSTRACT        reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    PRIVATE         reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    PROTECTED       reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    PUBLIC          reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    STATIC          reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    FINAL           reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    IF              reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    WHILE           reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    DO              reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    SWITCH          reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    FOREACH         reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    FOR             reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    CLOSETAG        reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    RBRACE          reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    BREAK           reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    ENDSWITCH       reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    CASE            reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)
    DEFAULT         reduce using rule 27 (asignacion -> VARIABLE EQUALS expresion SEMICOLON .)


state 208

    (34) asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN . STDIN RPAREN SEMICOLON

    STDIN           shift and go to state 260


state 209

    (193) anonymousFunction -> VARIABLE EQUALS FN LPAREN . RPAREN ARROWMAP comparacion SEMICOLON

    RPAREN          shift and go to state 261


state 210

    (125) array -> VARIABLE EQUALS arrays SEMICOLON .

    VARIABLE        reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    ECHO            reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    PRINT           reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    TRY             reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    FUNCTION        reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    RETURN          reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    ID              reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    EMPTY           reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    CLASS           reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    INTERFACE       reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    INCLUDE         reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    NAMESPACE       reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    THROW           reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    CONST           reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    THIS            reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    INT             reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    FLOAT           reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    STRING          reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    BOOL            reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    NULL            reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    ARRAY           reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    LPAREN          reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    ABSTRACT        reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    PRIVATE         reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    PROTECTED       reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    PUBLIC          reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    STATIC          reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    FINAL           reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    IF              reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    WHILE           reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    DO              reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    SWITCH          reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    FOREACH         reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    FOR             reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    CLOSETAG        reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    RBRACE          reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    BREAK           reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    ENDSWITCH       reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    CASE            reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    DEFAULT         reduce using rule 125 (array -> VARIABLE EQUALS arrays SEMICOLON .)


state 211

    (129) arrays -> LBRACKET . repiteValores RBRACKET
    (64) repiteValores -> . valor
    (65) repiteValores -> . valor COMMA repiteValores
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    repiteValores                  shift and go to state 214
    valor                          shift and go to state 107
    llamadaFuncion                 shift and go to state 101

state 212

    (126) array -> VARIABLE EQUALS LBRACKET arrayAnidado . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 262


state 213

    (132) map -> VARIABLE EQUALS LBRACKET maps . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 263


state 214

    (129) arrays -> LBRACKET repiteValores . RBRACKET

    RBRACKET        shift and go to state 264


state 215

    (130) arrayAnidado -> arrays .
    (131) arrayAnidado -> arrays . COMMA arrayAnidado

    RBRACKET        reduce using rule 130 (arrayAnidado -> arrays .)
    COMMA           shift and go to state 265


state 216

    (134) maps -> mapArrow .
    (135) maps -> mapArrow . COMMA maps

    RBRACKET        reduce using rule 134 (maps -> mapArrow .)
    RPAREN          reduce using rule 134 (maps -> mapArrow .)
    COMMA           shift and go to state 266


state 217

    (64) repiteValores -> valor .
    (65) repiteValores -> valor . COMMA repiteValores
    (136) mapArrow -> valor . ARROWMAP valor

    RBRACKET        reduce using rule 64 (repiteValores -> valor .)
    RPAREN          reduce using rule 64 (repiteValores -> valor .)
    COMMA           shift and go to state 159
    ARROWMAP        shift and go to state 267


state 218

    (127) array -> VARIABLE EQUALS ARRAY LPAREN . repiteValores RPAREN SEMICOLON
    (133) map -> VARIABLE EQUALS ARRAY LPAREN . maps RPAREN SEMICOLON
    (64) repiteValores -> . valor
    (65) repiteValores -> . valor COMMA repiteValores
    (134) maps -> . mapArrow
    (135) maps -> . mapArrow COMMA maps
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (136) mapArrow -> . valor ARROWMAP valor
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    repiteValores                  shift and go to state 268
    maps                           shift and go to state 269
    valor                          shift and go to state 217
    mapArrow                       shift and go to state 216
    llamadaFuncion                 shift and go to state 101

state 219

    (160) objeto -> VARIABLE ARROW ID LPAREN . argumentos RPAREN SEMICOLON
    (142) argumentos -> . argumento
    (143) argumentos -> . argumento COMMA argumentos
    (144) argumentos -> . empty
    (145) argumento -> . type VARIABLE
    (146) argumento -> . VARIABLE EQUALS valor
    (147) argumento -> . type VARIABLE EQUALS valor
    (148) argumento -> . operaArit
    (66) empty -> .
    (149) type -> . INT_TYPE
    (150) type -> . FLOAT_TYPE
    (151) type -> . STRING_TYPE
    (152) type -> . BOOL_TYPE
    (153) type -> . ARRAY_TYPE
    (154) type -> . VOID
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    VARIABLE        shift and go to state 171
    RPAREN          reduce using rule 66 (empty -> .)
    INT_TYPE        shift and go to state 174
    FLOAT_TYPE      shift and go to state 175
    STRING_TYPE     shift and go to state 176
    BOOL_TYPE       shift and go to state 177
    ARRAY_TYPE      shift and go to state 178
    VOID            shift and go to state 179
    LPAREN          shift and go to state 166
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    argumentos                     shift and go to state 270
    argumento                      shift and go to state 168
    empty                          shift and go to state 169
    type                           shift and go to state 170
    valor                          shift and go to state 172
    operaArit                      shift and go to state 173
    llamadaFuncion                 shift and go to state 101

state 220

    (60) imprimir -> LPAREN repiteValores RPAREN .

    SEMICOLON       reduce using rule 60 (imprimir -> LPAREN repiteValores RPAREN .)


state 221

    (65) repiteValores -> valor COMMA repiteValores .

    SEMICOLON       reduce using rule 65 (repiteValores -> valor COMMA repiteValores .)
    RPAREN          reduce using rule 65 (repiteValores -> valor COMMA repiteValores .)
    RBRACKET        reduce using rule 65 (repiteValores -> valor COMMA repiteValores .)


state 222

    (155) try -> TRY LBRACE body RBRACE . catchs
    (156) try -> TRY LBRACE body RBRACE . catchs FINALLY LBRACE body RBRACE
    (158) catchs -> . catch
    (159) catchs -> . catch catchs
    (157) catch -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE

    CATCH           shift and go to state 273

    catchs                         shift and go to state 271
    catch                          shift and go to state 272

state 223

    (102) sentenciaList -> sentencia sentenciaList .

    RBRACE          reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    VARIABLE        reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    ECHO            reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    PRINT           reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    TRY             reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    FUNCTION        reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    RETURN          reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    ID              reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    EMPTY           reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    CLASS           reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    INTERFACE       reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    INCLUDE         reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    NAMESPACE       reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    THROW           reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    CONST           reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    THIS            reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    INT             reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    FLOAT           reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    STRING          reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    BOOL            reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    NULL            reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    ARRAY           reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    LPAREN          reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    ABSTRACT        reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    PRIVATE         reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    PROTECTED       reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    PUBLIC          reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    STATIC          reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    FINAL           reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    IF              reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    WHILE           reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    DO              reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    SWITCH          reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    FOREACH         reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    FOR             reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    CLOSETAG        reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    BREAK           reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    ENDSWITCH       reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    CASE            reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)
    DEFAULT         reduce using rule 102 (sentenciaList -> sentencia sentenciaList .)


state 224

    (161) funcionDeclaration -> FUNCTION ID LPAREN argumentos . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 274


state 225

    (37) operaArit -> LPAREN operaArit . RPAREN
    (36) operaArit -> operaArit . operador operaArit
    (49) operador -> . PLUS
    (50) operador -> . MINUS
    (51) operador -> . TIMES
    (52) operador -> . DIVIDE
    (53) operador -> . MODULO
    (54) operador -> . POTENCIA
    (55) operador -> . PLUSEQUAL

    RPAREN          shift and go to state 154
    PLUS            shift and go to state 127
    MINUS           shift and go to state 128
    TIMES           shift and go to state 129
    DIVIDE          shift and go to state 130
    MODULO          shift and go to state 131
    POTENCIA        shift and go to state 132
    PLUSEQUAL       shift and go to state 133

    operador                       shift and go to state 126

state 226

    (162) llamadaFuncion -> ID LPAREN argumentos RPAREN . SEMICOLON
    (164) llamadaFuncion -> ID LPAREN argumentos RPAREN .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 275
    VARIABLE        reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ECHO            reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    PRINT           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    TRY             reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    FUNCTION        reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    RETURN          reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ID              reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    EMPTY           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    CLASS           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    INTERFACE       reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    INCLUDE         reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    NAMESPACE       reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    THROW           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    CONST           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    THIS            reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    INT             reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    FLOAT           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    STRING          reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    BOOL            reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    NULL            reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ARRAY           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    LPAREN          reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ABSTRACT        reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    PRIVATE         reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    PROTECTED       reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    PUBLIC          reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    STATIC          reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    FINAL           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    IF              reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    WHILE           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    DO              reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    SWITCH          reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    FOREACH         reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    FOR             reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    CLOSETAG        reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    EQ              reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    NEQ             reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    STRICTEQ        reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    STRICTNEQ       reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    LT              reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    GT              reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    LEQ             reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    GEQ             reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    AND             reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    LOGICAL_AND     reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    OR              reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    LOGICAL_OR      reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    PLUS            reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    MINUS           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    TIMES           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    DIVIDE          reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    MODULO          reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    POTENCIA        reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    PLUSEQUAL       reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    RPAREN          reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    COMMA           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    RBRACE          reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    BREAK           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ENDSWITCH       reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    CASE            reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    DEFAULT         reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ARROWMAP        reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    RBRACKET        reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    COLON           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)

  ! SEMICOLON       [ reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN .) ]


state 227

    (143) argumentos -> argumento COMMA . argumentos
    (142) argumentos -> . argumento
    (143) argumentos -> . argumento COMMA argumentos
    (144) argumentos -> . empty
    (145) argumento -> . type VARIABLE
    (146) argumento -> . VARIABLE EQUALS valor
    (147) argumento -> . type VARIABLE EQUALS valor
    (148) argumento -> . operaArit
    (66) empty -> .
    (149) type -> . INT_TYPE
    (150) type -> . FLOAT_TYPE
    (151) type -> . STRING_TYPE
    (152) type -> . BOOL_TYPE
    (153) type -> . ARRAY_TYPE
    (154) type -> . VOID
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    VARIABLE        shift and go to state 171
    RPAREN          reduce using rule 66 (empty -> .)
    INT_TYPE        shift and go to state 174
    FLOAT_TYPE      shift and go to state 175
    STRING_TYPE     shift and go to state 176
    BOOL_TYPE       shift and go to state 177
    ARRAY_TYPE      shift and go to state 178
    VOID            shift and go to state 179
    LPAREN          shift and go to state 166
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    argumento                      shift and go to state 168
    argumentos                     shift and go to state 276
    empty                          shift and go to state 169
    type                           shift and go to state 170
    valor                          shift and go to state 172
    operaArit                      shift and go to state 173
    llamadaFuncion                 shift and go to state 101

state 228

    (145) argumento -> type VARIABLE .
    (147) argumento -> type VARIABLE . EQUALS valor

    COMMA           reduce using rule 145 (argumento -> type VARIABLE .)
    RPAREN          reduce using rule 145 (argumento -> type VARIABLE .)
    EQUALS          shift and go to state 277


state 229

    (146) argumento -> VARIABLE EQUALS . valor
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    valor                          shift and go to state 278
    llamadaFuncion                 shift and go to state 101

state 230

    (163) llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .
    (165) llamadaFuncion -> EMPTY LPAREN argumentos RPAREN . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    VARIABLE        reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ECHO            reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    PRINT           reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    TRY             reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    FUNCTION        reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    RETURN          reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ID              reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    EMPTY           reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    CLASS           reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    INTERFACE       reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    INCLUDE         reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    NAMESPACE       reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    THROW           reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    CONST           reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    THIS            reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    INT             reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    FLOAT           reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    STRING          reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    BOOL            reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    NULL            reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ARRAY           reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    LPAREN          reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ABSTRACT        reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    PRIVATE         reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    PROTECTED       reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    PUBLIC          reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    STATIC          reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    FINAL           reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    IF              reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    WHILE           reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    DO              reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    SWITCH          reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    FOREACH         reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    FOR             reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    CLOSETAG        reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    EQ              reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    NEQ             reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    STRICTEQ        reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    STRICTNEQ       reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    LT              reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    GT              reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    LEQ             reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    GEQ             reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    AND             reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    LOGICAL_AND     reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    OR              reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    LOGICAL_OR      reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    PLUS            reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    MINUS           reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    TIMES           reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    DIVIDE          reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    MODULO          reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    POTENCIA        reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    PLUSEQUAL       reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    RPAREN          reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    COMMA           reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    RBRACE          reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    BREAK           reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ENDSWITCH       reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    CASE            reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    DEFAULT         reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ARROWMAP        reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    RBRACKET        reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    COLON           reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    SEMICOLON       shift and go to state 279

  ! SEMICOLON       [ reduce using rule 163 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .) ]


state 231

    (166) classDeclarate -> CLASS ID LBRACE classBody . RBRACE

    RBRACE          shift and go to state 280


state 232

    (170) classBody -> classMember .
    (171) classBody -> classMember . classBody
    (170) classBody -> . classMember
    (171) classBody -> . classMember classBody
    (172) classMember -> . type VARIABLE SEMICOLON
    (173) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (174) classMember -> . objectInstantiation
    (149) type -> . INT_TYPE
    (150) type -> . FLOAT_TYPE
    (151) type -> . STRING_TYPE
    (152) type -> . BOOL_TYPE
    (153) type -> . ARRAY_TYPE
    (154) type -> . VOID
    (175) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (176) objectInstantiation -> . NEW ID LPAREN RPAREN

    RBRACE          reduce using rule 170 (classBody -> classMember .)
    INT_TYPE        shift and go to state 174
    FLOAT_TYPE      shift and go to state 175
    STRING_TYPE     shift and go to state 176
    BOOL_TYPE       shift and go to state 177
    ARRAY_TYPE      shift and go to state 178
    VOID            shift and go to state 179
    NEW             shift and go to state 235

    classMember                    shift and go to state 232
    classBody                      shift and go to state 281
    type                           shift and go to state 233
    objectInstantiation            shift and go to state 234

state 233

    (172) classMember -> type . VARIABLE SEMICOLON
    (173) classMember -> type . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE

    VARIABLE        shift and go to state 282
    FUNCTION        shift and go to state 283


state 234

    (174) classMember -> objectInstantiation .

    INT_TYPE        reduce using rule 174 (classMember -> objectInstantiation .)
    FLOAT_TYPE      reduce using rule 174 (classMember -> objectInstantiation .)
    STRING_TYPE     reduce using rule 174 (classMember -> objectInstantiation .)
    BOOL_TYPE       reduce using rule 174 (classMember -> objectInstantiation .)
    ARRAY_TYPE      reduce using rule 174 (classMember -> objectInstantiation .)
    VOID            reduce using rule 174 (classMember -> objectInstantiation .)
    NEW             reduce using rule 174 (classMember -> objectInstantiation .)
    RBRACE          reduce using rule 174 (classMember -> objectInstantiation .)


state 235

    (175) objectInstantiation -> NEW . ID LPAREN argumentos RPAREN
    (176) objectInstantiation -> NEW . ID LPAREN RPAREN

    ID              shift and go to state 284


state 236

    (167) classDeclarate -> CLASS ID EXTENDS ID . LBRACE classBody RBRACE
    (178) classInterface -> CLASS ID EXTENDS ID . IMPLEMENTS impInterface LBRACE classBody RBRACE

    LBRACE          shift and go to state 285
    IMPLEMENTS      shift and go to state 286


state 237

    (181) impInterface -> ID .
    (182) impInterface -> ID . COMMA impInterface

    LBRACE          reduce using rule 181 (impInterface -> ID .)
    COMMA           shift and go to state 287


state 238

    (177) classInterface -> CLASS ID IMPLEMENTS impInterface . LBRACE classBody RBRACE

    LBRACE          shift and go to state 288


state 239

    (168) classDeclarate -> data CLASS ID LBRACE . classBody RBRACE
    (170) classBody -> . classMember
    (171) classBody -> . classMember classBody
    (172) classMember -> . type VARIABLE SEMICOLON
    (173) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (174) classMember -> . objectInstantiation
    (149) type -> . INT_TYPE
    (150) type -> . FLOAT_TYPE
    (151) type -> . STRING_TYPE
    (152) type -> . BOOL_TYPE
    (153) type -> . ARRAY_TYPE
    (154) type -> . VOID
    (175) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (176) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 174
    FLOAT_TYPE      shift and go to state 175
    STRING_TYPE     shift and go to state 176
    BOOL_TYPE       shift and go to state 177
    ARRAY_TYPE      shift and go to state 178
    VOID            shift and go to state 179
    NEW             shift and go to state 235

    classBody                      shift and go to state 289
    classMember                    shift and go to state 232
    type                           shift and go to state 233
    objectInstantiation            shift and go to state 234

state 240

    (179) classInterface -> data CLASS ID IMPLEMENTS . impInterface LBRACE classBody RBRACE
    (181) impInterface -> . ID
    (182) impInterface -> . ID COMMA impInterface

    ID              shift and go to state 237

    impInterface                   shift and go to state 290

state 241

    (180) classInterface -> data CLASS ID EXTENDS . ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    ID              shift and go to state 291


state 242

    (189) interface -> INTERFACE ID LBRACE classBody . RBRACE

    RBRACE          shift and go to state 292


state 243

    (191) includes -> INCLUDE STRING DOT STRING . SEMICOLON

    SEMICOLON       shift and go to state 293


state 244

    (194) throw -> THROW NEW EXCEPTION LPAREN . repiteValores RPAREN SEMICOLON
    (64) repiteValores -> . valor
    (65) repiteValores -> . valor COMMA repiteValores
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    repiteValores                  shift and go to state 294
    valor                          shift and go to state 107
    llamadaFuncion                 shift and go to state 101

state 245

    (197) constdeclaration -> CONST ID EQUALS valor . SEMICOLON

    SEMICOLON       shift and go to state 295


state 246

    (198) thisdeclaration -> THIS ARROW ID SEMICOLON .

    VARIABLE        reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    ECHO            reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    PRINT           reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    TRY             reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    FUNCTION        reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    RETURN          reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    ID              reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    EMPTY           reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    CLASS           reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    INTERFACE       reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    INCLUDE         reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    NAMESPACE       reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    THROW           reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    CONST           reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    THIS            reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    INT             reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    FLOAT           reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    STRING          reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    BOOL            reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    NULL            reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    ARRAY           reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    LPAREN          reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    ABSTRACT        reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    PRIVATE         reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    PROTECTED       reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    PUBLIC          reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    STATIC          reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    FINAL           reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    IF              reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    WHILE           reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    DO              reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    SWITCH          reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    FOREACH         reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    FOR             reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    CLOSETAG        reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    RBRACE          reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    BREAK           reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    ENDSWITCH       reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    CASE            reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    DEFAULT         reduce using rule 198 (thisdeclaration -> THIS ARROW ID SEMICOLON .)


state 247

    (199) thisdeclaration -> THIS ARROW ID LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 296


state 248

    (82) conditions -> LPAREN conditions . RPAREN
    (86) condition -> LPAREN conditions . RPAREN

    RPAREN          shift and go to state 297


state 249

    (75) if -> IF LPAREN conditions RPAREN . LBRACE body RBRACE else_blocks
    (76) if -> IF LPAREN conditions RPAREN . body
    (99) body -> . sentenciaList
    (100) body -> . empty
    (101) sentenciaList -> . sentencia
    (102) sentenciaList -> . sentencia sentenciaList
    (66) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (58) impresion -> . ECHO imprimir SEMICOLON
    (59) impresion -> . PRINT imprimir SEMICOLON
    (67) estructurasPrograma -> . controlStructure
    (68) estructurasPrograma -> . dataStructure
    (155) try -> . TRY LBRACE body RBRACE catchs
    (156) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (161) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN expresion SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (166) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (167) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (168) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . classInterface
    (189) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (160) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (190) includes -> . INCLUDE STRING SEMICOLON
    (191) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (192) namespace -> . NAMESPACE ID SEMICOLON
    (193) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (194) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> . THROW valor SEMICOLON
    (196) instance -> . VARIABLE INSTANCEOF ID
    (197) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (198) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (199) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (200) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (201) minuse -> . VARIABLE MINUSEQUAL INT
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (69) controlStructure -> . if
    (70) controlStructure -> . for
    (71) controlStructure -> . while
    (72) controlStructure -> . dowhile
    (73) controlStructure -> . switch
    (74) controlStructure -> . foreach
    (124) dataStructure -> . array
    (183) data -> . ABSTRACT
    (184) data -> . PRIVATE
    (185) data -> . PROTECTED
    (186) data -> . PUBLIC
    (187) data -> . STATIC
    (188) data -> . FINAL
    (177) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (179) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (75) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> . IF LPAREN conditions RPAREN body
    (103) for -> . forStatement
    (107) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (109) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (110) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (118) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (125) array -> . VARIABLE EQUALS arrays SEMICOLON
    (126) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) array -> . map
    (104) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (132) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for EMPTY resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for NAMESPACE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ABSTRACT resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    LBRACE          shift and go to state 298
    RBRACE          reduce using rule 66 (empty -> .)
    CLOSETAG        reduce using rule 66 (empty -> .)
    BREAK           reduce using rule 66 (empty -> .)
    ENDSWITCH       reduce using rule 66 (empty -> .)
    CASE            reduce using rule 66 (empty -> .)
    DEFAULT         reduce using rule 66 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 30
    PRINT           shift and go to state 31
    TRY             shift and go to state 34
    FUNCTION        shift and go to state 35
    RETURN          shift and go to state 37
    ID              shift and go to state 36
    EMPTY           shift and go to state 38
    CLASS           shift and go to state 39
    INTERFACE       shift and go to state 42
    INCLUDE         shift and go to state 43
    NAMESPACE       shift and go to state 45
    THROW           shift and go to state 46
    CONST           shift and go to state 47
    THIS            shift and go to state 48
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ABSTRACT        shift and go to state 62
    PRIVATE         shift and go to state 63
    PROTECTED       shift and go to state 64
    PUBLIC          shift and go to state 65
    STATIC          shift and go to state 66
    FINAL           shift and go to state 67
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    DO              shift and go to state 71
    SWITCH          shift and go to state 72
    FOREACH         shift and go to state 73
    FOR             shift and go to state 75

  ! VARIABLE        [ reduce using rule 66 (empty -> .) ]
  ! ECHO            [ reduce using rule 66 (empty -> .) ]
  ! PRINT           [ reduce using rule 66 (empty -> .) ]
  ! TRY             [ reduce using rule 66 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 66 (empty -> .) ]
  ! RETURN          [ reduce using rule 66 (empty -> .) ]
  ! ID              [ reduce using rule 66 (empty -> .) ]
  ! EMPTY           [ reduce using rule 66 (empty -> .) ]
  ! CLASS           [ reduce using rule 66 (empty -> .) ]
  ! INTERFACE       [ reduce using rule 66 (empty -> .) ]
  ! INCLUDE         [ reduce using rule 66 (empty -> .) ]
  ! NAMESPACE       [ reduce using rule 66 (empty -> .) ]
  ! THROW           [ reduce using rule 66 (empty -> .) ]
  ! CONST           [ reduce using rule 66 (empty -> .) ]
  ! THIS            [ reduce using rule 66 (empty -> .) ]
  ! INT             [ reduce using rule 66 (empty -> .) ]
  ! FLOAT           [ reduce using rule 66 (empty -> .) ]
  ! STRING          [ reduce using rule 66 (empty -> .) ]
  ! BOOL            [ reduce using rule 66 (empty -> .) ]
  ! NULL            [ reduce using rule 66 (empty -> .) ]
  ! ARRAY           [ reduce using rule 66 (empty -> .) ]
  ! LPAREN          [ reduce using rule 66 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 66 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 66 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 66 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 66 (empty -> .) ]
  ! STATIC          [ reduce using rule 66 (empty -> .) ]
  ! FINAL           [ reduce using rule 66 (empty -> .) ]
  ! IF              [ reduce using rule 66 (empty -> .) ]
  ! WHILE           [ reduce using rule 66 (empty -> .) ]
  ! DO              [ reduce using rule 66 (empty -> .) ]
  ! SWITCH          [ reduce using rule 66 (empty -> .) ]
  ! FOREACH         [ reduce using rule 66 (empty -> .) ]
  ! FOR             [ reduce using rule 66 (empty -> .) ]

    body                           shift and go to state 299
    sentenciaList                  shift and go to state 162
    empty                          shift and go to state 163
    sentencia                      shift and go to state 164
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    expresion                      shift and go to state 27
    valor                          shift and go to state 29
    controlStructure               shift and go to state 32
    dataStructure                  shift and go to state 33
    data                           shift and go to state 40
    classInterface                 shift and go to state 41
    operaArit                      shift and go to state 54
    if                             shift and go to state 55
    for                            shift and go to state 56
    while                          shift and go to state 57
    dowhile                        shift and go to state 58
    switch                         shift and go to state 59
    foreach                        shift and go to state 60
    array                          shift and go to state 61
    forStatement                   shift and go to state 69
    map                            shift and go to state 74

state 250

    (81) conditions -> condition opLogic . conditions
    (80) conditions -> . condition
    (81) conditions -> . condition opLogic conditions
    (82) conditions -> . LPAREN conditions RPAREN
    (83) condition -> . valor
    (84) condition -> . valor opSymbol valor
    (85) condition -> . NOT condition
    (86) condition -> . LPAREN conditions RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 195
    NOT             shift and go to state 199
    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    condition                      shift and go to state 197
    conditions                     shift and go to state 300
    valor                          shift and go to state 198
    llamadaFuncion                 shift and go to state 101

state 251

    (84) condition -> valor opSymbol . valor
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    valor                          shift and go to state 301
    llamadaFuncion                 shift and go to state 101

state 252

    (85) condition -> NOT condition .

    AND             reduce using rule 85 (condition -> NOT condition .)
    LOGICAL_AND     reduce using rule 85 (condition -> NOT condition .)
    OR              reduce using rule 85 (condition -> NOT condition .)
    LOGICAL_OR      reduce using rule 85 (condition -> NOT condition .)
    RPAREN          reduce using rule 85 (condition -> NOT condition .)


state 253

    (86) condition -> LPAREN conditions . RPAREN

    RPAREN          shift and go to state 302


state 254

    (107) while -> WHILE LPAREN condition RPAREN . LBRACE body RBRACE
    (108) while -> WHILE LPAREN condition RPAREN . LBRACE RBRACE

    LBRACE          shift and go to state 303


state 255

    (109) dowhile -> DO LBRACE body RBRACE . WHILE LPAREN condition RPAREN SEMICOLON

    WHILE           shift and go to state 304


state 256

    (110) switch -> SWITCH LPAREN valor RPAREN . LBRACE caseLists RBRACE
    (111) switch -> SWITCH LPAREN valor RPAREN . COLON caseLists ENDSWITCH SEMICOLON

    LBRACE          shift and go to state 305
    COLON           shift and go to state 306


state 257

    (118) foreach -> FOREACH LPAREN VARIABLE AS . VARIABLE RPAREN LBRACE body RBRACE

    VARIABLE        shift and go to state 307


state 258

    (104) forStatement -> FOR LPAREN forcondition RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 308


state 259

    (105) forcondition -> VARIABLE EQUALS . INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (106) forcondition -> VARIABLE EQUALS . INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    INT             shift and go to state 309


state 260

    (34) asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN . RPAREN SEMICOLON

    RPAREN          shift and go to state 310


state 261

    (193) anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN . ARROWMAP comparacion SEMICOLON

    ARROWMAP        shift and go to state 311


state 262

    (126) array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 312


state 263

    (132) map -> VARIABLE EQUALS LBRACKET maps RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 313


state 264

    (129) arrays -> LBRACKET repiteValores RBRACKET .

    SEMICOLON       reduce using rule 129 (arrays -> LBRACKET repiteValores RBRACKET .)
    COMMA           reduce using rule 129 (arrays -> LBRACKET repiteValores RBRACKET .)
    RBRACKET        reduce using rule 129 (arrays -> LBRACKET repiteValores RBRACKET .)


state 265

    (131) arrayAnidado -> arrays COMMA . arrayAnidado
    (130) arrayAnidado -> . arrays
    (131) arrayAnidado -> . arrays COMMA arrayAnidado
    (129) arrays -> . LBRACKET repiteValores RBRACKET

    LBRACKET        shift and go to state 211

    arrays                         shift and go to state 215
    arrayAnidado                   shift and go to state 314

state 266

    (135) maps -> mapArrow COMMA . maps
    (134) maps -> . mapArrow
    (135) maps -> . mapArrow COMMA maps
    (136) mapArrow -> . valor ARROWMAP valor
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    mapArrow                       shift and go to state 216
    maps                           shift and go to state 315
    valor                          shift and go to state 316
    llamadaFuncion                 shift and go to state 101

state 267

    (136) mapArrow -> valor ARROWMAP . valor
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    valor                          shift and go to state 317
    llamadaFuncion                 shift and go to state 101

state 268

    (127) array -> VARIABLE EQUALS ARRAY LPAREN repiteValores . RPAREN SEMICOLON

    RPAREN          shift and go to state 318


state 269

    (133) map -> VARIABLE EQUALS ARRAY LPAREN maps . RPAREN SEMICOLON

    RPAREN          shift and go to state 319


state 270

    (160) objeto -> VARIABLE ARROW ID LPAREN argumentos . RPAREN SEMICOLON

    RPAREN          shift and go to state 320


state 271

    (155) try -> TRY LBRACE body RBRACE catchs .
    (156) try -> TRY LBRACE body RBRACE catchs . FINALLY LBRACE body RBRACE

    VARIABLE        reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    ECHO            reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    PRINT           reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    TRY             reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    FUNCTION        reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    RETURN          reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    ID              reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    EMPTY           reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    CLASS           reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    INTERFACE       reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    INCLUDE         reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    NAMESPACE       reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    THROW           reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    CONST           reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    THIS            reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    INT             reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    FLOAT           reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    STRING          reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    BOOL            reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    NULL            reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    ARRAY           reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    LPAREN          reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    ABSTRACT        reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    PRIVATE         reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    PROTECTED       reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    PUBLIC          reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    STATIC          reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    FINAL           reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    IF              reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    WHILE           reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    DO              reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    SWITCH          reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    FOREACH         reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    FOR             reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    CLOSETAG        reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    RBRACE          reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    BREAK           reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    ENDSWITCH       reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    CASE            reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    DEFAULT         reduce using rule 155 (try -> TRY LBRACE body RBRACE catchs .)
    FINALLY         shift and go to state 321


state 272

    (158) catchs -> catch .
    (159) catchs -> catch . catchs
    (158) catchs -> . catch
    (159) catchs -> . catch catchs
    (157) catch -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE

    FINALLY         reduce using rule 158 (catchs -> catch .)
    VARIABLE        reduce using rule 158 (catchs -> catch .)
    ECHO            reduce using rule 158 (catchs -> catch .)
    PRINT           reduce using rule 158 (catchs -> catch .)
    TRY             reduce using rule 158 (catchs -> catch .)
    FUNCTION        reduce using rule 158 (catchs -> catch .)
    RETURN          reduce using rule 158 (catchs -> catch .)
    ID              reduce using rule 158 (catchs -> catch .)
    EMPTY           reduce using rule 158 (catchs -> catch .)
    CLASS           reduce using rule 158 (catchs -> catch .)
    INTERFACE       reduce using rule 158 (catchs -> catch .)
    INCLUDE         reduce using rule 158 (catchs -> catch .)
    NAMESPACE       reduce using rule 158 (catchs -> catch .)
    THROW           reduce using rule 158 (catchs -> catch .)
    CONST           reduce using rule 158 (catchs -> catch .)
    THIS            reduce using rule 158 (catchs -> catch .)
    INT             reduce using rule 158 (catchs -> catch .)
    FLOAT           reduce using rule 158 (catchs -> catch .)
    STRING          reduce using rule 158 (catchs -> catch .)
    BOOL            reduce using rule 158 (catchs -> catch .)
    NULL            reduce using rule 158 (catchs -> catch .)
    ARRAY           reduce using rule 158 (catchs -> catch .)
    LPAREN          reduce using rule 158 (catchs -> catch .)
    ABSTRACT        reduce using rule 158 (catchs -> catch .)
    PRIVATE         reduce using rule 158 (catchs -> catch .)
    PROTECTED       reduce using rule 158 (catchs -> catch .)
    PUBLIC          reduce using rule 158 (catchs -> catch .)
    STATIC          reduce using rule 158 (catchs -> catch .)
    FINAL           reduce using rule 158 (catchs -> catch .)
    IF              reduce using rule 158 (catchs -> catch .)
    WHILE           reduce using rule 158 (catchs -> catch .)
    DO              reduce using rule 158 (catchs -> catch .)
    SWITCH          reduce using rule 158 (catchs -> catch .)
    FOREACH         reduce using rule 158 (catchs -> catch .)
    FOR             reduce using rule 158 (catchs -> catch .)
    CLOSETAG        reduce using rule 158 (catchs -> catch .)
    RBRACE          reduce using rule 158 (catchs -> catch .)
    BREAK           reduce using rule 158 (catchs -> catch .)
    ENDSWITCH       reduce using rule 158 (catchs -> catch .)
    CASE            reduce using rule 158 (catchs -> catch .)
    DEFAULT         reduce using rule 158 (catchs -> catch .)
    CATCH           shift and go to state 273

    catch                          shift and go to state 272
    catchs                         shift and go to state 322

state 273

    (157) catch -> CATCH . LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 323


state 274

    (161) funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 324


state 275

    (162) llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .

    VARIABLE        reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ECHO            reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    PRINT           reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    TRY             reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    RETURN          reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ID              reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    EMPTY           reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    CLASS           reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    THROW           reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    CONST           reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    THIS            reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    INT             reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FLOAT           reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    STRING          reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    BOOL            reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    NULL            reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ARRAY           reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    LPAREN          reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    STATIC          reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FINAL           reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    IF              reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    WHILE           reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    DO              reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    SWITCH          reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FOREACH         reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FOR             reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    EQ              reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    NEQ             reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    STRICTEQ        reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    STRICTNEQ       reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    LT              reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    GT              reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    LEQ             reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    GEQ             reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    AND             reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    LOGICAL_AND     reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    OR              reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    LOGICAL_OR      reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    PLUS            reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    MINUS           reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    TIMES           reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    DIVIDE          reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    MODULO          reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    POTENCIA        reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    PLUSEQUAL       reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    RPAREN          reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    COMMA           reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    RBRACE          reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    BREAK           reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    CASE            reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ARROWMAP        reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    COLON           reduce using rule 162 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)


state 276

    (143) argumentos -> argumento COMMA argumentos .

    RPAREN          reduce using rule 143 (argumentos -> argumento COMMA argumentos .)


state 277

    (147) argumento -> type VARIABLE EQUALS . valor
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    valor                          shift and go to state 325
    llamadaFuncion                 shift and go to state 101

state 278

    (146) argumento -> VARIABLE EQUALS valor .

    COMMA           reduce using rule 146 (argumento -> VARIABLE EQUALS valor .)
    RPAREN          reduce using rule 146 (argumento -> VARIABLE EQUALS valor .)


state 279

    (165) llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .

    VARIABLE        reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ECHO            reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    PRINT           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    TRY             reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    RETURN          reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ID              reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    EMPTY           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    CLASS           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    THROW           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    CONST           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    THIS            reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    INT             reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    FLOAT           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    STRING          reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    BOOL            reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    NULL            reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ARRAY           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    LPAREN          reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    STATIC          reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    FINAL           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    IF              reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    WHILE           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    DO              reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    SWITCH          reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    FOREACH         reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    FOR             reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    EQ              reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    NEQ             reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    STRICTEQ        reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    STRICTNEQ       reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    LT              reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    GT              reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    LEQ             reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    GEQ             reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    AND             reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    LOGICAL_AND     reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    OR              reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    LOGICAL_OR      reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    PLUS            reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    MINUS           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    TIMES           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    DIVIDE          reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    MODULO          reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    POTENCIA        reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    PLUSEQUAL       reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    RPAREN          reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    COMMA           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    RBRACE          reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    BREAK           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    CASE            reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ARROWMAP        reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    COLON           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)


state 280

    (166) classDeclarate -> CLASS ID LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    ECHO            reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    PRINT           reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    TRY             reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    RETURN          reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    ID              reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    CLASS           reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    THROW           reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    CONST           reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    THIS            reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    INT             reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    STRING          reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    BOOL            reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    NULL            reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    LPAREN          reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    STATIC          reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    FINAL           reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    IF              reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    WHILE           reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    DO              reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    FOR             reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    BREAK           reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    CASE            reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 166 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)


state 281

    (171) classBody -> classMember classBody .

    RBRACE          reduce using rule 171 (classBody -> classMember classBody .)


state 282

    (172) classMember -> type VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 326


state 283

    (173) classMember -> type FUNCTION . ID LPAREN argumentos RPAREN LBRACE body RBRACE

    ID              shift and go to state 327


state 284

    (175) objectInstantiation -> NEW ID . LPAREN argumentos RPAREN
    (176) objectInstantiation -> NEW ID . LPAREN RPAREN

    LPAREN          shift and go to state 328


state 285

    (167) classDeclarate -> CLASS ID EXTENDS ID LBRACE . classBody RBRACE
    (170) classBody -> . classMember
    (171) classBody -> . classMember classBody
    (172) classMember -> . type VARIABLE SEMICOLON
    (173) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (174) classMember -> . objectInstantiation
    (149) type -> . INT_TYPE
    (150) type -> . FLOAT_TYPE
    (151) type -> . STRING_TYPE
    (152) type -> . BOOL_TYPE
    (153) type -> . ARRAY_TYPE
    (154) type -> . VOID
    (175) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (176) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 174
    FLOAT_TYPE      shift and go to state 175
    STRING_TYPE     shift and go to state 176
    BOOL_TYPE       shift and go to state 177
    ARRAY_TYPE      shift and go to state 178
    VOID            shift and go to state 179
    NEW             shift and go to state 235

    classBody                      shift and go to state 329
    classMember                    shift and go to state 232
    type                           shift and go to state 233
    objectInstantiation            shift and go to state 234

state 286

    (178) classInterface -> CLASS ID EXTENDS ID IMPLEMENTS . impInterface LBRACE classBody RBRACE
    (181) impInterface -> . ID
    (182) impInterface -> . ID COMMA impInterface

    ID              shift and go to state 237

    impInterface                   shift and go to state 330

state 287

    (182) impInterface -> ID COMMA . impInterface
    (181) impInterface -> . ID
    (182) impInterface -> . ID COMMA impInterface

    ID              shift and go to state 237

    impInterface                   shift and go to state 331

state 288

    (177) classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE . classBody RBRACE
    (170) classBody -> . classMember
    (171) classBody -> . classMember classBody
    (172) classMember -> . type VARIABLE SEMICOLON
    (173) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (174) classMember -> . objectInstantiation
    (149) type -> . INT_TYPE
    (150) type -> . FLOAT_TYPE
    (151) type -> . STRING_TYPE
    (152) type -> . BOOL_TYPE
    (153) type -> . ARRAY_TYPE
    (154) type -> . VOID
    (175) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (176) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 174
    FLOAT_TYPE      shift and go to state 175
    STRING_TYPE     shift and go to state 176
    BOOL_TYPE       shift and go to state 177
    ARRAY_TYPE      shift and go to state 178
    VOID            shift and go to state 179
    NEW             shift and go to state 235

    classBody                      shift and go to state 332
    classMember                    shift and go to state 232
    type                           shift and go to state 233
    objectInstantiation            shift and go to state 234

state 289

    (168) classDeclarate -> data CLASS ID LBRACE classBody . RBRACE

    RBRACE          shift and go to state 333


state 290

    (179) classInterface -> data CLASS ID IMPLEMENTS impInterface . LBRACE classBody RBRACE

    LBRACE          shift and go to state 334


state 291

    (180) classInterface -> data CLASS ID EXTENDS ID . IMPLEMENTS impInterface LBRACE classBody RBRACE

    IMPLEMENTS      shift and go to state 335


state 292

    (189) interface -> INTERFACE ID LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    ECHO            reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    PRINT           reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    TRY             reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    RETURN          reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    ID              reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    CLASS           reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    THROW           reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    CONST           reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    THIS            reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    INT             reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    STRING          reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    BOOL            reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    NULL            reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    LPAREN          reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    STATIC          reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    FINAL           reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    IF              reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    WHILE           reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    DO              reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    FOR             reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    BREAK           reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    CASE            reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 189 (interface -> INTERFACE ID LBRACE classBody RBRACE .)


state 293

    (191) includes -> INCLUDE STRING DOT STRING SEMICOLON .

    VARIABLE        reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    ECHO            reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    PRINT           reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    TRY             reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    FUNCTION        reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    RETURN          reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    ID              reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    EMPTY           reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    CLASS           reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    INTERFACE       reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    INCLUDE         reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    NAMESPACE       reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    THROW           reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    CONST           reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    THIS            reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    INT             reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    FLOAT           reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    STRING          reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    BOOL            reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    NULL            reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    ARRAY           reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    LPAREN          reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    ABSTRACT        reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    PRIVATE         reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    PROTECTED       reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    PUBLIC          reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    STATIC          reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    FINAL           reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    IF              reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    WHILE           reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    DO              reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    SWITCH          reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    FOREACH         reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    FOR             reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    CLOSETAG        reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    RBRACE          reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    BREAK           reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    ENDSWITCH       reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    CASE            reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    DEFAULT         reduce using rule 191 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)


state 294

    (194) throw -> THROW NEW EXCEPTION LPAREN repiteValores . RPAREN SEMICOLON

    RPAREN          shift and go to state 336


state 295

    (197) constdeclaration -> CONST ID EQUALS valor SEMICOLON .

    VARIABLE        reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    ECHO            reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    PRINT           reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    TRY             reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    FUNCTION        reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    RETURN          reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    ID              reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    EMPTY           reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    CLASS           reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    INTERFACE       reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    INCLUDE         reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    NAMESPACE       reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    THROW           reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    CONST           reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    THIS            reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    INT             reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    FLOAT           reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    STRING          reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    BOOL            reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    NULL            reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    ARRAY           reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    LPAREN          reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    ABSTRACT        reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    PRIVATE         reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    PROTECTED       reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    PUBLIC          reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    STATIC          reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    FINAL           reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    IF              reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    WHILE           reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    DO              reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    SWITCH          reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    FOREACH         reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    FOR             reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    CLOSETAG        reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    RBRACE          reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    BREAK           reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    ENDSWITCH       reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    CASE            reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    DEFAULT         reduce using rule 197 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)


state 296

    (199) thisdeclaration -> THIS ARROW ID LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 337


state 297

    (82) conditions -> LPAREN conditions RPAREN .
    (86) condition -> LPAREN conditions RPAREN .

  ! reduce/reduce conflict for RPAREN resolved using rule 82 (conditions -> LPAREN conditions RPAREN .)
    RPAREN          reduce using rule 82 (conditions -> LPAREN conditions RPAREN .)
    AND             reduce using rule 86 (condition -> LPAREN conditions RPAREN .)
    LOGICAL_AND     reduce using rule 86 (condition -> LPAREN conditions RPAREN .)
    OR              reduce using rule 86 (condition -> LPAREN conditions RPAREN .)
    LOGICAL_OR      reduce using rule 86 (condition -> LPAREN conditions RPAREN .)

  ! RPAREN          [ reduce using rule 86 (condition -> LPAREN conditions RPAREN .) ]


state 298

    (75) if -> IF LPAREN conditions RPAREN LBRACE . body RBRACE else_blocks
    (99) body -> . sentenciaList
    (100) body -> . empty
    (101) sentenciaList -> . sentencia
    (102) sentenciaList -> . sentencia sentenciaList
    (66) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (58) impresion -> . ECHO imprimir SEMICOLON
    (59) impresion -> . PRINT imprimir SEMICOLON
    (67) estructurasPrograma -> . controlStructure
    (68) estructurasPrograma -> . dataStructure
    (155) try -> . TRY LBRACE body RBRACE catchs
    (156) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (161) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN expresion SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (166) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (167) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (168) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . classInterface
    (189) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (160) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (190) includes -> . INCLUDE STRING SEMICOLON
    (191) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (192) namespace -> . NAMESPACE ID SEMICOLON
    (193) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (194) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> . THROW valor SEMICOLON
    (196) instance -> . VARIABLE INSTANCEOF ID
    (197) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (198) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (199) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (200) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (201) minuse -> . VARIABLE MINUSEQUAL INT
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (69) controlStructure -> . if
    (70) controlStructure -> . for
    (71) controlStructure -> . while
    (72) controlStructure -> . dowhile
    (73) controlStructure -> . switch
    (74) controlStructure -> . foreach
    (124) dataStructure -> . array
    (183) data -> . ABSTRACT
    (184) data -> . PRIVATE
    (185) data -> . PROTECTED
    (186) data -> . PUBLIC
    (187) data -> . STATIC
    (188) data -> . FINAL
    (177) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (179) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (75) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> . IF LPAREN conditions RPAREN body
    (103) for -> . forStatement
    (107) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (109) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (110) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (118) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (125) array -> . VARIABLE EQUALS arrays SEMICOLON
    (126) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) array -> . map
    (104) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (132) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 66 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 30
    PRINT           shift and go to state 31
    TRY             shift and go to state 34
    FUNCTION        shift and go to state 35
    RETURN          shift and go to state 37
    ID              shift and go to state 36
    EMPTY           shift and go to state 38
    CLASS           shift and go to state 39
    INTERFACE       shift and go to state 42
    INCLUDE         shift and go to state 43
    NAMESPACE       shift and go to state 45
    THROW           shift and go to state 46
    CONST           shift and go to state 47
    THIS            shift and go to state 48
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ABSTRACT        shift and go to state 62
    PRIVATE         shift and go to state 63
    PROTECTED       shift and go to state 64
    PUBLIC          shift and go to state 65
    STATIC          shift and go to state 66
    FINAL           shift and go to state 67
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    DO              shift and go to state 71
    SWITCH          shift and go to state 72
    FOREACH         shift and go to state 73
    FOR             shift and go to state 75

    body                           shift and go to state 338
    sentenciaList                  shift and go to state 162
    empty                          shift and go to state 163
    sentencia                      shift and go to state 164
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    expresion                      shift and go to state 27
    valor                          shift and go to state 29
    controlStructure               shift and go to state 32
    dataStructure                  shift and go to state 33
    data                           shift and go to state 40
    classInterface                 shift and go to state 41
    operaArit                      shift and go to state 54
    if                             shift and go to state 55
    for                            shift and go to state 56
    while                          shift and go to state 57
    dowhile                        shift and go to state 58
    switch                         shift and go to state 59
    foreach                        shift and go to state 60
    array                          shift and go to state 61
    forStatement                   shift and go to state 69
    map                            shift and go to state 74

state 299

    (76) if -> IF LPAREN conditions RPAREN body .

    VARIABLE        reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    ECHO            reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    PRINT           reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    TRY             reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    FUNCTION        reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    RETURN          reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    ID              reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    EMPTY           reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    CLASS           reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    INTERFACE       reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    INCLUDE         reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    NAMESPACE       reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    THROW           reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    CONST           reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    THIS            reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    INT             reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    FLOAT           reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    STRING          reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    BOOL            reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    NULL            reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    ARRAY           reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    LPAREN          reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    ABSTRACT        reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    PRIVATE         reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    PROTECTED       reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    PUBLIC          reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    STATIC          reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    FINAL           reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    IF              reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    WHILE           reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    DO              reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    SWITCH          reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    FOREACH         reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    FOR             reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    CLOSETAG        reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    RBRACE          reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    BREAK           reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    ENDSWITCH       reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    CASE            reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)
    DEFAULT         reduce using rule 76 (if -> IF LPAREN conditions RPAREN body .)


state 300

    (81) conditions -> condition opLogic conditions .

    RPAREN          reduce using rule 81 (conditions -> condition opLogic conditions .)


state 301

    (84) condition -> valor opSymbol valor .

    AND             reduce using rule 84 (condition -> valor opSymbol valor .)
    LOGICAL_AND     reduce using rule 84 (condition -> valor opSymbol valor .)
    OR              reduce using rule 84 (condition -> valor opSymbol valor .)
    LOGICAL_OR      reduce using rule 84 (condition -> valor opSymbol valor .)
    RPAREN          reduce using rule 84 (condition -> valor opSymbol valor .)


state 302

    (86) condition -> LPAREN conditions RPAREN .

    RPAREN          reduce using rule 86 (condition -> LPAREN conditions RPAREN .)
    AND             reduce using rule 86 (condition -> LPAREN conditions RPAREN .)
    LOGICAL_AND     reduce using rule 86 (condition -> LPAREN conditions RPAREN .)
    OR              reduce using rule 86 (condition -> LPAREN conditions RPAREN .)
    LOGICAL_OR      reduce using rule 86 (condition -> LPAREN conditions RPAREN .)


state 303

    (107) while -> WHILE LPAREN condition RPAREN LBRACE . body RBRACE
    (108) while -> WHILE LPAREN condition RPAREN LBRACE . RBRACE
    (99) body -> . sentenciaList
    (100) body -> . empty
    (101) sentenciaList -> . sentencia
    (102) sentenciaList -> . sentencia sentenciaList
    (66) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (58) impresion -> . ECHO imprimir SEMICOLON
    (59) impresion -> . PRINT imprimir SEMICOLON
    (67) estructurasPrograma -> . controlStructure
    (68) estructurasPrograma -> . dataStructure
    (155) try -> . TRY LBRACE body RBRACE catchs
    (156) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (161) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN expresion SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (166) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (167) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (168) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . classInterface
    (189) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (160) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (190) includes -> . INCLUDE STRING SEMICOLON
    (191) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (192) namespace -> . NAMESPACE ID SEMICOLON
    (193) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (194) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> . THROW valor SEMICOLON
    (196) instance -> . VARIABLE INSTANCEOF ID
    (197) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (198) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (199) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (200) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (201) minuse -> . VARIABLE MINUSEQUAL INT
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (69) controlStructure -> . if
    (70) controlStructure -> . for
    (71) controlStructure -> . while
    (72) controlStructure -> . dowhile
    (73) controlStructure -> . switch
    (74) controlStructure -> . foreach
    (124) dataStructure -> . array
    (183) data -> . ABSTRACT
    (184) data -> . PRIVATE
    (185) data -> . PROTECTED
    (186) data -> . PUBLIC
    (187) data -> . STATIC
    (188) data -> . FINAL
    (177) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (179) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (75) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> . IF LPAREN conditions RPAREN body
    (103) for -> . forStatement
    (107) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (109) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (110) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (118) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (125) array -> . VARIABLE EQUALS arrays SEMICOLON
    (126) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) array -> . map
    (104) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (132) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 340
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 30
    PRINT           shift and go to state 31
    TRY             shift and go to state 34
    FUNCTION        shift and go to state 35
    RETURN          shift and go to state 37
    ID              shift and go to state 36
    EMPTY           shift and go to state 38
    CLASS           shift and go to state 39
    INTERFACE       shift and go to state 42
    INCLUDE         shift and go to state 43
    NAMESPACE       shift and go to state 45
    THROW           shift and go to state 46
    CONST           shift and go to state 47
    THIS            shift and go to state 48
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ABSTRACT        shift and go to state 62
    PRIVATE         shift and go to state 63
    PROTECTED       shift and go to state 64
    PUBLIC          shift and go to state 65
    STATIC          shift and go to state 66
    FINAL           shift and go to state 67
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    DO              shift and go to state 71
    SWITCH          shift and go to state 72
    FOREACH         shift and go to state 73
    FOR             shift and go to state 75

  ! RBRACE          [ reduce using rule 66 (empty -> .) ]

    body                           shift and go to state 339
    sentenciaList                  shift and go to state 162
    empty                          shift and go to state 163
    sentencia                      shift and go to state 164
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    expresion                      shift and go to state 27
    valor                          shift and go to state 29
    controlStructure               shift and go to state 32
    dataStructure                  shift and go to state 33
    data                           shift and go to state 40
    classInterface                 shift and go to state 41
    operaArit                      shift and go to state 54
    if                             shift and go to state 55
    for                            shift and go to state 56
    while                          shift and go to state 57
    dowhile                        shift and go to state 58
    switch                         shift and go to state 59
    foreach                        shift and go to state 60
    array                          shift and go to state 61
    forStatement                   shift and go to state 69
    map                            shift and go to state 74

state 304

    (109) dowhile -> DO LBRACE body RBRACE WHILE . LPAREN condition RPAREN SEMICOLON

    LPAREN          shift and go to state 341


state 305

    (110) switch -> SWITCH LPAREN valor RPAREN LBRACE . caseLists RBRACE
    (112) caseLists -> . cases
    (113) caseLists -> . cases default
    (114) caseLists -> . default
    (115) caseLists -> . empty
    (116) cases -> . case
    (117) cases -> . case cases
    (137) default -> . DEFAULT COLON body BREAK SEMICOLON
    (138) default -> . DEFAULT SEMICOLON body BREAK SEMICOLON
    (139) default -> . DEFAULT COLON body
    (140) default -> . DEFAULT SEMICOLON body
    (141) default -> . DEFAULT
    (66) empty -> .
    (119) case -> . CASE valor COLON body BREAK SEMICOLON
    (120) case -> . CASE valor SEMICOLON body BREAK SEMICOLON
    (121) case -> . CASE valor COLON body
    (122) case -> . CASE valor SEMICOLON
    (123) case -> . CASE valor

    DEFAULT         shift and go to state 347
    RBRACE          reduce using rule 66 (empty -> .)
    CASE            shift and go to state 348

    caseLists                      shift and go to state 342
    cases                          shift and go to state 343
    default                        shift and go to state 344
    empty                          shift and go to state 345
    case                           shift and go to state 346

state 306

    (111) switch -> SWITCH LPAREN valor RPAREN COLON . caseLists ENDSWITCH SEMICOLON
    (112) caseLists -> . cases
    (113) caseLists -> . cases default
    (114) caseLists -> . default
    (115) caseLists -> . empty
    (116) cases -> . case
    (117) cases -> . case cases
    (137) default -> . DEFAULT COLON body BREAK SEMICOLON
    (138) default -> . DEFAULT SEMICOLON body BREAK SEMICOLON
    (139) default -> . DEFAULT COLON body
    (140) default -> . DEFAULT SEMICOLON body
    (141) default -> . DEFAULT
    (66) empty -> .
    (119) case -> . CASE valor COLON body BREAK SEMICOLON
    (120) case -> . CASE valor SEMICOLON body BREAK SEMICOLON
    (121) case -> . CASE valor COLON body
    (122) case -> . CASE valor SEMICOLON
    (123) case -> . CASE valor

    DEFAULT         shift and go to state 347
    ENDSWITCH       reduce using rule 66 (empty -> .)
    CASE            shift and go to state 348

    caseLists                      shift and go to state 349
    cases                          shift and go to state 343
    default                        shift and go to state 344
    empty                          shift and go to state 345
    case                           shift and go to state 346

state 307

    (118) foreach -> FOREACH LPAREN VARIABLE AS VARIABLE . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 350


state 308

    (104) forStatement -> FOR LPAREN forcondition RPAREN LBRACE . body RBRACE
    (99) body -> . sentenciaList
    (100) body -> . empty
    (101) sentenciaList -> . sentencia
    (102) sentenciaList -> . sentencia sentenciaList
    (66) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (58) impresion -> . ECHO imprimir SEMICOLON
    (59) impresion -> . PRINT imprimir SEMICOLON
    (67) estructurasPrograma -> . controlStructure
    (68) estructurasPrograma -> . dataStructure
    (155) try -> . TRY LBRACE body RBRACE catchs
    (156) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (161) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN expresion SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (166) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (167) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (168) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . classInterface
    (189) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (160) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (190) includes -> . INCLUDE STRING SEMICOLON
    (191) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (192) namespace -> . NAMESPACE ID SEMICOLON
    (193) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (194) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> . THROW valor SEMICOLON
    (196) instance -> . VARIABLE INSTANCEOF ID
    (197) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (198) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (199) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (200) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (201) minuse -> . VARIABLE MINUSEQUAL INT
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (69) controlStructure -> . if
    (70) controlStructure -> . for
    (71) controlStructure -> . while
    (72) controlStructure -> . dowhile
    (73) controlStructure -> . switch
    (74) controlStructure -> . foreach
    (124) dataStructure -> . array
    (183) data -> . ABSTRACT
    (184) data -> . PRIVATE
    (185) data -> . PROTECTED
    (186) data -> . PUBLIC
    (187) data -> . STATIC
    (188) data -> . FINAL
    (177) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (179) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (75) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> . IF LPAREN conditions RPAREN body
    (103) for -> . forStatement
    (107) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (109) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (110) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (118) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (125) array -> . VARIABLE EQUALS arrays SEMICOLON
    (126) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) array -> . map
    (104) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (132) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 66 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 30
    PRINT           shift and go to state 31
    TRY             shift and go to state 34
    FUNCTION        shift and go to state 35
    RETURN          shift and go to state 37
    ID              shift and go to state 36
    EMPTY           shift and go to state 38
    CLASS           shift and go to state 39
    INTERFACE       shift and go to state 42
    INCLUDE         shift and go to state 43
    NAMESPACE       shift and go to state 45
    THROW           shift and go to state 46
    CONST           shift and go to state 47
    THIS            shift and go to state 48
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ABSTRACT        shift and go to state 62
    PRIVATE         shift and go to state 63
    PROTECTED       shift and go to state 64
    PUBLIC          shift and go to state 65
    STATIC          shift and go to state 66
    FINAL           shift and go to state 67
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    DO              shift and go to state 71
    SWITCH          shift and go to state 72
    FOREACH         shift and go to state 73
    FOR             shift and go to state 75

    body                           shift and go to state 351
    sentenciaList                  shift and go to state 162
    empty                          shift and go to state 163
    sentencia                      shift and go to state 164
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    expresion                      shift and go to state 27
    valor                          shift and go to state 29
    controlStructure               shift and go to state 32
    dataStructure                  shift and go to state 33
    data                           shift and go to state 40
    classInterface                 shift and go to state 41
    operaArit                      shift and go to state 54
    if                             shift and go to state 55
    for                            shift and go to state 56
    while                          shift and go to state 57
    dowhile                        shift and go to state 58
    switch                         shift and go to state 59
    foreach                        shift and go to state 60
    array                          shift and go to state 61
    forStatement                   shift and go to state 69
    map                            shift and go to state 74

state 309

    (105) forcondition -> VARIABLE EQUALS INT . SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (106) forcondition -> VARIABLE EQUALS INT . SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    SEMICOLON       shift and go to state 352


state 310

    (34) asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 353


state 311

    (193) anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP . comparacion SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN

    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    comparacion                    shift and go to state 354
    valor                          shift and go to state 29
    expresion                      shift and go to state 27
    llamadaFuncion                 shift and go to state 101
    operaArit                      shift and go to state 54

state 312

    (126) array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .

    VARIABLE        reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    ECHO            reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    PRINT           reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    TRY             reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    FUNCTION        reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    RETURN          reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    ID              reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    EMPTY           reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    CLASS           reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    INTERFACE       reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    INCLUDE         reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    NAMESPACE       reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    THROW           reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    CONST           reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    THIS            reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    INT             reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    STRING          reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    BOOL            reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    NULL            reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    ARRAY           reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    ABSTRACT        reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    PRIVATE         reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    PROTECTED       reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    PUBLIC          reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    STATIC          reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    FINAL           reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    IF              reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    WHILE           reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    DO              reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    SWITCH          reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    FOREACH         reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    FOR             reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    CLOSETAG        reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    BREAK           reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    ENDSWITCH       reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    CASE            reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    DEFAULT         reduce using rule 126 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)


state 313

    (132) map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .

    VARIABLE        reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    ECHO            reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    PRINT           reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    TRY             reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    FUNCTION        reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    RETURN          reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    ID              reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    EMPTY           reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    CLASS           reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    INTERFACE       reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    INCLUDE         reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    NAMESPACE       reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    THROW           reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    CONST           reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    THIS            reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    INT             reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    STRING          reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    BOOL            reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    NULL            reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    ARRAY           reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    ABSTRACT        reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    PRIVATE         reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    PROTECTED       reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    PUBLIC          reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    STATIC          reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    FINAL           reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    IF              reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    WHILE           reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    DO              reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    SWITCH          reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    FOREACH         reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    FOR             reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    CLOSETAG        reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    BREAK           reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    ENDSWITCH       reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    CASE            reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    DEFAULT         reduce using rule 132 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)


state 314

    (131) arrayAnidado -> arrays COMMA arrayAnidado .

    RBRACKET        reduce using rule 131 (arrayAnidado -> arrays COMMA arrayAnidado .)


state 315

    (135) maps -> mapArrow COMMA maps .

    RBRACKET        reduce using rule 135 (maps -> mapArrow COMMA maps .)
    RPAREN          reduce using rule 135 (maps -> mapArrow COMMA maps .)


state 316

    (136) mapArrow -> valor . ARROWMAP valor

    ARROWMAP        shift and go to state 267


state 317

    (136) mapArrow -> valor ARROWMAP valor .

    COMMA           reduce using rule 136 (mapArrow -> valor ARROWMAP valor .)
    RBRACKET        reduce using rule 136 (mapArrow -> valor ARROWMAP valor .)
    RPAREN          reduce using rule 136 (mapArrow -> valor ARROWMAP valor .)


state 318

    (127) array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 355


state 319

    (133) map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 356


state 320

    (160) objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 357


state 321

    (156) try -> TRY LBRACE body RBRACE catchs FINALLY . LBRACE body RBRACE

    LBRACE          shift and go to state 358


state 322

    (159) catchs -> catch catchs .

    FINALLY         reduce using rule 159 (catchs -> catch catchs .)
    VARIABLE        reduce using rule 159 (catchs -> catch catchs .)
    ECHO            reduce using rule 159 (catchs -> catch catchs .)
    PRINT           reduce using rule 159 (catchs -> catch catchs .)
    TRY             reduce using rule 159 (catchs -> catch catchs .)
    FUNCTION        reduce using rule 159 (catchs -> catch catchs .)
    RETURN          reduce using rule 159 (catchs -> catch catchs .)
    ID              reduce using rule 159 (catchs -> catch catchs .)
    EMPTY           reduce using rule 159 (catchs -> catch catchs .)
    CLASS           reduce using rule 159 (catchs -> catch catchs .)
    INTERFACE       reduce using rule 159 (catchs -> catch catchs .)
    INCLUDE         reduce using rule 159 (catchs -> catch catchs .)
    NAMESPACE       reduce using rule 159 (catchs -> catch catchs .)
    THROW           reduce using rule 159 (catchs -> catch catchs .)
    CONST           reduce using rule 159 (catchs -> catch catchs .)
    THIS            reduce using rule 159 (catchs -> catch catchs .)
    INT             reduce using rule 159 (catchs -> catch catchs .)
    FLOAT           reduce using rule 159 (catchs -> catch catchs .)
    STRING          reduce using rule 159 (catchs -> catch catchs .)
    BOOL            reduce using rule 159 (catchs -> catch catchs .)
    NULL            reduce using rule 159 (catchs -> catch catchs .)
    ARRAY           reduce using rule 159 (catchs -> catch catchs .)
    LPAREN          reduce using rule 159 (catchs -> catch catchs .)
    ABSTRACT        reduce using rule 159 (catchs -> catch catchs .)
    PRIVATE         reduce using rule 159 (catchs -> catch catchs .)
    PROTECTED       reduce using rule 159 (catchs -> catch catchs .)
    PUBLIC          reduce using rule 159 (catchs -> catch catchs .)
    STATIC          reduce using rule 159 (catchs -> catch catchs .)
    FINAL           reduce using rule 159 (catchs -> catch catchs .)
    IF              reduce using rule 159 (catchs -> catch catchs .)
    WHILE           reduce using rule 159 (catchs -> catch catchs .)
    DO              reduce using rule 159 (catchs -> catch catchs .)
    SWITCH          reduce using rule 159 (catchs -> catch catchs .)
    FOREACH         reduce using rule 159 (catchs -> catch catchs .)
    FOR             reduce using rule 159 (catchs -> catch catchs .)
    CLOSETAG        reduce using rule 159 (catchs -> catch catchs .)
    RBRACE          reduce using rule 159 (catchs -> catch catchs .)
    BREAK           reduce using rule 159 (catchs -> catch catchs .)
    ENDSWITCH       reduce using rule 159 (catchs -> catch catchs .)
    CASE            reduce using rule 159 (catchs -> catch catchs .)
    DEFAULT         reduce using rule 159 (catchs -> catch catchs .)


state 323

    (157) catch -> CATCH LPAREN . EXCEPTION VARIABLE RPAREN LBRACE body RBRACE

    EXCEPTION       shift and go to state 359


state 324

    (161) funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE . body RBRACE
    (99) body -> . sentenciaList
    (100) body -> . empty
    (101) sentenciaList -> . sentencia
    (102) sentenciaList -> . sentencia sentenciaList
    (66) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (58) impresion -> . ECHO imprimir SEMICOLON
    (59) impresion -> . PRINT imprimir SEMICOLON
    (67) estructurasPrograma -> . controlStructure
    (68) estructurasPrograma -> . dataStructure
    (155) try -> . TRY LBRACE body RBRACE catchs
    (156) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (161) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN expresion SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (166) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (167) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (168) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . classInterface
    (189) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (160) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (190) includes -> . INCLUDE STRING SEMICOLON
    (191) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (192) namespace -> . NAMESPACE ID SEMICOLON
    (193) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (194) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> . THROW valor SEMICOLON
    (196) instance -> . VARIABLE INSTANCEOF ID
    (197) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (198) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (199) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (200) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (201) minuse -> . VARIABLE MINUSEQUAL INT
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (69) controlStructure -> . if
    (70) controlStructure -> . for
    (71) controlStructure -> . while
    (72) controlStructure -> . dowhile
    (73) controlStructure -> . switch
    (74) controlStructure -> . foreach
    (124) dataStructure -> . array
    (183) data -> . ABSTRACT
    (184) data -> . PRIVATE
    (185) data -> . PROTECTED
    (186) data -> . PUBLIC
    (187) data -> . STATIC
    (188) data -> . FINAL
    (177) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (179) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (75) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> . IF LPAREN conditions RPAREN body
    (103) for -> . forStatement
    (107) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (109) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (110) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (118) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (125) array -> . VARIABLE EQUALS arrays SEMICOLON
    (126) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) array -> . map
    (104) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (132) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 66 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 30
    PRINT           shift and go to state 31
    TRY             shift and go to state 34
    FUNCTION        shift and go to state 35
    RETURN          shift and go to state 37
    ID              shift and go to state 36
    EMPTY           shift and go to state 38
    CLASS           shift and go to state 39
    INTERFACE       shift and go to state 42
    INCLUDE         shift and go to state 43
    NAMESPACE       shift and go to state 45
    THROW           shift and go to state 46
    CONST           shift and go to state 47
    THIS            shift and go to state 48
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ABSTRACT        shift and go to state 62
    PRIVATE         shift and go to state 63
    PROTECTED       shift and go to state 64
    PUBLIC          shift and go to state 65
    STATIC          shift and go to state 66
    FINAL           shift and go to state 67
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    DO              shift and go to state 71
    SWITCH          shift and go to state 72
    FOREACH         shift and go to state 73
    FOR             shift and go to state 75

    body                           shift and go to state 360
    sentenciaList                  shift and go to state 162
    empty                          shift and go to state 163
    sentencia                      shift and go to state 164
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    expresion                      shift and go to state 27
    valor                          shift and go to state 29
    controlStructure               shift and go to state 32
    dataStructure                  shift and go to state 33
    data                           shift and go to state 40
    classInterface                 shift and go to state 41
    operaArit                      shift and go to state 54
    if                             shift and go to state 55
    for                            shift and go to state 56
    while                          shift and go to state 57
    dowhile                        shift and go to state 58
    switch                         shift and go to state 59
    foreach                        shift and go to state 60
    array                          shift and go to state 61
    forStatement                   shift and go to state 69
    map                            shift and go to state 74

state 325

    (147) argumento -> type VARIABLE EQUALS valor .

    COMMA           reduce using rule 147 (argumento -> type VARIABLE EQUALS valor .)
    RPAREN          reduce using rule 147 (argumento -> type VARIABLE EQUALS valor .)


state 326

    (172) classMember -> type VARIABLE SEMICOLON .

    INT_TYPE        reduce using rule 172 (classMember -> type VARIABLE SEMICOLON .)
    FLOAT_TYPE      reduce using rule 172 (classMember -> type VARIABLE SEMICOLON .)
    STRING_TYPE     reduce using rule 172 (classMember -> type VARIABLE SEMICOLON .)
    BOOL_TYPE       reduce using rule 172 (classMember -> type VARIABLE SEMICOLON .)
    ARRAY_TYPE      reduce using rule 172 (classMember -> type VARIABLE SEMICOLON .)
    VOID            reduce using rule 172 (classMember -> type VARIABLE SEMICOLON .)
    NEW             reduce using rule 172 (classMember -> type VARIABLE SEMICOLON .)
    RBRACE          reduce using rule 172 (classMember -> type VARIABLE SEMICOLON .)


state 327

    (173) classMember -> type FUNCTION ID . LPAREN argumentos RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 361


state 328

    (175) objectInstantiation -> NEW ID LPAREN . argumentos RPAREN
    (176) objectInstantiation -> NEW ID LPAREN . RPAREN
    (142) argumentos -> . argumento
    (143) argumentos -> . argumento COMMA argumentos
    (144) argumentos -> . empty
    (145) argumento -> . type VARIABLE
    (146) argumento -> . VARIABLE EQUALS valor
    (147) argumento -> . type VARIABLE EQUALS valor
    (148) argumento -> . operaArit
    (66) empty -> .
    (149) type -> . INT_TYPE
    (150) type -> . FLOAT_TYPE
    (151) type -> . STRING_TYPE
    (152) type -> . BOOL_TYPE
    (153) type -> . ARRAY_TYPE
    (154) type -> . VOID
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 363
    VARIABLE        shift and go to state 171
    INT_TYPE        shift and go to state 174
    FLOAT_TYPE      shift and go to state 175
    STRING_TYPE     shift and go to state 176
    BOOL_TYPE       shift and go to state 177
    ARRAY_TYPE      shift and go to state 178
    VOID            shift and go to state 179
    LPAREN          shift and go to state 166
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

  ! RPAREN          [ reduce using rule 66 (empty -> .) ]

    argumentos                     shift and go to state 362
    argumento                      shift and go to state 168
    empty                          shift and go to state 169
    type                           shift and go to state 170
    valor                          shift and go to state 172
    operaArit                      shift and go to state 173
    llamadaFuncion                 shift and go to state 101

state 329

    (167) classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody . RBRACE

    RBRACE          shift and go to state 364


state 330

    (178) classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface . LBRACE classBody RBRACE

    LBRACE          shift and go to state 365


state 331

    (182) impInterface -> ID COMMA impInterface .

    LBRACE          reduce using rule 182 (impInterface -> ID COMMA impInterface .)


state 332

    (177) classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody . RBRACE

    RBRACE          shift and go to state 366


state 333

    (168) classDeclarate -> data CLASS ID LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    ECHO            reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    PRINT           reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    TRY             reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    RETURN          reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    ID              reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    CLASS           reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    THROW           reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    CONST           reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    THIS            reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    INT             reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    STRING          reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    BOOL            reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    NULL            reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    LPAREN          reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    STATIC          reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    FINAL           reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    IF              reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    WHILE           reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    DO              reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    FOR             reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    BREAK           reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    CASE            reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 168 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)


state 334

    (179) classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE . classBody RBRACE
    (170) classBody -> . classMember
    (171) classBody -> . classMember classBody
    (172) classMember -> . type VARIABLE SEMICOLON
    (173) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (174) classMember -> . objectInstantiation
    (149) type -> . INT_TYPE
    (150) type -> . FLOAT_TYPE
    (151) type -> . STRING_TYPE
    (152) type -> . BOOL_TYPE
    (153) type -> . ARRAY_TYPE
    (154) type -> . VOID
    (175) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (176) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 174
    FLOAT_TYPE      shift and go to state 175
    STRING_TYPE     shift and go to state 176
    BOOL_TYPE       shift and go to state 177
    ARRAY_TYPE      shift and go to state 178
    VOID            shift and go to state 179
    NEW             shift and go to state 235

    classBody                      shift and go to state 367
    classMember                    shift and go to state 232
    type                           shift and go to state 233
    objectInstantiation            shift and go to state 234

state 335

    (180) classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS . impInterface LBRACE classBody RBRACE
    (181) impInterface -> . ID
    (182) impInterface -> . ID COMMA impInterface

    ID              shift and go to state 237

    impInterface                   shift and go to state 368

state 336

    (194) throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 369


state 337

    (199) thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .

    VARIABLE        reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    ECHO            reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    TRY             reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    EMPTY           reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    CLASS           reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    THROW           reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    THIS            reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    INT             reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    BOOL            reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    NULL            reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    STATIC          reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    FINAL           reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    DO              reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    SWITCH          reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    FOREACH         reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    CASE            reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 199 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)


state 338

    (75) if -> IF LPAREN conditions RPAREN LBRACE body . RBRACE else_blocks

    RBRACE          shift and go to state 370


state 339

    (107) while -> WHILE LPAREN condition RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 371


state 340

    (108) while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .

    VARIABLE        reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ECHO            reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    PRINT           reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    TRY             reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FUNCTION        reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ID              reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    EMPTY           reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    CLASS           reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    INTERFACE       reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    INCLUDE         reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    NAMESPACE       reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    THROW           reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    CONST           reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    THIS            reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    INT             reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FLOAT           reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    STRING          reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    BOOL            reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    NULL            reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ARRAY           reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    LPAREN          reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ABSTRACT        reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    PRIVATE         reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    PROTECTED       reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    PUBLIC          reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    STATIC          reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FINAL           reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    IF              reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    WHILE           reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    DO              reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    SWITCH          reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FOREACH         reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FOR             reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    CLOSETAG        reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    RBRACE          reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    BREAK           reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ENDSWITCH       reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    CASE            reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    DEFAULT         reduce using rule 108 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)


state 341

    (109) dowhile -> DO LBRACE body RBRACE WHILE LPAREN . condition RPAREN SEMICOLON
    (83) condition -> . valor
    (84) condition -> . valor opSymbol valor
    (85) condition -> . NOT condition
    (86) condition -> . LPAREN conditions RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    NOT             shift and go to state 199
    LPAREN          shift and go to state 200
    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    condition                      shift and go to state 372
    valor                          shift and go to state 198
    llamadaFuncion                 shift and go to state 101

state 342

    (110) switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists . RBRACE

    RBRACE          shift and go to state 373


state 343

    (112) caseLists -> cases .
    (113) caseLists -> cases . default
    (137) default -> . DEFAULT COLON body BREAK SEMICOLON
    (138) default -> . DEFAULT SEMICOLON body BREAK SEMICOLON
    (139) default -> . DEFAULT COLON body
    (140) default -> . DEFAULT SEMICOLON body
    (141) default -> . DEFAULT

    RBRACE          reduce using rule 112 (caseLists -> cases .)
    ENDSWITCH       reduce using rule 112 (caseLists -> cases .)
    DEFAULT         shift and go to state 347

    default                        shift and go to state 374

state 344

    (114) caseLists -> default .

    RBRACE          reduce using rule 114 (caseLists -> default .)
    ENDSWITCH       reduce using rule 114 (caseLists -> default .)


state 345

    (115) caseLists -> empty .

    RBRACE          reduce using rule 115 (caseLists -> empty .)
    ENDSWITCH       reduce using rule 115 (caseLists -> empty .)


state 346

    (116) cases -> case .
    (117) cases -> case . cases
    (116) cases -> . case
    (117) cases -> . case cases
    (119) case -> . CASE valor COLON body BREAK SEMICOLON
    (120) case -> . CASE valor SEMICOLON body BREAK SEMICOLON
    (121) case -> . CASE valor COLON body
    (122) case -> . CASE valor SEMICOLON
    (123) case -> . CASE valor

    DEFAULT         reduce using rule 116 (cases -> case .)
    RBRACE          reduce using rule 116 (cases -> case .)
    ENDSWITCH       reduce using rule 116 (cases -> case .)
    CASE            shift and go to state 348

    case                           shift and go to state 346
    cases                          shift and go to state 375

state 347

    (137) default -> DEFAULT . COLON body BREAK SEMICOLON
    (138) default -> DEFAULT . SEMICOLON body BREAK SEMICOLON
    (139) default -> DEFAULT . COLON body
    (140) default -> DEFAULT . SEMICOLON body
    (141) default -> DEFAULT .

    COLON           shift and go to state 376
    SEMICOLON       shift and go to state 377
    RBRACE          reduce using rule 141 (default -> DEFAULT .)
    ENDSWITCH       reduce using rule 141 (default -> DEFAULT .)


state 348

    (119) case -> CASE . valor COLON body BREAK SEMICOLON
    (120) case -> CASE . valor SEMICOLON body BREAK SEMICOLON
    (121) case -> CASE . valor COLON body
    (122) case -> CASE . valor SEMICOLON
    (123) case -> CASE . valor
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    valor                          shift and go to state 378
    llamadaFuncion                 shift and go to state 101

state 349

    (111) switch -> SWITCH LPAREN valor RPAREN COLON caseLists . ENDSWITCH SEMICOLON

    ENDSWITCH       shift and go to state 379


state 350

    (118) foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 380


state 351

    (104) forStatement -> FOR LPAREN forcondition RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 381


state 352

    (105) forcondition -> VARIABLE EQUALS INT SEMICOLON . VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (106) forcondition -> VARIABLE EQUALS INT SEMICOLON . VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    VARIABLE        shift and go to state 382


state 353

    (34) asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .

    VARIABLE        reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ECHO            reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    PRINT           reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    TRY             reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    RETURN          reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ID              reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    EMPTY           reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    CLASS           reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    THROW           reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    CONST           reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    THIS            reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    INT             reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    STRING          reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    BOOL            reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    NULL            reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    STATIC          reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FINAL           reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    IF              reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    WHILE           reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    DO              reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    SWITCH          reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FOREACH         reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FOR             reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    BREAK           reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    CASE            reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 34 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)


state 354

    (193) anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion . SEMICOLON
    (30) expresion -> comparacion .

    SEMICOLON       shift and go to state 383
    EQ              reduce using rule 30 (expresion -> comparacion .)
    NEQ             reduce using rule 30 (expresion -> comparacion .)
    STRICTEQ        reduce using rule 30 (expresion -> comparacion .)
    STRICTNEQ       reduce using rule 30 (expresion -> comparacion .)
    LT              reduce using rule 30 (expresion -> comparacion .)
    GT              reduce using rule 30 (expresion -> comparacion .)
    LEQ             reduce using rule 30 (expresion -> comparacion .)
    GEQ             reduce using rule 30 (expresion -> comparacion .)
    AND             reduce using rule 30 (expresion -> comparacion .)
    LOGICAL_AND     reduce using rule 30 (expresion -> comparacion .)
    OR              reduce using rule 30 (expresion -> comparacion .)
    LOGICAL_OR      reduce using rule 30 (expresion -> comparacion .)


state 355

    (127) array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .

    VARIABLE        reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    ECHO            reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    PRINT           reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    TRY             reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    RETURN          reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    ID              reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    EMPTY           reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    CLASS           reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    THROW           reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    CONST           reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    THIS            reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    INT             reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    FLOAT           reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    STRING          reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    BOOL            reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    NULL            reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    ARRAY           reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    LPAREN          reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    STATIC          reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    FINAL           reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    IF              reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    WHILE           reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    DO              reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    SWITCH          reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    FOREACH         reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    FOR             reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    RBRACE          reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    BREAK           reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    CASE            reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 127 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)


state 356

    (133) map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .

    VARIABLE        reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    ECHO            reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    PRINT           reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    TRY             reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    RETURN          reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    ID              reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    EMPTY           reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    CLASS           reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    THROW           reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    CONST           reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    THIS            reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    INT             reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    FLOAT           reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    STRING          reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    BOOL            reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    NULL            reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    ARRAY           reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    LPAREN          reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    STATIC          reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    FINAL           reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    IF              reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    WHILE           reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    DO              reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    SWITCH          reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    FOREACH         reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    FOR             reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    RBRACE          reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    BREAK           reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    CASE            reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 133 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)


state 357

    (160) objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .

    VARIABLE        reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    ECHO            reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    PRINT           reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    TRY             reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    RETURN          reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    ID              reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    EMPTY           reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    CLASS           reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    THROW           reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    CONST           reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    THIS            reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    INT             reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    FLOAT           reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    STRING          reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    BOOL            reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    NULL            reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    ARRAY           reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    LPAREN          reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    STATIC          reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    FINAL           reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    IF              reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    WHILE           reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    DO              reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    SWITCH          reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    FOREACH         reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    FOR             reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    RBRACE          reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    BREAK           reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    CASE            reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 160 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)


state 358

    (156) try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE . body RBRACE
    (99) body -> . sentenciaList
    (100) body -> . empty
    (101) sentenciaList -> . sentencia
    (102) sentenciaList -> . sentencia sentenciaList
    (66) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (58) impresion -> . ECHO imprimir SEMICOLON
    (59) impresion -> . PRINT imprimir SEMICOLON
    (67) estructurasPrograma -> . controlStructure
    (68) estructurasPrograma -> . dataStructure
    (155) try -> . TRY LBRACE body RBRACE catchs
    (156) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (161) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN expresion SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (166) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (167) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (168) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . classInterface
    (189) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (160) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (190) includes -> . INCLUDE STRING SEMICOLON
    (191) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (192) namespace -> . NAMESPACE ID SEMICOLON
    (193) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (194) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> . THROW valor SEMICOLON
    (196) instance -> . VARIABLE INSTANCEOF ID
    (197) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (198) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (199) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (200) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (201) minuse -> . VARIABLE MINUSEQUAL INT
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (69) controlStructure -> . if
    (70) controlStructure -> . for
    (71) controlStructure -> . while
    (72) controlStructure -> . dowhile
    (73) controlStructure -> . switch
    (74) controlStructure -> . foreach
    (124) dataStructure -> . array
    (183) data -> . ABSTRACT
    (184) data -> . PRIVATE
    (185) data -> . PROTECTED
    (186) data -> . PUBLIC
    (187) data -> . STATIC
    (188) data -> . FINAL
    (177) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (179) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (75) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> . IF LPAREN conditions RPAREN body
    (103) for -> . forStatement
    (107) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (109) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (110) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (118) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (125) array -> . VARIABLE EQUALS arrays SEMICOLON
    (126) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) array -> . map
    (104) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (132) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 66 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 30
    PRINT           shift and go to state 31
    TRY             shift and go to state 34
    FUNCTION        shift and go to state 35
    RETURN          shift and go to state 37
    ID              shift and go to state 36
    EMPTY           shift and go to state 38
    CLASS           shift and go to state 39
    INTERFACE       shift and go to state 42
    INCLUDE         shift and go to state 43
    NAMESPACE       shift and go to state 45
    THROW           shift and go to state 46
    CONST           shift and go to state 47
    THIS            shift and go to state 48
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ABSTRACT        shift and go to state 62
    PRIVATE         shift and go to state 63
    PROTECTED       shift and go to state 64
    PUBLIC          shift and go to state 65
    STATIC          shift and go to state 66
    FINAL           shift and go to state 67
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    DO              shift and go to state 71
    SWITCH          shift and go to state 72
    FOREACH         shift and go to state 73
    FOR             shift and go to state 75

    body                           shift and go to state 384
    sentenciaList                  shift and go to state 162
    empty                          shift and go to state 163
    sentencia                      shift and go to state 164
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    expresion                      shift and go to state 27
    valor                          shift and go to state 29
    controlStructure               shift and go to state 32
    dataStructure                  shift and go to state 33
    data                           shift and go to state 40
    classInterface                 shift and go to state 41
    operaArit                      shift and go to state 54
    if                             shift and go to state 55
    for                            shift and go to state 56
    while                          shift and go to state 57
    dowhile                        shift and go to state 58
    switch                         shift and go to state 59
    foreach                        shift and go to state 60
    array                          shift and go to state 61
    forStatement                   shift and go to state 69
    map                            shift and go to state 74

state 359

    (157) catch -> CATCH LPAREN EXCEPTION . VARIABLE RPAREN LBRACE body RBRACE

    VARIABLE        shift and go to state 385


state 360

    (161) funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 386


state 361

    (173) classMember -> type FUNCTION ID LPAREN . argumentos RPAREN LBRACE body RBRACE
    (142) argumentos -> . argumento
    (143) argumentos -> . argumento COMMA argumentos
    (144) argumentos -> . empty
    (145) argumento -> . type VARIABLE
    (146) argumento -> . VARIABLE EQUALS valor
    (147) argumento -> . type VARIABLE EQUALS valor
    (148) argumento -> . operaArit
    (66) empty -> .
    (149) type -> . INT_TYPE
    (150) type -> . FLOAT_TYPE
    (151) type -> . STRING_TYPE
    (152) type -> . BOOL_TYPE
    (153) type -> . ARRAY_TYPE
    (154) type -> . VOID
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    VARIABLE        shift and go to state 171
    RPAREN          reduce using rule 66 (empty -> .)
    INT_TYPE        shift and go to state 174
    FLOAT_TYPE      shift and go to state 175
    STRING_TYPE     shift and go to state 176
    BOOL_TYPE       shift and go to state 177
    ARRAY_TYPE      shift and go to state 178
    VOID            shift and go to state 179
    LPAREN          shift and go to state 166
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    type                           shift and go to state 170
    argumentos                     shift and go to state 387
    argumento                      shift and go to state 168
    empty                          shift and go to state 169
    valor                          shift and go to state 172
    operaArit                      shift and go to state 173
    llamadaFuncion                 shift and go to state 101

state 362

    (175) objectInstantiation -> NEW ID LPAREN argumentos . RPAREN

    RPAREN          shift and go to state 388


state 363

    (176) objectInstantiation -> NEW ID LPAREN RPAREN .

    INT_TYPE        reduce using rule 176 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    FLOAT_TYPE      reduce using rule 176 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    STRING_TYPE     reduce using rule 176 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    BOOL_TYPE       reduce using rule 176 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    ARRAY_TYPE      reduce using rule 176 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    VOID            reduce using rule 176 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    NEW             reduce using rule 176 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    RBRACE          reduce using rule 176 (objectInstantiation -> NEW ID LPAREN RPAREN .)


state 364

    (167) classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    ECHO            reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    PRINT           reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    TRY             reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    RETURN          reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    ID              reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    CLASS           reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    THROW           reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    CONST           reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    THIS            reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    INT             reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    STRING          reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    BOOL            reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    NULL            reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    LPAREN          reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    STATIC          reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    FINAL           reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    IF              reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    WHILE           reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    DO              reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    FOR             reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    BREAK           reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    CASE            reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 167 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)


state 365

    (178) classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE . classBody RBRACE
    (170) classBody -> . classMember
    (171) classBody -> . classMember classBody
    (172) classMember -> . type VARIABLE SEMICOLON
    (173) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (174) classMember -> . objectInstantiation
    (149) type -> . INT_TYPE
    (150) type -> . FLOAT_TYPE
    (151) type -> . STRING_TYPE
    (152) type -> . BOOL_TYPE
    (153) type -> . ARRAY_TYPE
    (154) type -> . VOID
    (175) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (176) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 174
    FLOAT_TYPE      shift and go to state 175
    STRING_TYPE     shift and go to state 176
    BOOL_TYPE       shift and go to state 177
    ARRAY_TYPE      shift and go to state 178
    VOID            shift and go to state 179
    NEW             shift and go to state 235

    classBody                      shift and go to state 389
    classMember                    shift and go to state 232
    type                           shift and go to state 233
    objectInstantiation            shift and go to state 234

state 366

    (177) classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ECHO            reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRINT           reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    TRY             reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RETURN          reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ID              reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLASS           reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THROW           reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CONST           reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THIS            reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INT             reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STRING          reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BOOL            reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NULL            reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    LPAREN          reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STATIC          reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FINAL           reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    IF              reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    WHILE           reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DO              reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOR             reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BREAK           reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CASE            reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 177 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)


state 367

    (179) classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody . RBRACE

    RBRACE          shift and go to state 390


state 368

    (180) classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface . LBRACE classBody RBRACE

    LBRACE          shift and go to state 391


state 369

    (194) throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .

    VARIABLE        reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    ECHO            reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    PRINT           reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    TRY             reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    RETURN          reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    ID              reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    EMPTY           reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    CLASS           reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    THROW           reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    CONST           reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    THIS            reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    INT             reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    FLOAT           reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    STRING          reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    BOOL            reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    NULL            reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    ARRAY           reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    LPAREN          reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    STATIC          reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    FINAL           reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    IF              reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    WHILE           reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    DO              reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    SWITCH          reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    FOREACH         reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    FOR             reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    RBRACE          reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    BREAK           reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    CASE            reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 194 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)


state 370

    (75) if -> IF LPAREN conditions RPAREN LBRACE body RBRACE . else_blocks
    (77) else_blocks -> . ELSE LBRACE body RBRACE
    (78) else_blocks -> . ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (79) else_blocks -> . empty
    (66) empty -> .

    ELSE            shift and go to state 393
    ELSEIF          shift and go to state 394
    VARIABLE        reduce using rule 66 (empty -> .)
    ECHO            reduce using rule 66 (empty -> .)
    PRINT           reduce using rule 66 (empty -> .)
    TRY             reduce using rule 66 (empty -> .)
    FUNCTION        reduce using rule 66 (empty -> .)
    RETURN          reduce using rule 66 (empty -> .)
    ID              reduce using rule 66 (empty -> .)
    EMPTY           reduce using rule 66 (empty -> .)
    CLASS           reduce using rule 66 (empty -> .)
    INTERFACE       reduce using rule 66 (empty -> .)
    INCLUDE         reduce using rule 66 (empty -> .)
    NAMESPACE       reduce using rule 66 (empty -> .)
    THROW           reduce using rule 66 (empty -> .)
    CONST           reduce using rule 66 (empty -> .)
    THIS            reduce using rule 66 (empty -> .)
    INT             reduce using rule 66 (empty -> .)
    FLOAT           reduce using rule 66 (empty -> .)
    STRING          reduce using rule 66 (empty -> .)
    BOOL            reduce using rule 66 (empty -> .)
    NULL            reduce using rule 66 (empty -> .)
    ARRAY           reduce using rule 66 (empty -> .)
    LPAREN          reduce using rule 66 (empty -> .)
    ABSTRACT        reduce using rule 66 (empty -> .)
    PRIVATE         reduce using rule 66 (empty -> .)
    PROTECTED       reduce using rule 66 (empty -> .)
    PUBLIC          reduce using rule 66 (empty -> .)
    STATIC          reduce using rule 66 (empty -> .)
    FINAL           reduce using rule 66 (empty -> .)
    IF              reduce using rule 66 (empty -> .)
    WHILE           reduce using rule 66 (empty -> .)
    DO              reduce using rule 66 (empty -> .)
    SWITCH          reduce using rule 66 (empty -> .)
    FOREACH         reduce using rule 66 (empty -> .)
    FOR             reduce using rule 66 (empty -> .)
    CLOSETAG        reduce using rule 66 (empty -> .)
    RBRACE          reduce using rule 66 (empty -> .)
    BREAK           reduce using rule 66 (empty -> .)
    ENDSWITCH       reduce using rule 66 (empty -> .)
    CASE            reduce using rule 66 (empty -> .)
    DEFAULT         reduce using rule 66 (empty -> .)

    else_blocks                    shift and go to state 392
    empty                          shift and go to state 395

state 371

    (107) while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .

    VARIABLE        reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    TRY             reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    EMPTY           reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    CLASS           reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    INTERFACE       reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    INCLUDE         reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    THROW           reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    CONST           reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    THIS            reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    LPAREN          reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    PRIVATE         reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    PROTECTED       reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    PUBLIC          reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    STATIC          reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FINAL           reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    DO              reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FOREACH         reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 107 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)


state 372

    (109) dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition . RPAREN SEMICOLON

    RPAREN          shift and go to state 396


state 373

    (110) switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .

    VARIABLE        reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ECHO            reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    PRINT           reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    TRY             reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FUNCTION        reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    RETURN          reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ID              reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    EMPTY           reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    CLASS           reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    INTERFACE       reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    INCLUDE         reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    NAMESPACE       reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    THROW           reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    CONST           reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    THIS            reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    INT             reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FLOAT           reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    STRING          reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    BOOL            reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    NULL            reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ARRAY           reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    LPAREN          reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ABSTRACT        reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    PRIVATE         reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    PROTECTED       reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    PUBLIC          reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    STATIC          reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FINAL           reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    IF              reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    WHILE           reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    DO              reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    SWITCH          reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FOREACH         reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FOR             reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    CLOSETAG        reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    RBRACE          reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    BREAK           reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ENDSWITCH       reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    CASE            reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    DEFAULT         reduce using rule 110 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)


state 374

    (113) caseLists -> cases default .

    RBRACE          reduce using rule 113 (caseLists -> cases default .)
    ENDSWITCH       reduce using rule 113 (caseLists -> cases default .)


state 375

    (117) cases -> case cases .

    DEFAULT         reduce using rule 117 (cases -> case cases .)
    RBRACE          reduce using rule 117 (cases -> case cases .)
    ENDSWITCH       reduce using rule 117 (cases -> case cases .)


state 376

    (137) default -> DEFAULT COLON . body BREAK SEMICOLON
    (139) default -> DEFAULT COLON . body
    (99) body -> . sentenciaList
    (100) body -> . empty
    (101) sentenciaList -> . sentencia
    (102) sentenciaList -> . sentencia sentenciaList
    (66) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (58) impresion -> . ECHO imprimir SEMICOLON
    (59) impresion -> . PRINT imprimir SEMICOLON
    (67) estructurasPrograma -> . controlStructure
    (68) estructurasPrograma -> . dataStructure
    (155) try -> . TRY LBRACE body RBRACE catchs
    (156) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (161) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN expresion SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (166) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (167) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (168) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . classInterface
    (189) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (160) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (190) includes -> . INCLUDE STRING SEMICOLON
    (191) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (192) namespace -> . NAMESPACE ID SEMICOLON
    (193) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (194) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> . THROW valor SEMICOLON
    (196) instance -> . VARIABLE INSTANCEOF ID
    (197) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (198) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (199) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (200) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (201) minuse -> . VARIABLE MINUSEQUAL INT
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (69) controlStructure -> . if
    (70) controlStructure -> . for
    (71) controlStructure -> . while
    (72) controlStructure -> . dowhile
    (73) controlStructure -> . switch
    (74) controlStructure -> . foreach
    (124) dataStructure -> . array
    (183) data -> . ABSTRACT
    (184) data -> . PRIVATE
    (185) data -> . PROTECTED
    (186) data -> . PUBLIC
    (187) data -> . STATIC
    (188) data -> . FINAL
    (177) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (179) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (75) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> . IF LPAREN conditions RPAREN body
    (103) for -> . forStatement
    (107) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (109) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (110) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (118) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (125) array -> . VARIABLE EQUALS arrays SEMICOLON
    (126) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) array -> . map
    (104) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (132) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    BREAK           reduce using rule 66 (empty -> .)
    RBRACE          reduce using rule 66 (empty -> .)
    ENDSWITCH       reduce using rule 66 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 30
    PRINT           shift and go to state 31
    TRY             shift and go to state 34
    FUNCTION        shift and go to state 35
    RETURN          shift and go to state 37
    ID              shift and go to state 36
    EMPTY           shift and go to state 38
    CLASS           shift and go to state 39
    INTERFACE       shift and go to state 42
    INCLUDE         shift and go to state 43
    NAMESPACE       shift and go to state 45
    THROW           shift and go to state 46
    CONST           shift and go to state 47
    THIS            shift and go to state 48
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ABSTRACT        shift and go to state 62
    PRIVATE         shift and go to state 63
    PROTECTED       shift and go to state 64
    PUBLIC          shift and go to state 65
    STATIC          shift and go to state 66
    FINAL           shift and go to state 67
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    DO              shift and go to state 71
    SWITCH          shift and go to state 72
    FOREACH         shift and go to state 73
    FOR             shift and go to state 75

    body                           shift and go to state 397
    sentenciaList                  shift and go to state 162
    empty                          shift and go to state 163
    sentencia                      shift and go to state 164
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    expresion                      shift and go to state 27
    valor                          shift and go to state 29
    controlStructure               shift and go to state 32
    dataStructure                  shift and go to state 33
    data                           shift and go to state 40
    classInterface                 shift and go to state 41
    operaArit                      shift and go to state 54
    if                             shift and go to state 55
    for                            shift and go to state 56
    while                          shift and go to state 57
    dowhile                        shift and go to state 58
    switch                         shift and go to state 59
    foreach                        shift and go to state 60
    array                          shift and go to state 61
    forStatement                   shift and go to state 69
    map                            shift and go to state 74

state 377

    (138) default -> DEFAULT SEMICOLON . body BREAK SEMICOLON
    (140) default -> DEFAULT SEMICOLON . body
    (99) body -> . sentenciaList
    (100) body -> . empty
    (101) sentenciaList -> . sentencia
    (102) sentenciaList -> . sentencia sentenciaList
    (66) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (58) impresion -> . ECHO imprimir SEMICOLON
    (59) impresion -> . PRINT imprimir SEMICOLON
    (67) estructurasPrograma -> . controlStructure
    (68) estructurasPrograma -> . dataStructure
    (155) try -> . TRY LBRACE body RBRACE catchs
    (156) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (161) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN expresion SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (166) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (167) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (168) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . classInterface
    (189) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (160) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (190) includes -> . INCLUDE STRING SEMICOLON
    (191) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (192) namespace -> . NAMESPACE ID SEMICOLON
    (193) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (194) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> . THROW valor SEMICOLON
    (196) instance -> . VARIABLE INSTANCEOF ID
    (197) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (198) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (199) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (200) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (201) minuse -> . VARIABLE MINUSEQUAL INT
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (69) controlStructure -> . if
    (70) controlStructure -> . for
    (71) controlStructure -> . while
    (72) controlStructure -> . dowhile
    (73) controlStructure -> . switch
    (74) controlStructure -> . foreach
    (124) dataStructure -> . array
    (183) data -> . ABSTRACT
    (184) data -> . PRIVATE
    (185) data -> . PROTECTED
    (186) data -> . PUBLIC
    (187) data -> . STATIC
    (188) data -> . FINAL
    (177) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (179) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (75) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> . IF LPAREN conditions RPAREN body
    (103) for -> . forStatement
    (107) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (109) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (110) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (118) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (125) array -> . VARIABLE EQUALS arrays SEMICOLON
    (126) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) array -> . map
    (104) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (132) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    BREAK           reduce using rule 66 (empty -> .)
    RBRACE          reduce using rule 66 (empty -> .)
    ENDSWITCH       reduce using rule 66 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 30
    PRINT           shift and go to state 31
    TRY             shift and go to state 34
    FUNCTION        shift and go to state 35
    RETURN          shift and go to state 37
    ID              shift and go to state 36
    EMPTY           shift and go to state 38
    CLASS           shift and go to state 39
    INTERFACE       shift and go to state 42
    INCLUDE         shift and go to state 43
    NAMESPACE       shift and go to state 45
    THROW           shift and go to state 46
    CONST           shift and go to state 47
    THIS            shift and go to state 48
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ABSTRACT        shift and go to state 62
    PRIVATE         shift and go to state 63
    PROTECTED       shift and go to state 64
    PUBLIC          shift and go to state 65
    STATIC          shift and go to state 66
    FINAL           shift and go to state 67
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    DO              shift and go to state 71
    SWITCH          shift and go to state 72
    FOREACH         shift and go to state 73
    FOR             shift and go to state 75

    body                           shift and go to state 398
    sentenciaList                  shift and go to state 162
    empty                          shift and go to state 163
    sentencia                      shift and go to state 164
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    expresion                      shift and go to state 27
    valor                          shift and go to state 29
    controlStructure               shift and go to state 32
    dataStructure                  shift and go to state 33
    data                           shift and go to state 40
    classInterface                 shift and go to state 41
    operaArit                      shift and go to state 54
    if                             shift and go to state 55
    for                            shift and go to state 56
    while                          shift and go to state 57
    dowhile                        shift and go to state 58
    switch                         shift and go to state 59
    foreach                        shift and go to state 60
    array                          shift and go to state 61
    forStatement                   shift and go to state 69
    map                            shift and go to state 74

state 378

    (119) case -> CASE valor . COLON body BREAK SEMICOLON
    (120) case -> CASE valor . SEMICOLON body BREAK SEMICOLON
    (121) case -> CASE valor . COLON body
    (122) case -> CASE valor . SEMICOLON
    (123) case -> CASE valor .

    COLON           shift and go to state 399
    SEMICOLON       shift and go to state 400
    CASE            reduce using rule 123 (case -> CASE valor .)
    DEFAULT         reduce using rule 123 (case -> CASE valor .)
    RBRACE          reduce using rule 123 (case -> CASE valor .)
    ENDSWITCH       reduce using rule 123 (case -> CASE valor .)


state 379

    (111) switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH . SEMICOLON

    SEMICOLON       shift and go to state 401


state 380

    (118) foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE . body RBRACE
    (99) body -> . sentenciaList
    (100) body -> . empty
    (101) sentenciaList -> . sentencia
    (102) sentenciaList -> . sentencia sentenciaList
    (66) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (58) impresion -> . ECHO imprimir SEMICOLON
    (59) impresion -> . PRINT imprimir SEMICOLON
    (67) estructurasPrograma -> . controlStructure
    (68) estructurasPrograma -> . dataStructure
    (155) try -> . TRY LBRACE body RBRACE catchs
    (156) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (161) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN expresion SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (166) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (167) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (168) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . classInterface
    (189) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (160) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (190) includes -> . INCLUDE STRING SEMICOLON
    (191) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (192) namespace -> . NAMESPACE ID SEMICOLON
    (193) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (194) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> . THROW valor SEMICOLON
    (196) instance -> . VARIABLE INSTANCEOF ID
    (197) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (198) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (199) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (200) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (201) minuse -> . VARIABLE MINUSEQUAL INT
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (69) controlStructure -> . if
    (70) controlStructure -> . for
    (71) controlStructure -> . while
    (72) controlStructure -> . dowhile
    (73) controlStructure -> . switch
    (74) controlStructure -> . foreach
    (124) dataStructure -> . array
    (183) data -> . ABSTRACT
    (184) data -> . PRIVATE
    (185) data -> . PROTECTED
    (186) data -> . PUBLIC
    (187) data -> . STATIC
    (188) data -> . FINAL
    (177) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (179) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (75) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> . IF LPAREN conditions RPAREN body
    (103) for -> . forStatement
    (107) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (109) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (110) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (118) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (125) array -> . VARIABLE EQUALS arrays SEMICOLON
    (126) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) array -> . map
    (104) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (132) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 66 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 30
    PRINT           shift and go to state 31
    TRY             shift and go to state 34
    FUNCTION        shift and go to state 35
    RETURN          shift and go to state 37
    ID              shift and go to state 36
    EMPTY           shift and go to state 38
    CLASS           shift and go to state 39
    INTERFACE       shift and go to state 42
    INCLUDE         shift and go to state 43
    NAMESPACE       shift and go to state 45
    THROW           shift and go to state 46
    CONST           shift and go to state 47
    THIS            shift and go to state 48
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ABSTRACT        shift and go to state 62
    PRIVATE         shift and go to state 63
    PROTECTED       shift and go to state 64
    PUBLIC          shift and go to state 65
    STATIC          shift and go to state 66
    FINAL           shift and go to state 67
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    DO              shift and go to state 71
    SWITCH          shift and go to state 72
    FOREACH         shift and go to state 73
    FOR             shift and go to state 75

    body                           shift and go to state 402
    sentenciaList                  shift and go to state 162
    empty                          shift and go to state 163
    sentencia                      shift and go to state 164
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    expresion                      shift and go to state 27
    valor                          shift and go to state 29
    controlStructure               shift and go to state 32
    dataStructure                  shift and go to state 33
    data                           shift and go to state 40
    classInterface                 shift and go to state 41
    operaArit                      shift and go to state 54
    if                             shift and go to state 55
    for                            shift and go to state 56
    while                          shift and go to state 57
    dowhile                        shift and go to state 58
    switch                         shift and go to state 59
    foreach                        shift and go to state 60
    array                          shift and go to state 61
    forStatement                   shift and go to state 69
    map                            shift and go to state 74

state 381

    (104) forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .

    VARIABLE        reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    TRY             reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    EMPTY           reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    CLASS           reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    INTERFACE       reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    INCLUDE         reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    THROW           reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    CONST           reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    THIS            reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    LPAREN          reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    PRIVATE         reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    PROTECTED       reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    PUBLIC          reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    STATIC          reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FINAL           reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    DO              reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FOREACH         reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 104 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)


state 382

    (105) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE . opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (106) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE . opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS
    (87) opSymbol -> . EQ
    (88) opSymbol -> . NEQ
    (89) opSymbol -> . STRICTEQ
    (90) opSymbol -> . STRICTNEQ
    (91) opSymbol -> . LT
    (92) opSymbol -> . GT
    (93) opSymbol -> . LEQ
    (94) opSymbol -> . GEQ

    EQ              shift and go to state 85
    NEQ             shift and go to state 86
    STRICTEQ        shift and go to state 87
    STRICTNEQ       shift and go to state 88
    LT              shift and go to state 89
    GT              shift and go to state 90
    LEQ             shift and go to state 91
    GEQ             shift and go to state 92

    opSymbol                       shift and go to state 403

state 383

    (193) anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .

    VARIABLE        reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    ECHO            reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    PRINT           reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    TRY             reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    FUNCTION        reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    RETURN          reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    ID              reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    EMPTY           reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    CLASS           reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    INTERFACE       reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    INCLUDE         reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    NAMESPACE       reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    THROW           reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    CONST           reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    THIS            reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    INT             reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    FLOAT           reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    STRING          reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    BOOL            reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    NULL            reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    ARRAY           reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    LPAREN          reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    ABSTRACT        reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    PRIVATE         reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    PROTECTED       reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    PUBLIC          reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    STATIC          reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    FINAL           reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    IF              reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    WHILE           reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    DO              reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    SWITCH          reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    FOREACH         reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    FOR             reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    CLOSETAG        reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    RBRACE          reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    BREAK           reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    ENDSWITCH       reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    CASE            reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    DEFAULT         reduce using rule 193 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)


state 384

    (156) try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body . RBRACE

    RBRACE          shift and go to state 404


state 385

    (157) catch -> CATCH LPAREN EXCEPTION VARIABLE . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 405


state 386

    (161) funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .

    VARIABLE        reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    TRY             reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    EMPTY           reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    CLASS           reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    INTERFACE       reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    INCLUDE         reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    THROW           reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    CONST           reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    THIS            reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    LPAREN          reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    PRIVATE         reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    PROTECTED       reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    PUBLIC          reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    STATIC          reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FINAL           reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    DO              reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FOREACH         reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 161 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)


state 387

    (173) classMember -> type FUNCTION ID LPAREN argumentos . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 406


state 388

    (175) objectInstantiation -> NEW ID LPAREN argumentos RPAREN .

    INT_TYPE        reduce using rule 175 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    FLOAT_TYPE      reduce using rule 175 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    STRING_TYPE     reduce using rule 175 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    BOOL_TYPE       reduce using rule 175 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    ARRAY_TYPE      reduce using rule 175 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    VOID            reduce using rule 175 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    NEW             reduce using rule 175 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    RBRACE          reduce using rule 175 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)


state 389

    (178) classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody . RBRACE

    RBRACE          shift and go to state 407


state 390

    (179) classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ECHO            reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRINT           reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    TRY             reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RETURN          reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ID              reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLASS           reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THROW           reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CONST           reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THIS            reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INT             reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STRING          reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BOOL            reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NULL            reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    LPAREN          reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STATIC          reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FINAL           reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    IF              reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    WHILE           reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DO              reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOR             reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BREAK           reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CASE            reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 179 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)


state 391

    (180) classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE . classBody RBRACE
    (170) classBody -> . classMember
    (171) classBody -> . classMember classBody
    (172) classMember -> . type VARIABLE SEMICOLON
    (173) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (174) classMember -> . objectInstantiation
    (149) type -> . INT_TYPE
    (150) type -> . FLOAT_TYPE
    (151) type -> . STRING_TYPE
    (152) type -> . BOOL_TYPE
    (153) type -> . ARRAY_TYPE
    (154) type -> . VOID
    (175) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (176) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 174
    FLOAT_TYPE      shift and go to state 175
    STRING_TYPE     shift and go to state 176
    BOOL_TYPE       shift and go to state 177
    ARRAY_TYPE      shift and go to state 178
    VOID            shift and go to state 179
    NEW             shift and go to state 235

    classBody                      shift and go to state 408
    classMember                    shift and go to state 232
    type                           shift and go to state 233
    objectInstantiation            shift and go to state 234

state 392

    (75) if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .

    VARIABLE        reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ECHO            reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PRINT           reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    TRY             reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FUNCTION        reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    RETURN          reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ID              reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    EMPTY           reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CLASS           reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INTERFACE       reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INCLUDE         reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    NAMESPACE       reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    THROW           reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CONST           reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    THIS            reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INT             reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FLOAT           reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    STRING          reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    BOOL            reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    NULL            reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ARRAY           reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    LPAREN          reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ABSTRACT        reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PRIVATE         reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PROTECTED       reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PUBLIC          reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    STATIC          reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FINAL           reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    IF              reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    WHILE           reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    DO              reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    SWITCH          reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FOREACH         reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FOR             reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CLOSETAG        reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    RBRACE          reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    BREAK           reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ENDSWITCH       reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CASE            reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    DEFAULT         reduce using rule 75 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)


state 393

    (77) else_blocks -> ELSE . LBRACE body RBRACE

    LBRACE          shift and go to state 409


state 394

    (78) else_blocks -> ELSEIF . LPAREN conditions RPAREN LBRACE body RBRACE else_blocks

    LPAREN          shift and go to state 410


state 395

    (79) else_blocks -> empty .

    VARIABLE        reduce using rule 79 (else_blocks -> empty .)
    ECHO            reduce using rule 79 (else_blocks -> empty .)
    PRINT           reduce using rule 79 (else_blocks -> empty .)
    TRY             reduce using rule 79 (else_blocks -> empty .)
    FUNCTION        reduce using rule 79 (else_blocks -> empty .)
    RETURN          reduce using rule 79 (else_blocks -> empty .)
    ID              reduce using rule 79 (else_blocks -> empty .)
    EMPTY           reduce using rule 79 (else_blocks -> empty .)
    CLASS           reduce using rule 79 (else_blocks -> empty .)
    INTERFACE       reduce using rule 79 (else_blocks -> empty .)
    INCLUDE         reduce using rule 79 (else_blocks -> empty .)
    NAMESPACE       reduce using rule 79 (else_blocks -> empty .)
    THROW           reduce using rule 79 (else_blocks -> empty .)
    CONST           reduce using rule 79 (else_blocks -> empty .)
    THIS            reduce using rule 79 (else_blocks -> empty .)
    INT             reduce using rule 79 (else_blocks -> empty .)
    FLOAT           reduce using rule 79 (else_blocks -> empty .)
    STRING          reduce using rule 79 (else_blocks -> empty .)
    BOOL            reduce using rule 79 (else_blocks -> empty .)
    NULL            reduce using rule 79 (else_blocks -> empty .)
    ARRAY           reduce using rule 79 (else_blocks -> empty .)
    LPAREN          reduce using rule 79 (else_blocks -> empty .)
    ABSTRACT        reduce using rule 79 (else_blocks -> empty .)
    PRIVATE         reduce using rule 79 (else_blocks -> empty .)
    PROTECTED       reduce using rule 79 (else_blocks -> empty .)
    PUBLIC          reduce using rule 79 (else_blocks -> empty .)
    STATIC          reduce using rule 79 (else_blocks -> empty .)
    FINAL           reduce using rule 79 (else_blocks -> empty .)
    IF              reduce using rule 79 (else_blocks -> empty .)
    WHILE           reduce using rule 79 (else_blocks -> empty .)
    DO              reduce using rule 79 (else_blocks -> empty .)
    SWITCH          reduce using rule 79 (else_blocks -> empty .)
    FOREACH         reduce using rule 79 (else_blocks -> empty .)
    FOR             reduce using rule 79 (else_blocks -> empty .)
    CLOSETAG        reduce using rule 79 (else_blocks -> empty .)
    RBRACE          reduce using rule 79 (else_blocks -> empty .)
    BREAK           reduce using rule 79 (else_blocks -> empty .)
    ENDSWITCH       reduce using rule 79 (else_blocks -> empty .)
    CASE            reduce using rule 79 (else_blocks -> empty .)
    DEFAULT         reduce using rule 79 (else_blocks -> empty .)


state 396

    (109) dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 411


state 397

    (137) default -> DEFAULT COLON body . BREAK SEMICOLON
    (139) default -> DEFAULT COLON body .

    BREAK           shift and go to state 412
    RBRACE          reduce using rule 139 (default -> DEFAULT COLON body .)
    ENDSWITCH       reduce using rule 139 (default -> DEFAULT COLON body .)


state 398

    (138) default -> DEFAULT SEMICOLON body . BREAK SEMICOLON
    (140) default -> DEFAULT SEMICOLON body .

    BREAK           shift and go to state 413
    RBRACE          reduce using rule 140 (default -> DEFAULT SEMICOLON body .)
    ENDSWITCH       reduce using rule 140 (default -> DEFAULT SEMICOLON body .)


state 399

    (119) case -> CASE valor COLON . body BREAK SEMICOLON
    (121) case -> CASE valor COLON . body
    (99) body -> . sentenciaList
    (100) body -> . empty
    (101) sentenciaList -> . sentencia
    (102) sentenciaList -> . sentencia sentenciaList
    (66) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (58) impresion -> . ECHO imprimir SEMICOLON
    (59) impresion -> . PRINT imprimir SEMICOLON
    (67) estructurasPrograma -> . controlStructure
    (68) estructurasPrograma -> . dataStructure
    (155) try -> . TRY LBRACE body RBRACE catchs
    (156) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (161) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN expresion SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (166) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (167) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (168) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . classInterface
    (189) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (160) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (190) includes -> . INCLUDE STRING SEMICOLON
    (191) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (192) namespace -> . NAMESPACE ID SEMICOLON
    (193) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (194) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> . THROW valor SEMICOLON
    (196) instance -> . VARIABLE INSTANCEOF ID
    (197) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (198) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (199) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (200) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (201) minuse -> . VARIABLE MINUSEQUAL INT
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (69) controlStructure -> . if
    (70) controlStructure -> . for
    (71) controlStructure -> . while
    (72) controlStructure -> . dowhile
    (73) controlStructure -> . switch
    (74) controlStructure -> . foreach
    (124) dataStructure -> . array
    (183) data -> . ABSTRACT
    (184) data -> . PRIVATE
    (185) data -> . PROTECTED
    (186) data -> . PUBLIC
    (187) data -> . STATIC
    (188) data -> . FINAL
    (177) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (179) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (75) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> . IF LPAREN conditions RPAREN body
    (103) for -> . forStatement
    (107) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (109) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (110) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (118) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (125) array -> . VARIABLE EQUALS arrays SEMICOLON
    (126) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) array -> . map
    (104) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (132) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    BREAK           reduce using rule 66 (empty -> .)
    CASE            reduce using rule 66 (empty -> .)
    DEFAULT         reduce using rule 66 (empty -> .)
    RBRACE          reduce using rule 66 (empty -> .)
    ENDSWITCH       reduce using rule 66 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 30
    PRINT           shift and go to state 31
    TRY             shift and go to state 34
    FUNCTION        shift and go to state 35
    RETURN          shift and go to state 37
    ID              shift and go to state 36
    EMPTY           shift and go to state 38
    CLASS           shift and go to state 39
    INTERFACE       shift and go to state 42
    INCLUDE         shift and go to state 43
    NAMESPACE       shift and go to state 45
    THROW           shift and go to state 46
    CONST           shift and go to state 47
    THIS            shift and go to state 48
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ABSTRACT        shift and go to state 62
    PRIVATE         shift and go to state 63
    PROTECTED       shift and go to state 64
    PUBLIC          shift and go to state 65
    STATIC          shift and go to state 66
    FINAL           shift and go to state 67
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    DO              shift and go to state 71
    SWITCH          shift and go to state 72
    FOREACH         shift and go to state 73
    FOR             shift and go to state 75

    valor                          shift and go to state 29
    body                           shift and go to state 414
    sentenciaList                  shift and go to state 162
    empty                          shift and go to state 163
    sentencia                      shift and go to state 164
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    expresion                      shift and go to state 27
    controlStructure               shift and go to state 32
    dataStructure                  shift and go to state 33
    data                           shift and go to state 40
    classInterface                 shift and go to state 41
    operaArit                      shift and go to state 54
    if                             shift and go to state 55
    for                            shift and go to state 56
    while                          shift and go to state 57
    dowhile                        shift and go to state 58
    switch                         shift and go to state 59
    foreach                        shift and go to state 60
    array                          shift and go to state 61
    forStatement                   shift and go to state 69
    map                            shift and go to state 74

state 400

    (120) case -> CASE valor SEMICOLON . body BREAK SEMICOLON
    (122) case -> CASE valor SEMICOLON .
    (99) body -> . sentenciaList
    (100) body -> . empty
    (101) sentenciaList -> . sentencia
    (102) sentenciaList -> . sentencia sentenciaList
    (66) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (58) impresion -> . ECHO imprimir SEMICOLON
    (59) impresion -> . PRINT imprimir SEMICOLON
    (67) estructurasPrograma -> . controlStructure
    (68) estructurasPrograma -> . dataStructure
    (155) try -> . TRY LBRACE body RBRACE catchs
    (156) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (161) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN expresion SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (166) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (167) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (168) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . classInterface
    (189) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (160) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (190) includes -> . INCLUDE STRING SEMICOLON
    (191) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (192) namespace -> . NAMESPACE ID SEMICOLON
    (193) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (194) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> . THROW valor SEMICOLON
    (196) instance -> . VARIABLE INSTANCEOF ID
    (197) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (198) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (199) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (200) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (201) minuse -> . VARIABLE MINUSEQUAL INT
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (69) controlStructure -> . if
    (70) controlStructure -> . for
    (71) controlStructure -> . while
    (72) controlStructure -> . dowhile
    (73) controlStructure -> . switch
    (74) controlStructure -> . foreach
    (124) dataStructure -> . array
    (183) data -> . ABSTRACT
    (184) data -> . PRIVATE
    (185) data -> . PROTECTED
    (186) data -> . PUBLIC
    (187) data -> . STATIC
    (188) data -> . FINAL
    (177) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (179) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (75) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> . IF LPAREN conditions RPAREN body
    (103) for -> . forStatement
    (107) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (109) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (110) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (118) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (125) array -> . VARIABLE EQUALS arrays SEMICOLON
    (126) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) array -> . map
    (104) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (132) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    CASE            reduce using rule 122 (case -> CASE valor SEMICOLON .)
    DEFAULT         reduce using rule 122 (case -> CASE valor SEMICOLON .)
    RBRACE          reduce using rule 122 (case -> CASE valor SEMICOLON .)
    ENDSWITCH       reduce using rule 122 (case -> CASE valor SEMICOLON .)
    BREAK           reduce using rule 66 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 30
    PRINT           shift and go to state 31
    TRY             shift and go to state 34
    FUNCTION        shift and go to state 35
    RETURN          shift and go to state 37
    ID              shift and go to state 36
    EMPTY           shift and go to state 38
    CLASS           shift and go to state 39
    INTERFACE       shift and go to state 42
    INCLUDE         shift and go to state 43
    NAMESPACE       shift and go to state 45
    THROW           shift and go to state 46
    CONST           shift and go to state 47
    THIS            shift and go to state 48
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ABSTRACT        shift and go to state 62
    PRIVATE         shift and go to state 63
    PROTECTED       shift and go to state 64
    PUBLIC          shift and go to state 65
    STATIC          shift and go to state 66
    FINAL           shift and go to state 67
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    DO              shift and go to state 71
    SWITCH          shift and go to state 72
    FOREACH         shift and go to state 73
    FOR             shift and go to state 75

    valor                          shift and go to state 29
    body                           shift and go to state 415
    sentenciaList                  shift and go to state 162
    empty                          shift and go to state 163
    sentencia                      shift and go to state 164
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    expresion                      shift and go to state 27
    controlStructure               shift and go to state 32
    dataStructure                  shift and go to state 33
    data                           shift and go to state 40
    classInterface                 shift and go to state 41
    operaArit                      shift and go to state 54
    if                             shift and go to state 55
    for                            shift and go to state 56
    while                          shift and go to state 57
    dowhile                        shift and go to state 58
    switch                         shift and go to state 59
    foreach                        shift and go to state 60
    array                          shift and go to state 61
    forStatement                   shift and go to state 69
    map                            shift and go to state 74

state 401

    (111) switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .

    VARIABLE        reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ECHO            reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    PRINT           reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    TRY             reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FUNCTION        reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    RETURN          reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ID              reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    EMPTY           reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    CLASS           reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    INTERFACE       reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    INCLUDE         reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    NAMESPACE       reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    THROW           reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    CONST           reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    THIS            reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    INT             reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FLOAT           reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    STRING          reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    BOOL            reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    NULL            reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ARRAY           reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    LPAREN          reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ABSTRACT        reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    PRIVATE         reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    PROTECTED       reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    PUBLIC          reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    STATIC          reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FINAL           reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    IF              reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    WHILE           reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    DO              reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    SWITCH          reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FOREACH         reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FOR             reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    CLOSETAG        reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    RBRACE          reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    BREAK           reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ENDSWITCH       reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    CASE            reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    DEFAULT         reduce using rule 111 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)


state 402

    (118) foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 416


state 403

    (105) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol . INT SEMICOLON VARIABLE DOUBLEPLUS
    (106) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol . INT SEMICOLON VARIABLE DOUBLEMINUS

    INT             shift and go to state 417


state 404

    (156) try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .

    VARIABLE        reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    ECHO            reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    PRINT           reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    TRY             reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    FUNCTION        reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    RETURN          reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    ID              reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    EMPTY           reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    CLASS           reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    INTERFACE       reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    INCLUDE         reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    THROW           reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    CONST           reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    THIS            reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    INT             reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    FLOAT           reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    STRING          reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    BOOL            reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    NULL            reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    ARRAY           reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    LPAREN          reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    PRIVATE         reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    PROTECTED       reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    PUBLIC          reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    STATIC          reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    FINAL           reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    IF              reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    WHILE           reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    DO              reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    SWITCH          reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    FOREACH         reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    FOR             reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    RBRACE          reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    BREAK           reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    CASE            reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    DEFAULT         reduce using rule 156 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)


state 405

    (157) catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 418


state 406

    (173) classMember -> type FUNCTION ID LPAREN argumentos RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 419


state 407

    (178) classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ECHO            reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRINT           reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    TRY             reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RETURN          reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ID              reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLASS           reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THROW           reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CONST           reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THIS            reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INT             reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STRING          reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BOOL            reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NULL            reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    LPAREN          reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STATIC          reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FINAL           reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    IF              reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    WHILE           reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DO              reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOR             reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BREAK           reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CASE            reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 178 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)


state 408

    (180) classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody . RBRACE

    RBRACE          shift and go to state 420


state 409

    (77) else_blocks -> ELSE LBRACE . body RBRACE
    (99) body -> . sentenciaList
    (100) body -> . empty
    (101) sentenciaList -> . sentencia
    (102) sentenciaList -> . sentencia sentenciaList
    (66) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (58) impresion -> . ECHO imprimir SEMICOLON
    (59) impresion -> . PRINT imprimir SEMICOLON
    (67) estructurasPrograma -> . controlStructure
    (68) estructurasPrograma -> . dataStructure
    (155) try -> . TRY LBRACE body RBRACE catchs
    (156) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (161) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN expresion SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (166) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (167) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (168) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . classInterface
    (189) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (160) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (190) includes -> . INCLUDE STRING SEMICOLON
    (191) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (192) namespace -> . NAMESPACE ID SEMICOLON
    (193) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (194) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> . THROW valor SEMICOLON
    (196) instance -> . VARIABLE INSTANCEOF ID
    (197) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (198) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (199) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (200) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (201) minuse -> . VARIABLE MINUSEQUAL INT
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (69) controlStructure -> . if
    (70) controlStructure -> . for
    (71) controlStructure -> . while
    (72) controlStructure -> . dowhile
    (73) controlStructure -> . switch
    (74) controlStructure -> . foreach
    (124) dataStructure -> . array
    (183) data -> . ABSTRACT
    (184) data -> . PRIVATE
    (185) data -> . PROTECTED
    (186) data -> . PUBLIC
    (187) data -> . STATIC
    (188) data -> . FINAL
    (177) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (179) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (75) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> . IF LPAREN conditions RPAREN body
    (103) for -> . forStatement
    (107) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (109) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (110) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (118) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (125) array -> . VARIABLE EQUALS arrays SEMICOLON
    (126) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) array -> . map
    (104) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (132) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 66 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 30
    PRINT           shift and go to state 31
    TRY             shift and go to state 34
    FUNCTION        shift and go to state 35
    RETURN          shift and go to state 37
    ID              shift and go to state 36
    EMPTY           shift and go to state 38
    CLASS           shift and go to state 39
    INTERFACE       shift and go to state 42
    INCLUDE         shift and go to state 43
    NAMESPACE       shift and go to state 45
    THROW           shift and go to state 46
    CONST           shift and go to state 47
    THIS            shift and go to state 48
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ABSTRACT        shift and go to state 62
    PRIVATE         shift and go to state 63
    PROTECTED       shift and go to state 64
    PUBLIC          shift and go to state 65
    STATIC          shift and go to state 66
    FINAL           shift and go to state 67
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    DO              shift and go to state 71
    SWITCH          shift and go to state 72
    FOREACH         shift and go to state 73
    FOR             shift and go to state 75

    body                           shift and go to state 421
    sentenciaList                  shift and go to state 162
    empty                          shift and go to state 163
    sentencia                      shift and go to state 164
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    expresion                      shift and go to state 27
    valor                          shift and go to state 29
    controlStructure               shift and go to state 32
    dataStructure                  shift and go to state 33
    data                           shift and go to state 40
    classInterface                 shift and go to state 41
    operaArit                      shift and go to state 54
    if                             shift and go to state 55
    for                            shift and go to state 56
    while                          shift and go to state 57
    dowhile                        shift and go to state 58
    switch                         shift and go to state 59
    foreach                        shift and go to state 60
    array                          shift and go to state 61
    forStatement                   shift and go to state 69
    map                            shift and go to state 74

state 410

    (78) else_blocks -> ELSEIF LPAREN . conditions RPAREN LBRACE body RBRACE else_blocks
    (80) conditions -> . condition
    (81) conditions -> . condition opLogic conditions
    (82) conditions -> . LPAREN conditions RPAREN
    (83) condition -> . valor
    (84) condition -> . valor opSymbol valor
    (85) condition -> . NOT condition
    (86) condition -> . LPAREN conditions RPAREN
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 195
    NOT             shift and go to state 199
    INT             shift and go to state 49
    VARIABLE        shift and go to state 100
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    ID              shift and go to state 36
    EMPTY           shift and go to state 38

    conditions                     shift and go to state 422
    condition                      shift and go to state 197
    valor                          shift and go to state 198
    llamadaFuncion                 shift and go to state 101

state 411

    (109) dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .

    VARIABLE        reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    ECHO            reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    PRINT           reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    TRY             reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    RETURN          reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    ID              reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    EMPTY           reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    CLASS           reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    THROW           reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    CONST           reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    THIS            reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    INT             reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    FLOAT           reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    STRING          reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    BOOL            reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    NULL            reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    ARRAY           reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    LPAREN          reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    STATIC          reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    FINAL           reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    IF              reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    WHILE           reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    DO              reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    SWITCH          reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    FOREACH         reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    FOR             reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    RBRACE          reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    BREAK           reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    CASE            reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 109 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)


state 412

    (137) default -> DEFAULT COLON body BREAK . SEMICOLON

    SEMICOLON       shift and go to state 423


state 413

    (138) default -> DEFAULT SEMICOLON body BREAK . SEMICOLON

    SEMICOLON       shift and go to state 424


state 414

    (119) case -> CASE valor COLON body . BREAK SEMICOLON
    (121) case -> CASE valor COLON body .

    BREAK           shift and go to state 425
    CASE            reduce using rule 121 (case -> CASE valor COLON body .)
    DEFAULT         reduce using rule 121 (case -> CASE valor COLON body .)
    RBRACE          reduce using rule 121 (case -> CASE valor COLON body .)
    ENDSWITCH       reduce using rule 121 (case -> CASE valor COLON body .)


state 415

    (120) case -> CASE valor SEMICOLON body . BREAK SEMICOLON

    BREAK           shift and go to state 426


state 416

    (118) foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .

    VARIABLE        reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    TRY             reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    EMPTY           reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    CLASS           reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    INTERFACE       reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    INCLUDE         reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    THROW           reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    CONST           reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    THIS            reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    LPAREN          reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    PRIVATE         reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    PROTECTED       reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    PUBLIC          reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    STATIC          reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    FINAL           reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    DO              reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    FOREACH         reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 118 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)


state 417

    (105) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT . SEMICOLON VARIABLE DOUBLEPLUS
    (106) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT . SEMICOLON VARIABLE DOUBLEMINUS

    SEMICOLON       shift and go to state 427


state 418

    (157) catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE . body RBRACE
    (99) body -> . sentenciaList
    (100) body -> . empty
    (101) sentenciaList -> . sentencia
    (102) sentenciaList -> . sentencia sentenciaList
    (66) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (58) impresion -> . ECHO imprimir SEMICOLON
    (59) impresion -> . PRINT imprimir SEMICOLON
    (67) estructurasPrograma -> . controlStructure
    (68) estructurasPrograma -> . dataStructure
    (155) try -> . TRY LBRACE body RBRACE catchs
    (156) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (161) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN expresion SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (166) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (167) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (168) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . classInterface
    (189) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (160) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (190) includes -> . INCLUDE STRING SEMICOLON
    (191) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (192) namespace -> . NAMESPACE ID SEMICOLON
    (193) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (194) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> . THROW valor SEMICOLON
    (196) instance -> . VARIABLE INSTANCEOF ID
    (197) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (198) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (199) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (200) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (201) minuse -> . VARIABLE MINUSEQUAL INT
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (69) controlStructure -> . if
    (70) controlStructure -> . for
    (71) controlStructure -> . while
    (72) controlStructure -> . dowhile
    (73) controlStructure -> . switch
    (74) controlStructure -> . foreach
    (124) dataStructure -> . array
    (183) data -> . ABSTRACT
    (184) data -> . PRIVATE
    (185) data -> . PROTECTED
    (186) data -> . PUBLIC
    (187) data -> . STATIC
    (188) data -> . FINAL
    (177) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (179) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (75) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> . IF LPAREN conditions RPAREN body
    (103) for -> . forStatement
    (107) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (109) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (110) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (118) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (125) array -> . VARIABLE EQUALS arrays SEMICOLON
    (126) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) array -> . map
    (104) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (132) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 66 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 30
    PRINT           shift and go to state 31
    TRY             shift and go to state 34
    FUNCTION        shift and go to state 35
    RETURN          shift and go to state 37
    ID              shift and go to state 36
    EMPTY           shift and go to state 38
    CLASS           shift and go to state 39
    INTERFACE       shift and go to state 42
    INCLUDE         shift and go to state 43
    NAMESPACE       shift and go to state 45
    THROW           shift and go to state 46
    CONST           shift and go to state 47
    THIS            shift and go to state 48
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ABSTRACT        shift and go to state 62
    PRIVATE         shift and go to state 63
    PROTECTED       shift and go to state 64
    PUBLIC          shift and go to state 65
    STATIC          shift and go to state 66
    FINAL           shift and go to state 67
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    DO              shift and go to state 71
    SWITCH          shift and go to state 72
    FOREACH         shift and go to state 73
    FOR             shift and go to state 75

    body                           shift and go to state 428
    sentenciaList                  shift and go to state 162
    empty                          shift and go to state 163
    sentencia                      shift and go to state 164
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    expresion                      shift and go to state 27
    valor                          shift and go to state 29
    controlStructure               shift and go to state 32
    dataStructure                  shift and go to state 33
    data                           shift and go to state 40
    classInterface                 shift and go to state 41
    operaArit                      shift and go to state 54
    if                             shift and go to state 55
    for                            shift and go to state 56
    while                          shift and go to state 57
    dowhile                        shift and go to state 58
    switch                         shift and go to state 59
    foreach                        shift and go to state 60
    array                          shift and go to state 61
    forStatement                   shift and go to state 69
    map                            shift and go to state 74

state 419

    (173) classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE . body RBRACE
    (99) body -> . sentenciaList
    (100) body -> . empty
    (101) sentenciaList -> . sentencia
    (102) sentenciaList -> . sentencia sentenciaList
    (66) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (58) impresion -> . ECHO imprimir SEMICOLON
    (59) impresion -> . PRINT imprimir SEMICOLON
    (67) estructurasPrograma -> . controlStructure
    (68) estructurasPrograma -> . dataStructure
    (155) try -> . TRY LBRACE body RBRACE catchs
    (156) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (161) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN expresion SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (166) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (167) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (168) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . classInterface
    (189) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (160) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (190) includes -> . INCLUDE STRING SEMICOLON
    (191) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (192) namespace -> . NAMESPACE ID SEMICOLON
    (193) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (194) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> . THROW valor SEMICOLON
    (196) instance -> . VARIABLE INSTANCEOF ID
    (197) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (198) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (199) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (200) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (201) minuse -> . VARIABLE MINUSEQUAL INT
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (69) controlStructure -> . if
    (70) controlStructure -> . for
    (71) controlStructure -> . while
    (72) controlStructure -> . dowhile
    (73) controlStructure -> . switch
    (74) controlStructure -> . foreach
    (124) dataStructure -> . array
    (183) data -> . ABSTRACT
    (184) data -> . PRIVATE
    (185) data -> . PROTECTED
    (186) data -> . PUBLIC
    (187) data -> . STATIC
    (188) data -> . FINAL
    (177) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (179) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (75) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> . IF LPAREN conditions RPAREN body
    (103) for -> . forStatement
    (107) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (109) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (110) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (118) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (125) array -> . VARIABLE EQUALS arrays SEMICOLON
    (126) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) array -> . map
    (104) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (132) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 66 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 30
    PRINT           shift and go to state 31
    TRY             shift and go to state 34
    FUNCTION        shift and go to state 35
    RETURN          shift and go to state 37
    ID              shift and go to state 36
    EMPTY           shift and go to state 38
    CLASS           shift and go to state 39
    INTERFACE       shift and go to state 42
    INCLUDE         shift and go to state 43
    NAMESPACE       shift and go to state 45
    THROW           shift and go to state 46
    CONST           shift and go to state 47
    THIS            shift and go to state 48
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ABSTRACT        shift and go to state 62
    PRIVATE         shift and go to state 63
    PROTECTED       shift and go to state 64
    PUBLIC          shift and go to state 65
    STATIC          shift and go to state 66
    FINAL           shift and go to state 67
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    DO              shift and go to state 71
    SWITCH          shift and go to state 72
    FOREACH         shift and go to state 73
    FOR             shift and go to state 75

    body                           shift and go to state 429
    sentenciaList                  shift and go to state 162
    empty                          shift and go to state 163
    sentencia                      shift and go to state 164
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    expresion                      shift and go to state 27
    valor                          shift and go to state 29
    controlStructure               shift and go to state 32
    dataStructure                  shift and go to state 33
    data                           shift and go to state 40
    classInterface                 shift and go to state 41
    operaArit                      shift and go to state 54
    if                             shift and go to state 55
    for                            shift and go to state 56
    while                          shift and go to state 57
    dowhile                        shift and go to state 58
    switch                         shift and go to state 59
    foreach                        shift and go to state 60
    array                          shift and go to state 61
    forStatement                   shift and go to state 69
    map                            shift and go to state 74

state 420

    (180) classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ECHO            reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRINT           reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    TRY             reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RETURN          reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ID              reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLASS           reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THROW           reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CONST           reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THIS            reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INT             reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STRING          reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BOOL            reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NULL            reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    LPAREN          reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STATIC          reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FINAL           reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    IF              reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    WHILE           reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DO              reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOR             reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BREAK           reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CASE            reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 180 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)


state 421

    (77) else_blocks -> ELSE LBRACE body . RBRACE

    RBRACE          shift and go to state 430


state 422

    (78) else_blocks -> ELSEIF LPAREN conditions . RPAREN LBRACE body RBRACE else_blocks

    RPAREN          shift and go to state 431


state 423

    (137) default -> DEFAULT COLON body BREAK SEMICOLON .

    RBRACE          reduce using rule 137 (default -> DEFAULT COLON body BREAK SEMICOLON .)
    ENDSWITCH       reduce using rule 137 (default -> DEFAULT COLON body BREAK SEMICOLON .)


state 424

    (138) default -> DEFAULT SEMICOLON body BREAK SEMICOLON .

    RBRACE          reduce using rule 138 (default -> DEFAULT SEMICOLON body BREAK SEMICOLON .)
    ENDSWITCH       reduce using rule 138 (default -> DEFAULT SEMICOLON body BREAK SEMICOLON .)


state 425

    (119) case -> CASE valor COLON body BREAK . SEMICOLON

    SEMICOLON       shift and go to state 432


state 426

    (120) case -> CASE valor SEMICOLON body BREAK . SEMICOLON

    SEMICOLON       shift and go to state 433


state 427

    (105) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON . VARIABLE DOUBLEPLUS
    (106) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON . VARIABLE DOUBLEMINUS

    VARIABLE        shift and go to state 434


state 428

    (157) catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 435


state 429

    (173) classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 436


state 430

    (77) else_blocks -> ELSE LBRACE body RBRACE .

    VARIABLE        reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    ECHO            reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    PRINT           reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    TRY             reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    FUNCTION        reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    RETURN          reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    ID              reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    EMPTY           reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    CLASS           reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    INTERFACE       reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    INCLUDE         reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    THROW           reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    CONST           reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    THIS            reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    INT             reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    FLOAT           reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    STRING          reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    BOOL            reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    NULL            reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    ARRAY           reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    LPAREN          reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    PRIVATE         reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    PROTECTED       reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    PUBLIC          reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    STATIC          reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    FINAL           reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    IF              reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    WHILE           reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    DO              reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    SWITCH          reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    FOREACH         reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    FOR             reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    RBRACE          reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    BREAK           reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    CASE            reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)
    DEFAULT         reduce using rule 77 (else_blocks -> ELSE LBRACE body RBRACE .)


state 431

    (78) else_blocks -> ELSEIF LPAREN conditions RPAREN . LBRACE body RBRACE else_blocks

    LBRACE          shift and go to state 437


state 432

    (119) case -> CASE valor COLON body BREAK SEMICOLON .

    CASE            reduce using rule 119 (case -> CASE valor COLON body BREAK SEMICOLON .)
    DEFAULT         reduce using rule 119 (case -> CASE valor COLON body BREAK SEMICOLON .)
    RBRACE          reduce using rule 119 (case -> CASE valor COLON body BREAK SEMICOLON .)
    ENDSWITCH       reduce using rule 119 (case -> CASE valor COLON body BREAK SEMICOLON .)


state 433

    (120) case -> CASE valor SEMICOLON body BREAK SEMICOLON .

    CASE            reduce using rule 120 (case -> CASE valor SEMICOLON body BREAK SEMICOLON .)
    DEFAULT         reduce using rule 120 (case -> CASE valor SEMICOLON body BREAK SEMICOLON .)
    RBRACE          reduce using rule 120 (case -> CASE valor SEMICOLON body BREAK SEMICOLON .)
    ENDSWITCH       reduce using rule 120 (case -> CASE valor SEMICOLON body BREAK SEMICOLON .)


state 434

    (105) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE . DOUBLEPLUS
    (106) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE . DOUBLEMINUS

    DOUBLEPLUS      shift and go to state 438
    DOUBLEMINUS     shift and go to state 439


state 435

    (157) catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .

    CATCH           reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FINALLY         reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    VARIABLE        reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    TRY             reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    EMPTY           reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    CLASS           reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    INTERFACE       reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    INCLUDE         reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    THROW           reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    CONST           reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    THIS            reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    LPAREN          reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    PRIVATE         reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    PROTECTED       reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    PUBLIC          reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    STATIC          reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FINAL           reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    DO              reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FOREACH         reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 157 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)


state 436

    (173) classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .

    INT_TYPE        reduce using rule 173 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FLOAT_TYPE      reduce using rule 173 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    STRING_TYPE     reduce using rule 173 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    BOOL_TYPE       reduce using rule 173 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ARRAY_TYPE      reduce using rule 173 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    VOID            reduce using rule 173 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    NEW             reduce using rule 173 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 173 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)


state 437

    (78) else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE . body RBRACE else_blocks
    (99) body -> . sentenciaList
    (100) body -> . empty
    (101) sentenciaList -> . sentencia
    (102) sentenciaList -> . sentencia sentenciaList
    (66) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS expresion SEMICOLON
    (34) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (56) comparacion -> . valor opSymbol valor
    (57) comparacion -> . expresion opSymbol expresion
    (58) impresion -> . ECHO imprimir SEMICOLON
    (59) impresion -> . PRINT imprimir SEMICOLON
    (67) estructurasPrograma -> . controlStructure
    (68) estructurasPrograma -> . dataStructure
    (155) try -> . TRY LBRACE body RBRACE catchs
    (156) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (161) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN expresion SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (162) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (163) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (166) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (167) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (168) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . classInterface
    (189) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (160) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (190) includes -> . INCLUDE STRING SEMICOLON
    (191) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (192) namespace -> . NAMESPACE ID SEMICOLON
    (193) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (194) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (195) throw -> . THROW valor SEMICOLON
    (196) instance -> . VARIABLE INSTANCEOF ID
    (197) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (198) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (199) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (200) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (201) minuse -> . VARIABLE MINUSEQUAL INT
    (41) valor -> . INT
    (42) valor -> . VARIABLE
    (43) valor -> . FLOAT
    (44) valor -> . STRING
    (45) valor -> . BOOL
    (46) valor -> . NULL
    (47) valor -> . ARRAY
    (48) valor -> . llamadaFuncion
    (28) expresion -> . valor
    (29) expresion -> . expresion opLogic expresion
    (30) expresion -> . comparacion
    (31) expresion -> . LPAREN comparacion RPAREN
    (32) expresion -> . operaArit
    (33) expresion -> . LPAREN expresion RPAREN
    (69) controlStructure -> . if
    (70) controlStructure -> . for
    (71) controlStructure -> . while
    (72) controlStructure -> . dowhile
    (73) controlStructure -> . switch
    (74) controlStructure -> . foreach
    (124) dataStructure -> . array
    (183) data -> . ABSTRACT
    (184) data -> . PRIVATE
    (185) data -> . PROTECTED
    (186) data -> . PUBLIC
    (187) data -> . STATIC
    (188) data -> . FINAL
    (177) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (178) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (179) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (35) operaArit -> . valor
    (36) operaArit -> . operaArit operador operaArit
    (37) operaArit -> . LPAREN operaArit RPAREN
    (75) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) if -> . IF LPAREN conditions RPAREN body
    (103) for -> . forStatement
    (107) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (108) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (109) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (110) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (111) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (118) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (125) array -> . VARIABLE EQUALS arrays SEMICOLON
    (126) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (127) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) array -> . map
    (104) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (132) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (133) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 66 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 30
    PRINT           shift and go to state 31
    TRY             shift and go to state 34
    FUNCTION        shift and go to state 35
    RETURN          shift and go to state 37
    ID              shift and go to state 36
    EMPTY           shift and go to state 38
    CLASS           shift and go to state 39
    INTERFACE       shift and go to state 42
    INCLUDE         shift and go to state 43
    NAMESPACE       shift and go to state 45
    THROW           shift and go to state 46
    CONST           shift and go to state 47
    THIS            shift and go to state 48
    INT             shift and go to state 49
    FLOAT           shift and go to state 50
    STRING          shift and go to state 44
    BOOL            shift and go to state 51
    NULL            shift and go to state 52
    ARRAY           shift and go to state 53
    LPAREN          shift and go to state 28
    ABSTRACT        shift and go to state 62
    PRIVATE         shift and go to state 63
    PROTECTED       shift and go to state 64
    PUBLIC          shift and go to state 65
    STATIC          shift and go to state 66
    FINAL           shift and go to state 67
    IF              shift and go to state 68
    WHILE           shift and go to state 70
    DO              shift and go to state 71
    SWITCH          shift and go to state 72
    FOREACH         shift and go to state 73
    FOR             shift and go to state 75

    body                           shift and go to state 440
    sentenciaList                  shift and go to state 162
    empty                          shift and go to state 163
    sentencia                      shift and go to state 164
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    expresion                      shift and go to state 27
    valor                          shift and go to state 29
    controlStructure               shift and go to state 32
    dataStructure                  shift and go to state 33
    data                           shift and go to state 40
    classInterface                 shift and go to state 41
    operaArit                      shift and go to state 54
    if                             shift and go to state 55
    for                            shift and go to state 56
    while                          shift and go to state 57
    dowhile                        shift and go to state 58
    switch                         shift and go to state 59
    foreach                        shift and go to state 60
    array                          shift and go to state 61
    forStatement                   shift and go to state 69
    map                            shift and go to state 74

state 438

    (105) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS .

    RPAREN          reduce using rule 105 (forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS .)


state 439

    (106) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS .

    RPAREN          reduce using rule 106 (forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS .)


state 440

    (78) else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body . RBRACE else_blocks

    RBRACE          shift and go to state 441


state 441

    (78) else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE . else_blocks
    (77) else_blocks -> . ELSE LBRACE body RBRACE
    (78) else_blocks -> . ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (79) else_blocks -> . empty
    (66) empty -> .

    ELSE            shift and go to state 393
    ELSEIF          shift and go to state 394
    VARIABLE        reduce using rule 66 (empty -> .)
    ECHO            reduce using rule 66 (empty -> .)
    PRINT           reduce using rule 66 (empty -> .)
    TRY             reduce using rule 66 (empty -> .)
    FUNCTION        reduce using rule 66 (empty -> .)
    RETURN          reduce using rule 66 (empty -> .)
    ID              reduce using rule 66 (empty -> .)
    EMPTY           reduce using rule 66 (empty -> .)
    CLASS           reduce using rule 66 (empty -> .)
    INTERFACE       reduce using rule 66 (empty -> .)
    INCLUDE         reduce using rule 66 (empty -> .)
    NAMESPACE       reduce using rule 66 (empty -> .)
    THROW           reduce using rule 66 (empty -> .)
    CONST           reduce using rule 66 (empty -> .)
    THIS            reduce using rule 66 (empty -> .)
    INT             reduce using rule 66 (empty -> .)
    FLOAT           reduce using rule 66 (empty -> .)
    STRING          reduce using rule 66 (empty -> .)
    BOOL            reduce using rule 66 (empty -> .)
    NULL            reduce using rule 66 (empty -> .)
    ARRAY           reduce using rule 66 (empty -> .)
    LPAREN          reduce using rule 66 (empty -> .)
    ABSTRACT        reduce using rule 66 (empty -> .)
    PRIVATE         reduce using rule 66 (empty -> .)
    PROTECTED       reduce using rule 66 (empty -> .)
    PUBLIC          reduce using rule 66 (empty -> .)
    STATIC          reduce using rule 66 (empty -> .)
    FINAL           reduce using rule 66 (empty -> .)
    IF              reduce using rule 66 (empty -> .)
    WHILE           reduce using rule 66 (empty -> .)
    DO              reduce using rule 66 (empty -> .)
    SWITCH          reduce using rule 66 (empty -> .)
    FOREACH         reduce using rule 66 (empty -> .)
    FOR             reduce using rule 66 (empty -> .)
    CLOSETAG        reduce using rule 66 (empty -> .)
    RBRACE          reduce using rule 66 (empty -> .)
    BREAK           reduce using rule 66 (empty -> .)
    ENDSWITCH       reduce using rule 66 (empty -> .)
    CASE            reduce using rule 66 (empty -> .)
    DEFAULT         reduce using rule 66 (empty -> .)

    else_blocks                    shift and go to state 442
    empty                          shift and go to state 395

state 442

    (78) else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .

    VARIABLE        reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ECHO            reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PRINT           reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    TRY             reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FUNCTION        reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    RETURN          reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ID              reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    EMPTY           reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CLASS           reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INTERFACE       reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INCLUDE         reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    NAMESPACE       reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    THROW           reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CONST           reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    THIS            reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INT             reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FLOAT           reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    STRING          reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    BOOL            reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    NULL            reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ARRAY           reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    LPAREN          reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ABSTRACT        reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PRIVATE         reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PROTECTED       reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PUBLIC          reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    STATIC          reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FINAL           reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    IF              reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    WHILE           reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    DO              reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    SWITCH          reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FOREACH         reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FOR             reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CLOSETAG        reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    RBRACE          reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    BREAK           reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ENDSWITCH       reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CASE            reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    DEFAULT         reduce using rule 78 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQ in state 29 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 29 resolved as shift
WARNING: shift/reduce conflict for STRICTEQ in state 29 resolved as shift
WARNING: shift/reduce conflict for STRICTNEQ in state 29 resolved as shift
WARNING: shift/reduce conflict for LT in state 29 resolved as shift
WARNING: shift/reduce conflict for GT in state 29 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 29 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 29 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 97 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 99 resolved as shift
WARNING: shift/reduce conflict for EQ in state 114 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 114 resolved as shift
WARNING: shift/reduce conflict for STRICTEQ in state 114 resolved as shift
WARNING: shift/reduce conflict for STRICTNEQ in state 114 resolved as shift
WARNING: shift/reduce conflict for LT in state 114 resolved as shift
WARNING: shift/reduce conflict for GT in state 114 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 114 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 114 resolved as shift
WARNING: shift/reduce conflict for AND in state 150 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 150 resolved as shift
WARNING: shift/reduce conflict for OR in state 150 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 150 resolved as shift
WARNING: shift/reduce conflict for EQ in state 150 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 150 resolved as shift
WARNING: shift/reduce conflict for STRICTEQ in state 150 resolved as shift
WARNING: shift/reduce conflict for STRICTNEQ in state 150 resolved as shift
WARNING: shift/reduce conflict for LT in state 150 resolved as shift
WARNING: shift/reduce conflict for GT in state 150 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 150 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 150 resolved as shift
WARNING: shift/reduce conflict for AND in state 151 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 151 resolved as shift
WARNING: shift/reduce conflict for OR in state 151 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 151 resolved as shift
WARNING: shift/reduce conflict for EQ in state 151 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 151 resolved as shift
WARNING: shift/reduce conflict for STRICTEQ in state 151 resolved as shift
WARNING: shift/reduce conflict for STRICTNEQ in state 151 resolved as shift
WARNING: shift/reduce conflict for LT in state 151 resolved as shift
WARNING: shift/reduce conflict for GT in state 151 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 151 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 151 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 164 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 164 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 164 resolved as shift
WARNING: shift/reduce conflict for TRY in state 164 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 164 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 164 resolved as shift
WARNING: shift/reduce conflict for ID in state 164 resolved as shift
WARNING: shift/reduce conflict for EMPTY in state 164 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 164 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 164 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 164 resolved as shift
WARNING: shift/reduce conflict for NAMESPACE in state 164 resolved as shift
WARNING: shift/reduce conflict for THROW in state 164 resolved as shift
WARNING: shift/reduce conflict for CONST in state 164 resolved as shift
WARNING: shift/reduce conflict for THIS in state 164 resolved as shift
WARNING: shift/reduce conflict for INT in state 164 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 164 resolved as shift
WARNING: shift/reduce conflict for STRING in state 164 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 164 resolved as shift
WARNING: shift/reduce conflict for NULL in state 164 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 164 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 164 resolved as shift
WARNING: shift/reduce conflict for ABSTRACT in state 164 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 164 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 164 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 164 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 164 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 164 resolved as shift
WARNING: shift/reduce conflict for IF in state 164 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 164 resolved as shift
WARNING: shift/reduce conflict for DO in state 164 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 164 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 164 resolved as shift
WARNING: shift/reduce conflict for FOR in state 164 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 194 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 194 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 194 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 194 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 194 resolved as shift
WARNING: shift/reduce conflict for POTENCIA in state 194 resolved as shift
WARNING: shift/reduce conflict for PLUSEQUAL in state 194 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 226 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 230 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 249 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 249 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 249 resolved as shift
WARNING: shift/reduce conflict for TRY in state 249 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 249 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 249 resolved as shift
WARNING: shift/reduce conflict for ID in state 249 resolved as shift
WARNING: shift/reduce conflict for EMPTY in state 249 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 249 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 249 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 249 resolved as shift
WARNING: shift/reduce conflict for NAMESPACE in state 249 resolved as shift
WARNING: shift/reduce conflict for THROW in state 249 resolved as shift
WARNING: shift/reduce conflict for CONST in state 249 resolved as shift
WARNING: shift/reduce conflict for THIS in state 249 resolved as shift
WARNING: shift/reduce conflict for INT in state 249 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 249 resolved as shift
WARNING: shift/reduce conflict for STRING in state 249 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 249 resolved as shift
WARNING: shift/reduce conflict for NULL in state 249 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 249 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 249 resolved as shift
WARNING: shift/reduce conflict for ABSTRACT in state 249 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 249 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 249 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 249 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 249 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 249 resolved as shift
WARNING: shift/reduce conflict for IF in state 249 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 249 resolved as shift
WARNING: shift/reduce conflict for DO in state 249 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 249 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 249 resolved as shift
WARNING: shift/reduce conflict for FOR in state 249 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 303 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 328 resolved as shift
WARNING: reduce/reduce conflict in state 29 resolved using rule (expresion -> valor)
WARNING: rejected rule (operaArit -> valor) in state 29
WARNING: reduce/reduce conflict in state 114 resolved using rule (expresion -> valor)
WARNING: rejected rule (operaArit -> valor) in state 114
WARNING: reduce/reduce conflict in state 297 resolved using rule (conditions -> LPAREN conditions RPAREN)
WARNING: rejected rule (condition -> LPAREN conditions RPAREN) in state 297
