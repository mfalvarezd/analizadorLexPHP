Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    OBJECT_TYPE

Grammar

Rule 0     S' -> inicio
Rule 1     inicio -> OPENTAG programa CLOSETAG
Rule 2     programa -> sentencia
Rule 3     programa -> sentencia programa
Rule 4     sentencia -> asignacion
Rule 5     sentencia -> asignacion_fgets
Rule 6     sentencia -> comparacion
Rule 7     sentencia -> impresion
Rule 8     sentencia -> estructurasPrograma
Rule 9     sentencia -> try
Rule 10    sentencia -> funcionDeclaration
Rule 11    sentencia -> returnStatement
Rule 12    sentencia -> llamadaFuncion
Rule 13    sentencia -> classDeclarate
Rule 14    sentencia -> interface
Rule 15    sentencia -> objeto
Rule 16    sentencia -> includes
Rule 17    sentencia -> namespace
Rule 18    sentencia -> anonymousFunction
Rule 19    sentencia -> throw
Rule 20    sentencia -> instance
Rule 21    sentencia -> constdeclaration
Rule 22    sentencia -> thisdeclaration
Rule 23    sentencia -> concatenate
Rule 24    sentencia -> minuse
Rule 25    returnStatement -> RETURN valor SEMICOLON
Rule 26    returnStatement -> RETURN SEMICOLON
Rule 27    asignacion -> VARIABLE EQUALS operaArit SEMICOLON
Rule 28    asignacion -> VARIABLE EQUALS valor SEMICOLON
Rule 29    asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
Rule 30    operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor
Rule 31    operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor
Rule 32    operaArit -> valor
Rule 33    operaArit -> valor operador operaArit
Rule 34    valor -> INT
Rule 35    valor -> VARIABLE
Rule 36    valor -> FLOAT
Rule 37    valor -> STRING
Rule 38    valor -> BOOL
Rule 39    valor -> NULL
Rule 40    valor -> ARRAY
Rule 41    valor -> llamadaFuncion
Rule 42    valor -> operador_ternario
Rule 43    operador -> PLUS
Rule 44    operador -> MINUS
Rule 45    operador -> TIMES
Rule 46    operador -> DIVIDE
Rule 47    operador -> MODULO
Rule 48    operador -> POTENCIA
Rule 49    operador -> PLUSEQUAL
Rule 50    comparacion -> valor comparador valor
Rule 51    comparador -> LT
Rule 52    comparador -> GT
Rule 53    comparador -> LEQ
Rule 54    comparador -> GEQ
Rule 55    impresion -> ECHO imprimir SEMICOLON
Rule 56    impresion -> PRINT imprimir SEMICOLON
Rule 57    imprimir -> LPAREN repiteValores RPAREN
Rule 58    imprimir -> LPAREN RPAREN
Rule 59    imprimir -> repiteValores
Rule 60    imprimir -> empty
Rule 61    repiteValores -> valor
Rule 62    repiteValores -> valor COMMA repiteValores
Rule 63    empty -> <empty>
Rule 64    estructurasPrograma -> controlStructure
Rule 65    estructurasPrograma -> dataStructure
Rule 66    controlStructure -> if
Rule 67    controlStructure -> for
Rule 68    controlStructure -> while
Rule 69    controlStructure -> dowhile
Rule 70    controlStructure -> switch
Rule 71    controlStructure -> foreach
Rule 72    if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
Rule 73    if -> IF LPAREN conditions RPAREN body
Rule 74    else_blocks -> ELSE LBRACE body RBRACE
Rule 75    else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
Rule 76    else_blocks -> empty
Rule 77    conditions -> condition
Rule 78    conditions -> condition opLogic condition
Rule 79    conditions -> LPAREN conditions RPAREN
Rule 80    condition -> valor
Rule 81    condition -> valor opSymbol valor
Rule 82    condition -> NOT condition
Rule 83    opSymbol -> EQ
Rule 84    opSymbol -> NEQ
Rule 85    opSymbol -> STRICTEQ
Rule 86    opSymbol -> STRICTNEQ
Rule 87    opSymbol -> LT
Rule 88    opSymbol -> GT
Rule 89    opSymbol -> LEQ
Rule 90    opSymbol -> GEQ
Rule 91    opLogic -> AND
Rule 92    opLogic -> LOGICAL_AND
Rule 93    opLogic -> OR
Rule 94    opLogic -> LOGICAL_OR
Rule 95    body -> sentenciaList
Rule 96    body -> empty
Rule 97    sentenciaList -> sentencia
Rule 98    sentenciaList -> sentencia sentenciaList
Rule 99    for -> forStatement
Rule 100   forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE
Rule 101   forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
Rule 102   forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS
Rule 103   while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE
Rule 104   while -> WHILE LPAREN condition RPAREN LBRACE RBRACE
Rule 105   dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
Rule 106   switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
Rule 107   switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
Rule 108   caseLists -> cases
Rule 109   caseLists -> cases default
Rule 110   caseLists -> default
Rule 111   caseLists -> empty
Rule 112   cases -> case
Rule 113   cases -> case cases
Rule 114   foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
Rule 115   case -> CASE valor COLON body BREAK SEMICOLON
Rule 116   case -> CASE valor SEMICOLON body BREAK SEMICOLON
Rule 117   case -> CASE valor COLON body
Rule 118   case -> CASE valor SEMICOLON
Rule 119   case -> CASE valor
Rule 120   dataStructure -> array
Rule 121   array -> VARIABLE EQUALS arrays SEMICOLON
Rule 122   array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
Rule 123   array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
Rule 124   array -> map
Rule 125   arrays -> LBRACKET repiteValores RBRACKET
Rule 126   arrayAnidado -> arrays
Rule 127   arrayAnidado -> arrays COMMA arrayAnidado
Rule 128   map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
Rule 129   map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON
Rule 130   maps -> mapArrow
Rule 131   maps -> mapArrow COMMA maps
Rule 132   mapArrow -> valor ARROWMAP valor
Rule 133   default -> DEFAULT COLON body BREAK SEMICOLON
Rule 134   default -> DEFAULT SEMICOLON body BREAK SEMICOLON
Rule 135   default -> DEFAULT COLON body
Rule 136   default -> DEFAULT SEMICOLON body
Rule 137   default -> DEFAULT
Rule 138   argumentos -> argumento
Rule 139   argumentos -> argumento COMMA argumentos
Rule 140   argumentos -> empty
Rule 141   argumento -> type VARIABLE
Rule 142   argumento -> VARIABLE EQUALS valor
Rule 143   argumento -> type VARIABLE EQUALS valor
Rule 144   argumento -> operaArit
Rule 145   type -> INT_TYPE
Rule 146   type -> FLOAT_TYPE
Rule 147   type -> STRING_TYPE
Rule 148   type -> BOOL_TYPE
Rule 149   type -> ARRAY_TYPE
Rule 150   type -> VOID
Rule 151   try -> TRY LBRACE body RBRACE catchs
Rule 152   try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
Rule 153   catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE
Rule 154   catchs -> catch
Rule 155   catchs -> catch catchs
Rule 156   objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
Rule 157   funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
Rule 158   llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON
Rule 159   llamadaFuncion -> EMPTY LPAREN argumentos RPAREN
Rule 160   llamadaFuncion -> ID LPAREN argumentos RPAREN
Rule 161   llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON
Rule 162   classDeclarate -> CLASS ID LBRACE classBody RBRACE
Rule 163   classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE
Rule 164   classDeclarate -> data CLASS ID LBRACE classBody RBRACE
Rule 165   classDeclarate -> classInterface
Rule 166   classBody -> classMember
Rule 167   classBody -> classMember classBody
Rule 168   classMember -> type VARIABLE SEMICOLON
Rule 169   classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
Rule 170   classMember -> objectInstantiation
Rule 171   objectInstantiation -> NEW ID LPAREN argumentos RPAREN
Rule 172   objectInstantiation -> NEW ID LPAREN RPAREN
Rule 173   classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
Rule 174   classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
Rule 175   classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
Rule 176   classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
Rule 177   impInterface -> ID
Rule 178   impInterface -> ID COMMA impInterface
Rule 179   data -> ABSTRACT
Rule 180   data -> PRIVATE
Rule 181   data -> PROTECTED
Rule 182   data -> PUBLIC
Rule 183   data -> STATIC
Rule 184   data -> FINAL
Rule 185   interface -> INTERFACE ID LBRACE classBody RBRACE
Rule 186   includes -> INCLUDE STRING SEMICOLON
Rule 187   includes -> INCLUDE STRING DOT STRING SEMICOLON
Rule 188   namespace -> NAMESPACE ID SEMICOLON
Rule 189   anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
Rule 190   throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
Rule 191   throw -> THROW valor SEMICOLON
Rule 192   instance -> VARIABLE INSTANCEOF ID
Rule 193   constdeclaration -> CONST ID EQUALS valor SEMICOLON
Rule 194   thisdeclaration -> THIS ARROW ID SEMICOLON
Rule 195   thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON
Rule 196   concatenate -> VARIABLE CONCATENATEEQUAL STRING
Rule 197   minuse -> VARIABLE MINUSEQUAL INT
Rule 198   funcion -> STRLEN LPAREN STRING RPAREN
Rule 199   statement_valor -> VARIABLE EQUALS valor
Rule 200   statement_plusequal -> VARIABLE EQUALS VARIABLE PLUSEQUAL INT
Rule 201   expr -> INT
Rule 202   expr -> STRING

Terminals, with rules where they appear

ABSTRACT             : 179
AND                  : 91
ARRAY                : 40 123 129
ARRAY_TYPE           : 149
ARROW                : 156 194 195
ARROWMAP             : 132 189
AS                   : 114
BOOL                 : 38
BOOL_TYPE            : 148
BREAK                : 115 116 133 134
CASE                 : 115 116 117 118 119
CATCH                : 153
CLASS                : 162 163 164 173 174 175 176
CLOSETAG             : 1
COLON                : 30 31 107 115 117 133 135
COMMA                : 62 127 131 139 178
CONCATENATEEQUAL     : 196
CONST                : 193
DEFAULT              : 133 134 135 136 137
DIVIDE               : 46
DO                   : 105
DOT                  : 187
DOUBLEMINUS          : 102
DOUBLEPLUS           : 101
ECHO                 : 55
ELSE                 : 74
ELSEIF               : 75
EMPTY                : 159 161
ENDSWITCH            : 107
EQ                   : 83
EQUALS               : 27 28 29 101 102 121 122 123 128 129 142 143 189 193 199 200
EXCEPTION            : 153 190
EXTENDS              : 163 174 176
FGETS                : 29
FINAL                : 184
FINALLY              : 152
FLOAT                : 36
FLOAT_TYPE           : 146
FN                   : 189
FOR                  : 100
FOREACH              : 114
FUNCTION             : 157 169
GEQ                  : 54 90
GT                   : 52 88
ID                   : 156 157 158 160 162 163 163 164 169 171 172 173 174 174 175 176 176 177 178 185 188 192 193 194 195
IF                   : 72 73
IMPLEMENTS           : 173 174 175 176
INCLUDE              : 186 187
INSTANCEOF           : 192
INT                  : 34 101 101 102 102 197 200 201
INTERFACE            : 185
INT_TYPE             : 145
LBRACE               : 72 74 75 100 103 104 105 106 114 151 152 152 153 157 162 163 164 169 173 174 175 176 185
LBRACKET             : 122 125 128
LEQ                  : 53 89
LOGICAL_AND          : 92
LOGICAL_OR           : 94
LPAREN               : 29 30 31 57 58 72 73 75 79 100 103 104 105 106 107 114 123 129 153 156 157 158 159 160 161 169 171 172 189 190 195 198
LT                   : 51 87
MINUS                : 44
MINUSEQUAL           : 197
MODULO               : 47
NAMESPACE            : 188
NEQ                  : 84
NEW                  : 171 172 190
NOT                  : 82
NULL                 : 39
OBJECT_TYPE          : 
OPENTAG              : 1
OR                   : 93
PLUS                 : 43
PLUSEQUAL            : 49 200
POTENCIA             : 48
PRINT                : 56
PRIVATE              : 180
PROTECTED            : 181
PUBLIC               : 182
QUESTION             : 30 31
RBRACE               : 72 74 75 100 103 104 105 106 114 151 152 152 153 157 162 163 164 169 173 174 175 176 185
RBRACKET             : 122 125 128
RETURN               : 25 26
RPAREN               : 29 30 31 57 58 72 73 75 79 100 103 104 105 106 107 114 123 129 153 156 157 158 159 160 161 169 171 172 189 190 195 198
SEMICOLON            : 25 26 27 28 29 55 56 101 101 102 102 105 107 115 116 116 118 121 122 123 128 129 133 134 134 136 156 158 161 168 186 187 188 189 190 191 193 194 195
STATIC               : 183
STDIN                : 29
STRICTEQ             : 85
STRICTNEQ            : 86
STRING               : 37 186 187 187 196 198 202
STRING_TYPE          : 147
STRLEN               : 198
SWITCH               : 106 107
THIS                 : 194 195
THROW                : 190 191
TIMES                : 45
TRY                  : 151 152
VARIABLE             : 27 28 29 35 101 101 101 102 102 102 114 114 121 122 123 128 129 141 142 143 153 156 168 189 192 196 197 199 200 200
VOID                 : 150
WHILE                : 103 104 105
error                : 

Nonterminals, with rules where they appear

anonymousFunction    : 18
argumento            : 138 139
argumentos           : 139 156 157 158 159 160 161 169 171
array                : 120
arrayAnidado         : 122 127
arrays               : 121 126 127
asignacion           : 4
asignacion_fgets     : 5
body                 : 72 73 74 75 100 103 105 114 115 116 117 133 134 135 136 151 152 152 153 157 169
case                 : 112 113
caseLists            : 106 107
cases                : 108 109 113
catch                : 154 155
catchs               : 151 152 155
classBody            : 162 163 164 167 173 174 175 176 185
classDeclarate       : 13
classInterface       : 165
classMember          : 166 167
comparacion          : 6 189
comparador           : 50
concatenate          : 23
condition            : 77 78 78 82 103 104 105
conditions           : 30 31 72 73 75 79
constdeclaration     : 21
controlStructure     : 64
data                 : 164 175 176
dataStructure        : 65
default              : 109 110
dowhile              : 69
else_blocks          : 72 75
empty                : 60 76 96 111 140
estructurasPrograma  : 8
expr                 : 
for                  : 67
forStatement         : 99
forcondition         : 100
foreach              : 71
funcion              : 
funcionDeclaration   : 10
if                   : 66
impInterface         : 173 174 175 176 178
impresion            : 7
imprimir             : 55 56
includes             : 16
inicio               : 0
instance             : 20
interface            : 14
llamadaFuncion       : 12 41
map                  : 124
mapArrow             : 130 131
maps                 : 128 129 131
minuse               : 24
namespace            : 17
objectInstantiation  : 170
objeto               : 15
opLogic              : 78
opSymbol             : 81 101 102
operaArit            : 27 33 144
operador             : 33
operador_ternario    : 42
programa             : 1 3
repiteValores        : 57 59 62 123 125 190
returnStatement      : 11
sentencia            : 2 3 97 98
sentenciaList        : 95 98
statement_plusequal  : 
statement_valor      : 
switch               : 70
thisdeclaration      : 22
throw                : 19
try                  : 9
type                 : 141 143 168 169
valor                : 25 28 30 30 31 32 33 50 50 61 62 80 81 81 106 107 115 116 117 118 119 132 132 142 143 191 193 199
while                : 68

Parsing method: LALR

state 0

    (0) S' -> . inicio
    (1) inicio -> . OPENTAG programa CLOSETAG

    OPENTAG         shift and go to state 2

    inicio                         shift and go to state 1

state 1

    (0) S' -> inicio .



state 2

    (1) inicio -> OPENTAG . programa CLOSETAG
    (2) programa -> . sentencia
    (3) programa -> . sentencia programa
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (29) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) comparacion -> . valor comparador valor
    (55) impresion -> . ECHO imprimir SEMICOLON
    (56) impresion -> . PRINT imprimir SEMICOLON
    (64) estructurasPrograma -> . controlStructure
    (65) estructurasPrograma -> . dataStructure
    (151) try -> . TRY LBRACE body RBRACE catchs
    (152) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (157) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN valor SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (162) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (163) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (164) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (165) classDeclarate -> . classInterface
    (185) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (156) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (186) includes -> . INCLUDE STRING SEMICOLON
    (187) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (188) namespace -> . NAMESPACE ID SEMICOLON
    (189) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (190) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> . THROW valor SEMICOLON
    (192) instance -> . VARIABLE INSTANCEOF ID
    (193) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (194) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (195) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (196) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (197) minuse -> . VARIABLE MINUSEQUAL INT
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (66) controlStructure -> . if
    (67) controlStructure -> . for
    (68) controlStructure -> . while
    (69) controlStructure -> . dowhile
    (70) controlStructure -> . switch
    (71) controlStructure -> . foreach
    (120) dataStructure -> . array
    (179) data -> . ABSTRACT
    (180) data -> . PRIVATE
    (181) data -> . PROTECTED
    (182) data -> . PUBLIC
    (183) data -> . STATIC
    (184) data -> . FINAL
    (173) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (175) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (72) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> . IF LPAREN conditions RPAREN body
    (99) for -> . forStatement
    (103) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (105) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (106) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (114) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (121) array -> . VARIABLE EQUALS arrays SEMICOLON
    (122) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (124) array -> . map
    (100) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (128) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 61
    PRIVATE         shift and go to state 62
    PROTECTED       shift and go to state 63
    PUBLIC          shift and go to state 64
    STATIC          shift and go to state 65
    FINAL           shift and go to state 66
    LPAREN          shift and go to state 28
    IF              shift and go to state 67
    WHILE           shift and go to state 69
    DO              shift and go to state 70
    SWITCH          shift and go to state 71
    FOREACH         shift and go to state 72
    FOR             shift and go to state 74

    programa                       shift and go to state 3
    sentencia                      shift and go to state 4
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    valor                          shift and go to state 27
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    operador_ternario              shift and go to state 53
    if                             shift and go to state 54
    for                            shift and go to state 55
    while                          shift and go to state 56
    dowhile                        shift and go to state 57
    switch                         shift and go to state 58
    foreach                        shift and go to state 59
    array                          shift and go to state 60
    forStatement                   shift and go to state 68
    map                            shift and go to state 73

state 3

    (1) inicio -> OPENTAG programa . CLOSETAG

    CLOSETAG        shift and go to state 75


state 4

    (2) programa -> sentencia .
    (3) programa -> sentencia . programa
    (2) programa -> . sentencia
    (3) programa -> . sentencia programa
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (29) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) comparacion -> . valor comparador valor
    (55) impresion -> . ECHO imprimir SEMICOLON
    (56) impresion -> . PRINT imprimir SEMICOLON
    (64) estructurasPrograma -> . controlStructure
    (65) estructurasPrograma -> . dataStructure
    (151) try -> . TRY LBRACE body RBRACE catchs
    (152) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (157) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN valor SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (162) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (163) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (164) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (165) classDeclarate -> . classInterface
    (185) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (156) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (186) includes -> . INCLUDE STRING SEMICOLON
    (187) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (188) namespace -> . NAMESPACE ID SEMICOLON
    (189) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (190) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> . THROW valor SEMICOLON
    (192) instance -> . VARIABLE INSTANCEOF ID
    (193) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (194) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (195) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (196) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (197) minuse -> . VARIABLE MINUSEQUAL INT
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (66) controlStructure -> . if
    (67) controlStructure -> . for
    (68) controlStructure -> . while
    (69) controlStructure -> . dowhile
    (70) controlStructure -> . switch
    (71) controlStructure -> . foreach
    (120) dataStructure -> . array
    (179) data -> . ABSTRACT
    (180) data -> . PRIVATE
    (181) data -> . PROTECTED
    (182) data -> . PUBLIC
    (183) data -> . STATIC
    (184) data -> . FINAL
    (173) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (175) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (72) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> . IF LPAREN conditions RPAREN body
    (99) for -> . forStatement
    (103) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (105) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (106) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (114) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (121) array -> . VARIABLE EQUALS arrays SEMICOLON
    (122) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (124) array -> . map
    (100) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (128) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    CLOSETAG        reduce using rule 2 (programa -> sentencia .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 61
    PRIVATE         shift and go to state 62
    PROTECTED       shift and go to state 63
    PUBLIC          shift and go to state 64
    STATIC          shift and go to state 65
    FINAL           shift and go to state 66
    LPAREN          shift and go to state 28
    IF              shift and go to state 67
    WHILE           shift and go to state 69
    DO              shift and go to state 70
    SWITCH          shift and go to state 71
    FOREACH         shift and go to state 72
    FOR             shift and go to state 74

    sentencia                      shift and go to state 4
    programa                       shift and go to state 76
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    valor                          shift and go to state 27
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    operador_ternario              shift and go to state 53
    if                             shift and go to state 54
    for                            shift and go to state 55
    while                          shift and go to state 56
    dowhile                        shift and go to state 57
    switch                         shift and go to state 58
    foreach                        shift and go to state 59
    array                          shift and go to state 60
    forStatement                   shift and go to state 68
    map                            shift and go to state 73

state 5

    (4) sentencia -> asignacion .

    VARIABLE        reduce using rule 4 (sentencia -> asignacion .)
    ECHO            reduce using rule 4 (sentencia -> asignacion .)
    PRINT           reduce using rule 4 (sentencia -> asignacion .)
    TRY             reduce using rule 4 (sentencia -> asignacion .)
    FUNCTION        reduce using rule 4 (sentencia -> asignacion .)
    RETURN          reduce using rule 4 (sentencia -> asignacion .)
    ID              reduce using rule 4 (sentencia -> asignacion .)
    EMPTY           reduce using rule 4 (sentencia -> asignacion .)
    CLASS           reduce using rule 4 (sentencia -> asignacion .)
    INTERFACE       reduce using rule 4 (sentencia -> asignacion .)
    INCLUDE         reduce using rule 4 (sentencia -> asignacion .)
    NAMESPACE       reduce using rule 4 (sentencia -> asignacion .)
    THROW           reduce using rule 4 (sentencia -> asignacion .)
    CONST           reduce using rule 4 (sentencia -> asignacion .)
    THIS            reduce using rule 4 (sentencia -> asignacion .)
    INT             reduce using rule 4 (sentencia -> asignacion .)
    FLOAT           reduce using rule 4 (sentencia -> asignacion .)
    STRING          reduce using rule 4 (sentencia -> asignacion .)
    BOOL            reduce using rule 4 (sentencia -> asignacion .)
    NULL            reduce using rule 4 (sentencia -> asignacion .)
    ARRAY           reduce using rule 4 (sentencia -> asignacion .)
    ABSTRACT        reduce using rule 4 (sentencia -> asignacion .)
    PRIVATE         reduce using rule 4 (sentencia -> asignacion .)
    PROTECTED       reduce using rule 4 (sentencia -> asignacion .)
    PUBLIC          reduce using rule 4 (sentencia -> asignacion .)
    STATIC          reduce using rule 4 (sentencia -> asignacion .)
    FINAL           reduce using rule 4 (sentencia -> asignacion .)
    LPAREN          reduce using rule 4 (sentencia -> asignacion .)
    IF              reduce using rule 4 (sentencia -> asignacion .)
    WHILE           reduce using rule 4 (sentencia -> asignacion .)
    DO              reduce using rule 4 (sentencia -> asignacion .)
    SWITCH          reduce using rule 4 (sentencia -> asignacion .)
    FOREACH         reduce using rule 4 (sentencia -> asignacion .)
    FOR             reduce using rule 4 (sentencia -> asignacion .)
    CLOSETAG        reduce using rule 4 (sentencia -> asignacion .)
    RBRACE          reduce using rule 4 (sentencia -> asignacion .)
    BREAK           reduce using rule 4 (sentencia -> asignacion .)
    ENDSWITCH       reduce using rule 4 (sentencia -> asignacion .)
    CASE            reduce using rule 4 (sentencia -> asignacion .)
    DEFAULT         reduce using rule 4 (sentencia -> asignacion .)


state 6

    (5) sentencia -> asignacion_fgets .

    VARIABLE        reduce using rule 5 (sentencia -> asignacion_fgets .)
    ECHO            reduce using rule 5 (sentencia -> asignacion_fgets .)
    PRINT           reduce using rule 5 (sentencia -> asignacion_fgets .)
    TRY             reduce using rule 5 (sentencia -> asignacion_fgets .)
    FUNCTION        reduce using rule 5 (sentencia -> asignacion_fgets .)
    RETURN          reduce using rule 5 (sentencia -> asignacion_fgets .)
    ID              reduce using rule 5 (sentencia -> asignacion_fgets .)
    EMPTY           reduce using rule 5 (sentencia -> asignacion_fgets .)
    CLASS           reduce using rule 5 (sentencia -> asignacion_fgets .)
    INTERFACE       reduce using rule 5 (sentencia -> asignacion_fgets .)
    INCLUDE         reduce using rule 5 (sentencia -> asignacion_fgets .)
    NAMESPACE       reduce using rule 5 (sentencia -> asignacion_fgets .)
    THROW           reduce using rule 5 (sentencia -> asignacion_fgets .)
    CONST           reduce using rule 5 (sentencia -> asignacion_fgets .)
    THIS            reduce using rule 5 (sentencia -> asignacion_fgets .)
    INT             reduce using rule 5 (sentencia -> asignacion_fgets .)
    FLOAT           reduce using rule 5 (sentencia -> asignacion_fgets .)
    STRING          reduce using rule 5 (sentencia -> asignacion_fgets .)
    BOOL            reduce using rule 5 (sentencia -> asignacion_fgets .)
    NULL            reduce using rule 5 (sentencia -> asignacion_fgets .)
    ARRAY           reduce using rule 5 (sentencia -> asignacion_fgets .)
    ABSTRACT        reduce using rule 5 (sentencia -> asignacion_fgets .)
    PRIVATE         reduce using rule 5 (sentencia -> asignacion_fgets .)
    PROTECTED       reduce using rule 5 (sentencia -> asignacion_fgets .)
    PUBLIC          reduce using rule 5 (sentencia -> asignacion_fgets .)
    STATIC          reduce using rule 5 (sentencia -> asignacion_fgets .)
    FINAL           reduce using rule 5 (sentencia -> asignacion_fgets .)
    LPAREN          reduce using rule 5 (sentencia -> asignacion_fgets .)
    IF              reduce using rule 5 (sentencia -> asignacion_fgets .)
    WHILE           reduce using rule 5 (sentencia -> asignacion_fgets .)
    DO              reduce using rule 5 (sentencia -> asignacion_fgets .)
    SWITCH          reduce using rule 5 (sentencia -> asignacion_fgets .)
    FOREACH         reduce using rule 5 (sentencia -> asignacion_fgets .)
    FOR             reduce using rule 5 (sentencia -> asignacion_fgets .)
    CLOSETAG        reduce using rule 5 (sentencia -> asignacion_fgets .)
    RBRACE          reduce using rule 5 (sentencia -> asignacion_fgets .)
    BREAK           reduce using rule 5 (sentencia -> asignacion_fgets .)
    ENDSWITCH       reduce using rule 5 (sentencia -> asignacion_fgets .)
    CASE            reduce using rule 5 (sentencia -> asignacion_fgets .)
    DEFAULT         reduce using rule 5 (sentencia -> asignacion_fgets .)


state 7

    (6) sentencia -> comparacion .

    VARIABLE        reduce using rule 6 (sentencia -> comparacion .)
    ECHO            reduce using rule 6 (sentencia -> comparacion .)
    PRINT           reduce using rule 6 (sentencia -> comparacion .)
    TRY             reduce using rule 6 (sentencia -> comparacion .)
    FUNCTION        reduce using rule 6 (sentencia -> comparacion .)
    RETURN          reduce using rule 6 (sentencia -> comparacion .)
    ID              reduce using rule 6 (sentencia -> comparacion .)
    EMPTY           reduce using rule 6 (sentencia -> comparacion .)
    CLASS           reduce using rule 6 (sentencia -> comparacion .)
    INTERFACE       reduce using rule 6 (sentencia -> comparacion .)
    INCLUDE         reduce using rule 6 (sentencia -> comparacion .)
    NAMESPACE       reduce using rule 6 (sentencia -> comparacion .)
    THROW           reduce using rule 6 (sentencia -> comparacion .)
    CONST           reduce using rule 6 (sentencia -> comparacion .)
    THIS            reduce using rule 6 (sentencia -> comparacion .)
    INT             reduce using rule 6 (sentencia -> comparacion .)
    FLOAT           reduce using rule 6 (sentencia -> comparacion .)
    STRING          reduce using rule 6 (sentencia -> comparacion .)
    BOOL            reduce using rule 6 (sentencia -> comparacion .)
    NULL            reduce using rule 6 (sentencia -> comparacion .)
    ARRAY           reduce using rule 6 (sentencia -> comparacion .)
    ABSTRACT        reduce using rule 6 (sentencia -> comparacion .)
    PRIVATE         reduce using rule 6 (sentencia -> comparacion .)
    PROTECTED       reduce using rule 6 (sentencia -> comparacion .)
    PUBLIC          reduce using rule 6 (sentencia -> comparacion .)
    STATIC          reduce using rule 6 (sentencia -> comparacion .)
    FINAL           reduce using rule 6 (sentencia -> comparacion .)
    LPAREN          reduce using rule 6 (sentencia -> comparacion .)
    IF              reduce using rule 6 (sentencia -> comparacion .)
    WHILE           reduce using rule 6 (sentencia -> comparacion .)
    DO              reduce using rule 6 (sentencia -> comparacion .)
    SWITCH          reduce using rule 6 (sentencia -> comparacion .)
    FOREACH         reduce using rule 6 (sentencia -> comparacion .)
    FOR             reduce using rule 6 (sentencia -> comparacion .)
    CLOSETAG        reduce using rule 6 (sentencia -> comparacion .)
    RBRACE          reduce using rule 6 (sentencia -> comparacion .)
    BREAK           reduce using rule 6 (sentencia -> comparacion .)
    ENDSWITCH       reduce using rule 6 (sentencia -> comparacion .)
    CASE            reduce using rule 6 (sentencia -> comparacion .)
    DEFAULT         reduce using rule 6 (sentencia -> comparacion .)


state 8

    (7) sentencia -> impresion .

    VARIABLE        reduce using rule 7 (sentencia -> impresion .)
    ECHO            reduce using rule 7 (sentencia -> impresion .)
    PRINT           reduce using rule 7 (sentencia -> impresion .)
    TRY             reduce using rule 7 (sentencia -> impresion .)
    FUNCTION        reduce using rule 7 (sentencia -> impresion .)
    RETURN          reduce using rule 7 (sentencia -> impresion .)
    ID              reduce using rule 7 (sentencia -> impresion .)
    EMPTY           reduce using rule 7 (sentencia -> impresion .)
    CLASS           reduce using rule 7 (sentencia -> impresion .)
    INTERFACE       reduce using rule 7 (sentencia -> impresion .)
    INCLUDE         reduce using rule 7 (sentencia -> impresion .)
    NAMESPACE       reduce using rule 7 (sentencia -> impresion .)
    THROW           reduce using rule 7 (sentencia -> impresion .)
    CONST           reduce using rule 7 (sentencia -> impresion .)
    THIS            reduce using rule 7 (sentencia -> impresion .)
    INT             reduce using rule 7 (sentencia -> impresion .)
    FLOAT           reduce using rule 7 (sentencia -> impresion .)
    STRING          reduce using rule 7 (sentencia -> impresion .)
    BOOL            reduce using rule 7 (sentencia -> impresion .)
    NULL            reduce using rule 7 (sentencia -> impresion .)
    ARRAY           reduce using rule 7 (sentencia -> impresion .)
    ABSTRACT        reduce using rule 7 (sentencia -> impresion .)
    PRIVATE         reduce using rule 7 (sentencia -> impresion .)
    PROTECTED       reduce using rule 7 (sentencia -> impresion .)
    PUBLIC          reduce using rule 7 (sentencia -> impresion .)
    STATIC          reduce using rule 7 (sentencia -> impresion .)
    FINAL           reduce using rule 7 (sentencia -> impresion .)
    LPAREN          reduce using rule 7 (sentencia -> impresion .)
    IF              reduce using rule 7 (sentencia -> impresion .)
    WHILE           reduce using rule 7 (sentencia -> impresion .)
    DO              reduce using rule 7 (sentencia -> impresion .)
    SWITCH          reduce using rule 7 (sentencia -> impresion .)
    FOREACH         reduce using rule 7 (sentencia -> impresion .)
    FOR             reduce using rule 7 (sentencia -> impresion .)
    CLOSETAG        reduce using rule 7 (sentencia -> impresion .)
    RBRACE          reduce using rule 7 (sentencia -> impresion .)
    BREAK           reduce using rule 7 (sentencia -> impresion .)
    ENDSWITCH       reduce using rule 7 (sentencia -> impresion .)
    CASE            reduce using rule 7 (sentencia -> impresion .)
    DEFAULT         reduce using rule 7 (sentencia -> impresion .)


state 9

    (8) sentencia -> estructurasPrograma .

    VARIABLE        reduce using rule 8 (sentencia -> estructurasPrograma .)
    ECHO            reduce using rule 8 (sentencia -> estructurasPrograma .)
    PRINT           reduce using rule 8 (sentencia -> estructurasPrograma .)
    TRY             reduce using rule 8 (sentencia -> estructurasPrograma .)
    FUNCTION        reduce using rule 8 (sentencia -> estructurasPrograma .)
    RETURN          reduce using rule 8 (sentencia -> estructurasPrograma .)
    ID              reduce using rule 8 (sentencia -> estructurasPrograma .)
    EMPTY           reduce using rule 8 (sentencia -> estructurasPrograma .)
    CLASS           reduce using rule 8 (sentencia -> estructurasPrograma .)
    INTERFACE       reduce using rule 8 (sentencia -> estructurasPrograma .)
    INCLUDE         reduce using rule 8 (sentencia -> estructurasPrograma .)
    NAMESPACE       reduce using rule 8 (sentencia -> estructurasPrograma .)
    THROW           reduce using rule 8 (sentencia -> estructurasPrograma .)
    CONST           reduce using rule 8 (sentencia -> estructurasPrograma .)
    THIS            reduce using rule 8 (sentencia -> estructurasPrograma .)
    INT             reduce using rule 8 (sentencia -> estructurasPrograma .)
    FLOAT           reduce using rule 8 (sentencia -> estructurasPrograma .)
    STRING          reduce using rule 8 (sentencia -> estructurasPrograma .)
    BOOL            reduce using rule 8 (sentencia -> estructurasPrograma .)
    NULL            reduce using rule 8 (sentencia -> estructurasPrograma .)
    ARRAY           reduce using rule 8 (sentencia -> estructurasPrograma .)
    ABSTRACT        reduce using rule 8 (sentencia -> estructurasPrograma .)
    PRIVATE         reduce using rule 8 (sentencia -> estructurasPrograma .)
    PROTECTED       reduce using rule 8 (sentencia -> estructurasPrograma .)
    PUBLIC          reduce using rule 8 (sentencia -> estructurasPrograma .)
    STATIC          reduce using rule 8 (sentencia -> estructurasPrograma .)
    FINAL           reduce using rule 8 (sentencia -> estructurasPrograma .)
    LPAREN          reduce using rule 8 (sentencia -> estructurasPrograma .)
    IF              reduce using rule 8 (sentencia -> estructurasPrograma .)
    WHILE           reduce using rule 8 (sentencia -> estructurasPrograma .)
    DO              reduce using rule 8 (sentencia -> estructurasPrograma .)
    SWITCH          reduce using rule 8 (sentencia -> estructurasPrograma .)
    FOREACH         reduce using rule 8 (sentencia -> estructurasPrograma .)
    FOR             reduce using rule 8 (sentencia -> estructurasPrograma .)
    CLOSETAG        reduce using rule 8 (sentencia -> estructurasPrograma .)
    RBRACE          reduce using rule 8 (sentencia -> estructurasPrograma .)
    BREAK           reduce using rule 8 (sentencia -> estructurasPrograma .)
    ENDSWITCH       reduce using rule 8 (sentencia -> estructurasPrograma .)
    CASE            reduce using rule 8 (sentencia -> estructurasPrograma .)
    DEFAULT         reduce using rule 8 (sentencia -> estructurasPrograma .)


state 10

    (9) sentencia -> try .

    VARIABLE        reduce using rule 9 (sentencia -> try .)
    ECHO            reduce using rule 9 (sentencia -> try .)
    PRINT           reduce using rule 9 (sentencia -> try .)
    TRY             reduce using rule 9 (sentencia -> try .)
    FUNCTION        reduce using rule 9 (sentencia -> try .)
    RETURN          reduce using rule 9 (sentencia -> try .)
    ID              reduce using rule 9 (sentencia -> try .)
    EMPTY           reduce using rule 9 (sentencia -> try .)
    CLASS           reduce using rule 9 (sentencia -> try .)
    INTERFACE       reduce using rule 9 (sentencia -> try .)
    INCLUDE         reduce using rule 9 (sentencia -> try .)
    NAMESPACE       reduce using rule 9 (sentencia -> try .)
    THROW           reduce using rule 9 (sentencia -> try .)
    CONST           reduce using rule 9 (sentencia -> try .)
    THIS            reduce using rule 9 (sentencia -> try .)
    INT             reduce using rule 9 (sentencia -> try .)
    FLOAT           reduce using rule 9 (sentencia -> try .)
    STRING          reduce using rule 9 (sentencia -> try .)
    BOOL            reduce using rule 9 (sentencia -> try .)
    NULL            reduce using rule 9 (sentencia -> try .)
    ARRAY           reduce using rule 9 (sentencia -> try .)
    ABSTRACT        reduce using rule 9 (sentencia -> try .)
    PRIVATE         reduce using rule 9 (sentencia -> try .)
    PROTECTED       reduce using rule 9 (sentencia -> try .)
    PUBLIC          reduce using rule 9 (sentencia -> try .)
    STATIC          reduce using rule 9 (sentencia -> try .)
    FINAL           reduce using rule 9 (sentencia -> try .)
    LPAREN          reduce using rule 9 (sentencia -> try .)
    IF              reduce using rule 9 (sentencia -> try .)
    WHILE           reduce using rule 9 (sentencia -> try .)
    DO              reduce using rule 9 (sentencia -> try .)
    SWITCH          reduce using rule 9 (sentencia -> try .)
    FOREACH         reduce using rule 9 (sentencia -> try .)
    FOR             reduce using rule 9 (sentencia -> try .)
    CLOSETAG        reduce using rule 9 (sentencia -> try .)
    RBRACE          reduce using rule 9 (sentencia -> try .)
    BREAK           reduce using rule 9 (sentencia -> try .)
    ENDSWITCH       reduce using rule 9 (sentencia -> try .)
    CASE            reduce using rule 9 (sentencia -> try .)
    DEFAULT         reduce using rule 9 (sentencia -> try .)


state 11

    (10) sentencia -> funcionDeclaration .

    VARIABLE        reduce using rule 10 (sentencia -> funcionDeclaration .)
    ECHO            reduce using rule 10 (sentencia -> funcionDeclaration .)
    PRINT           reduce using rule 10 (sentencia -> funcionDeclaration .)
    TRY             reduce using rule 10 (sentencia -> funcionDeclaration .)
    FUNCTION        reduce using rule 10 (sentencia -> funcionDeclaration .)
    RETURN          reduce using rule 10 (sentencia -> funcionDeclaration .)
    ID              reduce using rule 10 (sentencia -> funcionDeclaration .)
    EMPTY           reduce using rule 10 (sentencia -> funcionDeclaration .)
    CLASS           reduce using rule 10 (sentencia -> funcionDeclaration .)
    INTERFACE       reduce using rule 10 (sentencia -> funcionDeclaration .)
    INCLUDE         reduce using rule 10 (sentencia -> funcionDeclaration .)
    NAMESPACE       reduce using rule 10 (sentencia -> funcionDeclaration .)
    THROW           reduce using rule 10 (sentencia -> funcionDeclaration .)
    CONST           reduce using rule 10 (sentencia -> funcionDeclaration .)
    THIS            reduce using rule 10 (sentencia -> funcionDeclaration .)
    INT             reduce using rule 10 (sentencia -> funcionDeclaration .)
    FLOAT           reduce using rule 10 (sentencia -> funcionDeclaration .)
    STRING          reduce using rule 10 (sentencia -> funcionDeclaration .)
    BOOL            reduce using rule 10 (sentencia -> funcionDeclaration .)
    NULL            reduce using rule 10 (sentencia -> funcionDeclaration .)
    ARRAY           reduce using rule 10 (sentencia -> funcionDeclaration .)
    ABSTRACT        reduce using rule 10 (sentencia -> funcionDeclaration .)
    PRIVATE         reduce using rule 10 (sentencia -> funcionDeclaration .)
    PROTECTED       reduce using rule 10 (sentencia -> funcionDeclaration .)
    PUBLIC          reduce using rule 10 (sentencia -> funcionDeclaration .)
    STATIC          reduce using rule 10 (sentencia -> funcionDeclaration .)
    FINAL           reduce using rule 10 (sentencia -> funcionDeclaration .)
    LPAREN          reduce using rule 10 (sentencia -> funcionDeclaration .)
    IF              reduce using rule 10 (sentencia -> funcionDeclaration .)
    WHILE           reduce using rule 10 (sentencia -> funcionDeclaration .)
    DO              reduce using rule 10 (sentencia -> funcionDeclaration .)
    SWITCH          reduce using rule 10 (sentencia -> funcionDeclaration .)
    FOREACH         reduce using rule 10 (sentencia -> funcionDeclaration .)
    FOR             reduce using rule 10 (sentencia -> funcionDeclaration .)
    CLOSETAG        reduce using rule 10 (sentencia -> funcionDeclaration .)
    RBRACE          reduce using rule 10 (sentencia -> funcionDeclaration .)
    BREAK           reduce using rule 10 (sentencia -> funcionDeclaration .)
    ENDSWITCH       reduce using rule 10 (sentencia -> funcionDeclaration .)
    CASE            reduce using rule 10 (sentencia -> funcionDeclaration .)
    DEFAULT         reduce using rule 10 (sentencia -> funcionDeclaration .)


state 12

    (11) sentencia -> returnStatement .

    VARIABLE        reduce using rule 11 (sentencia -> returnStatement .)
    ECHO            reduce using rule 11 (sentencia -> returnStatement .)
    PRINT           reduce using rule 11 (sentencia -> returnStatement .)
    TRY             reduce using rule 11 (sentencia -> returnStatement .)
    FUNCTION        reduce using rule 11 (sentencia -> returnStatement .)
    RETURN          reduce using rule 11 (sentencia -> returnStatement .)
    ID              reduce using rule 11 (sentencia -> returnStatement .)
    EMPTY           reduce using rule 11 (sentencia -> returnStatement .)
    CLASS           reduce using rule 11 (sentencia -> returnStatement .)
    INTERFACE       reduce using rule 11 (sentencia -> returnStatement .)
    INCLUDE         reduce using rule 11 (sentencia -> returnStatement .)
    NAMESPACE       reduce using rule 11 (sentencia -> returnStatement .)
    THROW           reduce using rule 11 (sentencia -> returnStatement .)
    CONST           reduce using rule 11 (sentencia -> returnStatement .)
    THIS            reduce using rule 11 (sentencia -> returnStatement .)
    INT             reduce using rule 11 (sentencia -> returnStatement .)
    FLOAT           reduce using rule 11 (sentencia -> returnStatement .)
    STRING          reduce using rule 11 (sentencia -> returnStatement .)
    BOOL            reduce using rule 11 (sentencia -> returnStatement .)
    NULL            reduce using rule 11 (sentencia -> returnStatement .)
    ARRAY           reduce using rule 11 (sentencia -> returnStatement .)
    ABSTRACT        reduce using rule 11 (sentencia -> returnStatement .)
    PRIVATE         reduce using rule 11 (sentencia -> returnStatement .)
    PROTECTED       reduce using rule 11 (sentencia -> returnStatement .)
    PUBLIC          reduce using rule 11 (sentencia -> returnStatement .)
    STATIC          reduce using rule 11 (sentencia -> returnStatement .)
    FINAL           reduce using rule 11 (sentencia -> returnStatement .)
    LPAREN          reduce using rule 11 (sentencia -> returnStatement .)
    IF              reduce using rule 11 (sentencia -> returnStatement .)
    WHILE           reduce using rule 11 (sentencia -> returnStatement .)
    DO              reduce using rule 11 (sentencia -> returnStatement .)
    SWITCH          reduce using rule 11 (sentencia -> returnStatement .)
    FOREACH         reduce using rule 11 (sentencia -> returnStatement .)
    FOR             reduce using rule 11 (sentencia -> returnStatement .)
    CLOSETAG        reduce using rule 11 (sentencia -> returnStatement .)
    RBRACE          reduce using rule 11 (sentencia -> returnStatement .)
    BREAK           reduce using rule 11 (sentencia -> returnStatement .)
    ENDSWITCH       reduce using rule 11 (sentencia -> returnStatement .)
    CASE            reduce using rule 11 (sentencia -> returnStatement .)
    DEFAULT         reduce using rule 11 (sentencia -> returnStatement .)


state 13

    (12) sentencia -> llamadaFuncion .
    (41) valor -> llamadaFuncion .

    VARIABLE        reduce using rule 12 (sentencia -> llamadaFuncion .)
    ECHO            reduce using rule 12 (sentencia -> llamadaFuncion .)
    PRINT           reduce using rule 12 (sentencia -> llamadaFuncion .)
    TRY             reduce using rule 12 (sentencia -> llamadaFuncion .)
    FUNCTION        reduce using rule 12 (sentencia -> llamadaFuncion .)
    RETURN          reduce using rule 12 (sentencia -> llamadaFuncion .)
    ID              reduce using rule 12 (sentencia -> llamadaFuncion .)
    EMPTY           reduce using rule 12 (sentencia -> llamadaFuncion .)
    CLASS           reduce using rule 12 (sentencia -> llamadaFuncion .)
    INTERFACE       reduce using rule 12 (sentencia -> llamadaFuncion .)
    INCLUDE         reduce using rule 12 (sentencia -> llamadaFuncion .)
    NAMESPACE       reduce using rule 12 (sentencia -> llamadaFuncion .)
    THROW           reduce using rule 12 (sentencia -> llamadaFuncion .)
    CONST           reduce using rule 12 (sentencia -> llamadaFuncion .)
    THIS            reduce using rule 12 (sentencia -> llamadaFuncion .)
    INT             reduce using rule 12 (sentencia -> llamadaFuncion .)
    FLOAT           reduce using rule 12 (sentencia -> llamadaFuncion .)
    STRING          reduce using rule 12 (sentencia -> llamadaFuncion .)
    BOOL            reduce using rule 12 (sentencia -> llamadaFuncion .)
    NULL            reduce using rule 12 (sentencia -> llamadaFuncion .)
    ARRAY           reduce using rule 12 (sentencia -> llamadaFuncion .)
    ABSTRACT        reduce using rule 12 (sentencia -> llamadaFuncion .)
    PRIVATE         reduce using rule 12 (sentencia -> llamadaFuncion .)
    PROTECTED       reduce using rule 12 (sentencia -> llamadaFuncion .)
    PUBLIC          reduce using rule 12 (sentencia -> llamadaFuncion .)
    STATIC          reduce using rule 12 (sentencia -> llamadaFuncion .)
    FINAL           reduce using rule 12 (sentencia -> llamadaFuncion .)
    LPAREN          reduce using rule 12 (sentencia -> llamadaFuncion .)
    IF              reduce using rule 12 (sentencia -> llamadaFuncion .)
    WHILE           reduce using rule 12 (sentencia -> llamadaFuncion .)
    DO              reduce using rule 12 (sentencia -> llamadaFuncion .)
    SWITCH          reduce using rule 12 (sentencia -> llamadaFuncion .)
    FOREACH         reduce using rule 12 (sentencia -> llamadaFuncion .)
    FOR             reduce using rule 12 (sentencia -> llamadaFuncion .)
    CLOSETAG        reduce using rule 12 (sentencia -> llamadaFuncion .)
    RBRACE          reduce using rule 12 (sentencia -> llamadaFuncion .)
    BREAK           reduce using rule 12 (sentencia -> llamadaFuncion .)
    ENDSWITCH       reduce using rule 12 (sentencia -> llamadaFuncion .)
    CASE            reduce using rule 12 (sentencia -> llamadaFuncion .)
    DEFAULT         reduce using rule 12 (sentencia -> llamadaFuncion .)
    LT              reduce using rule 41 (valor -> llamadaFuncion .)
    GT              reduce using rule 41 (valor -> llamadaFuncion .)
    LEQ             reduce using rule 41 (valor -> llamadaFuncion .)
    GEQ             reduce using rule 41 (valor -> llamadaFuncion .)


state 14

    (13) sentencia -> classDeclarate .

    VARIABLE        reduce using rule 13 (sentencia -> classDeclarate .)
    ECHO            reduce using rule 13 (sentencia -> classDeclarate .)
    PRINT           reduce using rule 13 (sentencia -> classDeclarate .)
    TRY             reduce using rule 13 (sentencia -> classDeclarate .)
    FUNCTION        reduce using rule 13 (sentencia -> classDeclarate .)
    RETURN          reduce using rule 13 (sentencia -> classDeclarate .)
    ID              reduce using rule 13 (sentencia -> classDeclarate .)
    EMPTY           reduce using rule 13 (sentencia -> classDeclarate .)
    CLASS           reduce using rule 13 (sentencia -> classDeclarate .)
    INTERFACE       reduce using rule 13 (sentencia -> classDeclarate .)
    INCLUDE         reduce using rule 13 (sentencia -> classDeclarate .)
    NAMESPACE       reduce using rule 13 (sentencia -> classDeclarate .)
    THROW           reduce using rule 13 (sentencia -> classDeclarate .)
    CONST           reduce using rule 13 (sentencia -> classDeclarate .)
    THIS            reduce using rule 13 (sentencia -> classDeclarate .)
    INT             reduce using rule 13 (sentencia -> classDeclarate .)
    FLOAT           reduce using rule 13 (sentencia -> classDeclarate .)
    STRING          reduce using rule 13 (sentencia -> classDeclarate .)
    BOOL            reduce using rule 13 (sentencia -> classDeclarate .)
    NULL            reduce using rule 13 (sentencia -> classDeclarate .)
    ARRAY           reduce using rule 13 (sentencia -> classDeclarate .)
    ABSTRACT        reduce using rule 13 (sentencia -> classDeclarate .)
    PRIVATE         reduce using rule 13 (sentencia -> classDeclarate .)
    PROTECTED       reduce using rule 13 (sentencia -> classDeclarate .)
    PUBLIC          reduce using rule 13 (sentencia -> classDeclarate .)
    STATIC          reduce using rule 13 (sentencia -> classDeclarate .)
    FINAL           reduce using rule 13 (sentencia -> classDeclarate .)
    LPAREN          reduce using rule 13 (sentencia -> classDeclarate .)
    IF              reduce using rule 13 (sentencia -> classDeclarate .)
    WHILE           reduce using rule 13 (sentencia -> classDeclarate .)
    DO              reduce using rule 13 (sentencia -> classDeclarate .)
    SWITCH          reduce using rule 13 (sentencia -> classDeclarate .)
    FOREACH         reduce using rule 13 (sentencia -> classDeclarate .)
    FOR             reduce using rule 13 (sentencia -> classDeclarate .)
    CLOSETAG        reduce using rule 13 (sentencia -> classDeclarate .)
    RBRACE          reduce using rule 13 (sentencia -> classDeclarate .)
    BREAK           reduce using rule 13 (sentencia -> classDeclarate .)
    ENDSWITCH       reduce using rule 13 (sentencia -> classDeclarate .)
    CASE            reduce using rule 13 (sentencia -> classDeclarate .)
    DEFAULT         reduce using rule 13 (sentencia -> classDeclarate .)


state 15

    (14) sentencia -> interface .

    VARIABLE        reduce using rule 14 (sentencia -> interface .)
    ECHO            reduce using rule 14 (sentencia -> interface .)
    PRINT           reduce using rule 14 (sentencia -> interface .)
    TRY             reduce using rule 14 (sentencia -> interface .)
    FUNCTION        reduce using rule 14 (sentencia -> interface .)
    RETURN          reduce using rule 14 (sentencia -> interface .)
    ID              reduce using rule 14 (sentencia -> interface .)
    EMPTY           reduce using rule 14 (sentencia -> interface .)
    CLASS           reduce using rule 14 (sentencia -> interface .)
    INTERFACE       reduce using rule 14 (sentencia -> interface .)
    INCLUDE         reduce using rule 14 (sentencia -> interface .)
    NAMESPACE       reduce using rule 14 (sentencia -> interface .)
    THROW           reduce using rule 14 (sentencia -> interface .)
    CONST           reduce using rule 14 (sentencia -> interface .)
    THIS            reduce using rule 14 (sentencia -> interface .)
    INT             reduce using rule 14 (sentencia -> interface .)
    FLOAT           reduce using rule 14 (sentencia -> interface .)
    STRING          reduce using rule 14 (sentencia -> interface .)
    BOOL            reduce using rule 14 (sentencia -> interface .)
    NULL            reduce using rule 14 (sentencia -> interface .)
    ARRAY           reduce using rule 14 (sentencia -> interface .)
    ABSTRACT        reduce using rule 14 (sentencia -> interface .)
    PRIVATE         reduce using rule 14 (sentencia -> interface .)
    PROTECTED       reduce using rule 14 (sentencia -> interface .)
    PUBLIC          reduce using rule 14 (sentencia -> interface .)
    STATIC          reduce using rule 14 (sentencia -> interface .)
    FINAL           reduce using rule 14 (sentencia -> interface .)
    LPAREN          reduce using rule 14 (sentencia -> interface .)
    IF              reduce using rule 14 (sentencia -> interface .)
    WHILE           reduce using rule 14 (sentencia -> interface .)
    DO              reduce using rule 14 (sentencia -> interface .)
    SWITCH          reduce using rule 14 (sentencia -> interface .)
    FOREACH         reduce using rule 14 (sentencia -> interface .)
    FOR             reduce using rule 14 (sentencia -> interface .)
    CLOSETAG        reduce using rule 14 (sentencia -> interface .)
    RBRACE          reduce using rule 14 (sentencia -> interface .)
    BREAK           reduce using rule 14 (sentencia -> interface .)
    ENDSWITCH       reduce using rule 14 (sentencia -> interface .)
    CASE            reduce using rule 14 (sentencia -> interface .)
    DEFAULT         reduce using rule 14 (sentencia -> interface .)


state 16

    (15) sentencia -> objeto .

    VARIABLE        reduce using rule 15 (sentencia -> objeto .)
    ECHO            reduce using rule 15 (sentencia -> objeto .)
    PRINT           reduce using rule 15 (sentencia -> objeto .)
    TRY             reduce using rule 15 (sentencia -> objeto .)
    FUNCTION        reduce using rule 15 (sentencia -> objeto .)
    RETURN          reduce using rule 15 (sentencia -> objeto .)
    ID              reduce using rule 15 (sentencia -> objeto .)
    EMPTY           reduce using rule 15 (sentencia -> objeto .)
    CLASS           reduce using rule 15 (sentencia -> objeto .)
    INTERFACE       reduce using rule 15 (sentencia -> objeto .)
    INCLUDE         reduce using rule 15 (sentencia -> objeto .)
    NAMESPACE       reduce using rule 15 (sentencia -> objeto .)
    THROW           reduce using rule 15 (sentencia -> objeto .)
    CONST           reduce using rule 15 (sentencia -> objeto .)
    THIS            reduce using rule 15 (sentencia -> objeto .)
    INT             reduce using rule 15 (sentencia -> objeto .)
    FLOAT           reduce using rule 15 (sentencia -> objeto .)
    STRING          reduce using rule 15 (sentencia -> objeto .)
    BOOL            reduce using rule 15 (sentencia -> objeto .)
    NULL            reduce using rule 15 (sentencia -> objeto .)
    ARRAY           reduce using rule 15 (sentencia -> objeto .)
    ABSTRACT        reduce using rule 15 (sentencia -> objeto .)
    PRIVATE         reduce using rule 15 (sentencia -> objeto .)
    PROTECTED       reduce using rule 15 (sentencia -> objeto .)
    PUBLIC          reduce using rule 15 (sentencia -> objeto .)
    STATIC          reduce using rule 15 (sentencia -> objeto .)
    FINAL           reduce using rule 15 (sentencia -> objeto .)
    LPAREN          reduce using rule 15 (sentencia -> objeto .)
    IF              reduce using rule 15 (sentencia -> objeto .)
    WHILE           reduce using rule 15 (sentencia -> objeto .)
    DO              reduce using rule 15 (sentencia -> objeto .)
    SWITCH          reduce using rule 15 (sentencia -> objeto .)
    FOREACH         reduce using rule 15 (sentencia -> objeto .)
    FOR             reduce using rule 15 (sentencia -> objeto .)
    CLOSETAG        reduce using rule 15 (sentencia -> objeto .)
    RBRACE          reduce using rule 15 (sentencia -> objeto .)
    BREAK           reduce using rule 15 (sentencia -> objeto .)
    ENDSWITCH       reduce using rule 15 (sentencia -> objeto .)
    CASE            reduce using rule 15 (sentencia -> objeto .)
    DEFAULT         reduce using rule 15 (sentencia -> objeto .)


state 17

    (16) sentencia -> includes .

    VARIABLE        reduce using rule 16 (sentencia -> includes .)
    ECHO            reduce using rule 16 (sentencia -> includes .)
    PRINT           reduce using rule 16 (sentencia -> includes .)
    TRY             reduce using rule 16 (sentencia -> includes .)
    FUNCTION        reduce using rule 16 (sentencia -> includes .)
    RETURN          reduce using rule 16 (sentencia -> includes .)
    ID              reduce using rule 16 (sentencia -> includes .)
    EMPTY           reduce using rule 16 (sentencia -> includes .)
    CLASS           reduce using rule 16 (sentencia -> includes .)
    INTERFACE       reduce using rule 16 (sentencia -> includes .)
    INCLUDE         reduce using rule 16 (sentencia -> includes .)
    NAMESPACE       reduce using rule 16 (sentencia -> includes .)
    THROW           reduce using rule 16 (sentencia -> includes .)
    CONST           reduce using rule 16 (sentencia -> includes .)
    THIS            reduce using rule 16 (sentencia -> includes .)
    INT             reduce using rule 16 (sentencia -> includes .)
    FLOAT           reduce using rule 16 (sentencia -> includes .)
    STRING          reduce using rule 16 (sentencia -> includes .)
    BOOL            reduce using rule 16 (sentencia -> includes .)
    NULL            reduce using rule 16 (sentencia -> includes .)
    ARRAY           reduce using rule 16 (sentencia -> includes .)
    ABSTRACT        reduce using rule 16 (sentencia -> includes .)
    PRIVATE         reduce using rule 16 (sentencia -> includes .)
    PROTECTED       reduce using rule 16 (sentencia -> includes .)
    PUBLIC          reduce using rule 16 (sentencia -> includes .)
    STATIC          reduce using rule 16 (sentencia -> includes .)
    FINAL           reduce using rule 16 (sentencia -> includes .)
    LPAREN          reduce using rule 16 (sentencia -> includes .)
    IF              reduce using rule 16 (sentencia -> includes .)
    WHILE           reduce using rule 16 (sentencia -> includes .)
    DO              reduce using rule 16 (sentencia -> includes .)
    SWITCH          reduce using rule 16 (sentencia -> includes .)
    FOREACH         reduce using rule 16 (sentencia -> includes .)
    FOR             reduce using rule 16 (sentencia -> includes .)
    CLOSETAG        reduce using rule 16 (sentencia -> includes .)
    RBRACE          reduce using rule 16 (sentencia -> includes .)
    BREAK           reduce using rule 16 (sentencia -> includes .)
    ENDSWITCH       reduce using rule 16 (sentencia -> includes .)
    CASE            reduce using rule 16 (sentencia -> includes .)
    DEFAULT         reduce using rule 16 (sentencia -> includes .)


state 18

    (17) sentencia -> namespace .

    VARIABLE        reduce using rule 17 (sentencia -> namespace .)
    ECHO            reduce using rule 17 (sentencia -> namespace .)
    PRINT           reduce using rule 17 (sentencia -> namespace .)
    TRY             reduce using rule 17 (sentencia -> namespace .)
    FUNCTION        reduce using rule 17 (sentencia -> namespace .)
    RETURN          reduce using rule 17 (sentencia -> namespace .)
    ID              reduce using rule 17 (sentencia -> namespace .)
    EMPTY           reduce using rule 17 (sentencia -> namespace .)
    CLASS           reduce using rule 17 (sentencia -> namespace .)
    INTERFACE       reduce using rule 17 (sentencia -> namespace .)
    INCLUDE         reduce using rule 17 (sentencia -> namespace .)
    NAMESPACE       reduce using rule 17 (sentencia -> namespace .)
    THROW           reduce using rule 17 (sentencia -> namespace .)
    CONST           reduce using rule 17 (sentencia -> namespace .)
    THIS            reduce using rule 17 (sentencia -> namespace .)
    INT             reduce using rule 17 (sentencia -> namespace .)
    FLOAT           reduce using rule 17 (sentencia -> namespace .)
    STRING          reduce using rule 17 (sentencia -> namespace .)
    BOOL            reduce using rule 17 (sentencia -> namespace .)
    NULL            reduce using rule 17 (sentencia -> namespace .)
    ARRAY           reduce using rule 17 (sentencia -> namespace .)
    ABSTRACT        reduce using rule 17 (sentencia -> namespace .)
    PRIVATE         reduce using rule 17 (sentencia -> namespace .)
    PROTECTED       reduce using rule 17 (sentencia -> namespace .)
    PUBLIC          reduce using rule 17 (sentencia -> namespace .)
    STATIC          reduce using rule 17 (sentencia -> namespace .)
    FINAL           reduce using rule 17 (sentencia -> namespace .)
    LPAREN          reduce using rule 17 (sentencia -> namespace .)
    IF              reduce using rule 17 (sentencia -> namespace .)
    WHILE           reduce using rule 17 (sentencia -> namespace .)
    DO              reduce using rule 17 (sentencia -> namespace .)
    SWITCH          reduce using rule 17 (sentencia -> namespace .)
    FOREACH         reduce using rule 17 (sentencia -> namespace .)
    FOR             reduce using rule 17 (sentencia -> namespace .)
    CLOSETAG        reduce using rule 17 (sentencia -> namespace .)
    RBRACE          reduce using rule 17 (sentencia -> namespace .)
    BREAK           reduce using rule 17 (sentencia -> namespace .)
    ENDSWITCH       reduce using rule 17 (sentencia -> namespace .)
    CASE            reduce using rule 17 (sentencia -> namespace .)
    DEFAULT         reduce using rule 17 (sentencia -> namespace .)


state 19

    (18) sentencia -> anonymousFunction .

    VARIABLE        reduce using rule 18 (sentencia -> anonymousFunction .)
    ECHO            reduce using rule 18 (sentencia -> anonymousFunction .)
    PRINT           reduce using rule 18 (sentencia -> anonymousFunction .)
    TRY             reduce using rule 18 (sentencia -> anonymousFunction .)
    FUNCTION        reduce using rule 18 (sentencia -> anonymousFunction .)
    RETURN          reduce using rule 18 (sentencia -> anonymousFunction .)
    ID              reduce using rule 18 (sentencia -> anonymousFunction .)
    EMPTY           reduce using rule 18 (sentencia -> anonymousFunction .)
    CLASS           reduce using rule 18 (sentencia -> anonymousFunction .)
    INTERFACE       reduce using rule 18 (sentencia -> anonymousFunction .)
    INCLUDE         reduce using rule 18 (sentencia -> anonymousFunction .)
    NAMESPACE       reduce using rule 18 (sentencia -> anonymousFunction .)
    THROW           reduce using rule 18 (sentencia -> anonymousFunction .)
    CONST           reduce using rule 18 (sentencia -> anonymousFunction .)
    THIS            reduce using rule 18 (sentencia -> anonymousFunction .)
    INT             reduce using rule 18 (sentencia -> anonymousFunction .)
    FLOAT           reduce using rule 18 (sentencia -> anonymousFunction .)
    STRING          reduce using rule 18 (sentencia -> anonymousFunction .)
    BOOL            reduce using rule 18 (sentencia -> anonymousFunction .)
    NULL            reduce using rule 18 (sentencia -> anonymousFunction .)
    ARRAY           reduce using rule 18 (sentencia -> anonymousFunction .)
    ABSTRACT        reduce using rule 18 (sentencia -> anonymousFunction .)
    PRIVATE         reduce using rule 18 (sentencia -> anonymousFunction .)
    PROTECTED       reduce using rule 18 (sentencia -> anonymousFunction .)
    PUBLIC          reduce using rule 18 (sentencia -> anonymousFunction .)
    STATIC          reduce using rule 18 (sentencia -> anonymousFunction .)
    FINAL           reduce using rule 18 (sentencia -> anonymousFunction .)
    LPAREN          reduce using rule 18 (sentencia -> anonymousFunction .)
    IF              reduce using rule 18 (sentencia -> anonymousFunction .)
    WHILE           reduce using rule 18 (sentencia -> anonymousFunction .)
    DO              reduce using rule 18 (sentencia -> anonymousFunction .)
    SWITCH          reduce using rule 18 (sentencia -> anonymousFunction .)
    FOREACH         reduce using rule 18 (sentencia -> anonymousFunction .)
    FOR             reduce using rule 18 (sentencia -> anonymousFunction .)
    CLOSETAG        reduce using rule 18 (sentencia -> anonymousFunction .)
    RBRACE          reduce using rule 18 (sentencia -> anonymousFunction .)
    BREAK           reduce using rule 18 (sentencia -> anonymousFunction .)
    ENDSWITCH       reduce using rule 18 (sentencia -> anonymousFunction .)
    CASE            reduce using rule 18 (sentencia -> anonymousFunction .)
    DEFAULT         reduce using rule 18 (sentencia -> anonymousFunction .)


state 20

    (19) sentencia -> throw .

    VARIABLE        reduce using rule 19 (sentencia -> throw .)
    ECHO            reduce using rule 19 (sentencia -> throw .)
    PRINT           reduce using rule 19 (sentencia -> throw .)
    TRY             reduce using rule 19 (sentencia -> throw .)
    FUNCTION        reduce using rule 19 (sentencia -> throw .)
    RETURN          reduce using rule 19 (sentencia -> throw .)
    ID              reduce using rule 19 (sentencia -> throw .)
    EMPTY           reduce using rule 19 (sentencia -> throw .)
    CLASS           reduce using rule 19 (sentencia -> throw .)
    INTERFACE       reduce using rule 19 (sentencia -> throw .)
    INCLUDE         reduce using rule 19 (sentencia -> throw .)
    NAMESPACE       reduce using rule 19 (sentencia -> throw .)
    THROW           reduce using rule 19 (sentencia -> throw .)
    CONST           reduce using rule 19 (sentencia -> throw .)
    THIS            reduce using rule 19 (sentencia -> throw .)
    INT             reduce using rule 19 (sentencia -> throw .)
    FLOAT           reduce using rule 19 (sentencia -> throw .)
    STRING          reduce using rule 19 (sentencia -> throw .)
    BOOL            reduce using rule 19 (sentencia -> throw .)
    NULL            reduce using rule 19 (sentencia -> throw .)
    ARRAY           reduce using rule 19 (sentencia -> throw .)
    ABSTRACT        reduce using rule 19 (sentencia -> throw .)
    PRIVATE         reduce using rule 19 (sentencia -> throw .)
    PROTECTED       reduce using rule 19 (sentencia -> throw .)
    PUBLIC          reduce using rule 19 (sentencia -> throw .)
    STATIC          reduce using rule 19 (sentencia -> throw .)
    FINAL           reduce using rule 19 (sentencia -> throw .)
    LPAREN          reduce using rule 19 (sentencia -> throw .)
    IF              reduce using rule 19 (sentencia -> throw .)
    WHILE           reduce using rule 19 (sentencia -> throw .)
    DO              reduce using rule 19 (sentencia -> throw .)
    SWITCH          reduce using rule 19 (sentencia -> throw .)
    FOREACH         reduce using rule 19 (sentencia -> throw .)
    FOR             reduce using rule 19 (sentencia -> throw .)
    CLOSETAG        reduce using rule 19 (sentencia -> throw .)
    RBRACE          reduce using rule 19 (sentencia -> throw .)
    BREAK           reduce using rule 19 (sentencia -> throw .)
    ENDSWITCH       reduce using rule 19 (sentencia -> throw .)
    CASE            reduce using rule 19 (sentencia -> throw .)
    DEFAULT         reduce using rule 19 (sentencia -> throw .)


state 21

    (20) sentencia -> instance .

    VARIABLE        reduce using rule 20 (sentencia -> instance .)
    ECHO            reduce using rule 20 (sentencia -> instance .)
    PRINT           reduce using rule 20 (sentencia -> instance .)
    TRY             reduce using rule 20 (sentencia -> instance .)
    FUNCTION        reduce using rule 20 (sentencia -> instance .)
    RETURN          reduce using rule 20 (sentencia -> instance .)
    ID              reduce using rule 20 (sentencia -> instance .)
    EMPTY           reduce using rule 20 (sentencia -> instance .)
    CLASS           reduce using rule 20 (sentencia -> instance .)
    INTERFACE       reduce using rule 20 (sentencia -> instance .)
    INCLUDE         reduce using rule 20 (sentencia -> instance .)
    NAMESPACE       reduce using rule 20 (sentencia -> instance .)
    THROW           reduce using rule 20 (sentencia -> instance .)
    CONST           reduce using rule 20 (sentencia -> instance .)
    THIS            reduce using rule 20 (sentencia -> instance .)
    INT             reduce using rule 20 (sentencia -> instance .)
    FLOAT           reduce using rule 20 (sentencia -> instance .)
    STRING          reduce using rule 20 (sentencia -> instance .)
    BOOL            reduce using rule 20 (sentencia -> instance .)
    NULL            reduce using rule 20 (sentencia -> instance .)
    ARRAY           reduce using rule 20 (sentencia -> instance .)
    ABSTRACT        reduce using rule 20 (sentencia -> instance .)
    PRIVATE         reduce using rule 20 (sentencia -> instance .)
    PROTECTED       reduce using rule 20 (sentencia -> instance .)
    PUBLIC          reduce using rule 20 (sentencia -> instance .)
    STATIC          reduce using rule 20 (sentencia -> instance .)
    FINAL           reduce using rule 20 (sentencia -> instance .)
    LPAREN          reduce using rule 20 (sentencia -> instance .)
    IF              reduce using rule 20 (sentencia -> instance .)
    WHILE           reduce using rule 20 (sentencia -> instance .)
    DO              reduce using rule 20 (sentencia -> instance .)
    SWITCH          reduce using rule 20 (sentencia -> instance .)
    FOREACH         reduce using rule 20 (sentencia -> instance .)
    FOR             reduce using rule 20 (sentencia -> instance .)
    CLOSETAG        reduce using rule 20 (sentencia -> instance .)
    RBRACE          reduce using rule 20 (sentencia -> instance .)
    BREAK           reduce using rule 20 (sentencia -> instance .)
    ENDSWITCH       reduce using rule 20 (sentencia -> instance .)
    CASE            reduce using rule 20 (sentencia -> instance .)
    DEFAULT         reduce using rule 20 (sentencia -> instance .)


state 22

    (21) sentencia -> constdeclaration .

    VARIABLE        reduce using rule 21 (sentencia -> constdeclaration .)
    ECHO            reduce using rule 21 (sentencia -> constdeclaration .)
    PRINT           reduce using rule 21 (sentencia -> constdeclaration .)
    TRY             reduce using rule 21 (sentencia -> constdeclaration .)
    FUNCTION        reduce using rule 21 (sentencia -> constdeclaration .)
    RETURN          reduce using rule 21 (sentencia -> constdeclaration .)
    ID              reduce using rule 21 (sentencia -> constdeclaration .)
    EMPTY           reduce using rule 21 (sentencia -> constdeclaration .)
    CLASS           reduce using rule 21 (sentencia -> constdeclaration .)
    INTERFACE       reduce using rule 21 (sentencia -> constdeclaration .)
    INCLUDE         reduce using rule 21 (sentencia -> constdeclaration .)
    NAMESPACE       reduce using rule 21 (sentencia -> constdeclaration .)
    THROW           reduce using rule 21 (sentencia -> constdeclaration .)
    CONST           reduce using rule 21 (sentencia -> constdeclaration .)
    THIS            reduce using rule 21 (sentencia -> constdeclaration .)
    INT             reduce using rule 21 (sentencia -> constdeclaration .)
    FLOAT           reduce using rule 21 (sentencia -> constdeclaration .)
    STRING          reduce using rule 21 (sentencia -> constdeclaration .)
    BOOL            reduce using rule 21 (sentencia -> constdeclaration .)
    NULL            reduce using rule 21 (sentencia -> constdeclaration .)
    ARRAY           reduce using rule 21 (sentencia -> constdeclaration .)
    ABSTRACT        reduce using rule 21 (sentencia -> constdeclaration .)
    PRIVATE         reduce using rule 21 (sentencia -> constdeclaration .)
    PROTECTED       reduce using rule 21 (sentencia -> constdeclaration .)
    PUBLIC          reduce using rule 21 (sentencia -> constdeclaration .)
    STATIC          reduce using rule 21 (sentencia -> constdeclaration .)
    FINAL           reduce using rule 21 (sentencia -> constdeclaration .)
    LPAREN          reduce using rule 21 (sentencia -> constdeclaration .)
    IF              reduce using rule 21 (sentencia -> constdeclaration .)
    WHILE           reduce using rule 21 (sentencia -> constdeclaration .)
    DO              reduce using rule 21 (sentencia -> constdeclaration .)
    SWITCH          reduce using rule 21 (sentencia -> constdeclaration .)
    FOREACH         reduce using rule 21 (sentencia -> constdeclaration .)
    FOR             reduce using rule 21 (sentencia -> constdeclaration .)
    CLOSETAG        reduce using rule 21 (sentencia -> constdeclaration .)
    RBRACE          reduce using rule 21 (sentencia -> constdeclaration .)
    BREAK           reduce using rule 21 (sentencia -> constdeclaration .)
    ENDSWITCH       reduce using rule 21 (sentencia -> constdeclaration .)
    CASE            reduce using rule 21 (sentencia -> constdeclaration .)
    DEFAULT         reduce using rule 21 (sentencia -> constdeclaration .)


state 23

    (22) sentencia -> thisdeclaration .

    VARIABLE        reduce using rule 22 (sentencia -> thisdeclaration .)
    ECHO            reduce using rule 22 (sentencia -> thisdeclaration .)
    PRINT           reduce using rule 22 (sentencia -> thisdeclaration .)
    TRY             reduce using rule 22 (sentencia -> thisdeclaration .)
    FUNCTION        reduce using rule 22 (sentencia -> thisdeclaration .)
    RETURN          reduce using rule 22 (sentencia -> thisdeclaration .)
    ID              reduce using rule 22 (sentencia -> thisdeclaration .)
    EMPTY           reduce using rule 22 (sentencia -> thisdeclaration .)
    CLASS           reduce using rule 22 (sentencia -> thisdeclaration .)
    INTERFACE       reduce using rule 22 (sentencia -> thisdeclaration .)
    INCLUDE         reduce using rule 22 (sentencia -> thisdeclaration .)
    NAMESPACE       reduce using rule 22 (sentencia -> thisdeclaration .)
    THROW           reduce using rule 22 (sentencia -> thisdeclaration .)
    CONST           reduce using rule 22 (sentencia -> thisdeclaration .)
    THIS            reduce using rule 22 (sentencia -> thisdeclaration .)
    INT             reduce using rule 22 (sentencia -> thisdeclaration .)
    FLOAT           reduce using rule 22 (sentencia -> thisdeclaration .)
    STRING          reduce using rule 22 (sentencia -> thisdeclaration .)
    BOOL            reduce using rule 22 (sentencia -> thisdeclaration .)
    NULL            reduce using rule 22 (sentencia -> thisdeclaration .)
    ARRAY           reduce using rule 22 (sentencia -> thisdeclaration .)
    ABSTRACT        reduce using rule 22 (sentencia -> thisdeclaration .)
    PRIVATE         reduce using rule 22 (sentencia -> thisdeclaration .)
    PROTECTED       reduce using rule 22 (sentencia -> thisdeclaration .)
    PUBLIC          reduce using rule 22 (sentencia -> thisdeclaration .)
    STATIC          reduce using rule 22 (sentencia -> thisdeclaration .)
    FINAL           reduce using rule 22 (sentencia -> thisdeclaration .)
    LPAREN          reduce using rule 22 (sentencia -> thisdeclaration .)
    IF              reduce using rule 22 (sentencia -> thisdeclaration .)
    WHILE           reduce using rule 22 (sentencia -> thisdeclaration .)
    DO              reduce using rule 22 (sentencia -> thisdeclaration .)
    SWITCH          reduce using rule 22 (sentencia -> thisdeclaration .)
    FOREACH         reduce using rule 22 (sentencia -> thisdeclaration .)
    FOR             reduce using rule 22 (sentencia -> thisdeclaration .)
    CLOSETAG        reduce using rule 22 (sentencia -> thisdeclaration .)
    RBRACE          reduce using rule 22 (sentencia -> thisdeclaration .)
    BREAK           reduce using rule 22 (sentencia -> thisdeclaration .)
    ENDSWITCH       reduce using rule 22 (sentencia -> thisdeclaration .)
    CASE            reduce using rule 22 (sentencia -> thisdeclaration .)
    DEFAULT         reduce using rule 22 (sentencia -> thisdeclaration .)


state 24

    (23) sentencia -> concatenate .

    VARIABLE        reduce using rule 23 (sentencia -> concatenate .)
    ECHO            reduce using rule 23 (sentencia -> concatenate .)
    PRINT           reduce using rule 23 (sentencia -> concatenate .)
    TRY             reduce using rule 23 (sentencia -> concatenate .)
    FUNCTION        reduce using rule 23 (sentencia -> concatenate .)
    RETURN          reduce using rule 23 (sentencia -> concatenate .)
    ID              reduce using rule 23 (sentencia -> concatenate .)
    EMPTY           reduce using rule 23 (sentencia -> concatenate .)
    CLASS           reduce using rule 23 (sentencia -> concatenate .)
    INTERFACE       reduce using rule 23 (sentencia -> concatenate .)
    INCLUDE         reduce using rule 23 (sentencia -> concatenate .)
    NAMESPACE       reduce using rule 23 (sentencia -> concatenate .)
    THROW           reduce using rule 23 (sentencia -> concatenate .)
    CONST           reduce using rule 23 (sentencia -> concatenate .)
    THIS            reduce using rule 23 (sentencia -> concatenate .)
    INT             reduce using rule 23 (sentencia -> concatenate .)
    FLOAT           reduce using rule 23 (sentencia -> concatenate .)
    STRING          reduce using rule 23 (sentencia -> concatenate .)
    BOOL            reduce using rule 23 (sentencia -> concatenate .)
    NULL            reduce using rule 23 (sentencia -> concatenate .)
    ARRAY           reduce using rule 23 (sentencia -> concatenate .)
    ABSTRACT        reduce using rule 23 (sentencia -> concatenate .)
    PRIVATE         reduce using rule 23 (sentencia -> concatenate .)
    PROTECTED       reduce using rule 23 (sentencia -> concatenate .)
    PUBLIC          reduce using rule 23 (sentencia -> concatenate .)
    STATIC          reduce using rule 23 (sentencia -> concatenate .)
    FINAL           reduce using rule 23 (sentencia -> concatenate .)
    LPAREN          reduce using rule 23 (sentencia -> concatenate .)
    IF              reduce using rule 23 (sentencia -> concatenate .)
    WHILE           reduce using rule 23 (sentencia -> concatenate .)
    DO              reduce using rule 23 (sentencia -> concatenate .)
    SWITCH          reduce using rule 23 (sentencia -> concatenate .)
    FOREACH         reduce using rule 23 (sentencia -> concatenate .)
    FOR             reduce using rule 23 (sentencia -> concatenate .)
    CLOSETAG        reduce using rule 23 (sentencia -> concatenate .)
    RBRACE          reduce using rule 23 (sentencia -> concatenate .)
    BREAK           reduce using rule 23 (sentencia -> concatenate .)
    ENDSWITCH       reduce using rule 23 (sentencia -> concatenate .)
    CASE            reduce using rule 23 (sentencia -> concatenate .)
    DEFAULT         reduce using rule 23 (sentencia -> concatenate .)


state 25

    (24) sentencia -> minuse .

    VARIABLE        reduce using rule 24 (sentencia -> minuse .)
    ECHO            reduce using rule 24 (sentencia -> minuse .)
    PRINT           reduce using rule 24 (sentencia -> minuse .)
    TRY             reduce using rule 24 (sentencia -> minuse .)
    FUNCTION        reduce using rule 24 (sentencia -> minuse .)
    RETURN          reduce using rule 24 (sentencia -> minuse .)
    ID              reduce using rule 24 (sentencia -> minuse .)
    EMPTY           reduce using rule 24 (sentencia -> minuse .)
    CLASS           reduce using rule 24 (sentencia -> minuse .)
    INTERFACE       reduce using rule 24 (sentencia -> minuse .)
    INCLUDE         reduce using rule 24 (sentencia -> minuse .)
    NAMESPACE       reduce using rule 24 (sentencia -> minuse .)
    THROW           reduce using rule 24 (sentencia -> minuse .)
    CONST           reduce using rule 24 (sentencia -> minuse .)
    THIS            reduce using rule 24 (sentencia -> minuse .)
    INT             reduce using rule 24 (sentencia -> minuse .)
    FLOAT           reduce using rule 24 (sentencia -> minuse .)
    STRING          reduce using rule 24 (sentencia -> minuse .)
    BOOL            reduce using rule 24 (sentencia -> minuse .)
    NULL            reduce using rule 24 (sentencia -> minuse .)
    ARRAY           reduce using rule 24 (sentencia -> minuse .)
    ABSTRACT        reduce using rule 24 (sentencia -> minuse .)
    PRIVATE         reduce using rule 24 (sentencia -> minuse .)
    PROTECTED       reduce using rule 24 (sentencia -> minuse .)
    PUBLIC          reduce using rule 24 (sentencia -> minuse .)
    STATIC          reduce using rule 24 (sentencia -> minuse .)
    FINAL           reduce using rule 24 (sentencia -> minuse .)
    LPAREN          reduce using rule 24 (sentencia -> minuse .)
    IF              reduce using rule 24 (sentencia -> minuse .)
    WHILE           reduce using rule 24 (sentencia -> minuse .)
    DO              reduce using rule 24 (sentencia -> minuse .)
    SWITCH          reduce using rule 24 (sentencia -> minuse .)
    FOREACH         reduce using rule 24 (sentencia -> minuse .)
    FOR             reduce using rule 24 (sentencia -> minuse .)
    CLOSETAG        reduce using rule 24 (sentencia -> minuse .)
    RBRACE          reduce using rule 24 (sentencia -> minuse .)
    BREAK           reduce using rule 24 (sentencia -> minuse .)
    ENDSWITCH       reduce using rule 24 (sentencia -> minuse .)
    CASE            reduce using rule 24 (sentencia -> minuse .)
    DEFAULT         reduce using rule 24 (sentencia -> minuse .)


state 26

    (27) asignacion -> VARIABLE . EQUALS operaArit SEMICOLON
    (28) asignacion -> VARIABLE . EQUALS valor SEMICOLON
    (29) asignacion_fgets -> VARIABLE . EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (156) objeto -> VARIABLE . ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (189) anonymousFunction -> VARIABLE . EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (192) instance -> VARIABLE . INSTANCEOF ID
    (196) concatenate -> VARIABLE . CONCATENATEEQUAL STRING
    (197) minuse -> VARIABLE . MINUSEQUAL INT
    (35) valor -> VARIABLE .
    (121) array -> VARIABLE . EQUALS arrays SEMICOLON
    (122) array -> VARIABLE . EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> VARIABLE . EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) map -> VARIABLE . EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> VARIABLE . EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    EQUALS          shift and go to state 77
    ARROW           shift and go to state 78
    INSTANCEOF      shift and go to state 79
    CONCATENATEEQUAL shift and go to state 80
    MINUSEQUAL      shift and go to state 81
    LT              reduce using rule 35 (valor -> VARIABLE .)
    GT              reduce using rule 35 (valor -> VARIABLE .)
    LEQ             reduce using rule 35 (valor -> VARIABLE .)
    GEQ             reduce using rule 35 (valor -> VARIABLE .)


state 27

    (50) comparacion -> valor . comparador valor
    (51) comparador -> . LT
    (52) comparador -> . GT
    (53) comparador -> . LEQ
    (54) comparador -> . GEQ

    LT              shift and go to state 83
    GT              shift and go to state 84
    LEQ             shift and go to state 85
    GEQ             shift and go to state 86

    comparador                     shift and go to state 82

state 28

    (30) operador_ternario -> LPAREN . conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> LPAREN . conditions RPAREN QUESTION COLON valor
    (77) conditions -> . condition
    (78) conditions -> . condition opLogic condition
    (79) conditions -> . LPAREN conditions RPAREN
    (80) condition -> . valor
    (81) condition -> . valor opSymbol valor
    (82) condition -> . NOT condition
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    LPAREN          shift and go to state 87
    NOT             shift and go to state 91
    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    conditions                     shift and go to state 88
    valor                          shift and go to state 89
    condition                      shift and go to state 90
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 29

    (55) impresion -> ECHO . imprimir SEMICOLON
    (57) imprimir -> . LPAREN repiteValores RPAREN
    (58) imprimir -> . LPAREN RPAREN
    (59) imprimir -> . repiteValores
    (60) imprimir -> . empty
    (61) repiteValores -> . valor
    (62) repiteValores -> . valor COMMA repiteValores
    (63) empty -> .
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    LPAREN          shift and go to state 95
    SEMICOLON       reduce using rule 63 (empty -> .)
    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    imprimir                       shift and go to state 94
    repiteValores                  shift and go to state 96
    empty                          shift and go to state 97
    valor                          shift and go to state 98
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 30

    (56) impresion -> PRINT . imprimir SEMICOLON
    (57) imprimir -> . LPAREN repiteValores RPAREN
    (58) imprimir -> . LPAREN RPAREN
    (59) imprimir -> . repiteValores
    (60) imprimir -> . empty
    (61) repiteValores -> . valor
    (62) repiteValores -> . valor COMMA repiteValores
    (63) empty -> .
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    LPAREN          shift and go to state 95
    SEMICOLON       reduce using rule 63 (empty -> .)
    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    imprimir                       shift and go to state 99
    repiteValores                  shift and go to state 96
    empty                          shift and go to state 97
    valor                          shift and go to state 98
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 31

    (64) estructurasPrograma -> controlStructure .

    VARIABLE        reduce using rule 64 (estructurasPrograma -> controlStructure .)
    ECHO            reduce using rule 64 (estructurasPrograma -> controlStructure .)
    PRINT           reduce using rule 64 (estructurasPrograma -> controlStructure .)
    TRY             reduce using rule 64 (estructurasPrograma -> controlStructure .)
    FUNCTION        reduce using rule 64 (estructurasPrograma -> controlStructure .)
    RETURN          reduce using rule 64 (estructurasPrograma -> controlStructure .)
    ID              reduce using rule 64 (estructurasPrograma -> controlStructure .)
    EMPTY           reduce using rule 64 (estructurasPrograma -> controlStructure .)
    CLASS           reduce using rule 64 (estructurasPrograma -> controlStructure .)
    INTERFACE       reduce using rule 64 (estructurasPrograma -> controlStructure .)
    INCLUDE         reduce using rule 64 (estructurasPrograma -> controlStructure .)
    NAMESPACE       reduce using rule 64 (estructurasPrograma -> controlStructure .)
    THROW           reduce using rule 64 (estructurasPrograma -> controlStructure .)
    CONST           reduce using rule 64 (estructurasPrograma -> controlStructure .)
    THIS            reduce using rule 64 (estructurasPrograma -> controlStructure .)
    INT             reduce using rule 64 (estructurasPrograma -> controlStructure .)
    FLOAT           reduce using rule 64 (estructurasPrograma -> controlStructure .)
    STRING          reduce using rule 64 (estructurasPrograma -> controlStructure .)
    BOOL            reduce using rule 64 (estructurasPrograma -> controlStructure .)
    NULL            reduce using rule 64 (estructurasPrograma -> controlStructure .)
    ARRAY           reduce using rule 64 (estructurasPrograma -> controlStructure .)
    ABSTRACT        reduce using rule 64 (estructurasPrograma -> controlStructure .)
    PRIVATE         reduce using rule 64 (estructurasPrograma -> controlStructure .)
    PROTECTED       reduce using rule 64 (estructurasPrograma -> controlStructure .)
    PUBLIC          reduce using rule 64 (estructurasPrograma -> controlStructure .)
    STATIC          reduce using rule 64 (estructurasPrograma -> controlStructure .)
    FINAL           reduce using rule 64 (estructurasPrograma -> controlStructure .)
    LPAREN          reduce using rule 64 (estructurasPrograma -> controlStructure .)
    IF              reduce using rule 64 (estructurasPrograma -> controlStructure .)
    WHILE           reduce using rule 64 (estructurasPrograma -> controlStructure .)
    DO              reduce using rule 64 (estructurasPrograma -> controlStructure .)
    SWITCH          reduce using rule 64 (estructurasPrograma -> controlStructure .)
    FOREACH         reduce using rule 64 (estructurasPrograma -> controlStructure .)
    FOR             reduce using rule 64 (estructurasPrograma -> controlStructure .)
    CLOSETAG        reduce using rule 64 (estructurasPrograma -> controlStructure .)
    RBRACE          reduce using rule 64 (estructurasPrograma -> controlStructure .)
    BREAK           reduce using rule 64 (estructurasPrograma -> controlStructure .)
    ENDSWITCH       reduce using rule 64 (estructurasPrograma -> controlStructure .)
    CASE            reduce using rule 64 (estructurasPrograma -> controlStructure .)
    DEFAULT         reduce using rule 64 (estructurasPrograma -> controlStructure .)


state 32

    (65) estructurasPrograma -> dataStructure .

    VARIABLE        reduce using rule 65 (estructurasPrograma -> dataStructure .)
    ECHO            reduce using rule 65 (estructurasPrograma -> dataStructure .)
    PRINT           reduce using rule 65 (estructurasPrograma -> dataStructure .)
    TRY             reduce using rule 65 (estructurasPrograma -> dataStructure .)
    FUNCTION        reduce using rule 65 (estructurasPrograma -> dataStructure .)
    RETURN          reduce using rule 65 (estructurasPrograma -> dataStructure .)
    ID              reduce using rule 65 (estructurasPrograma -> dataStructure .)
    EMPTY           reduce using rule 65 (estructurasPrograma -> dataStructure .)
    CLASS           reduce using rule 65 (estructurasPrograma -> dataStructure .)
    INTERFACE       reduce using rule 65 (estructurasPrograma -> dataStructure .)
    INCLUDE         reduce using rule 65 (estructurasPrograma -> dataStructure .)
    NAMESPACE       reduce using rule 65 (estructurasPrograma -> dataStructure .)
    THROW           reduce using rule 65 (estructurasPrograma -> dataStructure .)
    CONST           reduce using rule 65 (estructurasPrograma -> dataStructure .)
    THIS            reduce using rule 65 (estructurasPrograma -> dataStructure .)
    INT             reduce using rule 65 (estructurasPrograma -> dataStructure .)
    FLOAT           reduce using rule 65 (estructurasPrograma -> dataStructure .)
    STRING          reduce using rule 65 (estructurasPrograma -> dataStructure .)
    BOOL            reduce using rule 65 (estructurasPrograma -> dataStructure .)
    NULL            reduce using rule 65 (estructurasPrograma -> dataStructure .)
    ARRAY           reduce using rule 65 (estructurasPrograma -> dataStructure .)
    ABSTRACT        reduce using rule 65 (estructurasPrograma -> dataStructure .)
    PRIVATE         reduce using rule 65 (estructurasPrograma -> dataStructure .)
    PROTECTED       reduce using rule 65 (estructurasPrograma -> dataStructure .)
    PUBLIC          reduce using rule 65 (estructurasPrograma -> dataStructure .)
    STATIC          reduce using rule 65 (estructurasPrograma -> dataStructure .)
    FINAL           reduce using rule 65 (estructurasPrograma -> dataStructure .)
    LPAREN          reduce using rule 65 (estructurasPrograma -> dataStructure .)
    IF              reduce using rule 65 (estructurasPrograma -> dataStructure .)
    WHILE           reduce using rule 65 (estructurasPrograma -> dataStructure .)
    DO              reduce using rule 65 (estructurasPrograma -> dataStructure .)
    SWITCH          reduce using rule 65 (estructurasPrograma -> dataStructure .)
    FOREACH         reduce using rule 65 (estructurasPrograma -> dataStructure .)
    FOR             reduce using rule 65 (estructurasPrograma -> dataStructure .)
    CLOSETAG        reduce using rule 65 (estructurasPrograma -> dataStructure .)
    RBRACE          reduce using rule 65 (estructurasPrograma -> dataStructure .)
    BREAK           reduce using rule 65 (estructurasPrograma -> dataStructure .)
    ENDSWITCH       reduce using rule 65 (estructurasPrograma -> dataStructure .)
    CASE            reduce using rule 65 (estructurasPrograma -> dataStructure .)
    DEFAULT         reduce using rule 65 (estructurasPrograma -> dataStructure .)


state 33

    (151) try -> TRY . LBRACE body RBRACE catchs
    (152) try -> TRY . LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE

    LBRACE          shift and go to state 100


state 34

    (157) funcionDeclaration -> FUNCTION . ID LPAREN argumentos RPAREN LBRACE body RBRACE

    ID              shift and go to state 101


state 35

    (158) llamadaFuncion -> ID . LPAREN argumentos RPAREN SEMICOLON
    (160) llamadaFuncion -> ID . LPAREN argumentos RPAREN

    LPAREN          shift and go to state 102


state 36

    (25) returnStatement -> RETURN . valor SEMICOLON
    (26) returnStatement -> RETURN . SEMICOLON
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    SEMICOLON       shift and go to state 104
    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    valor                          shift and go to state 103
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 37

    (159) llamadaFuncion -> EMPTY . LPAREN argumentos RPAREN
    (161) llamadaFuncion -> EMPTY . LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 105


state 38

    (162) classDeclarate -> CLASS . ID LBRACE classBody RBRACE
    (163) classDeclarate -> CLASS . ID EXTENDS ID LBRACE classBody RBRACE
    (173) classInterface -> CLASS . ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> CLASS . ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    ID              shift and go to state 106


state 39

    (164) classDeclarate -> data . CLASS ID LBRACE classBody RBRACE
    (175) classInterface -> data . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> data . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    CLASS           shift and go to state 107


state 40

    (165) classDeclarate -> classInterface .

    VARIABLE        reduce using rule 165 (classDeclarate -> classInterface .)
    ECHO            reduce using rule 165 (classDeclarate -> classInterface .)
    PRINT           reduce using rule 165 (classDeclarate -> classInterface .)
    TRY             reduce using rule 165 (classDeclarate -> classInterface .)
    FUNCTION        reduce using rule 165 (classDeclarate -> classInterface .)
    RETURN          reduce using rule 165 (classDeclarate -> classInterface .)
    ID              reduce using rule 165 (classDeclarate -> classInterface .)
    EMPTY           reduce using rule 165 (classDeclarate -> classInterface .)
    CLASS           reduce using rule 165 (classDeclarate -> classInterface .)
    INTERFACE       reduce using rule 165 (classDeclarate -> classInterface .)
    INCLUDE         reduce using rule 165 (classDeclarate -> classInterface .)
    NAMESPACE       reduce using rule 165 (classDeclarate -> classInterface .)
    THROW           reduce using rule 165 (classDeclarate -> classInterface .)
    CONST           reduce using rule 165 (classDeclarate -> classInterface .)
    THIS            reduce using rule 165 (classDeclarate -> classInterface .)
    INT             reduce using rule 165 (classDeclarate -> classInterface .)
    FLOAT           reduce using rule 165 (classDeclarate -> classInterface .)
    STRING          reduce using rule 165 (classDeclarate -> classInterface .)
    BOOL            reduce using rule 165 (classDeclarate -> classInterface .)
    NULL            reduce using rule 165 (classDeclarate -> classInterface .)
    ARRAY           reduce using rule 165 (classDeclarate -> classInterface .)
    ABSTRACT        reduce using rule 165 (classDeclarate -> classInterface .)
    PRIVATE         reduce using rule 165 (classDeclarate -> classInterface .)
    PROTECTED       reduce using rule 165 (classDeclarate -> classInterface .)
    PUBLIC          reduce using rule 165 (classDeclarate -> classInterface .)
    STATIC          reduce using rule 165 (classDeclarate -> classInterface .)
    FINAL           reduce using rule 165 (classDeclarate -> classInterface .)
    LPAREN          reduce using rule 165 (classDeclarate -> classInterface .)
    IF              reduce using rule 165 (classDeclarate -> classInterface .)
    WHILE           reduce using rule 165 (classDeclarate -> classInterface .)
    DO              reduce using rule 165 (classDeclarate -> classInterface .)
    SWITCH          reduce using rule 165 (classDeclarate -> classInterface .)
    FOREACH         reduce using rule 165 (classDeclarate -> classInterface .)
    FOR             reduce using rule 165 (classDeclarate -> classInterface .)
    CLOSETAG        reduce using rule 165 (classDeclarate -> classInterface .)
    RBRACE          reduce using rule 165 (classDeclarate -> classInterface .)
    BREAK           reduce using rule 165 (classDeclarate -> classInterface .)
    ENDSWITCH       reduce using rule 165 (classDeclarate -> classInterface .)
    CASE            reduce using rule 165 (classDeclarate -> classInterface .)
    DEFAULT         reduce using rule 165 (classDeclarate -> classInterface .)


state 41

    (185) interface -> INTERFACE . ID LBRACE classBody RBRACE

    ID              shift and go to state 108


state 42

    (186) includes -> INCLUDE . STRING SEMICOLON
    (187) includes -> INCLUDE . STRING DOT STRING SEMICOLON

    STRING          shift and go to state 109


state 43

    (37) valor -> STRING .

    LT              reduce using rule 37 (valor -> STRING .)
    GT              reduce using rule 37 (valor -> STRING .)
    LEQ             reduce using rule 37 (valor -> STRING .)
    GEQ             reduce using rule 37 (valor -> STRING .)
    EQ              reduce using rule 37 (valor -> STRING .)
    NEQ             reduce using rule 37 (valor -> STRING .)
    STRICTEQ        reduce using rule 37 (valor -> STRING .)
    STRICTNEQ       reduce using rule 37 (valor -> STRING .)
    AND             reduce using rule 37 (valor -> STRING .)
    LOGICAL_AND     reduce using rule 37 (valor -> STRING .)
    OR              reduce using rule 37 (valor -> STRING .)
    LOGICAL_OR      reduce using rule 37 (valor -> STRING .)
    RPAREN          reduce using rule 37 (valor -> STRING .)
    COMMA           reduce using rule 37 (valor -> STRING .)
    SEMICOLON       reduce using rule 37 (valor -> STRING .)
    PLUS            reduce using rule 37 (valor -> STRING .)
    MINUS           reduce using rule 37 (valor -> STRING .)
    TIMES           reduce using rule 37 (valor -> STRING .)
    DIVIDE          reduce using rule 37 (valor -> STRING .)
    MODULO          reduce using rule 37 (valor -> STRING .)
    POTENCIA        reduce using rule 37 (valor -> STRING .)
    PLUSEQUAL       reduce using rule 37 (valor -> STRING .)
    VARIABLE        reduce using rule 37 (valor -> STRING .)
    ECHO            reduce using rule 37 (valor -> STRING .)
    PRINT           reduce using rule 37 (valor -> STRING .)
    TRY             reduce using rule 37 (valor -> STRING .)
    FUNCTION        reduce using rule 37 (valor -> STRING .)
    RETURN          reduce using rule 37 (valor -> STRING .)
    ID              reduce using rule 37 (valor -> STRING .)
    EMPTY           reduce using rule 37 (valor -> STRING .)
    CLASS           reduce using rule 37 (valor -> STRING .)
    INTERFACE       reduce using rule 37 (valor -> STRING .)
    INCLUDE         reduce using rule 37 (valor -> STRING .)
    NAMESPACE       reduce using rule 37 (valor -> STRING .)
    THROW           reduce using rule 37 (valor -> STRING .)
    CONST           reduce using rule 37 (valor -> STRING .)
    THIS            reduce using rule 37 (valor -> STRING .)
    INT             reduce using rule 37 (valor -> STRING .)
    FLOAT           reduce using rule 37 (valor -> STRING .)
    STRING          reduce using rule 37 (valor -> STRING .)
    BOOL            reduce using rule 37 (valor -> STRING .)
    NULL            reduce using rule 37 (valor -> STRING .)
    ARRAY           reduce using rule 37 (valor -> STRING .)
    ABSTRACT        reduce using rule 37 (valor -> STRING .)
    PRIVATE         reduce using rule 37 (valor -> STRING .)
    PROTECTED       reduce using rule 37 (valor -> STRING .)
    PUBLIC          reduce using rule 37 (valor -> STRING .)
    STATIC          reduce using rule 37 (valor -> STRING .)
    FINAL           reduce using rule 37 (valor -> STRING .)
    LPAREN          reduce using rule 37 (valor -> STRING .)
    IF              reduce using rule 37 (valor -> STRING .)
    WHILE           reduce using rule 37 (valor -> STRING .)
    DO              reduce using rule 37 (valor -> STRING .)
    SWITCH          reduce using rule 37 (valor -> STRING .)
    FOREACH         reduce using rule 37 (valor -> STRING .)
    FOR             reduce using rule 37 (valor -> STRING .)
    CLOSETAG        reduce using rule 37 (valor -> STRING .)
    RBRACE          reduce using rule 37 (valor -> STRING .)
    BREAK           reduce using rule 37 (valor -> STRING .)
    ENDSWITCH       reduce using rule 37 (valor -> STRING .)
    CASE            reduce using rule 37 (valor -> STRING .)
    DEFAULT         reduce using rule 37 (valor -> STRING .)
    ARROWMAP        reduce using rule 37 (valor -> STRING .)
    RBRACKET        reduce using rule 37 (valor -> STRING .)
    COLON           reduce using rule 37 (valor -> STRING .)


state 44

    (188) namespace -> NAMESPACE . ID SEMICOLON

    ID              shift and go to state 110


state 45

    (190) throw -> THROW . NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> THROW . valor SEMICOLON
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    NEW             shift and go to state 111
    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    valor                          shift and go to state 112
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 46

    (193) constdeclaration -> CONST . ID EQUALS valor SEMICOLON

    ID              shift and go to state 113


state 47

    (194) thisdeclaration -> THIS . ARROW ID SEMICOLON
    (195) thisdeclaration -> THIS . ARROW ID LPAREN RPAREN SEMICOLON

    ARROW           shift and go to state 114


state 48

    (34) valor -> INT .

    LT              reduce using rule 34 (valor -> INT .)
    GT              reduce using rule 34 (valor -> INT .)
    LEQ             reduce using rule 34 (valor -> INT .)
    GEQ             reduce using rule 34 (valor -> INT .)
    EQ              reduce using rule 34 (valor -> INT .)
    NEQ             reduce using rule 34 (valor -> INT .)
    STRICTEQ        reduce using rule 34 (valor -> INT .)
    STRICTNEQ       reduce using rule 34 (valor -> INT .)
    AND             reduce using rule 34 (valor -> INT .)
    LOGICAL_AND     reduce using rule 34 (valor -> INT .)
    OR              reduce using rule 34 (valor -> INT .)
    LOGICAL_OR      reduce using rule 34 (valor -> INT .)
    RPAREN          reduce using rule 34 (valor -> INT .)
    COMMA           reduce using rule 34 (valor -> INT .)
    SEMICOLON       reduce using rule 34 (valor -> INT .)
    PLUS            reduce using rule 34 (valor -> INT .)
    MINUS           reduce using rule 34 (valor -> INT .)
    TIMES           reduce using rule 34 (valor -> INT .)
    DIVIDE          reduce using rule 34 (valor -> INT .)
    MODULO          reduce using rule 34 (valor -> INT .)
    POTENCIA        reduce using rule 34 (valor -> INT .)
    PLUSEQUAL       reduce using rule 34 (valor -> INT .)
    VARIABLE        reduce using rule 34 (valor -> INT .)
    ECHO            reduce using rule 34 (valor -> INT .)
    PRINT           reduce using rule 34 (valor -> INT .)
    TRY             reduce using rule 34 (valor -> INT .)
    FUNCTION        reduce using rule 34 (valor -> INT .)
    RETURN          reduce using rule 34 (valor -> INT .)
    ID              reduce using rule 34 (valor -> INT .)
    EMPTY           reduce using rule 34 (valor -> INT .)
    CLASS           reduce using rule 34 (valor -> INT .)
    INTERFACE       reduce using rule 34 (valor -> INT .)
    INCLUDE         reduce using rule 34 (valor -> INT .)
    NAMESPACE       reduce using rule 34 (valor -> INT .)
    THROW           reduce using rule 34 (valor -> INT .)
    CONST           reduce using rule 34 (valor -> INT .)
    THIS            reduce using rule 34 (valor -> INT .)
    INT             reduce using rule 34 (valor -> INT .)
    FLOAT           reduce using rule 34 (valor -> INT .)
    STRING          reduce using rule 34 (valor -> INT .)
    BOOL            reduce using rule 34 (valor -> INT .)
    NULL            reduce using rule 34 (valor -> INT .)
    ARRAY           reduce using rule 34 (valor -> INT .)
    ABSTRACT        reduce using rule 34 (valor -> INT .)
    PRIVATE         reduce using rule 34 (valor -> INT .)
    PROTECTED       reduce using rule 34 (valor -> INT .)
    PUBLIC          reduce using rule 34 (valor -> INT .)
    STATIC          reduce using rule 34 (valor -> INT .)
    FINAL           reduce using rule 34 (valor -> INT .)
    LPAREN          reduce using rule 34 (valor -> INT .)
    IF              reduce using rule 34 (valor -> INT .)
    WHILE           reduce using rule 34 (valor -> INT .)
    DO              reduce using rule 34 (valor -> INT .)
    SWITCH          reduce using rule 34 (valor -> INT .)
    FOREACH         reduce using rule 34 (valor -> INT .)
    FOR             reduce using rule 34 (valor -> INT .)
    CLOSETAG        reduce using rule 34 (valor -> INT .)
    RBRACE          reduce using rule 34 (valor -> INT .)
    BREAK           reduce using rule 34 (valor -> INT .)
    ENDSWITCH       reduce using rule 34 (valor -> INT .)
    CASE            reduce using rule 34 (valor -> INT .)
    DEFAULT         reduce using rule 34 (valor -> INT .)
    ARROWMAP        reduce using rule 34 (valor -> INT .)
    RBRACKET        reduce using rule 34 (valor -> INT .)
    COLON           reduce using rule 34 (valor -> INT .)


state 49

    (36) valor -> FLOAT .

    LT              reduce using rule 36 (valor -> FLOAT .)
    GT              reduce using rule 36 (valor -> FLOAT .)
    LEQ             reduce using rule 36 (valor -> FLOAT .)
    GEQ             reduce using rule 36 (valor -> FLOAT .)
    EQ              reduce using rule 36 (valor -> FLOAT .)
    NEQ             reduce using rule 36 (valor -> FLOAT .)
    STRICTEQ        reduce using rule 36 (valor -> FLOAT .)
    STRICTNEQ       reduce using rule 36 (valor -> FLOAT .)
    AND             reduce using rule 36 (valor -> FLOAT .)
    LOGICAL_AND     reduce using rule 36 (valor -> FLOAT .)
    OR              reduce using rule 36 (valor -> FLOAT .)
    LOGICAL_OR      reduce using rule 36 (valor -> FLOAT .)
    RPAREN          reduce using rule 36 (valor -> FLOAT .)
    COMMA           reduce using rule 36 (valor -> FLOAT .)
    SEMICOLON       reduce using rule 36 (valor -> FLOAT .)
    PLUS            reduce using rule 36 (valor -> FLOAT .)
    MINUS           reduce using rule 36 (valor -> FLOAT .)
    TIMES           reduce using rule 36 (valor -> FLOAT .)
    DIVIDE          reduce using rule 36 (valor -> FLOAT .)
    MODULO          reduce using rule 36 (valor -> FLOAT .)
    POTENCIA        reduce using rule 36 (valor -> FLOAT .)
    PLUSEQUAL       reduce using rule 36 (valor -> FLOAT .)
    VARIABLE        reduce using rule 36 (valor -> FLOAT .)
    ECHO            reduce using rule 36 (valor -> FLOAT .)
    PRINT           reduce using rule 36 (valor -> FLOAT .)
    TRY             reduce using rule 36 (valor -> FLOAT .)
    FUNCTION        reduce using rule 36 (valor -> FLOAT .)
    RETURN          reduce using rule 36 (valor -> FLOAT .)
    ID              reduce using rule 36 (valor -> FLOAT .)
    EMPTY           reduce using rule 36 (valor -> FLOAT .)
    CLASS           reduce using rule 36 (valor -> FLOAT .)
    INTERFACE       reduce using rule 36 (valor -> FLOAT .)
    INCLUDE         reduce using rule 36 (valor -> FLOAT .)
    NAMESPACE       reduce using rule 36 (valor -> FLOAT .)
    THROW           reduce using rule 36 (valor -> FLOAT .)
    CONST           reduce using rule 36 (valor -> FLOAT .)
    THIS            reduce using rule 36 (valor -> FLOAT .)
    INT             reduce using rule 36 (valor -> FLOAT .)
    FLOAT           reduce using rule 36 (valor -> FLOAT .)
    STRING          reduce using rule 36 (valor -> FLOAT .)
    BOOL            reduce using rule 36 (valor -> FLOAT .)
    NULL            reduce using rule 36 (valor -> FLOAT .)
    ARRAY           reduce using rule 36 (valor -> FLOAT .)
    ABSTRACT        reduce using rule 36 (valor -> FLOAT .)
    PRIVATE         reduce using rule 36 (valor -> FLOAT .)
    PROTECTED       reduce using rule 36 (valor -> FLOAT .)
    PUBLIC          reduce using rule 36 (valor -> FLOAT .)
    STATIC          reduce using rule 36 (valor -> FLOAT .)
    FINAL           reduce using rule 36 (valor -> FLOAT .)
    LPAREN          reduce using rule 36 (valor -> FLOAT .)
    IF              reduce using rule 36 (valor -> FLOAT .)
    WHILE           reduce using rule 36 (valor -> FLOAT .)
    DO              reduce using rule 36 (valor -> FLOAT .)
    SWITCH          reduce using rule 36 (valor -> FLOAT .)
    FOREACH         reduce using rule 36 (valor -> FLOAT .)
    FOR             reduce using rule 36 (valor -> FLOAT .)
    CLOSETAG        reduce using rule 36 (valor -> FLOAT .)
    RBRACE          reduce using rule 36 (valor -> FLOAT .)
    BREAK           reduce using rule 36 (valor -> FLOAT .)
    ENDSWITCH       reduce using rule 36 (valor -> FLOAT .)
    CASE            reduce using rule 36 (valor -> FLOAT .)
    DEFAULT         reduce using rule 36 (valor -> FLOAT .)
    ARROWMAP        reduce using rule 36 (valor -> FLOAT .)
    RBRACKET        reduce using rule 36 (valor -> FLOAT .)
    COLON           reduce using rule 36 (valor -> FLOAT .)


state 50

    (38) valor -> BOOL .

    LT              reduce using rule 38 (valor -> BOOL .)
    GT              reduce using rule 38 (valor -> BOOL .)
    LEQ             reduce using rule 38 (valor -> BOOL .)
    GEQ             reduce using rule 38 (valor -> BOOL .)
    EQ              reduce using rule 38 (valor -> BOOL .)
    NEQ             reduce using rule 38 (valor -> BOOL .)
    STRICTEQ        reduce using rule 38 (valor -> BOOL .)
    STRICTNEQ       reduce using rule 38 (valor -> BOOL .)
    AND             reduce using rule 38 (valor -> BOOL .)
    LOGICAL_AND     reduce using rule 38 (valor -> BOOL .)
    OR              reduce using rule 38 (valor -> BOOL .)
    LOGICAL_OR      reduce using rule 38 (valor -> BOOL .)
    RPAREN          reduce using rule 38 (valor -> BOOL .)
    COMMA           reduce using rule 38 (valor -> BOOL .)
    SEMICOLON       reduce using rule 38 (valor -> BOOL .)
    PLUS            reduce using rule 38 (valor -> BOOL .)
    MINUS           reduce using rule 38 (valor -> BOOL .)
    TIMES           reduce using rule 38 (valor -> BOOL .)
    DIVIDE          reduce using rule 38 (valor -> BOOL .)
    MODULO          reduce using rule 38 (valor -> BOOL .)
    POTENCIA        reduce using rule 38 (valor -> BOOL .)
    PLUSEQUAL       reduce using rule 38 (valor -> BOOL .)
    VARIABLE        reduce using rule 38 (valor -> BOOL .)
    ECHO            reduce using rule 38 (valor -> BOOL .)
    PRINT           reduce using rule 38 (valor -> BOOL .)
    TRY             reduce using rule 38 (valor -> BOOL .)
    FUNCTION        reduce using rule 38 (valor -> BOOL .)
    RETURN          reduce using rule 38 (valor -> BOOL .)
    ID              reduce using rule 38 (valor -> BOOL .)
    EMPTY           reduce using rule 38 (valor -> BOOL .)
    CLASS           reduce using rule 38 (valor -> BOOL .)
    INTERFACE       reduce using rule 38 (valor -> BOOL .)
    INCLUDE         reduce using rule 38 (valor -> BOOL .)
    NAMESPACE       reduce using rule 38 (valor -> BOOL .)
    THROW           reduce using rule 38 (valor -> BOOL .)
    CONST           reduce using rule 38 (valor -> BOOL .)
    THIS            reduce using rule 38 (valor -> BOOL .)
    INT             reduce using rule 38 (valor -> BOOL .)
    FLOAT           reduce using rule 38 (valor -> BOOL .)
    STRING          reduce using rule 38 (valor -> BOOL .)
    BOOL            reduce using rule 38 (valor -> BOOL .)
    NULL            reduce using rule 38 (valor -> BOOL .)
    ARRAY           reduce using rule 38 (valor -> BOOL .)
    ABSTRACT        reduce using rule 38 (valor -> BOOL .)
    PRIVATE         reduce using rule 38 (valor -> BOOL .)
    PROTECTED       reduce using rule 38 (valor -> BOOL .)
    PUBLIC          reduce using rule 38 (valor -> BOOL .)
    STATIC          reduce using rule 38 (valor -> BOOL .)
    FINAL           reduce using rule 38 (valor -> BOOL .)
    LPAREN          reduce using rule 38 (valor -> BOOL .)
    IF              reduce using rule 38 (valor -> BOOL .)
    WHILE           reduce using rule 38 (valor -> BOOL .)
    DO              reduce using rule 38 (valor -> BOOL .)
    SWITCH          reduce using rule 38 (valor -> BOOL .)
    FOREACH         reduce using rule 38 (valor -> BOOL .)
    FOR             reduce using rule 38 (valor -> BOOL .)
    CLOSETAG        reduce using rule 38 (valor -> BOOL .)
    RBRACE          reduce using rule 38 (valor -> BOOL .)
    BREAK           reduce using rule 38 (valor -> BOOL .)
    ENDSWITCH       reduce using rule 38 (valor -> BOOL .)
    CASE            reduce using rule 38 (valor -> BOOL .)
    DEFAULT         reduce using rule 38 (valor -> BOOL .)
    ARROWMAP        reduce using rule 38 (valor -> BOOL .)
    RBRACKET        reduce using rule 38 (valor -> BOOL .)
    COLON           reduce using rule 38 (valor -> BOOL .)


state 51

    (39) valor -> NULL .

    LT              reduce using rule 39 (valor -> NULL .)
    GT              reduce using rule 39 (valor -> NULL .)
    LEQ             reduce using rule 39 (valor -> NULL .)
    GEQ             reduce using rule 39 (valor -> NULL .)
    EQ              reduce using rule 39 (valor -> NULL .)
    NEQ             reduce using rule 39 (valor -> NULL .)
    STRICTEQ        reduce using rule 39 (valor -> NULL .)
    STRICTNEQ       reduce using rule 39 (valor -> NULL .)
    AND             reduce using rule 39 (valor -> NULL .)
    LOGICAL_AND     reduce using rule 39 (valor -> NULL .)
    OR              reduce using rule 39 (valor -> NULL .)
    LOGICAL_OR      reduce using rule 39 (valor -> NULL .)
    RPAREN          reduce using rule 39 (valor -> NULL .)
    COMMA           reduce using rule 39 (valor -> NULL .)
    SEMICOLON       reduce using rule 39 (valor -> NULL .)
    PLUS            reduce using rule 39 (valor -> NULL .)
    MINUS           reduce using rule 39 (valor -> NULL .)
    TIMES           reduce using rule 39 (valor -> NULL .)
    DIVIDE          reduce using rule 39 (valor -> NULL .)
    MODULO          reduce using rule 39 (valor -> NULL .)
    POTENCIA        reduce using rule 39 (valor -> NULL .)
    PLUSEQUAL       reduce using rule 39 (valor -> NULL .)
    VARIABLE        reduce using rule 39 (valor -> NULL .)
    ECHO            reduce using rule 39 (valor -> NULL .)
    PRINT           reduce using rule 39 (valor -> NULL .)
    TRY             reduce using rule 39 (valor -> NULL .)
    FUNCTION        reduce using rule 39 (valor -> NULL .)
    RETURN          reduce using rule 39 (valor -> NULL .)
    ID              reduce using rule 39 (valor -> NULL .)
    EMPTY           reduce using rule 39 (valor -> NULL .)
    CLASS           reduce using rule 39 (valor -> NULL .)
    INTERFACE       reduce using rule 39 (valor -> NULL .)
    INCLUDE         reduce using rule 39 (valor -> NULL .)
    NAMESPACE       reduce using rule 39 (valor -> NULL .)
    THROW           reduce using rule 39 (valor -> NULL .)
    CONST           reduce using rule 39 (valor -> NULL .)
    THIS            reduce using rule 39 (valor -> NULL .)
    INT             reduce using rule 39 (valor -> NULL .)
    FLOAT           reduce using rule 39 (valor -> NULL .)
    STRING          reduce using rule 39 (valor -> NULL .)
    BOOL            reduce using rule 39 (valor -> NULL .)
    NULL            reduce using rule 39 (valor -> NULL .)
    ARRAY           reduce using rule 39 (valor -> NULL .)
    ABSTRACT        reduce using rule 39 (valor -> NULL .)
    PRIVATE         reduce using rule 39 (valor -> NULL .)
    PROTECTED       reduce using rule 39 (valor -> NULL .)
    PUBLIC          reduce using rule 39 (valor -> NULL .)
    STATIC          reduce using rule 39 (valor -> NULL .)
    FINAL           reduce using rule 39 (valor -> NULL .)
    LPAREN          reduce using rule 39 (valor -> NULL .)
    IF              reduce using rule 39 (valor -> NULL .)
    WHILE           reduce using rule 39 (valor -> NULL .)
    DO              reduce using rule 39 (valor -> NULL .)
    SWITCH          reduce using rule 39 (valor -> NULL .)
    FOREACH         reduce using rule 39 (valor -> NULL .)
    FOR             reduce using rule 39 (valor -> NULL .)
    CLOSETAG        reduce using rule 39 (valor -> NULL .)
    RBRACE          reduce using rule 39 (valor -> NULL .)
    BREAK           reduce using rule 39 (valor -> NULL .)
    ENDSWITCH       reduce using rule 39 (valor -> NULL .)
    CASE            reduce using rule 39 (valor -> NULL .)
    DEFAULT         reduce using rule 39 (valor -> NULL .)
    ARROWMAP        reduce using rule 39 (valor -> NULL .)
    RBRACKET        reduce using rule 39 (valor -> NULL .)
    COLON           reduce using rule 39 (valor -> NULL .)


state 52

    (40) valor -> ARRAY .

    LT              reduce using rule 40 (valor -> ARRAY .)
    GT              reduce using rule 40 (valor -> ARRAY .)
    LEQ             reduce using rule 40 (valor -> ARRAY .)
    GEQ             reduce using rule 40 (valor -> ARRAY .)
    EQ              reduce using rule 40 (valor -> ARRAY .)
    NEQ             reduce using rule 40 (valor -> ARRAY .)
    STRICTEQ        reduce using rule 40 (valor -> ARRAY .)
    STRICTNEQ       reduce using rule 40 (valor -> ARRAY .)
    AND             reduce using rule 40 (valor -> ARRAY .)
    LOGICAL_AND     reduce using rule 40 (valor -> ARRAY .)
    OR              reduce using rule 40 (valor -> ARRAY .)
    LOGICAL_OR      reduce using rule 40 (valor -> ARRAY .)
    RPAREN          reduce using rule 40 (valor -> ARRAY .)
    COMMA           reduce using rule 40 (valor -> ARRAY .)
    SEMICOLON       reduce using rule 40 (valor -> ARRAY .)
    VARIABLE        reduce using rule 40 (valor -> ARRAY .)
    ECHO            reduce using rule 40 (valor -> ARRAY .)
    PRINT           reduce using rule 40 (valor -> ARRAY .)
    TRY             reduce using rule 40 (valor -> ARRAY .)
    FUNCTION        reduce using rule 40 (valor -> ARRAY .)
    RETURN          reduce using rule 40 (valor -> ARRAY .)
    ID              reduce using rule 40 (valor -> ARRAY .)
    EMPTY           reduce using rule 40 (valor -> ARRAY .)
    CLASS           reduce using rule 40 (valor -> ARRAY .)
    INTERFACE       reduce using rule 40 (valor -> ARRAY .)
    INCLUDE         reduce using rule 40 (valor -> ARRAY .)
    NAMESPACE       reduce using rule 40 (valor -> ARRAY .)
    THROW           reduce using rule 40 (valor -> ARRAY .)
    CONST           reduce using rule 40 (valor -> ARRAY .)
    THIS            reduce using rule 40 (valor -> ARRAY .)
    INT             reduce using rule 40 (valor -> ARRAY .)
    FLOAT           reduce using rule 40 (valor -> ARRAY .)
    STRING          reduce using rule 40 (valor -> ARRAY .)
    BOOL            reduce using rule 40 (valor -> ARRAY .)
    NULL            reduce using rule 40 (valor -> ARRAY .)
    ARRAY           reduce using rule 40 (valor -> ARRAY .)
    ABSTRACT        reduce using rule 40 (valor -> ARRAY .)
    PRIVATE         reduce using rule 40 (valor -> ARRAY .)
    PROTECTED       reduce using rule 40 (valor -> ARRAY .)
    PUBLIC          reduce using rule 40 (valor -> ARRAY .)
    STATIC          reduce using rule 40 (valor -> ARRAY .)
    FINAL           reduce using rule 40 (valor -> ARRAY .)
    LPAREN          reduce using rule 40 (valor -> ARRAY .)
    IF              reduce using rule 40 (valor -> ARRAY .)
    WHILE           reduce using rule 40 (valor -> ARRAY .)
    DO              reduce using rule 40 (valor -> ARRAY .)
    SWITCH          reduce using rule 40 (valor -> ARRAY .)
    FOREACH         reduce using rule 40 (valor -> ARRAY .)
    FOR             reduce using rule 40 (valor -> ARRAY .)
    CLOSETAG        reduce using rule 40 (valor -> ARRAY .)
    RBRACE          reduce using rule 40 (valor -> ARRAY .)
    BREAK           reduce using rule 40 (valor -> ARRAY .)
    ENDSWITCH       reduce using rule 40 (valor -> ARRAY .)
    CASE            reduce using rule 40 (valor -> ARRAY .)
    DEFAULT         reduce using rule 40 (valor -> ARRAY .)
    PLUS            reduce using rule 40 (valor -> ARRAY .)
    MINUS           reduce using rule 40 (valor -> ARRAY .)
    TIMES           reduce using rule 40 (valor -> ARRAY .)
    DIVIDE          reduce using rule 40 (valor -> ARRAY .)
    MODULO          reduce using rule 40 (valor -> ARRAY .)
    POTENCIA        reduce using rule 40 (valor -> ARRAY .)
    PLUSEQUAL       reduce using rule 40 (valor -> ARRAY .)
    ARROWMAP        reduce using rule 40 (valor -> ARRAY .)
    RBRACKET        reduce using rule 40 (valor -> ARRAY .)
    COLON           reduce using rule 40 (valor -> ARRAY .)


state 53

    (42) valor -> operador_ternario .

    LT              reduce using rule 42 (valor -> operador_ternario .)
    GT              reduce using rule 42 (valor -> operador_ternario .)
    LEQ             reduce using rule 42 (valor -> operador_ternario .)
    GEQ             reduce using rule 42 (valor -> operador_ternario .)
    EQ              reduce using rule 42 (valor -> operador_ternario .)
    NEQ             reduce using rule 42 (valor -> operador_ternario .)
    STRICTEQ        reduce using rule 42 (valor -> operador_ternario .)
    STRICTNEQ       reduce using rule 42 (valor -> operador_ternario .)
    AND             reduce using rule 42 (valor -> operador_ternario .)
    LOGICAL_AND     reduce using rule 42 (valor -> operador_ternario .)
    OR              reduce using rule 42 (valor -> operador_ternario .)
    LOGICAL_OR      reduce using rule 42 (valor -> operador_ternario .)
    RPAREN          reduce using rule 42 (valor -> operador_ternario .)
    COMMA           reduce using rule 42 (valor -> operador_ternario .)
    SEMICOLON       reduce using rule 42 (valor -> operador_ternario .)
    PLUS            reduce using rule 42 (valor -> operador_ternario .)
    MINUS           reduce using rule 42 (valor -> operador_ternario .)
    TIMES           reduce using rule 42 (valor -> operador_ternario .)
    DIVIDE          reduce using rule 42 (valor -> operador_ternario .)
    MODULO          reduce using rule 42 (valor -> operador_ternario .)
    POTENCIA        reduce using rule 42 (valor -> operador_ternario .)
    PLUSEQUAL       reduce using rule 42 (valor -> operador_ternario .)
    VARIABLE        reduce using rule 42 (valor -> operador_ternario .)
    ECHO            reduce using rule 42 (valor -> operador_ternario .)
    PRINT           reduce using rule 42 (valor -> operador_ternario .)
    TRY             reduce using rule 42 (valor -> operador_ternario .)
    FUNCTION        reduce using rule 42 (valor -> operador_ternario .)
    RETURN          reduce using rule 42 (valor -> operador_ternario .)
    ID              reduce using rule 42 (valor -> operador_ternario .)
    EMPTY           reduce using rule 42 (valor -> operador_ternario .)
    CLASS           reduce using rule 42 (valor -> operador_ternario .)
    INTERFACE       reduce using rule 42 (valor -> operador_ternario .)
    INCLUDE         reduce using rule 42 (valor -> operador_ternario .)
    NAMESPACE       reduce using rule 42 (valor -> operador_ternario .)
    THROW           reduce using rule 42 (valor -> operador_ternario .)
    CONST           reduce using rule 42 (valor -> operador_ternario .)
    THIS            reduce using rule 42 (valor -> operador_ternario .)
    INT             reduce using rule 42 (valor -> operador_ternario .)
    FLOAT           reduce using rule 42 (valor -> operador_ternario .)
    STRING          reduce using rule 42 (valor -> operador_ternario .)
    BOOL            reduce using rule 42 (valor -> operador_ternario .)
    NULL            reduce using rule 42 (valor -> operador_ternario .)
    ARRAY           reduce using rule 42 (valor -> operador_ternario .)
    ABSTRACT        reduce using rule 42 (valor -> operador_ternario .)
    PRIVATE         reduce using rule 42 (valor -> operador_ternario .)
    PROTECTED       reduce using rule 42 (valor -> operador_ternario .)
    PUBLIC          reduce using rule 42 (valor -> operador_ternario .)
    STATIC          reduce using rule 42 (valor -> operador_ternario .)
    FINAL           reduce using rule 42 (valor -> operador_ternario .)
    LPAREN          reduce using rule 42 (valor -> operador_ternario .)
    IF              reduce using rule 42 (valor -> operador_ternario .)
    WHILE           reduce using rule 42 (valor -> operador_ternario .)
    DO              reduce using rule 42 (valor -> operador_ternario .)
    SWITCH          reduce using rule 42 (valor -> operador_ternario .)
    FOREACH         reduce using rule 42 (valor -> operador_ternario .)
    FOR             reduce using rule 42 (valor -> operador_ternario .)
    CLOSETAG        reduce using rule 42 (valor -> operador_ternario .)
    RBRACE          reduce using rule 42 (valor -> operador_ternario .)
    BREAK           reduce using rule 42 (valor -> operador_ternario .)
    ENDSWITCH       reduce using rule 42 (valor -> operador_ternario .)
    CASE            reduce using rule 42 (valor -> operador_ternario .)
    DEFAULT         reduce using rule 42 (valor -> operador_ternario .)
    ARROWMAP        reduce using rule 42 (valor -> operador_ternario .)
    RBRACKET        reduce using rule 42 (valor -> operador_ternario .)
    COLON           reduce using rule 42 (valor -> operador_ternario .)


state 54

    (66) controlStructure -> if .

    VARIABLE        reduce using rule 66 (controlStructure -> if .)
    ECHO            reduce using rule 66 (controlStructure -> if .)
    PRINT           reduce using rule 66 (controlStructure -> if .)
    TRY             reduce using rule 66 (controlStructure -> if .)
    FUNCTION        reduce using rule 66 (controlStructure -> if .)
    RETURN          reduce using rule 66 (controlStructure -> if .)
    ID              reduce using rule 66 (controlStructure -> if .)
    EMPTY           reduce using rule 66 (controlStructure -> if .)
    CLASS           reduce using rule 66 (controlStructure -> if .)
    INTERFACE       reduce using rule 66 (controlStructure -> if .)
    INCLUDE         reduce using rule 66 (controlStructure -> if .)
    NAMESPACE       reduce using rule 66 (controlStructure -> if .)
    THROW           reduce using rule 66 (controlStructure -> if .)
    CONST           reduce using rule 66 (controlStructure -> if .)
    THIS            reduce using rule 66 (controlStructure -> if .)
    INT             reduce using rule 66 (controlStructure -> if .)
    FLOAT           reduce using rule 66 (controlStructure -> if .)
    STRING          reduce using rule 66 (controlStructure -> if .)
    BOOL            reduce using rule 66 (controlStructure -> if .)
    NULL            reduce using rule 66 (controlStructure -> if .)
    ARRAY           reduce using rule 66 (controlStructure -> if .)
    ABSTRACT        reduce using rule 66 (controlStructure -> if .)
    PRIVATE         reduce using rule 66 (controlStructure -> if .)
    PROTECTED       reduce using rule 66 (controlStructure -> if .)
    PUBLIC          reduce using rule 66 (controlStructure -> if .)
    STATIC          reduce using rule 66 (controlStructure -> if .)
    FINAL           reduce using rule 66 (controlStructure -> if .)
    LPAREN          reduce using rule 66 (controlStructure -> if .)
    IF              reduce using rule 66 (controlStructure -> if .)
    WHILE           reduce using rule 66 (controlStructure -> if .)
    DO              reduce using rule 66 (controlStructure -> if .)
    SWITCH          reduce using rule 66 (controlStructure -> if .)
    FOREACH         reduce using rule 66 (controlStructure -> if .)
    FOR             reduce using rule 66 (controlStructure -> if .)
    CLOSETAG        reduce using rule 66 (controlStructure -> if .)
    RBRACE          reduce using rule 66 (controlStructure -> if .)
    BREAK           reduce using rule 66 (controlStructure -> if .)
    ENDSWITCH       reduce using rule 66 (controlStructure -> if .)
    CASE            reduce using rule 66 (controlStructure -> if .)
    DEFAULT         reduce using rule 66 (controlStructure -> if .)


state 55

    (67) controlStructure -> for .

    VARIABLE        reduce using rule 67 (controlStructure -> for .)
    ECHO            reduce using rule 67 (controlStructure -> for .)
    PRINT           reduce using rule 67 (controlStructure -> for .)
    TRY             reduce using rule 67 (controlStructure -> for .)
    FUNCTION        reduce using rule 67 (controlStructure -> for .)
    RETURN          reduce using rule 67 (controlStructure -> for .)
    ID              reduce using rule 67 (controlStructure -> for .)
    EMPTY           reduce using rule 67 (controlStructure -> for .)
    CLASS           reduce using rule 67 (controlStructure -> for .)
    INTERFACE       reduce using rule 67 (controlStructure -> for .)
    INCLUDE         reduce using rule 67 (controlStructure -> for .)
    NAMESPACE       reduce using rule 67 (controlStructure -> for .)
    THROW           reduce using rule 67 (controlStructure -> for .)
    CONST           reduce using rule 67 (controlStructure -> for .)
    THIS            reduce using rule 67 (controlStructure -> for .)
    INT             reduce using rule 67 (controlStructure -> for .)
    FLOAT           reduce using rule 67 (controlStructure -> for .)
    STRING          reduce using rule 67 (controlStructure -> for .)
    BOOL            reduce using rule 67 (controlStructure -> for .)
    NULL            reduce using rule 67 (controlStructure -> for .)
    ARRAY           reduce using rule 67 (controlStructure -> for .)
    ABSTRACT        reduce using rule 67 (controlStructure -> for .)
    PRIVATE         reduce using rule 67 (controlStructure -> for .)
    PROTECTED       reduce using rule 67 (controlStructure -> for .)
    PUBLIC          reduce using rule 67 (controlStructure -> for .)
    STATIC          reduce using rule 67 (controlStructure -> for .)
    FINAL           reduce using rule 67 (controlStructure -> for .)
    LPAREN          reduce using rule 67 (controlStructure -> for .)
    IF              reduce using rule 67 (controlStructure -> for .)
    WHILE           reduce using rule 67 (controlStructure -> for .)
    DO              reduce using rule 67 (controlStructure -> for .)
    SWITCH          reduce using rule 67 (controlStructure -> for .)
    FOREACH         reduce using rule 67 (controlStructure -> for .)
    FOR             reduce using rule 67 (controlStructure -> for .)
    CLOSETAG        reduce using rule 67 (controlStructure -> for .)
    RBRACE          reduce using rule 67 (controlStructure -> for .)
    BREAK           reduce using rule 67 (controlStructure -> for .)
    ENDSWITCH       reduce using rule 67 (controlStructure -> for .)
    CASE            reduce using rule 67 (controlStructure -> for .)
    DEFAULT         reduce using rule 67 (controlStructure -> for .)


state 56

    (68) controlStructure -> while .

    VARIABLE        reduce using rule 68 (controlStructure -> while .)
    ECHO            reduce using rule 68 (controlStructure -> while .)
    PRINT           reduce using rule 68 (controlStructure -> while .)
    TRY             reduce using rule 68 (controlStructure -> while .)
    FUNCTION        reduce using rule 68 (controlStructure -> while .)
    RETURN          reduce using rule 68 (controlStructure -> while .)
    ID              reduce using rule 68 (controlStructure -> while .)
    EMPTY           reduce using rule 68 (controlStructure -> while .)
    CLASS           reduce using rule 68 (controlStructure -> while .)
    INTERFACE       reduce using rule 68 (controlStructure -> while .)
    INCLUDE         reduce using rule 68 (controlStructure -> while .)
    NAMESPACE       reduce using rule 68 (controlStructure -> while .)
    THROW           reduce using rule 68 (controlStructure -> while .)
    CONST           reduce using rule 68 (controlStructure -> while .)
    THIS            reduce using rule 68 (controlStructure -> while .)
    INT             reduce using rule 68 (controlStructure -> while .)
    FLOAT           reduce using rule 68 (controlStructure -> while .)
    STRING          reduce using rule 68 (controlStructure -> while .)
    BOOL            reduce using rule 68 (controlStructure -> while .)
    NULL            reduce using rule 68 (controlStructure -> while .)
    ARRAY           reduce using rule 68 (controlStructure -> while .)
    ABSTRACT        reduce using rule 68 (controlStructure -> while .)
    PRIVATE         reduce using rule 68 (controlStructure -> while .)
    PROTECTED       reduce using rule 68 (controlStructure -> while .)
    PUBLIC          reduce using rule 68 (controlStructure -> while .)
    STATIC          reduce using rule 68 (controlStructure -> while .)
    FINAL           reduce using rule 68 (controlStructure -> while .)
    LPAREN          reduce using rule 68 (controlStructure -> while .)
    IF              reduce using rule 68 (controlStructure -> while .)
    WHILE           reduce using rule 68 (controlStructure -> while .)
    DO              reduce using rule 68 (controlStructure -> while .)
    SWITCH          reduce using rule 68 (controlStructure -> while .)
    FOREACH         reduce using rule 68 (controlStructure -> while .)
    FOR             reduce using rule 68 (controlStructure -> while .)
    CLOSETAG        reduce using rule 68 (controlStructure -> while .)
    RBRACE          reduce using rule 68 (controlStructure -> while .)
    BREAK           reduce using rule 68 (controlStructure -> while .)
    ENDSWITCH       reduce using rule 68 (controlStructure -> while .)
    CASE            reduce using rule 68 (controlStructure -> while .)
    DEFAULT         reduce using rule 68 (controlStructure -> while .)


state 57

    (69) controlStructure -> dowhile .

    VARIABLE        reduce using rule 69 (controlStructure -> dowhile .)
    ECHO            reduce using rule 69 (controlStructure -> dowhile .)
    PRINT           reduce using rule 69 (controlStructure -> dowhile .)
    TRY             reduce using rule 69 (controlStructure -> dowhile .)
    FUNCTION        reduce using rule 69 (controlStructure -> dowhile .)
    RETURN          reduce using rule 69 (controlStructure -> dowhile .)
    ID              reduce using rule 69 (controlStructure -> dowhile .)
    EMPTY           reduce using rule 69 (controlStructure -> dowhile .)
    CLASS           reduce using rule 69 (controlStructure -> dowhile .)
    INTERFACE       reduce using rule 69 (controlStructure -> dowhile .)
    INCLUDE         reduce using rule 69 (controlStructure -> dowhile .)
    NAMESPACE       reduce using rule 69 (controlStructure -> dowhile .)
    THROW           reduce using rule 69 (controlStructure -> dowhile .)
    CONST           reduce using rule 69 (controlStructure -> dowhile .)
    THIS            reduce using rule 69 (controlStructure -> dowhile .)
    INT             reduce using rule 69 (controlStructure -> dowhile .)
    FLOAT           reduce using rule 69 (controlStructure -> dowhile .)
    STRING          reduce using rule 69 (controlStructure -> dowhile .)
    BOOL            reduce using rule 69 (controlStructure -> dowhile .)
    NULL            reduce using rule 69 (controlStructure -> dowhile .)
    ARRAY           reduce using rule 69 (controlStructure -> dowhile .)
    ABSTRACT        reduce using rule 69 (controlStructure -> dowhile .)
    PRIVATE         reduce using rule 69 (controlStructure -> dowhile .)
    PROTECTED       reduce using rule 69 (controlStructure -> dowhile .)
    PUBLIC          reduce using rule 69 (controlStructure -> dowhile .)
    STATIC          reduce using rule 69 (controlStructure -> dowhile .)
    FINAL           reduce using rule 69 (controlStructure -> dowhile .)
    LPAREN          reduce using rule 69 (controlStructure -> dowhile .)
    IF              reduce using rule 69 (controlStructure -> dowhile .)
    WHILE           reduce using rule 69 (controlStructure -> dowhile .)
    DO              reduce using rule 69 (controlStructure -> dowhile .)
    SWITCH          reduce using rule 69 (controlStructure -> dowhile .)
    FOREACH         reduce using rule 69 (controlStructure -> dowhile .)
    FOR             reduce using rule 69 (controlStructure -> dowhile .)
    CLOSETAG        reduce using rule 69 (controlStructure -> dowhile .)
    RBRACE          reduce using rule 69 (controlStructure -> dowhile .)
    BREAK           reduce using rule 69 (controlStructure -> dowhile .)
    ENDSWITCH       reduce using rule 69 (controlStructure -> dowhile .)
    CASE            reduce using rule 69 (controlStructure -> dowhile .)
    DEFAULT         reduce using rule 69 (controlStructure -> dowhile .)


state 58

    (70) controlStructure -> switch .

    VARIABLE        reduce using rule 70 (controlStructure -> switch .)
    ECHO            reduce using rule 70 (controlStructure -> switch .)
    PRINT           reduce using rule 70 (controlStructure -> switch .)
    TRY             reduce using rule 70 (controlStructure -> switch .)
    FUNCTION        reduce using rule 70 (controlStructure -> switch .)
    RETURN          reduce using rule 70 (controlStructure -> switch .)
    ID              reduce using rule 70 (controlStructure -> switch .)
    EMPTY           reduce using rule 70 (controlStructure -> switch .)
    CLASS           reduce using rule 70 (controlStructure -> switch .)
    INTERFACE       reduce using rule 70 (controlStructure -> switch .)
    INCLUDE         reduce using rule 70 (controlStructure -> switch .)
    NAMESPACE       reduce using rule 70 (controlStructure -> switch .)
    THROW           reduce using rule 70 (controlStructure -> switch .)
    CONST           reduce using rule 70 (controlStructure -> switch .)
    THIS            reduce using rule 70 (controlStructure -> switch .)
    INT             reduce using rule 70 (controlStructure -> switch .)
    FLOAT           reduce using rule 70 (controlStructure -> switch .)
    STRING          reduce using rule 70 (controlStructure -> switch .)
    BOOL            reduce using rule 70 (controlStructure -> switch .)
    NULL            reduce using rule 70 (controlStructure -> switch .)
    ARRAY           reduce using rule 70 (controlStructure -> switch .)
    ABSTRACT        reduce using rule 70 (controlStructure -> switch .)
    PRIVATE         reduce using rule 70 (controlStructure -> switch .)
    PROTECTED       reduce using rule 70 (controlStructure -> switch .)
    PUBLIC          reduce using rule 70 (controlStructure -> switch .)
    STATIC          reduce using rule 70 (controlStructure -> switch .)
    FINAL           reduce using rule 70 (controlStructure -> switch .)
    LPAREN          reduce using rule 70 (controlStructure -> switch .)
    IF              reduce using rule 70 (controlStructure -> switch .)
    WHILE           reduce using rule 70 (controlStructure -> switch .)
    DO              reduce using rule 70 (controlStructure -> switch .)
    SWITCH          reduce using rule 70 (controlStructure -> switch .)
    FOREACH         reduce using rule 70 (controlStructure -> switch .)
    FOR             reduce using rule 70 (controlStructure -> switch .)
    CLOSETAG        reduce using rule 70 (controlStructure -> switch .)
    RBRACE          reduce using rule 70 (controlStructure -> switch .)
    BREAK           reduce using rule 70 (controlStructure -> switch .)
    ENDSWITCH       reduce using rule 70 (controlStructure -> switch .)
    CASE            reduce using rule 70 (controlStructure -> switch .)
    DEFAULT         reduce using rule 70 (controlStructure -> switch .)


state 59

    (71) controlStructure -> foreach .

    VARIABLE        reduce using rule 71 (controlStructure -> foreach .)
    ECHO            reduce using rule 71 (controlStructure -> foreach .)
    PRINT           reduce using rule 71 (controlStructure -> foreach .)
    TRY             reduce using rule 71 (controlStructure -> foreach .)
    FUNCTION        reduce using rule 71 (controlStructure -> foreach .)
    RETURN          reduce using rule 71 (controlStructure -> foreach .)
    ID              reduce using rule 71 (controlStructure -> foreach .)
    EMPTY           reduce using rule 71 (controlStructure -> foreach .)
    CLASS           reduce using rule 71 (controlStructure -> foreach .)
    INTERFACE       reduce using rule 71 (controlStructure -> foreach .)
    INCLUDE         reduce using rule 71 (controlStructure -> foreach .)
    NAMESPACE       reduce using rule 71 (controlStructure -> foreach .)
    THROW           reduce using rule 71 (controlStructure -> foreach .)
    CONST           reduce using rule 71 (controlStructure -> foreach .)
    THIS            reduce using rule 71 (controlStructure -> foreach .)
    INT             reduce using rule 71 (controlStructure -> foreach .)
    FLOAT           reduce using rule 71 (controlStructure -> foreach .)
    STRING          reduce using rule 71 (controlStructure -> foreach .)
    BOOL            reduce using rule 71 (controlStructure -> foreach .)
    NULL            reduce using rule 71 (controlStructure -> foreach .)
    ARRAY           reduce using rule 71 (controlStructure -> foreach .)
    ABSTRACT        reduce using rule 71 (controlStructure -> foreach .)
    PRIVATE         reduce using rule 71 (controlStructure -> foreach .)
    PROTECTED       reduce using rule 71 (controlStructure -> foreach .)
    PUBLIC          reduce using rule 71 (controlStructure -> foreach .)
    STATIC          reduce using rule 71 (controlStructure -> foreach .)
    FINAL           reduce using rule 71 (controlStructure -> foreach .)
    LPAREN          reduce using rule 71 (controlStructure -> foreach .)
    IF              reduce using rule 71 (controlStructure -> foreach .)
    WHILE           reduce using rule 71 (controlStructure -> foreach .)
    DO              reduce using rule 71 (controlStructure -> foreach .)
    SWITCH          reduce using rule 71 (controlStructure -> foreach .)
    FOREACH         reduce using rule 71 (controlStructure -> foreach .)
    FOR             reduce using rule 71 (controlStructure -> foreach .)
    CLOSETAG        reduce using rule 71 (controlStructure -> foreach .)
    RBRACE          reduce using rule 71 (controlStructure -> foreach .)
    BREAK           reduce using rule 71 (controlStructure -> foreach .)
    ENDSWITCH       reduce using rule 71 (controlStructure -> foreach .)
    CASE            reduce using rule 71 (controlStructure -> foreach .)
    DEFAULT         reduce using rule 71 (controlStructure -> foreach .)


state 60

    (120) dataStructure -> array .

    VARIABLE        reduce using rule 120 (dataStructure -> array .)
    ECHO            reduce using rule 120 (dataStructure -> array .)
    PRINT           reduce using rule 120 (dataStructure -> array .)
    TRY             reduce using rule 120 (dataStructure -> array .)
    FUNCTION        reduce using rule 120 (dataStructure -> array .)
    RETURN          reduce using rule 120 (dataStructure -> array .)
    ID              reduce using rule 120 (dataStructure -> array .)
    EMPTY           reduce using rule 120 (dataStructure -> array .)
    CLASS           reduce using rule 120 (dataStructure -> array .)
    INTERFACE       reduce using rule 120 (dataStructure -> array .)
    INCLUDE         reduce using rule 120 (dataStructure -> array .)
    NAMESPACE       reduce using rule 120 (dataStructure -> array .)
    THROW           reduce using rule 120 (dataStructure -> array .)
    CONST           reduce using rule 120 (dataStructure -> array .)
    THIS            reduce using rule 120 (dataStructure -> array .)
    INT             reduce using rule 120 (dataStructure -> array .)
    FLOAT           reduce using rule 120 (dataStructure -> array .)
    STRING          reduce using rule 120 (dataStructure -> array .)
    BOOL            reduce using rule 120 (dataStructure -> array .)
    NULL            reduce using rule 120 (dataStructure -> array .)
    ARRAY           reduce using rule 120 (dataStructure -> array .)
    ABSTRACT        reduce using rule 120 (dataStructure -> array .)
    PRIVATE         reduce using rule 120 (dataStructure -> array .)
    PROTECTED       reduce using rule 120 (dataStructure -> array .)
    PUBLIC          reduce using rule 120 (dataStructure -> array .)
    STATIC          reduce using rule 120 (dataStructure -> array .)
    FINAL           reduce using rule 120 (dataStructure -> array .)
    LPAREN          reduce using rule 120 (dataStructure -> array .)
    IF              reduce using rule 120 (dataStructure -> array .)
    WHILE           reduce using rule 120 (dataStructure -> array .)
    DO              reduce using rule 120 (dataStructure -> array .)
    SWITCH          reduce using rule 120 (dataStructure -> array .)
    FOREACH         reduce using rule 120 (dataStructure -> array .)
    FOR             reduce using rule 120 (dataStructure -> array .)
    CLOSETAG        reduce using rule 120 (dataStructure -> array .)
    RBRACE          reduce using rule 120 (dataStructure -> array .)
    BREAK           reduce using rule 120 (dataStructure -> array .)
    ENDSWITCH       reduce using rule 120 (dataStructure -> array .)
    CASE            reduce using rule 120 (dataStructure -> array .)
    DEFAULT         reduce using rule 120 (dataStructure -> array .)


state 61

    (179) data -> ABSTRACT .

    CLASS           reduce using rule 179 (data -> ABSTRACT .)


state 62

    (180) data -> PRIVATE .

    CLASS           reduce using rule 180 (data -> PRIVATE .)


state 63

    (181) data -> PROTECTED .

    CLASS           reduce using rule 181 (data -> PROTECTED .)


state 64

    (182) data -> PUBLIC .

    CLASS           reduce using rule 182 (data -> PUBLIC .)


state 65

    (183) data -> STATIC .

    CLASS           reduce using rule 183 (data -> STATIC .)


state 66

    (184) data -> FINAL .

    CLASS           reduce using rule 184 (data -> FINAL .)


state 67

    (72) if -> IF . LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> IF . LPAREN conditions RPAREN body

    LPAREN          shift and go to state 115


state 68

    (99) for -> forStatement .

    VARIABLE        reduce using rule 99 (for -> forStatement .)
    ECHO            reduce using rule 99 (for -> forStatement .)
    PRINT           reduce using rule 99 (for -> forStatement .)
    TRY             reduce using rule 99 (for -> forStatement .)
    FUNCTION        reduce using rule 99 (for -> forStatement .)
    RETURN          reduce using rule 99 (for -> forStatement .)
    ID              reduce using rule 99 (for -> forStatement .)
    EMPTY           reduce using rule 99 (for -> forStatement .)
    CLASS           reduce using rule 99 (for -> forStatement .)
    INTERFACE       reduce using rule 99 (for -> forStatement .)
    INCLUDE         reduce using rule 99 (for -> forStatement .)
    NAMESPACE       reduce using rule 99 (for -> forStatement .)
    THROW           reduce using rule 99 (for -> forStatement .)
    CONST           reduce using rule 99 (for -> forStatement .)
    THIS            reduce using rule 99 (for -> forStatement .)
    INT             reduce using rule 99 (for -> forStatement .)
    FLOAT           reduce using rule 99 (for -> forStatement .)
    STRING          reduce using rule 99 (for -> forStatement .)
    BOOL            reduce using rule 99 (for -> forStatement .)
    NULL            reduce using rule 99 (for -> forStatement .)
    ARRAY           reduce using rule 99 (for -> forStatement .)
    ABSTRACT        reduce using rule 99 (for -> forStatement .)
    PRIVATE         reduce using rule 99 (for -> forStatement .)
    PROTECTED       reduce using rule 99 (for -> forStatement .)
    PUBLIC          reduce using rule 99 (for -> forStatement .)
    STATIC          reduce using rule 99 (for -> forStatement .)
    FINAL           reduce using rule 99 (for -> forStatement .)
    LPAREN          reduce using rule 99 (for -> forStatement .)
    IF              reduce using rule 99 (for -> forStatement .)
    WHILE           reduce using rule 99 (for -> forStatement .)
    DO              reduce using rule 99 (for -> forStatement .)
    SWITCH          reduce using rule 99 (for -> forStatement .)
    FOREACH         reduce using rule 99 (for -> forStatement .)
    FOR             reduce using rule 99 (for -> forStatement .)
    CLOSETAG        reduce using rule 99 (for -> forStatement .)
    RBRACE          reduce using rule 99 (for -> forStatement .)
    BREAK           reduce using rule 99 (for -> forStatement .)
    ENDSWITCH       reduce using rule 99 (for -> forStatement .)
    CASE            reduce using rule 99 (for -> forStatement .)
    DEFAULT         reduce using rule 99 (for -> forStatement .)


state 69

    (103) while -> WHILE . LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> WHILE . LPAREN condition RPAREN LBRACE RBRACE

    LPAREN          shift and go to state 116


state 70

    (105) dowhile -> DO . LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON

    LBRACE          shift and go to state 117


state 71

    (106) switch -> SWITCH . LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> SWITCH . LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON

    LPAREN          shift and go to state 118


state 72

    (114) foreach -> FOREACH . LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 119


state 73

    (124) array -> map .

    VARIABLE        reduce using rule 124 (array -> map .)
    ECHO            reduce using rule 124 (array -> map .)
    PRINT           reduce using rule 124 (array -> map .)
    TRY             reduce using rule 124 (array -> map .)
    FUNCTION        reduce using rule 124 (array -> map .)
    RETURN          reduce using rule 124 (array -> map .)
    ID              reduce using rule 124 (array -> map .)
    EMPTY           reduce using rule 124 (array -> map .)
    CLASS           reduce using rule 124 (array -> map .)
    INTERFACE       reduce using rule 124 (array -> map .)
    INCLUDE         reduce using rule 124 (array -> map .)
    NAMESPACE       reduce using rule 124 (array -> map .)
    THROW           reduce using rule 124 (array -> map .)
    CONST           reduce using rule 124 (array -> map .)
    THIS            reduce using rule 124 (array -> map .)
    INT             reduce using rule 124 (array -> map .)
    FLOAT           reduce using rule 124 (array -> map .)
    STRING          reduce using rule 124 (array -> map .)
    BOOL            reduce using rule 124 (array -> map .)
    NULL            reduce using rule 124 (array -> map .)
    ARRAY           reduce using rule 124 (array -> map .)
    ABSTRACT        reduce using rule 124 (array -> map .)
    PRIVATE         reduce using rule 124 (array -> map .)
    PROTECTED       reduce using rule 124 (array -> map .)
    PUBLIC          reduce using rule 124 (array -> map .)
    STATIC          reduce using rule 124 (array -> map .)
    FINAL           reduce using rule 124 (array -> map .)
    LPAREN          reduce using rule 124 (array -> map .)
    IF              reduce using rule 124 (array -> map .)
    WHILE           reduce using rule 124 (array -> map .)
    DO              reduce using rule 124 (array -> map .)
    SWITCH          reduce using rule 124 (array -> map .)
    FOREACH         reduce using rule 124 (array -> map .)
    FOR             reduce using rule 124 (array -> map .)
    CLOSETAG        reduce using rule 124 (array -> map .)
    RBRACE          reduce using rule 124 (array -> map .)
    BREAK           reduce using rule 124 (array -> map .)
    ENDSWITCH       reduce using rule 124 (array -> map .)
    CASE            reduce using rule 124 (array -> map .)
    DEFAULT         reduce using rule 124 (array -> map .)


state 74

    (100) forStatement -> FOR . LPAREN forcondition RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 120


state 75

    (1) inicio -> OPENTAG programa CLOSETAG .

    $end            reduce using rule 1 (inicio -> OPENTAG programa CLOSETAG .)


state 76

    (3) programa -> sentencia programa .

    CLOSETAG        reduce using rule 3 (programa -> sentencia programa .)


state 77

    (27) asignacion -> VARIABLE EQUALS . operaArit SEMICOLON
    (28) asignacion -> VARIABLE EQUALS . valor SEMICOLON
    (29) asignacion_fgets -> VARIABLE EQUALS . FGETS LPAREN STDIN RPAREN SEMICOLON
    (189) anonymousFunction -> VARIABLE EQUALS . FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (121) array -> VARIABLE EQUALS . arrays SEMICOLON
    (122) array -> VARIABLE EQUALS . LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> VARIABLE EQUALS . ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (128) map -> VARIABLE EQUALS . LBRACKET maps RBRACKET SEMICOLON
    (129) map -> VARIABLE EQUALS . ARRAY LPAREN maps RPAREN SEMICOLON
    (32) operaArit -> . valor
    (33) operaArit -> . valor operador operaArit
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (125) arrays -> . LBRACKET repiteValores RBRACKET
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    FGETS           shift and go to state 123
    FN              shift and go to state 124
    LBRACKET        shift and go to state 126
    ARRAY           shift and go to state 127
    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    operaArit                      shift and go to state 121
    valor                          shift and go to state 122
    arrays                         shift and go to state 125
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 78

    (156) objeto -> VARIABLE ARROW . ID LPAREN argumentos RPAREN SEMICOLON

    ID              shift and go to state 128


state 79

    (192) instance -> VARIABLE INSTANCEOF . ID

    ID              shift and go to state 129


state 80

    (196) concatenate -> VARIABLE CONCATENATEEQUAL . STRING

    STRING          shift and go to state 130


state 81

    (197) minuse -> VARIABLE MINUSEQUAL . INT

    INT             shift and go to state 131


state 82

    (50) comparacion -> valor comparador . valor
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    valor                          shift and go to state 132
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 83

    (51) comparador -> LT .

    INT             reduce using rule 51 (comparador -> LT .)
    VARIABLE        reduce using rule 51 (comparador -> LT .)
    FLOAT           reduce using rule 51 (comparador -> LT .)
    STRING          reduce using rule 51 (comparador -> LT .)
    BOOL            reduce using rule 51 (comparador -> LT .)
    NULL            reduce using rule 51 (comparador -> LT .)
    ARRAY           reduce using rule 51 (comparador -> LT .)
    ID              reduce using rule 51 (comparador -> LT .)
    EMPTY           reduce using rule 51 (comparador -> LT .)
    LPAREN          reduce using rule 51 (comparador -> LT .)


state 84

    (52) comparador -> GT .

    INT             reduce using rule 52 (comparador -> GT .)
    VARIABLE        reduce using rule 52 (comparador -> GT .)
    FLOAT           reduce using rule 52 (comparador -> GT .)
    STRING          reduce using rule 52 (comparador -> GT .)
    BOOL            reduce using rule 52 (comparador -> GT .)
    NULL            reduce using rule 52 (comparador -> GT .)
    ARRAY           reduce using rule 52 (comparador -> GT .)
    ID              reduce using rule 52 (comparador -> GT .)
    EMPTY           reduce using rule 52 (comparador -> GT .)
    LPAREN          reduce using rule 52 (comparador -> GT .)


state 85

    (53) comparador -> LEQ .

    INT             reduce using rule 53 (comparador -> LEQ .)
    VARIABLE        reduce using rule 53 (comparador -> LEQ .)
    FLOAT           reduce using rule 53 (comparador -> LEQ .)
    STRING          reduce using rule 53 (comparador -> LEQ .)
    BOOL            reduce using rule 53 (comparador -> LEQ .)
    NULL            reduce using rule 53 (comparador -> LEQ .)
    ARRAY           reduce using rule 53 (comparador -> LEQ .)
    ID              reduce using rule 53 (comparador -> LEQ .)
    EMPTY           reduce using rule 53 (comparador -> LEQ .)
    LPAREN          reduce using rule 53 (comparador -> LEQ .)


state 86

    (54) comparador -> GEQ .

    INT             reduce using rule 54 (comparador -> GEQ .)
    VARIABLE        reduce using rule 54 (comparador -> GEQ .)
    FLOAT           reduce using rule 54 (comparador -> GEQ .)
    STRING          reduce using rule 54 (comparador -> GEQ .)
    BOOL            reduce using rule 54 (comparador -> GEQ .)
    NULL            reduce using rule 54 (comparador -> GEQ .)
    ARRAY           reduce using rule 54 (comparador -> GEQ .)
    ID              reduce using rule 54 (comparador -> GEQ .)
    EMPTY           reduce using rule 54 (comparador -> GEQ .)
    LPAREN          reduce using rule 54 (comparador -> GEQ .)


state 87

    (79) conditions -> LPAREN . conditions RPAREN
    (30) operador_ternario -> LPAREN . conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> LPAREN . conditions RPAREN QUESTION COLON valor
    (77) conditions -> . condition
    (78) conditions -> . condition opLogic condition
    (79) conditions -> . LPAREN conditions RPAREN
    (80) condition -> . valor
    (81) condition -> . valor opSymbol valor
    (82) condition -> . NOT condition
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    LPAREN          shift and go to state 87
    NOT             shift and go to state 91
    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    conditions                     shift and go to state 133
    valor                          shift and go to state 89
    condition                      shift and go to state 90
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 88

    (30) operador_ternario -> LPAREN conditions . RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> LPAREN conditions . RPAREN QUESTION COLON valor

    RPAREN          shift and go to state 134


state 89

    (80) condition -> valor .
    (81) condition -> valor . opSymbol valor
    (83) opSymbol -> . EQ
    (84) opSymbol -> . NEQ
    (85) opSymbol -> . STRICTEQ
    (86) opSymbol -> . STRICTNEQ
    (87) opSymbol -> . LT
    (88) opSymbol -> . GT
    (89) opSymbol -> . LEQ
    (90) opSymbol -> . GEQ

    AND             reduce using rule 80 (condition -> valor .)
    LOGICAL_AND     reduce using rule 80 (condition -> valor .)
    OR              reduce using rule 80 (condition -> valor .)
    LOGICAL_OR      reduce using rule 80 (condition -> valor .)
    RPAREN          reduce using rule 80 (condition -> valor .)
    EQ              shift and go to state 136
    NEQ             shift and go to state 137
    STRICTEQ        shift and go to state 138
    STRICTNEQ       shift and go to state 139
    LT              shift and go to state 140
    GT              shift and go to state 141
    LEQ             shift and go to state 142
    GEQ             shift and go to state 143

    opSymbol                       shift and go to state 135

state 90

    (77) conditions -> condition .
    (78) conditions -> condition . opLogic condition
    (91) opLogic -> . AND
    (92) opLogic -> . LOGICAL_AND
    (93) opLogic -> . OR
    (94) opLogic -> . LOGICAL_OR

    RPAREN          reduce using rule 77 (conditions -> condition .)
    AND             shift and go to state 145
    LOGICAL_AND     shift and go to state 146
    OR              shift and go to state 147
    LOGICAL_OR      shift and go to state 148

    opLogic                        shift and go to state 144

state 91

    (82) condition -> NOT . condition
    (80) condition -> . valor
    (81) condition -> . valor opSymbol valor
    (82) condition -> . NOT condition
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    NOT             shift and go to state 91
    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    condition                      shift and go to state 149
    valor                          shift and go to state 89
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 92

    (35) valor -> VARIABLE .

    EQ              reduce using rule 35 (valor -> VARIABLE .)
    NEQ             reduce using rule 35 (valor -> VARIABLE .)
    STRICTEQ        reduce using rule 35 (valor -> VARIABLE .)
    STRICTNEQ       reduce using rule 35 (valor -> VARIABLE .)
    LT              reduce using rule 35 (valor -> VARIABLE .)
    GT              reduce using rule 35 (valor -> VARIABLE .)
    LEQ             reduce using rule 35 (valor -> VARIABLE .)
    GEQ             reduce using rule 35 (valor -> VARIABLE .)
    AND             reduce using rule 35 (valor -> VARIABLE .)
    LOGICAL_AND     reduce using rule 35 (valor -> VARIABLE .)
    OR              reduce using rule 35 (valor -> VARIABLE .)
    LOGICAL_OR      reduce using rule 35 (valor -> VARIABLE .)
    RPAREN          reduce using rule 35 (valor -> VARIABLE .)
    COMMA           reduce using rule 35 (valor -> VARIABLE .)
    SEMICOLON       reduce using rule 35 (valor -> VARIABLE .)
    PLUS            reduce using rule 35 (valor -> VARIABLE .)
    MINUS           reduce using rule 35 (valor -> VARIABLE .)
    TIMES           reduce using rule 35 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 35 (valor -> VARIABLE .)
    MODULO          reduce using rule 35 (valor -> VARIABLE .)
    POTENCIA        reduce using rule 35 (valor -> VARIABLE .)
    PLUSEQUAL       reduce using rule 35 (valor -> VARIABLE .)
    VARIABLE        reduce using rule 35 (valor -> VARIABLE .)
    ECHO            reduce using rule 35 (valor -> VARIABLE .)
    PRINT           reduce using rule 35 (valor -> VARIABLE .)
    TRY             reduce using rule 35 (valor -> VARIABLE .)
    FUNCTION        reduce using rule 35 (valor -> VARIABLE .)
    RETURN          reduce using rule 35 (valor -> VARIABLE .)
    ID              reduce using rule 35 (valor -> VARIABLE .)
    EMPTY           reduce using rule 35 (valor -> VARIABLE .)
    CLASS           reduce using rule 35 (valor -> VARIABLE .)
    INTERFACE       reduce using rule 35 (valor -> VARIABLE .)
    INCLUDE         reduce using rule 35 (valor -> VARIABLE .)
    NAMESPACE       reduce using rule 35 (valor -> VARIABLE .)
    THROW           reduce using rule 35 (valor -> VARIABLE .)
    CONST           reduce using rule 35 (valor -> VARIABLE .)
    THIS            reduce using rule 35 (valor -> VARIABLE .)
    INT             reduce using rule 35 (valor -> VARIABLE .)
    FLOAT           reduce using rule 35 (valor -> VARIABLE .)
    STRING          reduce using rule 35 (valor -> VARIABLE .)
    BOOL            reduce using rule 35 (valor -> VARIABLE .)
    NULL            reduce using rule 35 (valor -> VARIABLE .)
    ARRAY           reduce using rule 35 (valor -> VARIABLE .)
    ABSTRACT        reduce using rule 35 (valor -> VARIABLE .)
    PRIVATE         reduce using rule 35 (valor -> VARIABLE .)
    PROTECTED       reduce using rule 35 (valor -> VARIABLE .)
    PUBLIC          reduce using rule 35 (valor -> VARIABLE .)
    STATIC          reduce using rule 35 (valor -> VARIABLE .)
    FINAL           reduce using rule 35 (valor -> VARIABLE .)
    LPAREN          reduce using rule 35 (valor -> VARIABLE .)
    IF              reduce using rule 35 (valor -> VARIABLE .)
    WHILE           reduce using rule 35 (valor -> VARIABLE .)
    DO              reduce using rule 35 (valor -> VARIABLE .)
    SWITCH          reduce using rule 35 (valor -> VARIABLE .)
    FOREACH         reduce using rule 35 (valor -> VARIABLE .)
    FOR             reduce using rule 35 (valor -> VARIABLE .)
    CLOSETAG        reduce using rule 35 (valor -> VARIABLE .)
    RBRACE          reduce using rule 35 (valor -> VARIABLE .)
    BREAK           reduce using rule 35 (valor -> VARIABLE .)
    ENDSWITCH       reduce using rule 35 (valor -> VARIABLE .)
    CASE            reduce using rule 35 (valor -> VARIABLE .)
    DEFAULT         reduce using rule 35 (valor -> VARIABLE .)
    ARROWMAP        reduce using rule 35 (valor -> VARIABLE .)
    RBRACKET        reduce using rule 35 (valor -> VARIABLE .)
    COLON           reduce using rule 35 (valor -> VARIABLE .)


state 93

    (41) valor -> llamadaFuncion .

    EQ              reduce using rule 41 (valor -> llamadaFuncion .)
    NEQ             reduce using rule 41 (valor -> llamadaFuncion .)
    STRICTEQ        reduce using rule 41 (valor -> llamadaFuncion .)
    STRICTNEQ       reduce using rule 41 (valor -> llamadaFuncion .)
    LT              reduce using rule 41 (valor -> llamadaFuncion .)
    GT              reduce using rule 41 (valor -> llamadaFuncion .)
    LEQ             reduce using rule 41 (valor -> llamadaFuncion .)
    GEQ             reduce using rule 41 (valor -> llamadaFuncion .)
    AND             reduce using rule 41 (valor -> llamadaFuncion .)
    LOGICAL_AND     reduce using rule 41 (valor -> llamadaFuncion .)
    OR              reduce using rule 41 (valor -> llamadaFuncion .)
    LOGICAL_OR      reduce using rule 41 (valor -> llamadaFuncion .)
    RPAREN          reduce using rule 41 (valor -> llamadaFuncion .)
    COMMA           reduce using rule 41 (valor -> llamadaFuncion .)
    SEMICOLON       reduce using rule 41 (valor -> llamadaFuncion .)
    PLUS            reduce using rule 41 (valor -> llamadaFuncion .)
    MINUS           reduce using rule 41 (valor -> llamadaFuncion .)
    TIMES           reduce using rule 41 (valor -> llamadaFuncion .)
    DIVIDE          reduce using rule 41 (valor -> llamadaFuncion .)
    MODULO          reduce using rule 41 (valor -> llamadaFuncion .)
    POTENCIA        reduce using rule 41 (valor -> llamadaFuncion .)
    PLUSEQUAL       reduce using rule 41 (valor -> llamadaFuncion .)
    VARIABLE        reduce using rule 41 (valor -> llamadaFuncion .)
    ECHO            reduce using rule 41 (valor -> llamadaFuncion .)
    PRINT           reduce using rule 41 (valor -> llamadaFuncion .)
    TRY             reduce using rule 41 (valor -> llamadaFuncion .)
    FUNCTION        reduce using rule 41 (valor -> llamadaFuncion .)
    RETURN          reduce using rule 41 (valor -> llamadaFuncion .)
    ID              reduce using rule 41 (valor -> llamadaFuncion .)
    EMPTY           reduce using rule 41 (valor -> llamadaFuncion .)
    CLASS           reduce using rule 41 (valor -> llamadaFuncion .)
    INTERFACE       reduce using rule 41 (valor -> llamadaFuncion .)
    INCLUDE         reduce using rule 41 (valor -> llamadaFuncion .)
    NAMESPACE       reduce using rule 41 (valor -> llamadaFuncion .)
    THROW           reduce using rule 41 (valor -> llamadaFuncion .)
    CONST           reduce using rule 41 (valor -> llamadaFuncion .)
    THIS            reduce using rule 41 (valor -> llamadaFuncion .)
    INT             reduce using rule 41 (valor -> llamadaFuncion .)
    FLOAT           reduce using rule 41 (valor -> llamadaFuncion .)
    STRING          reduce using rule 41 (valor -> llamadaFuncion .)
    BOOL            reduce using rule 41 (valor -> llamadaFuncion .)
    NULL            reduce using rule 41 (valor -> llamadaFuncion .)
    ARRAY           reduce using rule 41 (valor -> llamadaFuncion .)
    ABSTRACT        reduce using rule 41 (valor -> llamadaFuncion .)
    PRIVATE         reduce using rule 41 (valor -> llamadaFuncion .)
    PROTECTED       reduce using rule 41 (valor -> llamadaFuncion .)
    PUBLIC          reduce using rule 41 (valor -> llamadaFuncion .)
    STATIC          reduce using rule 41 (valor -> llamadaFuncion .)
    FINAL           reduce using rule 41 (valor -> llamadaFuncion .)
    LPAREN          reduce using rule 41 (valor -> llamadaFuncion .)
    IF              reduce using rule 41 (valor -> llamadaFuncion .)
    WHILE           reduce using rule 41 (valor -> llamadaFuncion .)
    DO              reduce using rule 41 (valor -> llamadaFuncion .)
    SWITCH          reduce using rule 41 (valor -> llamadaFuncion .)
    FOREACH         reduce using rule 41 (valor -> llamadaFuncion .)
    FOR             reduce using rule 41 (valor -> llamadaFuncion .)
    CLOSETAG        reduce using rule 41 (valor -> llamadaFuncion .)
    RBRACE          reduce using rule 41 (valor -> llamadaFuncion .)
    BREAK           reduce using rule 41 (valor -> llamadaFuncion .)
    ENDSWITCH       reduce using rule 41 (valor -> llamadaFuncion .)
    CASE            reduce using rule 41 (valor -> llamadaFuncion .)
    DEFAULT         reduce using rule 41 (valor -> llamadaFuncion .)
    ARROWMAP        reduce using rule 41 (valor -> llamadaFuncion .)
    RBRACKET        reduce using rule 41 (valor -> llamadaFuncion .)
    COLON           reduce using rule 41 (valor -> llamadaFuncion .)


state 94

    (55) impresion -> ECHO imprimir . SEMICOLON

    SEMICOLON       shift and go to state 150


state 95

    (57) imprimir -> LPAREN . repiteValores RPAREN
    (58) imprimir -> LPAREN . RPAREN
    (30) operador_ternario -> LPAREN . conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> LPAREN . conditions RPAREN QUESTION COLON valor
    (61) repiteValores -> . valor
    (62) repiteValores -> . valor COMMA repiteValores
    (77) conditions -> . condition
    (78) conditions -> . condition opLogic condition
    (79) conditions -> . LPAREN conditions RPAREN
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (80) condition -> . valor
    (81) condition -> . valor opSymbol valor
    (82) condition -> . NOT condition
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    RPAREN          shift and go to state 152
    LPAREN          shift and go to state 87
    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    NOT             shift and go to state 91
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    repiteValores                  shift and go to state 151
    conditions                     shift and go to state 88
    valor                          shift and go to state 153
    condition                      shift and go to state 90
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 96

    (59) imprimir -> repiteValores .

    SEMICOLON       reduce using rule 59 (imprimir -> repiteValores .)


state 97

    (60) imprimir -> empty .

    SEMICOLON       reduce using rule 60 (imprimir -> empty .)


state 98

    (61) repiteValores -> valor .
    (62) repiteValores -> valor . COMMA repiteValores

    SEMICOLON       reduce using rule 61 (repiteValores -> valor .)
    RPAREN          reduce using rule 61 (repiteValores -> valor .)
    RBRACKET        reduce using rule 61 (repiteValores -> valor .)
    COMMA           shift and go to state 154


state 99

    (56) impresion -> PRINT imprimir . SEMICOLON

    SEMICOLON       shift and go to state 155


state 100

    (151) try -> TRY LBRACE . body RBRACE catchs
    (152) try -> TRY LBRACE . body RBRACE catchs FINALLY LBRACE body RBRACE
    (95) body -> . sentenciaList
    (96) body -> . empty
    (97) sentenciaList -> . sentencia
    (98) sentenciaList -> . sentencia sentenciaList
    (63) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (29) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) comparacion -> . valor comparador valor
    (55) impresion -> . ECHO imprimir SEMICOLON
    (56) impresion -> . PRINT imprimir SEMICOLON
    (64) estructurasPrograma -> . controlStructure
    (65) estructurasPrograma -> . dataStructure
    (151) try -> . TRY LBRACE body RBRACE catchs
    (152) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (157) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN valor SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (162) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (163) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (164) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (165) classDeclarate -> . classInterface
    (185) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (156) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (186) includes -> . INCLUDE STRING SEMICOLON
    (187) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (188) namespace -> . NAMESPACE ID SEMICOLON
    (189) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (190) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> . THROW valor SEMICOLON
    (192) instance -> . VARIABLE INSTANCEOF ID
    (193) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (194) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (195) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (196) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (197) minuse -> . VARIABLE MINUSEQUAL INT
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (66) controlStructure -> . if
    (67) controlStructure -> . for
    (68) controlStructure -> . while
    (69) controlStructure -> . dowhile
    (70) controlStructure -> . switch
    (71) controlStructure -> . foreach
    (120) dataStructure -> . array
    (179) data -> . ABSTRACT
    (180) data -> . PRIVATE
    (181) data -> . PROTECTED
    (182) data -> . PUBLIC
    (183) data -> . STATIC
    (184) data -> . FINAL
    (173) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (175) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (72) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> . IF LPAREN conditions RPAREN body
    (99) for -> . forStatement
    (103) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (105) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (106) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (114) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (121) array -> . VARIABLE EQUALS arrays SEMICOLON
    (122) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (124) array -> . map
    (100) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (128) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 63 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 61
    PRIVATE         shift and go to state 62
    PROTECTED       shift and go to state 63
    PUBLIC          shift and go to state 64
    STATIC          shift and go to state 65
    FINAL           shift and go to state 66
    LPAREN          shift and go to state 28
    IF              shift and go to state 67
    WHILE           shift and go to state 69
    DO              shift and go to state 70
    SWITCH          shift and go to state 71
    FOREACH         shift and go to state 72
    FOR             shift and go to state 74

    body                           shift and go to state 156
    sentenciaList                  shift and go to state 157
    empty                          shift and go to state 158
    sentencia                      shift and go to state 159
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    valor                          shift and go to state 27
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    operador_ternario              shift and go to state 53
    if                             shift and go to state 54
    for                            shift and go to state 55
    while                          shift and go to state 56
    dowhile                        shift and go to state 57
    switch                         shift and go to state 58
    foreach                        shift and go to state 59
    array                          shift and go to state 60
    forStatement                   shift and go to state 68
    map                            shift and go to state 73

state 101

    (157) funcionDeclaration -> FUNCTION ID . LPAREN argumentos RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 160


state 102

    (158) llamadaFuncion -> ID LPAREN . argumentos RPAREN SEMICOLON
    (160) llamadaFuncion -> ID LPAREN . argumentos RPAREN
    (138) argumentos -> . argumento
    (139) argumentos -> . argumento COMMA argumentos
    (140) argumentos -> . empty
    (141) argumento -> . type VARIABLE
    (142) argumento -> . VARIABLE EQUALS valor
    (143) argumento -> . type VARIABLE EQUALS valor
    (144) argumento -> . operaArit
    (63) empty -> .
    (145) type -> . INT_TYPE
    (146) type -> . FLOAT_TYPE
    (147) type -> . STRING_TYPE
    (148) type -> . BOOL_TYPE
    (149) type -> . ARRAY_TYPE
    (150) type -> . VOID
    (32) operaArit -> . valor
    (33) operaArit -> . valor operador operaArit
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    VARIABLE        shift and go to state 165
    RPAREN          reduce using rule 63 (empty -> .)
    INT_TYPE        shift and go to state 168
    FLOAT_TYPE      shift and go to state 169
    STRING_TYPE     shift and go to state 170
    BOOL_TYPE       shift and go to state 171
    ARRAY_TYPE      shift and go to state 172
    VOID            shift and go to state 173
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    argumentos                     shift and go to state 161
    argumento                      shift and go to state 162
    empty                          shift and go to state 163
    type                           shift and go to state 164
    valor                          shift and go to state 166
    operaArit                      shift and go to state 167
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 103

    (25) returnStatement -> RETURN valor . SEMICOLON

    SEMICOLON       shift and go to state 174


state 104

    (26) returnStatement -> RETURN SEMICOLON .

    VARIABLE        reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    ECHO            reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    PRINT           reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    TRY             reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    FUNCTION        reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    ID              reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    EMPTY           reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    CLASS           reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    INTERFACE       reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    INCLUDE         reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    NAMESPACE       reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    THROW           reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    CONST           reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    THIS            reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    INT             reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    STRING          reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    BOOL            reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    NULL            reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    ARRAY           reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    ABSTRACT        reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    PRIVATE         reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    PROTECTED       reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    PUBLIC          reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    STATIC          reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    FINAL           reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    IF              reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    DO              reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    FOREACH         reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    FOR             reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    CLOSETAG        reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    ENDSWITCH       reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    CASE            reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 26 (returnStatement -> RETURN SEMICOLON .)


state 105

    (159) llamadaFuncion -> EMPTY LPAREN . argumentos RPAREN
    (161) llamadaFuncion -> EMPTY LPAREN . argumentos RPAREN SEMICOLON
    (138) argumentos -> . argumento
    (139) argumentos -> . argumento COMMA argumentos
    (140) argumentos -> . empty
    (141) argumento -> . type VARIABLE
    (142) argumento -> . VARIABLE EQUALS valor
    (143) argumento -> . type VARIABLE EQUALS valor
    (144) argumento -> . operaArit
    (63) empty -> .
    (145) type -> . INT_TYPE
    (146) type -> . FLOAT_TYPE
    (147) type -> . STRING_TYPE
    (148) type -> . BOOL_TYPE
    (149) type -> . ARRAY_TYPE
    (150) type -> . VOID
    (32) operaArit -> . valor
    (33) operaArit -> . valor operador operaArit
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    VARIABLE        shift and go to state 165
    RPAREN          reduce using rule 63 (empty -> .)
    INT_TYPE        shift and go to state 168
    FLOAT_TYPE      shift and go to state 169
    STRING_TYPE     shift and go to state 170
    BOOL_TYPE       shift and go to state 171
    ARRAY_TYPE      shift and go to state 172
    VOID            shift and go to state 173
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    argumentos                     shift and go to state 175
    argumento                      shift and go to state 162
    empty                          shift and go to state 163
    type                           shift and go to state 164
    valor                          shift and go to state 166
    operaArit                      shift and go to state 167
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 106

    (162) classDeclarate -> CLASS ID . LBRACE classBody RBRACE
    (163) classDeclarate -> CLASS ID . EXTENDS ID LBRACE classBody RBRACE
    (173) classInterface -> CLASS ID . IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> CLASS ID . EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    LBRACE          shift and go to state 176
    EXTENDS         shift and go to state 177
    IMPLEMENTS      shift and go to state 178


state 107

    (164) classDeclarate -> data CLASS . ID LBRACE classBody RBRACE
    (175) classInterface -> data CLASS . ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> data CLASS . ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    ID              shift and go to state 179


state 108

    (185) interface -> INTERFACE ID . LBRACE classBody RBRACE

    LBRACE          shift and go to state 180


state 109

    (186) includes -> INCLUDE STRING . SEMICOLON
    (187) includes -> INCLUDE STRING . DOT STRING SEMICOLON

    SEMICOLON       shift and go to state 181
    DOT             shift and go to state 182


state 110

    (188) namespace -> NAMESPACE ID . SEMICOLON

    SEMICOLON       shift and go to state 183


state 111

    (190) throw -> THROW NEW . EXCEPTION LPAREN repiteValores RPAREN SEMICOLON

    EXCEPTION       shift and go to state 184


state 112

    (191) throw -> THROW valor . SEMICOLON

    SEMICOLON       shift and go to state 185


state 113

    (193) constdeclaration -> CONST ID . EQUALS valor SEMICOLON

    EQUALS          shift and go to state 186


state 114

    (194) thisdeclaration -> THIS ARROW . ID SEMICOLON
    (195) thisdeclaration -> THIS ARROW . ID LPAREN RPAREN SEMICOLON

    ID              shift and go to state 187


state 115

    (72) if -> IF LPAREN . conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> IF LPAREN . conditions RPAREN body
    (77) conditions -> . condition
    (78) conditions -> . condition opLogic condition
    (79) conditions -> . LPAREN conditions RPAREN
    (80) condition -> . valor
    (81) condition -> . valor opSymbol valor
    (82) condition -> . NOT condition
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    LPAREN          shift and go to state 87
    NOT             shift and go to state 91
    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    conditions                     shift and go to state 188
    condition                      shift and go to state 90
    valor                          shift and go to state 89
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 116

    (103) while -> WHILE LPAREN . condition RPAREN LBRACE body RBRACE
    (104) while -> WHILE LPAREN . condition RPAREN LBRACE RBRACE
    (80) condition -> . valor
    (81) condition -> . valor opSymbol valor
    (82) condition -> . NOT condition
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    NOT             shift and go to state 91
    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    condition                      shift and go to state 189
    valor                          shift and go to state 89
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 117

    (105) dowhile -> DO LBRACE . body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (95) body -> . sentenciaList
    (96) body -> . empty
    (97) sentenciaList -> . sentencia
    (98) sentenciaList -> . sentencia sentenciaList
    (63) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (29) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) comparacion -> . valor comparador valor
    (55) impresion -> . ECHO imprimir SEMICOLON
    (56) impresion -> . PRINT imprimir SEMICOLON
    (64) estructurasPrograma -> . controlStructure
    (65) estructurasPrograma -> . dataStructure
    (151) try -> . TRY LBRACE body RBRACE catchs
    (152) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (157) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN valor SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (162) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (163) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (164) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (165) classDeclarate -> . classInterface
    (185) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (156) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (186) includes -> . INCLUDE STRING SEMICOLON
    (187) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (188) namespace -> . NAMESPACE ID SEMICOLON
    (189) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (190) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> . THROW valor SEMICOLON
    (192) instance -> . VARIABLE INSTANCEOF ID
    (193) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (194) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (195) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (196) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (197) minuse -> . VARIABLE MINUSEQUAL INT
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (66) controlStructure -> . if
    (67) controlStructure -> . for
    (68) controlStructure -> . while
    (69) controlStructure -> . dowhile
    (70) controlStructure -> . switch
    (71) controlStructure -> . foreach
    (120) dataStructure -> . array
    (179) data -> . ABSTRACT
    (180) data -> . PRIVATE
    (181) data -> . PROTECTED
    (182) data -> . PUBLIC
    (183) data -> . STATIC
    (184) data -> . FINAL
    (173) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (175) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (72) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> . IF LPAREN conditions RPAREN body
    (99) for -> . forStatement
    (103) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (105) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (106) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (114) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (121) array -> . VARIABLE EQUALS arrays SEMICOLON
    (122) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (124) array -> . map
    (100) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (128) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 63 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 61
    PRIVATE         shift and go to state 62
    PROTECTED       shift and go to state 63
    PUBLIC          shift and go to state 64
    STATIC          shift and go to state 65
    FINAL           shift and go to state 66
    LPAREN          shift and go to state 28
    IF              shift and go to state 67
    WHILE           shift and go to state 69
    DO              shift and go to state 70
    SWITCH          shift and go to state 71
    FOREACH         shift and go to state 72
    FOR             shift and go to state 74

    body                           shift and go to state 190
    sentenciaList                  shift and go to state 157
    empty                          shift and go to state 158
    sentencia                      shift and go to state 159
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    valor                          shift and go to state 27
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    operador_ternario              shift and go to state 53
    if                             shift and go to state 54
    for                            shift and go to state 55
    while                          shift and go to state 56
    dowhile                        shift and go to state 57
    switch                         shift and go to state 58
    foreach                        shift and go to state 59
    array                          shift and go to state 60
    forStatement                   shift and go to state 68
    map                            shift and go to state 73

state 118

    (106) switch -> SWITCH LPAREN . valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> SWITCH LPAREN . valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    valor                          shift and go to state 191
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 119

    (114) foreach -> FOREACH LPAREN . VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE

    VARIABLE        shift and go to state 192


state 120

    (100) forStatement -> FOR LPAREN . forcondition RPAREN LBRACE body RBRACE
    (101) forcondition -> . VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (102) forcondition -> . VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    VARIABLE        shift and go to state 194

    forcondition                   shift and go to state 193

state 121

    (27) asignacion -> VARIABLE EQUALS operaArit . SEMICOLON

    SEMICOLON       shift and go to state 195


state 122

    (28) asignacion -> VARIABLE EQUALS valor . SEMICOLON
    (32) operaArit -> valor .
    (33) operaArit -> valor . operador operaArit
    (43) operador -> . PLUS
    (44) operador -> . MINUS
    (45) operador -> . TIMES
    (46) operador -> . DIVIDE
    (47) operador -> . MODULO
    (48) operador -> . POTENCIA
    (49) operador -> . PLUSEQUAL

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 196
    PLUS            shift and go to state 198
    MINUS           shift and go to state 199
    TIMES           shift and go to state 200
    DIVIDE          shift and go to state 201
    MODULO          shift and go to state 202
    POTENCIA        shift and go to state 203
    PLUSEQUAL       shift and go to state 204

  ! SEMICOLON       [ reduce using rule 32 (operaArit -> valor .) ]

    operador                       shift and go to state 197

state 123

    (29) asignacion_fgets -> VARIABLE EQUALS FGETS . LPAREN STDIN RPAREN SEMICOLON

    LPAREN          shift and go to state 205


state 124

    (189) anonymousFunction -> VARIABLE EQUALS FN . LPAREN RPAREN ARROWMAP comparacion SEMICOLON

    LPAREN          shift and go to state 206


state 125

    (121) array -> VARIABLE EQUALS arrays . SEMICOLON

    SEMICOLON       shift and go to state 207


state 126

    (122) array -> VARIABLE EQUALS LBRACKET . arrayAnidado RBRACKET SEMICOLON
    (128) map -> VARIABLE EQUALS LBRACKET . maps RBRACKET SEMICOLON
    (125) arrays -> LBRACKET . repiteValores RBRACKET
    (126) arrayAnidado -> . arrays
    (127) arrayAnidado -> . arrays COMMA arrayAnidado
    (130) maps -> . mapArrow
    (131) maps -> . mapArrow COMMA maps
    (61) repiteValores -> . valor
    (62) repiteValores -> . valor COMMA repiteValores
    (125) arrays -> . LBRACKET repiteValores RBRACKET
    (132) mapArrow -> . valor ARROWMAP valor
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    LBRACKET        shift and go to state 208
    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    arrayAnidado                   shift and go to state 209
    maps                           shift and go to state 210
    repiteValores                  shift and go to state 211
    arrays                         shift and go to state 212
    mapArrow                       shift and go to state 213
    valor                          shift and go to state 214
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 127

    (123) array -> VARIABLE EQUALS ARRAY . LPAREN repiteValores RPAREN SEMICOLON
    (129) map -> VARIABLE EQUALS ARRAY . LPAREN maps RPAREN SEMICOLON
    (40) valor -> ARRAY .

    LPAREN          shift and go to state 215
    SEMICOLON       reduce using rule 40 (valor -> ARRAY .)
    PLUS            reduce using rule 40 (valor -> ARRAY .)
    MINUS           reduce using rule 40 (valor -> ARRAY .)
    TIMES           reduce using rule 40 (valor -> ARRAY .)
    DIVIDE          reduce using rule 40 (valor -> ARRAY .)
    MODULO          reduce using rule 40 (valor -> ARRAY .)
    POTENCIA        reduce using rule 40 (valor -> ARRAY .)
    PLUSEQUAL       reduce using rule 40 (valor -> ARRAY .)


state 128

    (156) objeto -> VARIABLE ARROW ID . LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 216


state 129

    (192) instance -> VARIABLE INSTANCEOF ID .

    VARIABLE        reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    ECHO            reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    PRINT           reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    TRY             reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    FUNCTION        reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    RETURN          reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    ID              reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    EMPTY           reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    CLASS           reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    INTERFACE       reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    INCLUDE         reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    NAMESPACE       reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    THROW           reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    CONST           reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    THIS            reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    INT             reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    FLOAT           reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    STRING          reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    BOOL            reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    NULL            reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    ARRAY           reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    ABSTRACT        reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    PRIVATE         reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    PROTECTED       reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    PUBLIC          reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    STATIC          reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    FINAL           reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    LPAREN          reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    IF              reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    WHILE           reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    DO              reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    SWITCH          reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    FOREACH         reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    FOR             reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    CLOSETAG        reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    RBRACE          reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    BREAK           reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    ENDSWITCH       reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    CASE            reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)
    DEFAULT         reduce using rule 192 (instance -> VARIABLE INSTANCEOF ID .)


state 130

    (196) concatenate -> VARIABLE CONCATENATEEQUAL STRING .

    VARIABLE        reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    ECHO            reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    PRINT           reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    TRY             reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    FUNCTION        reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    RETURN          reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    ID              reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    EMPTY           reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    CLASS           reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    INTERFACE       reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    INCLUDE         reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    NAMESPACE       reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    THROW           reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    CONST           reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    THIS            reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    INT             reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    FLOAT           reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    STRING          reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    BOOL            reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    NULL            reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    ARRAY           reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    ABSTRACT        reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    PRIVATE         reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    PROTECTED       reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    PUBLIC          reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    STATIC          reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    FINAL           reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    LPAREN          reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    IF              reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    WHILE           reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    DO              reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    SWITCH          reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    FOREACH         reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    FOR             reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    CLOSETAG        reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    RBRACE          reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    BREAK           reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    ENDSWITCH       reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    CASE            reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    DEFAULT         reduce using rule 196 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)


state 131

    (197) minuse -> VARIABLE MINUSEQUAL INT .

    VARIABLE        reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    ECHO            reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    PRINT           reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    TRY             reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    FUNCTION        reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    RETURN          reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    ID              reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    EMPTY           reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    CLASS           reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    INTERFACE       reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    INCLUDE         reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    NAMESPACE       reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    THROW           reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    CONST           reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    THIS            reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    INT             reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    FLOAT           reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    STRING          reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    BOOL            reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    NULL            reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    ARRAY           reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    ABSTRACT        reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    PRIVATE         reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    PROTECTED       reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    PUBLIC          reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    STATIC          reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    FINAL           reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    LPAREN          reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    IF              reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    WHILE           reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    DO              reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    SWITCH          reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    FOREACH         reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    FOR             reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    CLOSETAG        reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    RBRACE          reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    BREAK           reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    ENDSWITCH       reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    CASE            reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)
    DEFAULT         reduce using rule 197 (minuse -> VARIABLE MINUSEQUAL INT .)


state 132

    (50) comparacion -> valor comparador valor .

    VARIABLE        reduce using rule 50 (comparacion -> valor comparador valor .)
    ECHO            reduce using rule 50 (comparacion -> valor comparador valor .)
    PRINT           reduce using rule 50 (comparacion -> valor comparador valor .)
    TRY             reduce using rule 50 (comparacion -> valor comparador valor .)
    FUNCTION        reduce using rule 50 (comparacion -> valor comparador valor .)
    RETURN          reduce using rule 50 (comparacion -> valor comparador valor .)
    ID              reduce using rule 50 (comparacion -> valor comparador valor .)
    EMPTY           reduce using rule 50 (comparacion -> valor comparador valor .)
    CLASS           reduce using rule 50 (comparacion -> valor comparador valor .)
    INTERFACE       reduce using rule 50 (comparacion -> valor comparador valor .)
    INCLUDE         reduce using rule 50 (comparacion -> valor comparador valor .)
    NAMESPACE       reduce using rule 50 (comparacion -> valor comparador valor .)
    THROW           reduce using rule 50 (comparacion -> valor comparador valor .)
    CONST           reduce using rule 50 (comparacion -> valor comparador valor .)
    THIS            reduce using rule 50 (comparacion -> valor comparador valor .)
    INT             reduce using rule 50 (comparacion -> valor comparador valor .)
    FLOAT           reduce using rule 50 (comparacion -> valor comparador valor .)
    STRING          reduce using rule 50 (comparacion -> valor comparador valor .)
    BOOL            reduce using rule 50 (comparacion -> valor comparador valor .)
    NULL            reduce using rule 50 (comparacion -> valor comparador valor .)
    ARRAY           reduce using rule 50 (comparacion -> valor comparador valor .)
    ABSTRACT        reduce using rule 50 (comparacion -> valor comparador valor .)
    PRIVATE         reduce using rule 50 (comparacion -> valor comparador valor .)
    PROTECTED       reduce using rule 50 (comparacion -> valor comparador valor .)
    PUBLIC          reduce using rule 50 (comparacion -> valor comparador valor .)
    STATIC          reduce using rule 50 (comparacion -> valor comparador valor .)
    FINAL           reduce using rule 50 (comparacion -> valor comparador valor .)
    LPAREN          reduce using rule 50 (comparacion -> valor comparador valor .)
    IF              reduce using rule 50 (comparacion -> valor comparador valor .)
    WHILE           reduce using rule 50 (comparacion -> valor comparador valor .)
    DO              reduce using rule 50 (comparacion -> valor comparador valor .)
    SWITCH          reduce using rule 50 (comparacion -> valor comparador valor .)
    FOREACH         reduce using rule 50 (comparacion -> valor comparador valor .)
    FOR             reduce using rule 50 (comparacion -> valor comparador valor .)
    CLOSETAG        reduce using rule 50 (comparacion -> valor comparador valor .)
    RBRACE          reduce using rule 50 (comparacion -> valor comparador valor .)
    BREAK           reduce using rule 50 (comparacion -> valor comparador valor .)
    ENDSWITCH       reduce using rule 50 (comparacion -> valor comparador valor .)
    CASE            reduce using rule 50 (comparacion -> valor comparador valor .)
    DEFAULT         reduce using rule 50 (comparacion -> valor comparador valor .)
    SEMICOLON       reduce using rule 50 (comparacion -> valor comparador valor .)


state 133

    (79) conditions -> LPAREN conditions . RPAREN
    (30) operador_ternario -> LPAREN conditions . RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> LPAREN conditions . RPAREN QUESTION COLON valor

    RPAREN          shift and go to state 217


state 134

    (30) operador_ternario -> LPAREN conditions RPAREN . QUESTION valor COLON valor
    (31) operador_ternario -> LPAREN conditions RPAREN . QUESTION COLON valor

    QUESTION        shift and go to state 218


state 135

    (81) condition -> valor opSymbol . valor
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    valor                          shift and go to state 219
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 136

    (83) opSymbol -> EQ .

    INT             reduce using rule 83 (opSymbol -> EQ .)
    VARIABLE        reduce using rule 83 (opSymbol -> EQ .)
    FLOAT           reduce using rule 83 (opSymbol -> EQ .)
    STRING          reduce using rule 83 (opSymbol -> EQ .)
    BOOL            reduce using rule 83 (opSymbol -> EQ .)
    NULL            reduce using rule 83 (opSymbol -> EQ .)
    ARRAY           reduce using rule 83 (opSymbol -> EQ .)
    ID              reduce using rule 83 (opSymbol -> EQ .)
    EMPTY           reduce using rule 83 (opSymbol -> EQ .)
    LPAREN          reduce using rule 83 (opSymbol -> EQ .)


state 137

    (84) opSymbol -> NEQ .

    INT             reduce using rule 84 (opSymbol -> NEQ .)
    VARIABLE        reduce using rule 84 (opSymbol -> NEQ .)
    FLOAT           reduce using rule 84 (opSymbol -> NEQ .)
    STRING          reduce using rule 84 (opSymbol -> NEQ .)
    BOOL            reduce using rule 84 (opSymbol -> NEQ .)
    NULL            reduce using rule 84 (opSymbol -> NEQ .)
    ARRAY           reduce using rule 84 (opSymbol -> NEQ .)
    ID              reduce using rule 84 (opSymbol -> NEQ .)
    EMPTY           reduce using rule 84 (opSymbol -> NEQ .)
    LPAREN          reduce using rule 84 (opSymbol -> NEQ .)


state 138

    (85) opSymbol -> STRICTEQ .

    INT             reduce using rule 85 (opSymbol -> STRICTEQ .)
    VARIABLE        reduce using rule 85 (opSymbol -> STRICTEQ .)
    FLOAT           reduce using rule 85 (opSymbol -> STRICTEQ .)
    STRING          reduce using rule 85 (opSymbol -> STRICTEQ .)
    BOOL            reduce using rule 85 (opSymbol -> STRICTEQ .)
    NULL            reduce using rule 85 (opSymbol -> STRICTEQ .)
    ARRAY           reduce using rule 85 (opSymbol -> STRICTEQ .)
    ID              reduce using rule 85 (opSymbol -> STRICTEQ .)
    EMPTY           reduce using rule 85 (opSymbol -> STRICTEQ .)
    LPAREN          reduce using rule 85 (opSymbol -> STRICTEQ .)


state 139

    (86) opSymbol -> STRICTNEQ .

    INT             reduce using rule 86 (opSymbol -> STRICTNEQ .)
    VARIABLE        reduce using rule 86 (opSymbol -> STRICTNEQ .)
    FLOAT           reduce using rule 86 (opSymbol -> STRICTNEQ .)
    STRING          reduce using rule 86 (opSymbol -> STRICTNEQ .)
    BOOL            reduce using rule 86 (opSymbol -> STRICTNEQ .)
    NULL            reduce using rule 86 (opSymbol -> STRICTNEQ .)
    ARRAY           reduce using rule 86 (opSymbol -> STRICTNEQ .)
    ID              reduce using rule 86 (opSymbol -> STRICTNEQ .)
    EMPTY           reduce using rule 86 (opSymbol -> STRICTNEQ .)
    LPAREN          reduce using rule 86 (opSymbol -> STRICTNEQ .)


state 140

    (87) opSymbol -> LT .

    INT             reduce using rule 87 (opSymbol -> LT .)
    VARIABLE        reduce using rule 87 (opSymbol -> LT .)
    FLOAT           reduce using rule 87 (opSymbol -> LT .)
    STRING          reduce using rule 87 (opSymbol -> LT .)
    BOOL            reduce using rule 87 (opSymbol -> LT .)
    NULL            reduce using rule 87 (opSymbol -> LT .)
    ARRAY           reduce using rule 87 (opSymbol -> LT .)
    ID              reduce using rule 87 (opSymbol -> LT .)
    EMPTY           reduce using rule 87 (opSymbol -> LT .)
    LPAREN          reduce using rule 87 (opSymbol -> LT .)


state 141

    (88) opSymbol -> GT .

    INT             reduce using rule 88 (opSymbol -> GT .)
    VARIABLE        reduce using rule 88 (opSymbol -> GT .)
    FLOAT           reduce using rule 88 (opSymbol -> GT .)
    STRING          reduce using rule 88 (opSymbol -> GT .)
    BOOL            reduce using rule 88 (opSymbol -> GT .)
    NULL            reduce using rule 88 (opSymbol -> GT .)
    ARRAY           reduce using rule 88 (opSymbol -> GT .)
    ID              reduce using rule 88 (opSymbol -> GT .)
    EMPTY           reduce using rule 88 (opSymbol -> GT .)
    LPAREN          reduce using rule 88 (opSymbol -> GT .)


state 142

    (89) opSymbol -> LEQ .

    INT             reduce using rule 89 (opSymbol -> LEQ .)
    VARIABLE        reduce using rule 89 (opSymbol -> LEQ .)
    FLOAT           reduce using rule 89 (opSymbol -> LEQ .)
    STRING          reduce using rule 89 (opSymbol -> LEQ .)
    BOOL            reduce using rule 89 (opSymbol -> LEQ .)
    NULL            reduce using rule 89 (opSymbol -> LEQ .)
    ARRAY           reduce using rule 89 (opSymbol -> LEQ .)
    ID              reduce using rule 89 (opSymbol -> LEQ .)
    EMPTY           reduce using rule 89 (opSymbol -> LEQ .)
    LPAREN          reduce using rule 89 (opSymbol -> LEQ .)


state 143

    (90) opSymbol -> GEQ .

    INT             reduce using rule 90 (opSymbol -> GEQ .)
    VARIABLE        reduce using rule 90 (opSymbol -> GEQ .)
    FLOAT           reduce using rule 90 (opSymbol -> GEQ .)
    STRING          reduce using rule 90 (opSymbol -> GEQ .)
    BOOL            reduce using rule 90 (opSymbol -> GEQ .)
    NULL            reduce using rule 90 (opSymbol -> GEQ .)
    ARRAY           reduce using rule 90 (opSymbol -> GEQ .)
    ID              reduce using rule 90 (opSymbol -> GEQ .)
    EMPTY           reduce using rule 90 (opSymbol -> GEQ .)
    LPAREN          reduce using rule 90 (opSymbol -> GEQ .)


state 144

    (78) conditions -> condition opLogic . condition
    (80) condition -> . valor
    (81) condition -> . valor opSymbol valor
    (82) condition -> . NOT condition
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    NOT             shift and go to state 91
    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    condition                      shift and go to state 220
    valor                          shift and go to state 89
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 145

    (91) opLogic -> AND .

    NOT             reduce using rule 91 (opLogic -> AND .)
    INT             reduce using rule 91 (opLogic -> AND .)
    VARIABLE        reduce using rule 91 (opLogic -> AND .)
    FLOAT           reduce using rule 91 (opLogic -> AND .)
    STRING          reduce using rule 91 (opLogic -> AND .)
    BOOL            reduce using rule 91 (opLogic -> AND .)
    NULL            reduce using rule 91 (opLogic -> AND .)
    ARRAY           reduce using rule 91 (opLogic -> AND .)
    ID              reduce using rule 91 (opLogic -> AND .)
    EMPTY           reduce using rule 91 (opLogic -> AND .)
    LPAREN          reduce using rule 91 (opLogic -> AND .)


state 146

    (92) opLogic -> LOGICAL_AND .

    NOT             reduce using rule 92 (opLogic -> LOGICAL_AND .)
    INT             reduce using rule 92 (opLogic -> LOGICAL_AND .)
    VARIABLE        reduce using rule 92 (opLogic -> LOGICAL_AND .)
    FLOAT           reduce using rule 92 (opLogic -> LOGICAL_AND .)
    STRING          reduce using rule 92 (opLogic -> LOGICAL_AND .)
    BOOL            reduce using rule 92 (opLogic -> LOGICAL_AND .)
    NULL            reduce using rule 92 (opLogic -> LOGICAL_AND .)
    ARRAY           reduce using rule 92 (opLogic -> LOGICAL_AND .)
    ID              reduce using rule 92 (opLogic -> LOGICAL_AND .)
    EMPTY           reduce using rule 92 (opLogic -> LOGICAL_AND .)
    LPAREN          reduce using rule 92 (opLogic -> LOGICAL_AND .)


state 147

    (93) opLogic -> OR .

    NOT             reduce using rule 93 (opLogic -> OR .)
    INT             reduce using rule 93 (opLogic -> OR .)
    VARIABLE        reduce using rule 93 (opLogic -> OR .)
    FLOAT           reduce using rule 93 (opLogic -> OR .)
    STRING          reduce using rule 93 (opLogic -> OR .)
    BOOL            reduce using rule 93 (opLogic -> OR .)
    NULL            reduce using rule 93 (opLogic -> OR .)
    ARRAY           reduce using rule 93 (opLogic -> OR .)
    ID              reduce using rule 93 (opLogic -> OR .)
    EMPTY           reduce using rule 93 (opLogic -> OR .)
    LPAREN          reduce using rule 93 (opLogic -> OR .)


state 148

    (94) opLogic -> LOGICAL_OR .

    NOT             reduce using rule 94 (opLogic -> LOGICAL_OR .)
    INT             reduce using rule 94 (opLogic -> LOGICAL_OR .)
    VARIABLE        reduce using rule 94 (opLogic -> LOGICAL_OR .)
    FLOAT           reduce using rule 94 (opLogic -> LOGICAL_OR .)
    STRING          reduce using rule 94 (opLogic -> LOGICAL_OR .)
    BOOL            reduce using rule 94 (opLogic -> LOGICAL_OR .)
    NULL            reduce using rule 94 (opLogic -> LOGICAL_OR .)
    ARRAY           reduce using rule 94 (opLogic -> LOGICAL_OR .)
    ID              reduce using rule 94 (opLogic -> LOGICAL_OR .)
    EMPTY           reduce using rule 94 (opLogic -> LOGICAL_OR .)
    LPAREN          reduce using rule 94 (opLogic -> LOGICAL_OR .)


state 149

    (82) condition -> NOT condition .

    AND             reduce using rule 82 (condition -> NOT condition .)
    LOGICAL_AND     reduce using rule 82 (condition -> NOT condition .)
    OR              reduce using rule 82 (condition -> NOT condition .)
    LOGICAL_OR      reduce using rule 82 (condition -> NOT condition .)
    RPAREN          reduce using rule 82 (condition -> NOT condition .)


state 150

    (55) impresion -> ECHO imprimir SEMICOLON .

    VARIABLE        reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    ECHO            reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    PRINT           reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    TRY             reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    FUNCTION        reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    RETURN          reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    ID              reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    EMPTY           reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    CLASS           reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    INTERFACE       reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    INCLUDE         reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    NAMESPACE       reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    THROW           reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    CONST           reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    THIS            reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    INT             reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    FLOAT           reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    STRING          reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    BOOL            reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    NULL            reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    ARRAY           reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    ABSTRACT        reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    PRIVATE         reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    PROTECTED       reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    PUBLIC          reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    STATIC          reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    FINAL           reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    LPAREN          reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    IF              reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    WHILE           reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    DO              reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    SWITCH          reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    FOREACH         reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    FOR             reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    CLOSETAG        reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    RBRACE          reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    BREAK           reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    ENDSWITCH       reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    CASE            reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)
    DEFAULT         reduce using rule 55 (impresion -> ECHO imprimir SEMICOLON .)


state 151

    (57) imprimir -> LPAREN repiteValores . RPAREN

    RPAREN          shift and go to state 221


state 152

    (58) imprimir -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 58 (imprimir -> LPAREN RPAREN .)


state 153

    (61) repiteValores -> valor .
    (62) repiteValores -> valor . COMMA repiteValores
    (80) condition -> valor .
    (81) condition -> valor . opSymbol valor
    (83) opSymbol -> . EQ
    (84) opSymbol -> . NEQ
    (85) opSymbol -> . STRICTEQ
    (86) opSymbol -> . STRICTNEQ
    (87) opSymbol -> . LT
    (88) opSymbol -> . GT
    (89) opSymbol -> . LEQ
    (90) opSymbol -> . GEQ

  ! reduce/reduce conflict for RPAREN resolved using rule 61 (repiteValores -> valor .)
    RPAREN          reduce using rule 61 (repiteValores -> valor .)
    COMMA           shift and go to state 154
    AND             reduce using rule 80 (condition -> valor .)
    LOGICAL_AND     reduce using rule 80 (condition -> valor .)
    OR              reduce using rule 80 (condition -> valor .)
    LOGICAL_OR      reduce using rule 80 (condition -> valor .)
    EQ              shift and go to state 136
    NEQ             shift and go to state 137
    STRICTEQ        shift and go to state 138
    STRICTNEQ       shift and go to state 139
    LT              shift and go to state 140
    GT              shift and go to state 141
    LEQ             shift and go to state 142
    GEQ             shift and go to state 143

  ! RPAREN          [ reduce using rule 80 (condition -> valor .) ]

    opSymbol                       shift and go to state 135

state 154

    (62) repiteValores -> valor COMMA . repiteValores
    (61) repiteValores -> . valor
    (62) repiteValores -> . valor COMMA repiteValores
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    valor                          shift and go to state 98
    repiteValores                  shift and go to state 222
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 155

    (56) impresion -> PRINT imprimir SEMICOLON .

    VARIABLE        reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    ECHO            reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    PRINT           reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    TRY             reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    FUNCTION        reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    RETURN          reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    ID              reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    EMPTY           reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    CLASS           reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    INTERFACE       reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    INCLUDE         reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    NAMESPACE       reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    THROW           reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    CONST           reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    THIS            reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    INT             reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    FLOAT           reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    STRING          reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    BOOL            reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    NULL            reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    ARRAY           reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    ABSTRACT        reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    PRIVATE         reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    PROTECTED       reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    PUBLIC          reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    STATIC          reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    FINAL           reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    LPAREN          reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    IF              reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    WHILE           reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    DO              reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    SWITCH          reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    FOREACH         reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    FOR             reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    CLOSETAG        reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    RBRACE          reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    BREAK           reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    ENDSWITCH       reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    CASE            reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)
    DEFAULT         reduce using rule 56 (impresion -> PRINT imprimir SEMICOLON .)


state 156

    (151) try -> TRY LBRACE body . RBRACE catchs
    (152) try -> TRY LBRACE body . RBRACE catchs FINALLY LBRACE body RBRACE

    RBRACE          shift and go to state 223


state 157

    (95) body -> sentenciaList .

    RBRACE          reduce using rule 95 (body -> sentenciaList .)
    VARIABLE        reduce using rule 95 (body -> sentenciaList .)
    ECHO            reduce using rule 95 (body -> sentenciaList .)
    PRINT           reduce using rule 95 (body -> sentenciaList .)
    TRY             reduce using rule 95 (body -> sentenciaList .)
    FUNCTION        reduce using rule 95 (body -> sentenciaList .)
    RETURN          reduce using rule 95 (body -> sentenciaList .)
    ID              reduce using rule 95 (body -> sentenciaList .)
    EMPTY           reduce using rule 95 (body -> sentenciaList .)
    CLASS           reduce using rule 95 (body -> sentenciaList .)
    INTERFACE       reduce using rule 95 (body -> sentenciaList .)
    INCLUDE         reduce using rule 95 (body -> sentenciaList .)
    NAMESPACE       reduce using rule 95 (body -> sentenciaList .)
    THROW           reduce using rule 95 (body -> sentenciaList .)
    CONST           reduce using rule 95 (body -> sentenciaList .)
    THIS            reduce using rule 95 (body -> sentenciaList .)
    INT             reduce using rule 95 (body -> sentenciaList .)
    FLOAT           reduce using rule 95 (body -> sentenciaList .)
    STRING          reduce using rule 95 (body -> sentenciaList .)
    BOOL            reduce using rule 95 (body -> sentenciaList .)
    NULL            reduce using rule 95 (body -> sentenciaList .)
    ARRAY           reduce using rule 95 (body -> sentenciaList .)
    ABSTRACT        reduce using rule 95 (body -> sentenciaList .)
    PRIVATE         reduce using rule 95 (body -> sentenciaList .)
    PROTECTED       reduce using rule 95 (body -> sentenciaList .)
    PUBLIC          reduce using rule 95 (body -> sentenciaList .)
    STATIC          reduce using rule 95 (body -> sentenciaList .)
    FINAL           reduce using rule 95 (body -> sentenciaList .)
    LPAREN          reduce using rule 95 (body -> sentenciaList .)
    IF              reduce using rule 95 (body -> sentenciaList .)
    WHILE           reduce using rule 95 (body -> sentenciaList .)
    DO              reduce using rule 95 (body -> sentenciaList .)
    SWITCH          reduce using rule 95 (body -> sentenciaList .)
    FOREACH         reduce using rule 95 (body -> sentenciaList .)
    FOR             reduce using rule 95 (body -> sentenciaList .)
    CLOSETAG        reduce using rule 95 (body -> sentenciaList .)
    BREAK           reduce using rule 95 (body -> sentenciaList .)
    ENDSWITCH       reduce using rule 95 (body -> sentenciaList .)
    CASE            reduce using rule 95 (body -> sentenciaList .)
    DEFAULT         reduce using rule 95 (body -> sentenciaList .)


state 158

    (96) body -> empty .

    RBRACE          reduce using rule 96 (body -> empty .)
    VARIABLE        reduce using rule 96 (body -> empty .)
    ECHO            reduce using rule 96 (body -> empty .)
    PRINT           reduce using rule 96 (body -> empty .)
    TRY             reduce using rule 96 (body -> empty .)
    FUNCTION        reduce using rule 96 (body -> empty .)
    RETURN          reduce using rule 96 (body -> empty .)
    ID              reduce using rule 96 (body -> empty .)
    EMPTY           reduce using rule 96 (body -> empty .)
    CLASS           reduce using rule 96 (body -> empty .)
    INTERFACE       reduce using rule 96 (body -> empty .)
    INCLUDE         reduce using rule 96 (body -> empty .)
    NAMESPACE       reduce using rule 96 (body -> empty .)
    THROW           reduce using rule 96 (body -> empty .)
    CONST           reduce using rule 96 (body -> empty .)
    THIS            reduce using rule 96 (body -> empty .)
    INT             reduce using rule 96 (body -> empty .)
    FLOAT           reduce using rule 96 (body -> empty .)
    STRING          reduce using rule 96 (body -> empty .)
    BOOL            reduce using rule 96 (body -> empty .)
    NULL            reduce using rule 96 (body -> empty .)
    ARRAY           reduce using rule 96 (body -> empty .)
    ABSTRACT        reduce using rule 96 (body -> empty .)
    PRIVATE         reduce using rule 96 (body -> empty .)
    PROTECTED       reduce using rule 96 (body -> empty .)
    PUBLIC          reduce using rule 96 (body -> empty .)
    STATIC          reduce using rule 96 (body -> empty .)
    FINAL           reduce using rule 96 (body -> empty .)
    LPAREN          reduce using rule 96 (body -> empty .)
    IF              reduce using rule 96 (body -> empty .)
    WHILE           reduce using rule 96 (body -> empty .)
    DO              reduce using rule 96 (body -> empty .)
    SWITCH          reduce using rule 96 (body -> empty .)
    FOREACH         reduce using rule 96 (body -> empty .)
    FOR             reduce using rule 96 (body -> empty .)
    CLOSETAG        reduce using rule 96 (body -> empty .)
    BREAK           reduce using rule 96 (body -> empty .)
    ENDSWITCH       reduce using rule 96 (body -> empty .)
    CASE            reduce using rule 96 (body -> empty .)
    DEFAULT         reduce using rule 96 (body -> empty .)


state 159

    (97) sentenciaList -> sentencia .
    (98) sentenciaList -> sentencia . sentenciaList
    (97) sentenciaList -> . sentencia
    (98) sentenciaList -> . sentencia sentenciaList
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (29) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) comparacion -> . valor comparador valor
    (55) impresion -> . ECHO imprimir SEMICOLON
    (56) impresion -> . PRINT imprimir SEMICOLON
    (64) estructurasPrograma -> . controlStructure
    (65) estructurasPrograma -> . dataStructure
    (151) try -> . TRY LBRACE body RBRACE catchs
    (152) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (157) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN valor SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (162) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (163) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (164) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (165) classDeclarate -> . classInterface
    (185) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (156) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (186) includes -> . INCLUDE STRING SEMICOLON
    (187) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (188) namespace -> . NAMESPACE ID SEMICOLON
    (189) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (190) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> . THROW valor SEMICOLON
    (192) instance -> . VARIABLE INSTANCEOF ID
    (193) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (194) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (195) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (196) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (197) minuse -> . VARIABLE MINUSEQUAL INT
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (66) controlStructure -> . if
    (67) controlStructure -> . for
    (68) controlStructure -> . while
    (69) controlStructure -> . dowhile
    (70) controlStructure -> . switch
    (71) controlStructure -> . foreach
    (120) dataStructure -> . array
    (179) data -> . ABSTRACT
    (180) data -> . PRIVATE
    (181) data -> . PROTECTED
    (182) data -> . PUBLIC
    (183) data -> . STATIC
    (184) data -> . FINAL
    (173) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (175) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (72) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> . IF LPAREN conditions RPAREN body
    (99) for -> . forStatement
    (103) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (105) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (106) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (114) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (121) array -> . VARIABLE EQUALS arrays SEMICOLON
    (122) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (124) array -> . map
    (100) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (128) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for EMPTY resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for NAMESPACE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for ABSTRACT resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    RBRACE          reduce using rule 97 (sentenciaList -> sentencia .)
    CLOSETAG        reduce using rule 97 (sentenciaList -> sentencia .)
    BREAK           reduce using rule 97 (sentenciaList -> sentencia .)
    ENDSWITCH       reduce using rule 97 (sentenciaList -> sentencia .)
    CASE            reduce using rule 97 (sentenciaList -> sentencia .)
    DEFAULT         reduce using rule 97 (sentenciaList -> sentencia .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 61
    PRIVATE         shift and go to state 62
    PROTECTED       shift and go to state 63
    PUBLIC          shift and go to state 64
    STATIC          shift and go to state 65
    FINAL           shift and go to state 66
    LPAREN          shift and go to state 28
    IF              shift and go to state 67
    WHILE           shift and go to state 69
    DO              shift and go to state 70
    SWITCH          shift and go to state 71
    FOREACH         shift and go to state 72
    FOR             shift and go to state 74

  ! VARIABLE        [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! ECHO            [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! PRINT           [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! TRY             [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! FUNCTION        [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! RETURN          [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! ID              [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! EMPTY           [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! CLASS           [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! INTERFACE       [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! INCLUDE         [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! NAMESPACE       [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! THROW           [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! CONST           [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! THIS            [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! INT             [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! FLOAT           [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! STRING          [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! BOOL            [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! NULL            [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! ARRAY           [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! ABSTRACT        [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! PRIVATE         [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! PROTECTED       [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! PUBLIC          [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! STATIC          [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! FINAL           [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! LPAREN          [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! IF              [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! WHILE           [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! DO              [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! SWITCH          [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! FOREACH         [ reduce using rule 97 (sentenciaList -> sentencia .) ]
  ! FOR             [ reduce using rule 97 (sentenciaList -> sentencia .) ]

    sentencia                      shift and go to state 159
    sentenciaList                  shift and go to state 224
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    valor                          shift and go to state 27
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    operador_ternario              shift and go to state 53
    if                             shift and go to state 54
    for                            shift and go to state 55
    while                          shift and go to state 56
    dowhile                        shift and go to state 57
    switch                         shift and go to state 58
    foreach                        shift and go to state 59
    array                          shift and go to state 60
    forStatement                   shift and go to state 68
    map                            shift and go to state 73

state 160

    (157) funcionDeclaration -> FUNCTION ID LPAREN . argumentos RPAREN LBRACE body RBRACE
    (138) argumentos -> . argumento
    (139) argumentos -> . argumento COMMA argumentos
    (140) argumentos -> . empty
    (141) argumento -> . type VARIABLE
    (142) argumento -> . VARIABLE EQUALS valor
    (143) argumento -> . type VARIABLE EQUALS valor
    (144) argumento -> . operaArit
    (63) empty -> .
    (145) type -> . INT_TYPE
    (146) type -> . FLOAT_TYPE
    (147) type -> . STRING_TYPE
    (148) type -> . BOOL_TYPE
    (149) type -> . ARRAY_TYPE
    (150) type -> . VOID
    (32) operaArit -> . valor
    (33) operaArit -> . valor operador operaArit
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    VARIABLE        shift and go to state 165
    RPAREN          reduce using rule 63 (empty -> .)
    INT_TYPE        shift and go to state 168
    FLOAT_TYPE      shift and go to state 169
    STRING_TYPE     shift and go to state 170
    BOOL_TYPE       shift and go to state 171
    ARRAY_TYPE      shift and go to state 172
    VOID            shift and go to state 173
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    argumentos                     shift and go to state 225
    argumento                      shift and go to state 162
    empty                          shift and go to state 163
    type                           shift and go to state 164
    valor                          shift and go to state 166
    operaArit                      shift and go to state 167
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 161

    (158) llamadaFuncion -> ID LPAREN argumentos . RPAREN SEMICOLON
    (160) llamadaFuncion -> ID LPAREN argumentos . RPAREN

    RPAREN          shift and go to state 226


state 162

    (138) argumentos -> argumento .
    (139) argumentos -> argumento . COMMA argumentos

    RPAREN          reduce using rule 138 (argumentos -> argumento .)
    COMMA           shift and go to state 227


state 163

    (140) argumentos -> empty .

    RPAREN          reduce using rule 140 (argumentos -> empty .)


state 164

    (141) argumento -> type . VARIABLE
    (143) argumento -> type . VARIABLE EQUALS valor

    VARIABLE        shift and go to state 228


state 165

    (142) argumento -> VARIABLE . EQUALS valor
    (35) valor -> VARIABLE .

    EQUALS          shift and go to state 229
    PLUS            reduce using rule 35 (valor -> VARIABLE .)
    MINUS           reduce using rule 35 (valor -> VARIABLE .)
    TIMES           reduce using rule 35 (valor -> VARIABLE .)
    DIVIDE          reduce using rule 35 (valor -> VARIABLE .)
    MODULO          reduce using rule 35 (valor -> VARIABLE .)
    POTENCIA        reduce using rule 35 (valor -> VARIABLE .)
    PLUSEQUAL       reduce using rule 35 (valor -> VARIABLE .)
    COMMA           reduce using rule 35 (valor -> VARIABLE .)
    RPAREN          reduce using rule 35 (valor -> VARIABLE .)


state 166

    (32) operaArit -> valor .
    (33) operaArit -> valor . operador operaArit
    (43) operador -> . PLUS
    (44) operador -> . MINUS
    (45) operador -> . TIMES
    (46) operador -> . DIVIDE
    (47) operador -> . MODULO
    (48) operador -> . POTENCIA
    (49) operador -> . PLUSEQUAL

    COMMA           reduce using rule 32 (operaArit -> valor .)
    RPAREN          reduce using rule 32 (operaArit -> valor .)
    SEMICOLON       reduce using rule 32 (operaArit -> valor .)
    PLUS            shift and go to state 198
    MINUS           shift and go to state 199
    TIMES           shift and go to state 200
    DIVIDE          shift and go to state 201
    MODULO          shift and go to state 202
    POTENCIA        shift and go to state 203
    PLUSEQUAL       shift and go to state 204

    operador                       shift and go to state 197

state 167

    (144) argumento -> operaArit .

    COMMA           reduce using rule 144 (argumento -> operaArit .)
    RPAREN          reduce using rule 144 (argumento -> operaArit .)


state 168

    (145) type -> INT_TYPE .

    VARIABLE        reduce using rule 145 (type -> INT_TYPE .)
    FUNCTION        reduce using rule 145 (type -> INT_TYPE .)


state 169

    (146) type -> FLOAT_TYPE .

    VARIABLE        reduce using rule 146 (type -> FLOAT_TYPE .)
    FUNCTION        reduce using rule 146 (type -> FLOAT_TYPE .)


state 170

    (147) type -> STRING_TYPE .

    VARIABLE        reduce using rule 147 (type -> STRING_TYPE .)
    FUNCTION        reduce using rule 147 (type -> STRING_TYPE .)


state 171

    (148) type -> BOOL_TYPE .

    VARIABLE        reduce using rule 148 (type -> BOOL_TYPE .)
    FUNCTION        reduce using rule 148 (type -> BOOL_TYPE .)


state 172

    (149) type -> ARRAY_TYPE .

    VARIABLE        reduce using rule 149 (type -> ARRAY_TYPE .)
    FUNCTION        reduce using rule 149 (type -> ARRAY_TYPE .)


state 173

    (150) type -> VOID .

    VARIABLE        reduce using rule 150 (type -> VOID .)
    FUNCTION        reduce using rule 150 (type -> VOID .)


state 174

    (25) returnStatement -> RETURN valor SEMICOLON .

    VARIABLE        reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    ECHO            reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    PRINT           reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    TRY             reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    FUNCTION        reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    RETURN          reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    ID              reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    EMPTY           reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    CLASS           reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    INTERFACE       reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    INCLUDE         reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    NAMESPACE       reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    THROW           reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    CONST           reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    THIS            reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    INT             reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    FLOAT           reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    STRING          reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    BOOL            reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    NULL            reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    ARRAY           reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    ABSTRACT        reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    PRIVATE         reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    PROTECTED       reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    PUBLIC          reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    STATIC          reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    FINAL           reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    LPAREN          reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    IF              reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    WHILE           reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    DO              reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    SWITCH          reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    FOREACH         reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    FOR             reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    CLOSETAG        reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    RBRACE          reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    BREAK           reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    ENDSWITCH       reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    CASE            reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)
    DEFAULT         reduce using rule 25 (returnStatement -> RETURN valor SEMICOLON .)


state 175

    (159) llamadaFuncion -> EMPTY LPAREN argumentos . RPAREN
    (161) llamadaFuncion -> EMPTY LPAREN argumentos . RPAREN SEMICOLON

    RPAREN          shift and go to state 230


state 176

    (162) classDeclarate -> CLASS ID LBRACE . classBody RBRACE
    (166) classBody -> . classMember
    (167) classBody -> . classMember classBody
    (168) classMember -> . type VARIABLE SEMICOLON
    (169) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (170) classMember -> . objectInstantiation
    (145) type -> . INT_TYPE
    (146) type -> . FLOAT_TYPE
    (147) type -> . STRING_TYPE
    (148) type -> . BOOL_TYPE
    (149) type -> . ARRAY_TYPE
    (150) type -> . VOID
    (171) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (172) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 168
    FLOAT_TYPE      shift and go to state 169
    STRING_TYPE     shift and go to state 170
    BOOL_TYPE       shift and go to state 171
    ARRAY_TYPE      shift and go to state 172
    VOID            shift and go to state 173
    NEW             shift and go to state 235

    classBody                      shift and go to state 231
    classMember                    shift and go to state 232
    type                           shift and go to state 233
    objectInstantiation            shift and go to state 234

state 177

    (163) classDeclarate -> CLASS ID EXTENDS . ID LBRACE classBody RBRACE
    (174) classInterface -> CLASS ID EXTENDS . ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    ID              shift and go to state 236


state 178

    (173) classInterface -> CLASS ID IMPLEMENTS . impInterface LBRACE classBody RBRACE
    (177) impInterface -> . ID
    (178) impInterface -> . ID COMMA impInterface

    ID              shift and go to state 237

    impInterface                   shift and go to state 238

state 179

    (164) classDeclarate -> data CLASS ID . LBRACE classBody RBRACE
    (175) classInterface -> data CLASS ID . IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> data CLASS ID . EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    LBRACE          shift and go to state 239
    IMPLEMENTS      shift and go to state 240
    EXTENDS         shift and go to state 241


state 180

    (185) interface -> INTERFACE ID LBRACE . classBody RBRACE
    (166) classBody -> . classMember
    (167) classBody -> . classMember classBody
    (168) classMember -> . type VARIABLE SEMICOLON
    (169) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (170) classMember -> . objectInstantiation
    (145) type -> . INT_TYPE
    (146) type -> . FLOAT_TYPE
    (147) type -> . STRING_TYPE
    (148) type -> . BOOL_TYPE
    (149) type -> . ARRAY_TYPE
    (150) type -> . VOID
    (171) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (172) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 168
    FLOAT_TYPE      shift and go to state 169
    STRING_TYPE     shift and go to state 170
    BOOL_TYPE       shift and go to state 171
    ARRAY_TYPE      shift and go to state 172
    VOID            shift and go to state 173
    NEW             shift and go to state 235

    classBody                      shift and go to state 242
    classMember                    shift and go to state 232
    type                           shift and go to state 233
    objectInstantiation            shift and go to state 234

state 181

    (186) includes -> INCLUDE STRING SEMICOLON .

    VARIABLE        reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    ECHO            reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    PRINT           reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    TRY             reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    FUNCTION        reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    RETURN          reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    ID              reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    EMPTY           reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    CLASS           reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    INTERFACE       reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    INCLUDE         reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    NAMESPACE       reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    THROW           reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    CONST           reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    THIS            reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    INT             reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    FLOAT           reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    STRING          reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    BOOL            reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    NULL            reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    ARRAY           reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    ABSTRACT        reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    PRIVATE         reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    PROTECTED       reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    PUBLIC          reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    STATIC          reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    FINAL           reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    LPAREN          reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    IF              reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    WHILE           reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    DO              reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    SWITCH          reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    FOREACH         reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    FOR             reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    CLOSETAG        reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    RBRACE          reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    BREAK           reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    ENDSWITCH       reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    CASE            reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)
    DEFAULT         reduce using rule 186 (includes -> INCLUDE STRING SEMICOLON .)


state 182

    (187) includes -> INCLUDE STRING DOT . STRING SEMICOLON

    STRING          shift and go to state 243


state 183

    (188) namespace -> NAMESPACE ID SEMICOLON .

    VARIABLE        reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    ECHO            reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    PRINT           reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    TRY             reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    FUNCTION        reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    RETURN          reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    ID              reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    EMPTY           reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    CLASS           reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    INTERFACE       reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    INCLUDE         reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    NAMESPACE       reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    THROW           reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    CONST           reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    THIS            reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    INT             reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    FLOAT           reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    STRING          reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    BOOL            reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    NULL            reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    ARRAY           reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    ABSTRACT        reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    PRIVATE         reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    PROTECTED       reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    PUBLIC          reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    STATIC          reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    FINAL           reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    LPAREN          reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    IF              reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    WHILE           reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    DO              reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    SWITCH          reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    FOREACH         reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    FOR             reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    CLOSETAG        reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    RBRACE          reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    BREAK           reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    ENDSWITCH       reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    CASE            reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)
    DEFAULT         reduce using rule 188 (namespace -> NAMESPACE ID SEMICOLON .)


state 184

    (190) throw -> THROW NEW EXCEPTION . LPAREN repiteValores RPAREN SEMICOLON

    LPAREN          shift and go to state 244


state 185

    (191) throw -> THROW valor SEMICOLON .

    VARIABLE        reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    ECHO            reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    PRINT           reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    TRY             reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    FUNCTION        reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    RETURN          reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    ID              reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    EMPTY           reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    CLASS           reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    INTERFACE       reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    INCLUDE         reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    NAMESPACE       reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    THROW           reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    CONST           reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    THIS            reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    INT             reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    FLOAT           reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    STRING          reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    BOOL            reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    NULL            reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    ARRAY           reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    ABSTRACT        reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    PRIVATE         reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    PROTECTED       reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    PUBLIC          reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    STATIC          reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    FINAL           reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    LPAREN          reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    IF              reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    WHILE           reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    DO              reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    SWITCH          reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    FOREACH         reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    FOR             reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    CLOSETAG        reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    RBRACE          reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    BREAK           reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    ENDSWITCH       reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    CASE            reduce using rule 191 (throw -> THROW valor SEMICOLON .)
    DEFAULT         reduce using rule 191 (throw -> THROW valor SEMICOLON .)


state 186

    (193) constdeclaration -> CONST ID EQUALS . valor SEMICOLON
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    valor                          shift and go to state 245
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 187

    (194) thisdeclaration -> THIS ARROW ID . SEMICOLON
    (195) thisdeclaration -> THIS ARROW ID . LPAREN RPAREN SEMICOLON

    SEMICOLON       shift and go to state 246
    LPAREN          shift and go to state 247


state 188

    (72) if -> IF LPAREN conditions . RPAREN LBRACE body RBRACE else_blocks
    (73) if -> IF LPAREN conditions . RPAREN body

    RPAREN          shift and go to state 248


state 189

    (103) while -> WHILE LPAREN condition . RPAREN LBRACE body RBRACE
    (104) while -> WHILE LPAREN condition . RPAREN LBRACE RBRACE

    RPAREN          shift and go to state 249


state 190

    (105) dowhile -> DO LBRACE body . RBRACE WHILE LPAREN condition RPAREN SEMICOLON

    RBRACE          shift and go to state 250


state 191

    (106) switch -> SWITCH LPAREN valor . RPAREN LBRACE caseLists RBRACE
    (107) switch -> SWITCH LPAREN valor . RPAREN COLON caseLists ENDSWITCH SEMICOLON

    RPAREN          shift and go to state 251


state 192

    (114) foreach -> FOREACH LPAREN VARIABLE . AS VARIABLE RPAREN LBRACE body RBRACE

    AS              shift and go to state 252


state 193

    (100) forStatement -> FOR LPAREN forcondition . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 253


state 194

    (101) forcondition -> VARIABLE . EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (102) forcondition -> VARIABLE . EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    EQUALS          shift and go to state 254


state 195

    (27) asignacion -> VARIABLE EQUALS operaArit SEMICOLON .

    VARIABLE        reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    ECHO            reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    PRINT           reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    TRY             reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    FUNCTION        reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    RETURN          reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    ID              reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    EMPTY           reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    CLASS           reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    INTERFACE       reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    INCLUDE         reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    NAMESPACE       reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    THROW           reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    CONST           reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    THIS            reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    INT             reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    FLOAT           reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    STRING          reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    BOOL            reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    NULL            reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    ARRAY           reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    ABSTRACT        reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    PRIVATE         reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    PROTECTED       reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    PUBLIC          reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    STATIC          reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    FINAL           reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    LPAREN          reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    IF              reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    WHILE           reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    DO              reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    SWITCH          reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    FOREACH         reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    FOR             reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    CLOSETAG        reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    RBRACE          reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    BREAK           reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    ENDSWITCH       reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    CASE            reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    DEFAULT         reduce using rule 27 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)


state 196

    (28) asignacion -> VARIABLE EQUALS valor SEMICOLON .

    VARIABLE        reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    ECHO            reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    PRINT           reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    TRY             reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    FUNCTION        reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    RETURN          reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    ID              reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    EMPTY           reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    CLASS           reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    INTERFACE       reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    INCLUDE         reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    NAMESPACE       reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    THROW           reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    CONST           reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    THIS            reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    INT             reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    FLOAT           reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    STRING          reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    BOOL            reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    NULL            reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    ARRAY           reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    ABSTRACT        reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    PRIVATE         reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    PROTECTED       reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    PUBLIC          reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    STATIC          reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    FINAL           reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    LPAREN          reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    IF              reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    WHILE           reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    DO              reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    SWITCH          reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    FOREACH         reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    FOR             reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    CLOSETAG        reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    RBRACE          reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    BREAK           reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    ENDSWITCH       reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    CASE            reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    DEFAULT         reduce using rule 28 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)


state 197

    (33) operaArit -> valor operador . operaArit
    (32) operaArit -> . valor
    (33) operaArit -> . valor operador operaArit
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    valor                          shift and go to state 166
    operaArit                      shift and go to state 255
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 198

    (43) operador -> PLUS .

    INT             reduce using rule 43 (operador -> PLUS .)
    VARIABLE        reduce using rule 43 (operador -> PLUS .)
    FLOAT           reduce using rule 43 (operador -> PLUS .)
    STRING          reduce using rule 43 (operador -> PLUS .)
    BOOL            reduce using rule 43 (operador -> PLUS .)
    NULL            reduce using rule 43 (operador -> PLUS .)
    ARRAY           reduce using rule 43 (operador -> PLUS .)
    ID              reduce using rule 43 (operador -> PLUS .)
    EMPTY           reduce using rule 43 (operador -> PLUS .)
    LPAREN          reduce using rule 43 (operador -> PLUS .)


state 199

    (44) operador -> MINUS .

    INT             reduce using rule 44 (operador -> MINUS .)
    VARIABLE        reduce using rule 44 (operador -> MINUS .)
    FLOAT           reduce using rule 44 (operador -> MINUS .)
    STRING          reduce using rule 44 (operador -> MINUS .)
    BOOL            reduce using rule 44 (operador -> MINUS .)
    NULL            reduce using rule 44 (operador -> MINUS .)
    ARRAY           reduce using rule 44 (operador -> MINUS .)
    ID              reduce using rule 44 (operador -> MINUS .)
    EMPTY           reduce using rule 44 (operador -> MINUS .)
    LPAREN          reduce using rule 44 (operador -> MINUS .)


state 200

    (45) operador -> TIMES .

    INT             reduce using rule 45 (operador -> TIMES .)
    VARIABLE        reduce using rule 45 (operador -> TIMES .)
    FLOAT           reduce using rule 45 (operador -> TIMES .)
    STRING          reduce using rule 45 (operador -> TIMES .)
    BOOL            reduce using rule 45 (operador -> TIMES .)
    NULL            reduce using rule 45 (operador -> TIMES .)
    ARRAY           reduce using rule 45 (operador -> TIMES .)
    ID              reduce using rule 45 (operador -> TIMES .)
    EMPTY           reduce using rule 45 (operador -> TIMES .)
    LPAREN          reduce using rule 45 (operador -> TIMES .)


state 201

    (46) operador -> DIVIDE .

    INT             reduce using rule 46 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 46 (operador -> DIVIDE .)
    FLOAT           reduce using rule 46 (operador -> DIVIDE .)
    STRING          reduce using rule 46 (operador -> DIVIDE .)
    BOOL            reduce using rule 46 (operador -> DIVIDE .)
    NULL            reduce using rule 46 (operador -> DIVIDE .)
    ARRAY           reduce using rule 46 (operador -> DIVIDE .)
    ID              reduce using rule 46 (operador -> DIVIDE .)
    EMPTY           reduce using rule 46 (operador -> DIVIDE .)
    LPAREN          reduce using rule 46 (operador -> DIVIDE .)


state 202

    (47) operador -> MODULO .

    INT             reduce using rule 47 (operador -> MODULO .)
    VARIABLE        reduce using rule 47 (operador -> MODULO .)
    FLOAT           reduce using rule 47 (operador -> MODULO .)
    STRING          reduce using rule 47 (operador -> MODULO .)
    BOOL            reduce using rule 47 (operador -> MODULO .)
    NULL            reduce using rule 47 (operador -> MODULO .)
    ARRAY           reduce using rule 47 (operador -> MODULO .)
    ID              reduce using rule 47 (operador -> MODULO .)
    EMPTY           reduce using rule 47 (operador -> MODULO .)
    LPAREN          reduce using rule 47 (operador -> MODULO .)


state 203

    (48) operador -> POTENCIA .

    INT             reduce using rule 48 (operador -> POTENCIA .)
    VARIABLE        reduce using rule 48 (operador -> POTENCIA .)
    FLOAT           reduce using rule 48 (operador -> POTENCIA .)
    STRING          reduce using rule 48 (operador -> POTENCIA .)
    BOOL            reduce using rule 48 (operador -> POTENCIA .)
    NULL            reduce using rule 48 (operador -> POTENCIA .)
    ARRAY           reduce using rule 48 (operador -> POTENCIA .)
    ID              reduce using rule 48 (operador -> POTENCIA .)
    EMPTY           reduce using rule 48 (operador -> POTENCIA .)
    LPAREN          reduce using rule 48 (operador -> POTENCIA .)


state 204

    (49) operador -> PLUSEQUAL .

    INT             reduce using rule 49 (operador -> PLUSEQUAL .)
    VARIABLE        reduce using rule 49 (operador -> PLUSEQUAL .)
    FLOAT           reduce using rule 49 (operador -> PLUSEQUAL .)
    STRING          reduce using rule 49 (operador -> PLUSEQUAL .)
    BOOL            reduce using rule 49 (operador -> PLUSEQUAL .)
    NULL            reduce using rule 49 (operador -> PLUSEQUAL .)
    ARRAY           reduce using rule 49 (operador -> PLUSEQUAL .)
    ID              reduce using rule 49 (operador -> PLUSEQUAL .)
    EMPTY           reduce using rule 49 (operador -> PLUSEQUAL .)
    LPAREN          reduce using rule 49 (operador -> PLUSEQUAL .)


state 205

    (29) asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN . STDIN RPAREN SEMICOLON

    STDIN           shift and go to state 256


state 206

    (189) anonymousFunction -> VARIABLE EQUALS FN LPAREN . RPAREN ARROWMAP comparacion SEMICOLON

    RPAREN          shift and go to state 257


state 207

    (121) array -> VARIABLE EQUALS arrays SEMICOLON .

    VARIABLE        reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    ECHO            reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    PRINT           reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    TRY             reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    FUNCTION        reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    RETURN          reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    ID              reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    EMPTY           reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    CLASS           reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    INTERFACE       reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    INCLUDE         reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    NAMESPACE       reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    THROW           reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    CONST           reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    THIS            reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    INT             reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    FLOAT           reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    STRING          reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    BOOL            reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    NULL            reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    ARRAY           reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    ABSTRACT        reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    PRIVATE         reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    PROTECTED       reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    PUBLIC          reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    STATIC          reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    FINAL           reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    LPAREN          reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    IF              reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    WHILE           reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    DO              reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    SWITCH          reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    FOREACH         reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    FOR             reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    CLOSETAG        reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    RBRACE          reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    BREAK           reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    ENDSWITCH       reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    CASE            reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    DEFAULT         reduce using rule 121 (array -> VARIABLE EQUALS arrays SEMICOLON .)


state 208

    (125) arrays -> LBRACKET . repiteValores RBRACKET
    (61) repiteValores -> . valor
    (62) repiteValores -> . valor COMMA repiteValores
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    repiteValores                  shift and go to state 211
    valor                          shift and go to state 98
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 209

    (122) array -> VARIABLE EQUALS LBRACKET arrayAnidado . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 258


state 210

    (128) map -> VARIABLE EQUALS LBRACKET maps . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 259


state 211

    (125) arrays -> LBRACKET repiteValores . RBRACKET

    RBRACKET        shift and go to state 260


state 212

    (126) arrayAnidado -> arrays .
    (127) arrayAnidado -> arrays . COMMA arrayAnidado

    RBRACKET        reduce using rule 126 (arrayAnidado -> arrays .)
    COMMA           shift and go to state 261


state 213

    (130) maps -> mapArrow .
    (131) maps -> mapArrow . COMMA maps

    RBRACKET        reduce using rule 130 (maps -> mapArrow .)
    RPAREN          reduce using rule 130 (maps -> mapArrow .)
    COMMA           shift and go to state 262


state 214

    (61) repiteValores -> valor .
    (62) repiteValores -> valor . COMMA repiteValores
    (132) mapArrow -> valor . ARROWMAP valor

    RBRACKET        reduce using rule 61 (repiteValores -> valor .)
    RPAREN          reduce using rule 61 (repiteValores -> valor .)
    COMMA           shift and go to state 154
    ARROWMAP        shift and go to state 263


state 215

    (123) array -> VARIABLE EQUALS ARRAY LPAREN . repiteValores RPAREN SEMICOLON
    (129) map -> VARIABLE EQUALS ARRAY LPAREN . maps RPAREN SEMICOLON
    (61) repiteValores -> . valor
    (62) repiteValores -> . valor COMMA repiteValores
    (130) maps -> . mapArrow
    (131) maps -> . mapArrow COMMA maps
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (132) mapArrow -> . valor ARROWMAP valor
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    repiteValores                  shift and go to state 264
    maps                           shift and go to state 265
    valor                          shift and go to state 214
    mapArrow                       shift and go to state 213
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 216

    (156) objeto -> VARIABLE ARROW ID LPAREN . argumentos RPAREN SEMICOLON
    (138) argumentos -> . argumento
    (139) argumentos -> . argumento COMMA argumentos
    (140) argumentos -> . empty
    (141) argumento -> . type VARIABLE
    (142) argumento -> . VARIABLE EQUALS valor
    (143) argumento -> . type VARIABLE EQUALS valor
    (144) argumento -> . operaArit
    (63) empty -> .
    (145) type -> . INT_TYPE
    (146) type -> . FLOAT_TYPE
    (147) type -> . STRING_TYPE
    (148) type -> . BOOL_TYPE
    (149) type -> . ARRAY_TYPE
    (150) type -> . VOID
    (32) operaArit -> . valor
    (33) operaArit -> . valor operador operaArit
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    VARIABLE        shift and go to state 165
    RPAREN          reduce using rule 63 (empty -> .)
    INT_TYPE        shift and go to state 168
    FLOAT_TYPE      shift and go to state 169
    STRING_TYPE     shift and go to state 170
    BOOL_TYPE       shift and go to state 171
    ARRAY_TYPE      shift and go to state 172
    VOID            shift and go to state 173
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    argumentos                     shift and go to state 266
    argumento                      shift and go to state 162
    empty                          shift and go to state 163
    type                           shift and go to state 164
    valor                          shift and go to state 166
    operaArit                      shift and go to state 167
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 217

    (79) conditions -> LPAREN conditions RPAREN .
    (30) operador_ternario -> LPAREN conditions RPAREN . QUESTION valor COLON valor
    (31) operador_ternario -> LPAREN conditions RPAREN . QUESTION COLON valor

    RPAREN          reduce using rule 79 (conditions -> LPAREN conditions RPAREN .)
    QUESTION        shift and go to state 218


state 218

    (30) operador_ternario -> LPAREN conditions RPAREN QUESTION . valor COLON valor
    (31) operador_ternario -> LPAREN conditions RPAREN QUESTION . COLON valor
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    COLON           shift and go to state 268
    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    valor                          shift and go to state 267
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 219

    (81) condition -> valor opSymbol valor .

    AND             reduce using rule 81 (condition -> valor opSymbol valor .)
    LOGICAL_AND     reduce using rule 81 (condition -> valor opSymbol valor .)
    OR              reduce using rule 81 (condition -> valor opSymbol valor .)
    LOGICAL_OR      reduce using rule 81 (condition -> valor opSymbol valor .)
    RPAREN          reduce using rule 81 (condition -> valor opSymbol valor .)


state 220

    (78) conditions -> condition opLogic condition .

    RPAREN          reduce using rule 78 (conditions -> condition opLogic condition .)


state 221

    (57) imprimir -> LPAREN repiteValores RPAREN .

    SEMICOLON       reduce using rule 57 (imprimir -> LPAREN repiteValores RPAREN .)


state 222

    (62) repiteValores -> valor COMMA repiteValores .

    SEMICOLON       reduce using rule 62 (repiteValores -> valor COMMA repiteValores .)
    RPAREN          reduce using rule 62 (repiteValores -> valor COMMA repiteValores .)
    RBRACKET        reduce using rule 62 (repiteValores -> valor COMMA repiteValores .)


state 223

    (151) try -> TRY LBRACE body RBRACE . catchs
    (152) try -> TRY LBRACE body RBRACE . catchs FINALLY LBRACE body RBRACE
    (154) catchs -> . catch
    (155) catchs -> . catch catchs
    (153) catch -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE

    CATCH           shift and go to state 271

    catchs                         shift and go to state 269
    catch                          shift and go to state 270

state 224

    (98) sentenciaList -> sentencia sentenciaList .

    RBRACE          reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    VARIABLE        reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    ECHO            reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    PRINT           reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    TRY             reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    FUNCTION        reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    RETURN          reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    ID              reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    EMPTY           reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    CLASS           reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    INTERFACE       reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    INCLUDE         reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    NAMESPACE       reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    THROW           reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    CONST           reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    THIS            reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    INT             reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    FLOAT           reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    STRING          reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    BOOL            reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    NULL            reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    ARRAY           reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    ABSTRACT        reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    PRIVATE         reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    PROTECTED       reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    PUBLIC          reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    STATIC          reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    FINAL           reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    LPAREN          reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    IF              reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    WHILE           reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    DO              reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    SWITCH          reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    FOREACH         reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    FOR             reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    CLOSETAG        reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    BREAK           reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    ENDSWITCH       reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    CASE            reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)
    DEFAULT         reduce using rule 98 (sentenciaList -> sentencia sentenciaList .)


state 225

    (157) funcionDeclaration -> FUNCTION ID LPAREN argumentos . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 272


state 226

    (158) llamadaFuncion -> ID LPAREN argumentos RPAREN . SEMICOLON
    (160) llamadaFuncion -> ID LPAREN argumentos RPAREN .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 273
    VARIABLE        reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ECHO            reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    PRINT           reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    TRY             reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    FUNCTION        reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    RETURN          reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ID              reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    EMPTY           reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    CLASS           reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    INTERFACE       reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    INCLUDE         reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    NAMESPACE       reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    THROW           reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    CONST           reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    THIS            reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    INT             reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    FLOAT           reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    STRING          reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    BOOL            reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    NULL            reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ARRAY           reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ABSTRACT        reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    PRIVATE         reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    PROTECTED       reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    PUBLIC          reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    STATIC          reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    FINAL           reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    LPAREN          reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    IF              reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    WHILE           reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    DO              reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    SWITCH          reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    FOREACH         reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    FOR             reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    CLOSETAG        reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    LT              reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    GT              reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    LEQ             reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    GEQ             reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    EQ              reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    NEQ             reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    STRICTEQ        reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    STRICTNEQ       reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    AND             reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    LOGICAL_AND     reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    OR              reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    LOGICAL_OR      reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    RPAREN          reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    COMMA           reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    PLUS            reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    MINUS           reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    TIMES           reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    DIVIDE          reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    MODULO          reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    POTENCIA        reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    PLUSEQUAL       reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    RBRACE          reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    BREAK           reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ENDSWITCH       reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    CASE            reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    DEFAULT         reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ARROWMAP        reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    RBRACKET        reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    COLON           reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)

  ! SEMICOLON       [ reduce using rule 160 (llamadaFuncion -> ID LPAREN argumentos RPAREN .) ]


state 227

    (139) argumentos -> argumento COMMA . argumentos
    (138) argumentos -> . argumento
    (139) argumentos -> . argumento COMMA argumentos
    (140) argumentos -> . empty
    (141) argumento -> . type VARIABLE
    (142) argumento -> . VARIABLE EQUALS valor
    (143) argumento -> . type VARIABLE EQUALS valor
    (144) argumento -> . operaArit
    (63) empty -> .
    (145) type -> . INT_TYPE
    (146) type -> . FLOAT_TYPE
    (147) type -> . STRING_TYPE
    (148) type -> . BOOL_TYPE
    (149) type -> . ARRAY_TYPE
    (150) type -> . VOID
    (32) operaArit -> . valor
    (33) operaArit -> . valor operador operaArit
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    VARIABLE        shift and go to state 165
    RPAREN          reduce using rule 63 (empty -> .)
    INT_TYPE        shift and go to state 168
    FLOAT_TYPE      shift and go to state 169
    STRING_TYPE     shift and go to state 170
    BOOL_TYPE       shift and go to state 171
    ARRAY_TYPE      shift and go to state 172
    VOID            shift and go to state 173
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    argumento                      shift and go to state 162
    argumentos                     shift and go to state 274
    empty                          shift and go to state 163
    type                           shift and go to state 164
    valor                          shift and go to state 166
    operaArit                      shift and go to state 167
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 228

    (141) argumento -> type VARIABLE .
    (143) argumento -> type VARIABLE . EQUALS valor

    COMMA           reduce using rule 141 (argumento -> type VARIABLE .)
    RPAREN          reduce using rule 141 (argumento -> type VARIABLE .)
    EQUALS          shift and go to state 275


state 229

    (142) argumento -> VARIABLE EQUALS . valor
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    valor                          shift and go to state 276
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 230

    (159) llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .
    (161) llamadaFuncion -> EMPTY LPAREN argumentos RPAREN . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    VARIABLE        reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ECHO            reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    PRINT           reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    TRY             reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    FUNCTION        reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    RETURN          reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ID              reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    EMPTY           reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    CLASS           reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    INTERFACE       reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    INCLUDE         reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    NAMESPACE       reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    THROW           reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    CONST           reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    THIS            reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    INT             reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    FLOAT           reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    STRING          reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    BOOL            reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    NULL            reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ARRAY           reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ABSTRACT        reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    PRIVATE         reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    PROTECTED       reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    PUBLIC          reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    STATIC          reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    FINAL           reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    LPAREN          reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    IF              reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    WHILE           reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    DO              reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    SWITCH          reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    FOREACH         reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    FOR             reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    CLOSETAG        reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    LT              reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    GT              reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    LEQ             reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    GEQ             reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    EQ              reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    NEQ             reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    STRICTEQ        reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    STRICTNEQ       reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    AND             reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    LOGICAL_AND     reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    OR              reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    LOGICAL_OR      reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    RPAREN          reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    COMMA           reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    PLUS            reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    MINUS           reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    TIMES           reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    DIVIDE          reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    MODULO          reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    POTENCIA        reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    PLUSEQUAL       reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    RBRACE          reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    BREAK           reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ENDSWITCH       reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    CASE            reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    DEFAULT         reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ARROWMAP        reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    RBRACKET        reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    COLON           reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    SEMICOLON       shift and go to state 277

  ! SEMICOLON       [ reduce using rule 159 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .) ]


state 231

    (162) classDeclarate -> CLASS ID LBRACE classBody . RBRACE

    RBRACE          shift and go to state 278


state 232

    (166) classBody -> classMember .
    (167) classBody -> classMember . classBody
    (166) classBody -> . classMember
    (167) classBody -> . classMember classBody
    (168) classMember -> . type VARIABLE SEMICOLON
    (169) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (170) classMember -> . objectInstantiation
    (145) type -> . INT_TYPE
    (146) type -> . FLOAT_TYPE
    (147) type -> . STRING_TYPE
    (148) type -> . BOOL_TYPE
    (149) type -> . ARRAY_TYPE
    (150) type -> . VOID
    (171) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (172) objectInstantiation -> . NEW ID LPAREN RPAREN

    RBRACE          reduce using rule 166 (classBody -> classMember .)
    INT_TYPE        shift and go to state 168
    FLOAT_TYPE      shift and go to state 169
    STRING_TYPE     shift and go to state 170
    BOOL_TYPE       shift and go to state 171
    ARRAY_TYPE      shift and go to state 172
    VOID            shift and go to state 173
    NEW             shift and go to state 235

    classMember                    shift and go to state 232
    classBody                      shift and go to state 279
    type                           shift and go to state 233
    objectInstantiation            shift and go to state 234

state 233

    (168) classMember -> type . VARIABLE SEMICOLON
    (169) classMember -> type . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE

    VARIABLE        shift and go to state 280
    FUNCTION        shift and go to state 281


state 234

    (170) classMember -> objectInstantiation .

    INT_TYPE        reduce using rule 170 (classMember -> objectInstantiation .)
    FLOAT_TYPE      reduce using rule 170 (classMember -> objectInstantiation .)
    STRING_TYPE     reduce using rule 170 (classMember -> objectInstantiation .)
    BOOL_TYPE       reduce using rule 170 (classMember -> objectInstantiation .)
    ARRAY_TYPE      reduce using rule 170 (classMember -> objectInstantiation .)
    VOID            reduce using rule 170 (classMember -> objectInstantiation .)
    NEW             reduce using rule 170 (classMember -> objectInstantiation .)
    RBRACE          reduce using rule 170 (classMember -> objectInstantiation .)


state 235

    (171) objectInstantiation -> NEW . ID LPAREN argumentos RPAREN
    (172) objectInstantiation -> NEW . ID LPAREN RPAREN

    ID              shift and go to state 282


state 236

    (163) classDeclarate -> CLASS ID EXTENDS ID . LBRACE classBody RBRACE
    (174) classInterface -> CLASS ID EXTENDS ID . IMPLEMENTS impInterface LBRACE classBody RBRACE

    LBRACE          shift and go to state 283
    IMPLEMENTS      shift and go to state 284


state 237

    (177) impInterface -> ID .
    (178) impInterface -> ID . COMMA impInterface

    LBRACE          reduce using rule 177 (impInterface -> ID .)
    COMMA           shift and go to state 285


state 238

    (173) classInterface -> CLASS ID IMPLEMENTS impInterface . LBRACE classBody RBRACE

    LBRACE          shift and go to state 286


state 239

    (164) classDeclarate -> data CLASS ID LBRACE . classBody RBRACE
    (166) classBody -> . classMember
    (167) classBody -> . classMember classBody
    (168) classMember -> . type VARIABLE SEMICOLON
    (169) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (170) classMember -> . objectInstantiation
    (145) type -> . INT_TYPE
    (146) type -> . FLOAT_TYPE
    (147) type -> . STRING_TYPE
    (148) type -> . BOOL_TYPE
    (149) type -> . ARRAY_TYPE
    (150) type -> . VOID
    (171) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (172) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 168
    FLOAT_TYPE      shift and go to state 169
    STRING_TYPE     shift and go to state 170
    BOOL_TYPE       shift and go to state 171
    ARRAY_TYPE      shift and go to state 172
    VOID            shift and go to state 173
    NEW             shift and go to state 235

    classBody                      shift and go to state 287
    classMember                    shift and go to state 232
    type                           shift and go to state 233
    objectInstantiation            shift and go to state 234

state 240

    (175) classInterface -> data CLASS ID IMPLEMENTS . impInterface LBRACE classBody RBRACE
    (177) impInterface -> . ID
    (178) impInterface -> . ID COMMA impInterface

    ID              shift and go to state 237

    impInterface                   shift and go to state 288

state 241

    (176) classInterface -> data CLASS ID EXTENDS . ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    ID              shift and go to state 289


state 242

    (185) interface -> INTERFACE ID LBRACE classBody . RBRACE

    RBRACE          shift and go to state 290


state 243

    (187) includes -> INCLUDE STRING DOT STRING . SEMICOLON

    SEMICOLON       shift and go to state 291


state 244

    (190) throw -> THROW NEW EXCEPTION LPAREN . repiteValores RPAREN SEMICOLON
    (61) repiteValores -> . valor
    (62) repiteValores -> . valor COMMA repiteValores
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    repiteValores                  shift and go to state 292
    valor                          shift and go to state 98
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 245

    (193) constdeclaration -> CONST ID EQUALS valor . SEMICOLON

    SEMICOLON       shift and go to state 293


state 246

    (194) thisdeclaration -> THIS ARROW ID SEMICOLON .

    VARIABLE        reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    ECHO            reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    PRINT           reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    TRY             reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    FUNCTION        reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    RETURN          reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    ID              reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    EMPTY           reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    CLASS           reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    INTERFACE       reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    INCLUDE         reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    NAMESPACE       reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    THROW           reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    CONST           reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    THIS            reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    INT             reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    FLOAT           reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    STRING          reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    BOOL            reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    NULL            reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    ARRAY           reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    ABSTRACT        reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    PRIVATE         reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    PROTECTED       reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    PUBLIC          reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    STATIC          reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    FINAL           reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    LPAREN          reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    IF              reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    WHILE           reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    DO              reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    SWITCH          reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    FOREACH         reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    FOR             reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    CLOSETAG        reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    RBRACE          reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    BREAK           reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    ENDSWITCH       reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    CASE            reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    DEFAULT         reduce using rule 194 (thisdeclaration -> THIS ARROW ID SEMICOLON .)


state 247

    (195) thisdeclaration -> THIS ARROW ID LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 294


state 248

    (72) if -> IF LPAREN conditions RPAREN . LBRACE body RBRACE else_blocks
    (73) if -> IF LPAREN conditions RPAREN . body
    (95) body -> . sentenciaList
    (96) body -> . empty
    (97) sentenciaList -> . sentencia
    (98) sentenciaList -> . sentencia sentenciaList
    (63) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (29) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) comparacion -> . valor comparador valor
    (55) impresion -> . ECHO imprimir SEMICOLON
    (56) impresion -> . PRINT imprimir SEMICOLON
    (64) estructurasPrograma -> . controlStructure
    (65) estructurasPrograma -> . dataStructure
    (151) try -> . TRY LBRACE body RBRACE catchs
    (152) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (157) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN valor SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (162) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (163) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (164) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (165) classDeclarate -> . classInterface
    (185) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (156) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (186) includes -> . INCLUDE STRING SEMICOLON
    (187) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (188) namespace -> . NAMESPACE ID SEMICOLON
    (189) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (190) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> . THROW valor SEMICOLON
    (192) instance -> . VARIABLE INSTANCEOF ID
    (193) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (194) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (195) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (196) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (197) minuse -> . VARIABLE MINUSEQUAL INT
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (66) controlStructure -> . if
    (67) controlStructure -> . for
    (68) controlStructure -> . while
    (69) controlStructure -> . dowhile
    (70) controlStructure -> . switch
    (71) controlStructure -> . foreach
    (120) dataStructure -> . array
    (179) data -> . ABSTRACT
    (180) data -> . PRIVATE
    (181) data -> . PROTECTED
    (182) data -> . PUBLIC
    (183) data -> . STATIC
    (184) data -> . FINAL
    (173) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (175) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (72) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> . IF LPAREN conditions RPAREN body
    (99) for -> . forStatement
    (103) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (105) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (106) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (114) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (121) array -> . VARIABLE EQUALS arrays SEMICOLON
    (122) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (124) array -> . map
    (100) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (128) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for EMPTY resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for NAMESPACE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for ABSTRACT resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    LBRACE          shift and go to state 295
    RBRACE          reduce using rule 63 (empty -> .)
    CLOSETAG        reduce using rule 63 (empty -> .)
    BREAK           reduce using rule 63 (empty -> .)
    ENDSWITCH       reduce using rule 63 (empty -> .)
    CASE            reduce using rule 63 (empty -> .)
    DEFAULT         reduce using rule 63 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 61
    PRIVATE         shift and go to state 62
    PROTECTED       shift and go to state 63
    PUBLIC          shift and go to state 64
    STATIC          shift and go to state 65
    FINAL           shift and go to state 66
    LPAREN          shift and go to state 28
    IF              shift and go to state 67
    WHILE           shift and go to state 69
    DO              shift and go to state 70
    SWITCH          shift and go to state 71
    FOREACH         shift and go to state 72
    FOR             shift and go to state 74

  ! VARIABLE        [ reduce using rule 63 (empty -> .) ]
  ! ECHO            [ reduce using rule 63 (empty -> .) ]
  ! PRINT           [ reduce using rule 63 (empty -> .) ]
  ! TRY             [ reduce using rule 63 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 63 (empty -> .) ]
  ! RETURN          [ reduce using rule 63 (empty -> .) ]
  ! ID              [ reduce using rule 63 (empty -> .) ]
  ! EMPTY           [ reduce using rule 63 (empty -> .) ]
  ! CLASS           [ reduce using rule 63 (empty -> .) ]
  ! INTERFACE       [ reduce using rule 63 (empty -> .) ]
  ! INCLUDE         [ reduce using rule 63 (empty -> .) ]
  ! NAMESPACE       [ reduce using rule 63 (empty -> .) ]
  ! THROW           [ reduce using rule 63 (empty -> .) ]
  ! CONST           [ reduce using rule 63 (empty -> .) ]
  ! THIS            [ reduce using rule 63 (empty -> .) ]
  ! INT             [ reduce using rule 63 (empty -> .) ]
  ! FLOAT           [ reduce using rule 63 (empty -> .) ]
  ! STRING          [ reduce using rule 63 (empty -> .) ]
  ! BOOL            [ reduce using rule 63 (empty -> .) ]
  ! NULL            [ reduce using rule 63 (empty -> .) ]
  ! ARRAY           [ reduce using rule 63 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 63 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 63 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 63 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 63 (empty -> .) ]
  ! STATIC          [ reduce using rule 63 (empty -> .) ]
  ! FINAL           [ reduce using rule 63 (empty -> .) ]
  ! LPAREN          [ reduce using rule 63 (empty -> .) ]
  ! IF              [ reduce using rule 63 (empty -> .) ]
  ! WHILE           [ reduce using rule 63 (empty -> .) ]
  ! DO              [ reduce using rule 63 (empty -> .) ]
  ! SWITCH          [ reduce using rule 63 (empty -> .) ]
  ! FOREACH         [ reduce using rule 63 (empty -> .) ]
  ! FOR             [ reduce using rule 63 (empty -> .) ]

    body                           shift and go to state 296
    sentenciaList                  shift and go to state 157
    empty                          shift and go to state 158
    sentencia                      shift and go to state 159
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    valor                          shift and go to state 27
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    operador_ternario              shift and go to state 53
    if                             shift and go to state 54
    for                            shift and go to state 55
    while                          shift and go to state 56
    dowhile                        shift and go to state 57
    switch                         shift and go to state 58
    foreach                        shift and go to state 59
    array                          shift and go to state 60
    forStatement                   shift and go to state 68
    map                            shift and go to state 73

state 249

    (103) while -> WHILE LPAREN condition RPAREN . LBRACE body RBRACE
    (104) while -> WHILE LPAREN condition RPAREN . LBRACE RBRACE

    LBRACE          shift and go to state 297


state 250

    (105) dowhile -> DO LBRACE body RBRACE . WHILE LPAREN condition RPAREN SEMICOLON

    WHILE           shift and go to state 298


state 251

    (106) switch -> SWITCH LPAREN valor RPAREN . LBRACE caseLists RBRACE
    (107) switch -> SWITCH LPAREN valor RPAREN . COLON caseLists ENDSWITCH SEMICOLON

    LBRACE          shift and go to state 299
    COLON           shift and go to state 300


state 252

    (114) foreach -> FOREACH LPAREN VARIABLE AS . VARIABLE RPAREN LBRACE body RBRACE

    VARIABLE        shift and go to state 301


state 253

    (100) forStatement -> FOR LPAREN forcondition RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 302


state 254

    (101) forcondition -> VARIABLE EQUALS . INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (102) forcondition -> VARIABLE EQUALS . INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    INT             shift and go to state 303


state 255

    (33) operaArit -> valor operador operaArit .

    SEMICOLON       reduce using rule 33 (operaArit -> valor operador operaArit .)
    COMMA           reduce using rule 33 (operaArit -> valor operador operaArit .)
    RPAREN          reduce using rule 33 (operaArit -> valor operador operaArit .)


state 256

    (29) asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN . RPAREN SEMICOLON

    RPAREN          shift and go to state 304


state 257

    (189) anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN . ARROWMAP comparacion SEMICOLON

    ARROWMAP        shift and go to state 305


state 258

    (122) array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 306


state 259

    (128) map -> VARIABLE EQUALS LBRACKET maps RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 307


state 260

    (125) arrays -> LBRACKET repiteValores RBRACKET .

    SEMICOLON       reduce using rule 125 (arrays -> LBRACKET repiteValores RBRACKET .)
    COMMA           reduce using rule 125 (arrays -> LBRACKET repiteValores RBRACKET .)
    RBRACKET        reduce using rule 125 (arrays -> LBRACKET repiteValores RBRACKET .)


state 261

    (127) arrayAnidado -> arrays COMMA . arrayAnidado
    (126) arrayAnidado -> . arrays
    (127) arrayAnidado -> . arrays COMMA arrayAnidado
    (125) arrays -> . LBRACKET repiteValores RBRACKET

    LBRACKET        shift and go to state 208

    arrays                         shift and go to state 212
    arrayAnidado                   shift and go to state 308

state 262

    (131) maps -> mapArrow COMMA . maps
    (130) maps -> . mapArrow
    (131) maps -> . mapArrow COMMA maps
    (132) mapArrow -> . valor ARROWMAP valor
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    mapArrow                       shift and go to state 213
    maps                           shift and go to state 309
    valor                          shift and go to state 310
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 263

    (132) mapArrow -> valor ARROWMAP . valor
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    valor                          shift and go to state 311
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 264

    (123) array -> VARIABLE EQUALS ARRAY LPAREN repiteValores . RPAREN SEMICOLON

    RPAREN          shift and go to state 312


state 265

    (129) map -> VARIABLE EQUALS ARRAY LPAREN maps . RPAREN SEMICOLON

    RPAREN          shift and go to state 313


state 266

    (156) objeto -> VARIABLE ARROW ID LPAREN argumentos . RPAREN SEMICOLON

    RPAREN          shift and go to state 314


state 267

    (30) operador_ternario -> LPAREN conditions RPAREN QUESTION valor . COLON valor

    COLON           shift and go to state 315


state 268

    (31) operador_ternario -> LPAREN conditions RPAREN QUESTION COLON . valor
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    valor                          shift and go to state 316
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 269

    (151) try -> TRY LBRACE body RBRACE catchs .
    (152) try -> TRY LBRACE body RBRACE catchs . FINALLY LBRACE body RBRACE

    VARIABLE        reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    ECHO            reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    PRINT           reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    TRY             reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    FUNCTION        reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    RETURN          reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    ID              reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    EMPTY           reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    CLASS           reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    INTERFACE       reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    INCLUDE         reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    NAMESPACE       reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    THROW           reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    CONST           reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    THIS            reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    INT             reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    FLOAT           reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    STRING          reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    BOOL            reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    NULL            reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    ARRAY           reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    ABSTRACT        reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    PRIVATE         reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    PROTECTED       reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    PUBLIC          reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    STATIC          reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    FINAL           reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    LPAREN          reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    IF              reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    WHILE           reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    DO              reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    SWITCH          reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    FOREACH         reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    FOR             reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    CLOSETAG        reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    RBRACE          reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    BREAK           reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    ENDSWITCH       reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    CASE            reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    DEFAULT         reduce using rule 151 (try -> TRY LBRACE body RBRACE catchs .)
    FINALLY         shift and go to state 317


state 270

    (154) catchs -> catch .
    (155) catchs -> catch . catchs
    (154) catchs -> . catch
    (155) catchs -> . catch catchs
    (153) catch -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE

    FINALLY         reduce using rule 154 (catchs -> catch .)
    VARIABLE        reduce using rule 154 (catchs -> catch .)
    ECHO            reduce using rule 154 (catchs -> catch .)
    PRINT           reduce using rule 154 (catchs -> catch .)
    TRY             reduce using rule 154 (catchs -> catch .)
    FUNCTION        reduce using rule 154 (catchs -> catch .)
    RETURN          reduce using rule 154 (catchs -> catch .)
    ID              reduce using rule 154 (catchs -> catch .)
    EMPTY           reduce using rule 154 (catchs -> catch .)
    CLASS           reduce using rule 154 (catchs -> catch .)
    INTERFACE       reduce using rule 154 (catchs -> catch .)
    INCLUDE         reduce using rule 154 (catchs -> catch .)
    NAMESPACE       reduce using rule 154 (catchs -> catch .)
    THROW           reduce using rule 154 (catchs -> catch .)
    CONST           reduce using rule 154 (catchs -> catch .)
    THIS            reduce using rule 154 (catchs -> catch .)
    INT             reduce using rule 154 (catchs -> catch .)
    FLOAT           reduce using rule 154 (catchs -> catch .)
    STRING          reduce using rule 154 (catchs -> catch .)
    BOOL            reduce using rule 154 (catchs -> catch .)
    NULL            reduce using rule 154 (catchs -> catch .)
    ARRAY           reduce using rule 154 (catchs -> catch .)
    ABSTRACT        reduce using rule 154 (catchs -> catch .)
    PRIVATE         reduce using rule 154 (catchs -> catch .)
    PROTECTED       reduce using rule 154 (catchs -> catch .)
    PUBLIC          reduce using rule 154 (catchs -> catch .)
    STATIC          reduce using rule 154 (catchs -> catch .)
    FINAL           reduce using rule 154 (catchs -> catch .)
    LPAREN          reduce using rule 154 (catchs -> catch .)
    IF              reduce using rule 154 (catchs -> catch .)
    WHILE           reduce using rule 154 (catchs -> catch .)
    DO              reduce using rule 154 (catchs -> catch .)
    SWITCH          reduce using rule 154 (catchs -> catch .)
    FOREACH         reduce using rule 154 (catchs -> catch .)
    FOR             reduce using rule 154 (catchs -> catch .)
    CLOSETAG        reduce using rule 154 (catchs -> catch .)
    RBRACE          reduce using rule 154 (catchs -> catch .)
    BREAK           reduce using rule 154 (catchs -> catch .)
    ENDSWITCH       reduce using rule 154 (catchs -> catch .)
    CASE            reduce using rule 154 (catchs -> catch .)
    DEFAULT         reduce using rule 154 (catchs -> catch .)
    CATCH           shift and go to state 271

    catch                          shift and go to state 270
    catchs                         shift and go to state 318

state 271

    (153) catch -> CATCH . LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 319


state 272

    (157) funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 320


state 273

    (158) llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .

    VARIABLE        reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ECHO            reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    PRINT           reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    TRY             reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    RETURN          reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ID              reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    EMPTY           reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    CLASS           reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    THROW           reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    CONST           reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    THIS            reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    INT             reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FLOAT           reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    STRING          reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    BOOL            reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    NULL            reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ARRAY           reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    STATIC          reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FINAL           reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    LPAREN          reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    IF              reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    WHILE           reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    DO              reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    SWITCH          reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FOREACH         reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FOR             reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    LT              reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    GT              reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    LEQ             reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    GEQ             reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    EQ              reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    NEQ             reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    STRICTEQ        reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    STRICTNEQ       reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    AND             reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    LOGICAL_AND     reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    OR              reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    LOGICAL_OR      reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    RPAREN          reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    COMMA           reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    PLUS            reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    MINUS           reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    TIMES           reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    DIVIDE          reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    MODULO          reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    POTENCIA        reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    PLUSEQUAL       reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    RBRACE          reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    BREAK           reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    CASE            reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ARROWMAP        reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    COLON           reduce using rule 158 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)


state 274

    (139) argumentos -> argumento COMMA argumentos .

    RPAREN          reduce using rule 139 (argumentos -> argumento COMMA argumentos .)


state 275

    (143) argumento -> type VARIABLE EQUALS . valor
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    valor                          shift and go to state 321
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 276

    (142) argumento -> VARIABLE EQUALS valor .

    COMMA           reduce using rule 142 (argumento -> VARIABLE EQUALS valor .)
    RPAREN          reduce using rule 142 (argumento -> VARIABLE EQUALS valor .)


state 277

    (161) llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .

    VARIABLE        reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ECHO            reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    PRINT           reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    TRY             reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    RETURN          reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ID              reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    EMPTY           reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    CLASS           reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    THROW           reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    CONST           reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    THIS            reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    INT             reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    FLOAT           reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    STRING          reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    BOOL            reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    NULL            reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ARRAY           reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    STATIC          reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    FINAL           reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    LPAREN          reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    IF              reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    WHILE           reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    DO              reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    SWITCH          reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    FOREACH         reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    FOR             reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    LT              reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    GT              reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    LEQ             reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    GEQ             reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    EQ              reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    NEQ             reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    STRICTEQ        reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    STRICTNEQ       reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    AND             reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    LOGICAL_AND     reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    OR              reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    LOGICAL_OR      reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    RPAREN          reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    COMMA           reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    PLUS            reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    MINUS           reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    TIMES           reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    DIVIDE          reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    MODULO          reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    POTENCIA        reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    PLUSEQUAL       reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    RBRACE          reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    BREAK           reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    CASE            reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ARROWMAP        reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    COLON           reduce using rule 161 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)


state 278

    (162) classDeclarate -> CLASS ID LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    ECHO            reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    PRINT           reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    TRY             reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    RETURN          reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    ID              reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    CLASS           reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    THROW           reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    CONST           reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    THIS            reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    INT             reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    STRING          reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    BOOL            reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    NULL            reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    STATIC          reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    FINAL           reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    LPAREN          reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    IF              reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    WHILE           reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    DO              reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    FOR             reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    BREAK           reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    CASE            reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 162 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)


state 279

    (167) classBody -> classMember classBody .

    RBRACE          reduce using rule 167 (classBody -> classMember classBody .)


state 280

    (168) classMember -> type VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 322


state 281

    (169) classMember -> type FUNCTION . ID LPAREN argumentos RPAREN LBRACE body RBRACE

    ID              shift and go to state 323


state 282

    (171) objectInstantiation -> NEW ID . LPAREN argumentos RPAREN
    (172) objectInstantiation -> NEW ID . LPAREN RPAREN

    LPAREN          shift and go to state 324


state 283

    (163) classDeclarate -> CLASS ID EXTENDS ID LBRACE . classBody RBRACE
    (166) classBody -> . classMember
    (167) classBody -> . classMember classBody
    (168) classMember -> . type VARIABLE SEMICOLON
    (169) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (170) classMember -> . objectInstantiation
    (145) type -> . INT_TYPE
    (146) type -> . FLOAT_TYPE
    (147) type -> . STRING_TYPE
    (148) type -> . BOOL_TYPE
    (149) type -> . ARRAY_TYPE
    (150) type -> . VOID
    (171) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (172) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 168
    FLOAT_TYPE      shift and go to state 169
    STRING_TYPE     shift and go to state 170
    BOOL_TYPE       shift and go to state 171
    ARRAY_TYPE      shift and go to state 172
    VOID            shift and go to state 173
    NEW             shift and go to state 235

    classBody                      shift and go to state 325
    classMember                    shift and go to state 232
    type                           shift and go to state 233
    objectInstantiation            shift and go to state 234

state 284

    (174) classInterface -> CLASS ID EXTENDS ID IMPLEMENTS . impInterface LBRACE classBody RBRACE
    (177) impInterface -> . ID
    (178) impInterface -> . ID COMMA impInterface

    ID              shift and go to state 237

    impInterface                   shift and go to state 326

state 285

    (178) impInterface -> ID COMMA . impInterface
    (177) impInterface -> . ID
    (178) impInterface -> . ID COMMA impInterface

    ID              shift and go to state 237

    impInterface                   shift and go to state 327

state 286

    (173) classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE . classBody RBRACE
    (166) classBody -> . classMember
    (167) classBody -> . classMember classBody
    (168) classMember -> . type VARIABLE SEMICOLON
    (169) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (170) classMember -> . objectInstantiation
    (145) type -> . INT_TYPE
    (146) type -> . FLOAT_TYPE
    (147) type -> . STRING_TYPE
    (148) type -> . BOOL_TYPE
    (149) type -> . ARRAY_TYPE
    (150) type -> . VOID
    (171) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (172) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 168
    FLOAT_TYPE      shift and go to state 169
    STRING_TYPE     shift and go to state 170
    BOOL_TYPE       shift and go to state 171
    ARRAY_TYPE      shift and go to state 172
    VOID            shift and go to state 173
    NEW             shift and go to state 235

    classBody                      shift and go to state 328
    classMember                    shift and go to state 232
    type                           shift and go to state 233
    objectInstantiation            shift and go to state 234

state 287

    (164) classDeclarate -> data CLASS ID LBRACE classBody . RBRACE

    RBRACE          shift and go to state 329


state 288

    (175) classInterface -> data CLASS ID IMPLEMENTS impInterface . LBRACE classBody RBRACE

    LBRACE          shift and go to state 330


state 289

    (176) classInterface -> data CLASS ID EXTENDS ID . IMPLEMENTS impInterface LBRACE classBody RBRACE

    IMPLEMENTS      shift and go to state 331


state 290

    (185) interface -> INTERFACE ID LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    ECHO            reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    PRINT           reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    TRY             reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    RETURN          reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    ID              reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    CLASS           reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    THROW           reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    CONST           reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    THIS            reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    INT             reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    STRING          reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    BOOL            reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    NULL            reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    STATIC          reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    FINAL           reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    LPAREN          reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    IF              reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    WHILE           reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    DO              reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    FOR             reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    BREAK           reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    CASE            reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 185 (interface -> INTERFACE ID LBRACE classBody RBRACE .)


state 291

    (187) includes -> INCLUDE STRING DOT STRING SEMICOLON .

    VARIABLE        reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    ECHO            reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    PRINT           reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    TRY             reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    FUNCTION        reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    RETURN          reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    ID              reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    EMPTY           reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    CLASS           reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    INTERFACE       reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    INCLUDE         reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    NAMESPACE       reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    THROW           reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    CONST           reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    THIS            reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    INT             reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    FLOAT           reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    STRING          reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    BOOL            reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    NULL            reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    ARRAY           reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    ABSTRACT        reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    PRIVATE         reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    PROTECTED       reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    PUBLIC          reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    STATIC          reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    FINAL           reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    LPAREN          reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    IF              reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    WHILE           reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    DO              reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    SWITCH          reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    FOREACH         reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    FOR             reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    CLOSETAG        reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    RBRACE          reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    BREAK           reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    ENDSWITCH       reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    CASE            reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    DEFAULT         reduce using rule 187 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)


state 292

    (190) throw -> THROW NEW EXCEPTION LPAREN repiteValores . RPAREN SEMICOLON

    RPAREN          shift and go to state 332


state 293

    (193) constdeclaration -> CONST ID EQUALS valor SEMICOLON .

    VARIABLE        reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    ECHO            reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    PRINT           reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    TRY             reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    FUNCTION        reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    RETURN          reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    ID              reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    EMPTY           reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    CLASS           reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    INTERFACE       reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    INCLUDE         reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    NAMESPACE       reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    THROW           reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    CONST           reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    THIS            reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    INT             reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    FLOAT           reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    STRING          reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    BOOL            reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    NULL            reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    ARRAY           reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    ABSTRACT        reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    PRIVATE         reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    PROTECTED       reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    PUBLIC          reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    STATIC          reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    FINAL           reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    LPAREN          reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    IF              reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    WHILE           reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    DO              reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    SWITCH          reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    FOREACH         reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    FOR             reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    CLOSETAG        reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    RBRACE          reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    BREAK           reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    ENDSWITCH       reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    CASE            reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    DEFAULT         reduce using rule 193 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)


state 294

    (195) thisdeclaration -> THIS ARROW ID LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 333


state 295

    (72) if -> IF LPAREN conditions RPAREN LBRACE . body RBRACE else_blocks
    (95) body -> . sentenciaList
    (96) body -> . empty
    (97) sentenciaList -> . sentencia
    (98) sentenciaList -> . sentencia sentenciaList
    (63) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (29) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) comparacion -> . valor comparador valor
    (55) impresion -> . ECHO imprimir SEMICOLON
    (56) impresion -> . PRINT imprimir SEMICOLON
    (64) estructurasPrograma -> . controlStructure
    (65) estructurasPrograma -> . dataStructure
    (151) try -> . TRY LBRACE body RBRACE catchs
    (152) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (157) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN valor SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (162) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (163) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (164) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (165) classDeclarate -> . classInterface
    (185) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (156) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (186) includes -> . INCLUDE STRING SEMICOLON
    (187) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (188) namespace -> . NAMESPACE ID SEMICOLON
    (189) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (190) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> . THROW valor SEMICOLON
    (192) instance -> . VARIABLE INSTANCEOF ID
    (193) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (194) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (195) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (196) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (197) minuse -> . VARIABLE MINUSEQUAL INT
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (66) controlStructure -> . if
    (67) controlStructure -> . for
    (68) controlStructure -> . while
    (69) controlStructure -> . dowhile
    (70) controlStructure -> . switch
    (71) controlStructure -> . foreach
    (120) dataStructure -> . array
    (179) data -> . ABSTRACT
    (180) data -> . PRIVATE
    (181) data -> . PROTECTED
    (182) data -> . PUBLIC
    (183) data -> . STATIC
    (184) data -> . FINAL
    (173) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (175) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (72) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> . IF LPAREN conditions RPAREN body
    (99) for -> . forStatement
    (103) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (105) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (106) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (114) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (121) array -> . VARIABLE EQUALS arrays SEMICOLON
    (122) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (124) array -> . map
    (100) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (128) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 63 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 61
    PRIVATE         shift and go to state 62
    PROTECTED       shift and go to state 63
    PUBLIC          shift and go to state 64
    STATIC          shift and go to state 65
    FINAL           shift and go to state 66
    LPAREN          shift and go to state 28
    IF              shift and go to state 67
    WHILE           shift and go to state 69
    DO              shift and go to state 70
    SWITCH          shift and go to state 71
    FOREACH         shift and go to state 72
    FOR             shift and go to state 74

    body                           shift and go to state 334
    sentenciaList                  shift and go to state 157
    empty                          shift and go to state 158
    sentencia                      shift and go to state 159
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    valor                          shift and go to state 27
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    operador_ternario              shift and go to state 53
    if                             shift and go to state 54
    for                            shift and go to state 55
    while                          shift and go to state 56
    dowhile                        shift and go to state 57
    switch                         shift and go to state 58
    foreach                        shift and go to state 59
    array                          shift and go to state 60
    forStatement                   shift and go to state 68
    map                            shift and go to state 73

state 296

    (73) if -> IF LPAREN conditions RPAREN body .

    VARIABLE        reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    ECHO            reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    PRINT           reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    TRY             reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    FUNCTION        reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    RETURN          reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    ID              reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    EMPTY           reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    CLASS           reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    INTERFACE       reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    INCLUDE         reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    NAMESPACE       reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    THROW           reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    CONST           reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    THIS            reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    INT             reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    FLOAT           reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    STRING          reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    BOOL            reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    NULL            reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    ARRAY           reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    ABSTRACT        reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    PRIVATE         reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    PROTECTED       reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    PUBLIC          reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    STATIC          reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    FINAL           reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    LPAREN          reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    IF              reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    WHILE           reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    DO              reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    SWITCH          reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    FOREACH         reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    FOR             reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    CLOSETAG        reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    RBRACE          reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    BREAK           reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    ENDSWITCH       reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    CASE            reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)
    DEFAULT         reduce using rule 73 (if -> IF LPAREN conditions RPAREN body .)


state 297

    (103) while -> WHILE LPAREN condition RPAREN LBRACE . body RBRACE
    (104) while -> WHILE LPAREN condition RPAREN LBRACE . RBRACE
    (95) body -> . sentenciaList
    (96) body -> . empty
    (97) sentenciaList -> . sentencia
    (98) sentenciaList -> . sentencia sentenciaList
    (63) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (29) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) comparacion -> . valor comparador valor
    (55) impresion -> . ECHO imprimir SEMICOLON
    (56) impresion -> . PRINT imprimir SEMICOLON
    (64) estructurasPrograma -> . controlStructure
    (65) estructurasPrograma -> . dataStructure
    (151) try -> . TRY LBRACE body RBRACE catchs
    (152) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (157) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN valor SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (162) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (163) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (164) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (165) classDeclarate -> . classInterface
    (185) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (156) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (186) includes -> . INCLUDE STRING SEMICOLON
    (187) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (188) namespace -> . NAMESPACE ID SEMICOLON
    (189) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (190) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> . THROW valor SEMICOLON
    (192) instance -> . VARIABLE INSTANCEOF ID
    (193) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (194) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (195) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (196) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (197) minuse -> . VARIABLE MINUSEQUAL INT
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (66) controlStructure -> . if
    (67) controlStructure -> . for
    (68) controlStructure -> . while
    (69) controlStructure -> . dowhile
    (70) controlStructure -> . switch
    (71) controlStructure -> . foreach
    (120) dataStructure -> . array
    (179) data -> . ABSTRACT
    (180) data -> . PRIVATE
    (181) data -> . PROTECTED
    (182) data -> . PUBLIC
    (183) data -> . STATIC
    (184) data -> . FINAL
    (173) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (175) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (72) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> . IF LPAREN conditions RPAREN body
    (99) for -> . forStatement
    (103) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (105) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (106) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (114) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (121) array -> . VARIABLE EQUALS arrays SEMICOLON
    (122) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (124) array -> . map
    (100) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (128) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 336
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 61
    PRIVATE         shift and go to state 62
    PROTECTED       shift and go to state 63
    PUBLIC          shift and go to state 64
    STATIC          shift and go to state 65
    FINAL           shift and go to state 66
    LPAREN          shift and go to state 28
    IF              shift and go to state 67
    WHILE           shift and go to state 69
    DO              shift and go to state 70
    SWITCH          shift and go to state 71
    FOREACH         shift and go to state 72
    FOR             shift and go to state 74

  ! RBRACE          [ reduce using rule 63 (empty -> .) ]

    body                           shift and go to state 335
    sentenciaList                  shift and go to state 157
    empty                          shift and go to state 158
    sentencia                      shift and go to state 159
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    valor                          shift and go to state 27
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    operador_ternario              shift and go to state 53
    if                             shift and go to state 54
    for                            shift and go to state 55
    while                          shift and go to state 56
    dowhile                        shift and go to state 57
    switch                         shift and go to state 58
    foreach                        shift and go to state 59
    array                          shift and go to state 60
    forStatement                   shift and go to state 68
    map                            shift and go to state 73

state 298

    (105) dowhile -> DO LBRACE body RBRACE WHILE . LPAREN condition RPAREN SEMICOLON

    LPAREN          shift and go to state 337


state 299

    (106) switch -> SWITCH LPAREN valor RPAREN LBRACE . caseLists RBRACE
    (108) caseLists -> . cases
    (109) caseLists -> . cases default
    (110) caseLists -> . default
    (111) caseLists -> . empty
    (112) cases -> . case
    (113) cases -> . case cases
    (133) default -> . DEFAULT COLON body BREAK SEMICOLON
    (134) default -> . DEFAULT SEMICOLON body BREAK SEMICOLON
    (135) default -> . DEFAULT COLON body
    (136) default -> . DEFAULT SEMICOLON body
    (137) default -> . DEFAULT
    (63) empty -> .
    (115) case -> . CASE valor COLON body BREAK SEMICOLON
    (116) case -> . CASE valor SEMICOLON body BREAK SEMICOLON
    (117) case -> . CASE valor COLON body
    (118) case -> . CASE valor SEMICOLON
    (119) case -> . CASE valor

    DEFAULT         shift and go to state 343
    RBRACE          reduce using rule 63 (empty -> .)
    CASE            shift and go to state 344

    caseLists                      shift and go to state 338
    cases                          shift and go to state 339
    default                        shift and go to state 340
    empty                          shift and go to state 341
    case                           shift and go to state 342

state 300

    (107) switch -> SWITCH LPAREN valor RPAREN COLON . caseLists ENDSWITCH SEMICOLON
    (108) caseLists -> . cases
    (109) caseLists -> . cases default
    (110) caseLists -> . default
    (111) caseLists -> . empty
    (112) cases -> . case
    (113) cases -> . case cases
    (133) default -> . DEFAULT COLON body BREAK SEMICOLON
    (134) default -> . DEFAULT SEMICOLON body BREAK SEMICOLON
    (135) default -> . DEFAULT COLON body
    (136) default -> . DEFAULT SEMICOLON body
    (137) default -> . DEFAULT
    (63) empty -> .
    (115) case -> . CASE valor COLON body BREAK SEMICOLON
    (116) case -> . CASE valor SEMICOLON body BREAK SEMICOLON
    (117) case -> . CASE valor COLON body
    (118) case -> . CASE valor SEMICOLON
    (119) case -> . CASE valor

    DEFAULT         shift and go to state 343
    ENDSWITCH       reduce using rule 63 (empty -> .)
    CASE            shift and go to state 344

    caseLists                      shift and go to state 345
    cases                          shift and go to state 339
    default                        shift and go to state 340
    empty                          shift and go to state 341
    case                           shift and go to state 342

state 301

    (114) foreach -> FOREACH LPAREN VARIABLE AS VARIABLE . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 346


state 302

    (100) forStatement -> FOR LPAREN forcondition RPAREN LBRACE . body RBRACE
    (95) body -> . sentenciaList
    (96) body -> . empty
    (97) sentenciaList -> . sentencia
    (98) sentenciaList -> . sentencia sentenciaList
    (63) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (29) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) comparacion -> . valor comparador valor
    (55) impresion -> . ECHO imprimir SEMICOLON
    (56) impresion -> . PRINT imprimir SEMICOLON
    (64) estructurasPrograma -> . controlStructure
    (65) estructurasPrograma -> . dataStructure
    (151) try -> . TRY LBRACE body RBRACE catchs
    (152) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (157) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN valor SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (162) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (163) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (164) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (165) classDeclarate -> . classInterface
    (185) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (156) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (186) includes -> . INCLUDE STRING SEMICOLON
    (187) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (188) namespace -> . NAMESPACE ID SEMICOLON
    (189) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (190) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> . THROW valor SEMICOLON
    (192) instance -> . VARIABLE INSTANCEOF ID
    (193) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (194) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (195) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (196) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (197) minuse -> . VARIABLE MINUSEQUAL INT
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (66) controlStructure -> . if
    (67) controlStructure -> . for
    (68) controlStructure -> . while
    (69) controlStructure -> . dowhile
    (70) controlStructure -> . switch
    (71) controlStructure -> . foreach
    (120) dataStructure -> . array
    (179) data -> . ABSTRACT
    (180) data -> . PRIVATE
    (181) data -> . PROTECTED
    (182) data -> . PUBLIC
    (183) data -> . STATIC
    (184) data -> . FINAL
    (173) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (175) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (72) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> . IF LPAREN conditions RPAREN body
    (99) for -> . forStatement
    (103) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (105) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (106) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (114) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (121) array -> . VARIABLE EQUALS arrays SEMICOLON
    (122) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (124) array -> . map
    (100) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (128) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 63 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 61
    PRIVATE         shift and go to state 62
    PROTECTED       shift and go to state 63
    PUBLIC          shift and go to state 64
    STATIC          shift and go to state 65
    FINAL           shift and go to state 66
    LPAREN          shift and go to state 28
    IF              shift and go to state 67
    WHILE           shift and go to state 69
    DO              shift and go to state 70
    SWITCH          shift and go to state 71
    FOREACH         shift and go to state 72
    FOR             shift and go to state 74

    body                           shift and go to state 347
    sentenciaList                  shift and go to state 157
    empty                          shift and go to state 158
    sentencia                      shift and go to state 159
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    valor                          shift and go to state 27
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    operador_ternario              shift and go to state 53
    if                             shift and go to state 54
    for                            shift and go to state 55
    while                          shift and go to state 56
    dowhile                        shift and go to state 57
    switch                         shift and go to state 58
    foreach                        shift and go to state 59
    array                          shift and go to state 60
    forStatement                   shift and go to state 68
    map                            shift and go to state 73

state 303

    (101) forcondition -> VARIABLE EQUALS INT . SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (102) forcondition -> VARIABLE EQUALS INT . SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    SEMICOLON       shift and go to state 348


state 304

    (29) asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 349


state 305

    (189) anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP . comparacion SEMICOLON
    (50) comparacion -> . valor comparador valor
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    comparacion                    shift and go to state 350
    valor                          shift and go to state 27
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 306

    (122) array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .

    VARIABLE        reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    ECHO            reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    PRINT           reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    TRY             reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    FUNCTION        reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    RETURN          reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    ID              reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    EMPTY           reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    CLASS           reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    INTERFACE       reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    INCLUDE         reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    NAMESPACE       reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    THROW           reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    CONST           reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    THIS            reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    INT             reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    STRING          reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    BOOL            reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    NULL            reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    ARRAY           reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    ABSTRACT        reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    PRIVATE         reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    PROTECTED       reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    PUBLIC          reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    STATIC          reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    FINAL           reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    IF              reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    WHILE           reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    DO              reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    SWITCH          reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    FOREACH         reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    FOR             reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    CLOSETAG        reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    BREAK           reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    ENDSWITCH       reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    CASE            reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    DEFAULT         reduce using rule 122 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)


state 307

    (128) map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .

    VARIABLE        reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    ECHO            reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    PRINT           reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    TRY             reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    FUNCTION        reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    RETURN          reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    ID              reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    EMPTY           reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    CLASS           reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    INTERFACE       reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    INCLUDE         reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    NAMESPACE       reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    THROW           reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    CONST           reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    THIS            reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    INT             reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    STRING          reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    BOOL            reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    NULL            reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    ARRAY           reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    ABSTRACT        reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    PRIVATE         reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    PROTECTED       reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    PUBLIC          reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    STATIC          reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    FINAL           reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    IF              reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    WHILE           reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    DO              reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    SWITCH          reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    FOREACH         reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    FOR             reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    CLOSETAG        reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    BREAK           reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    ENDSWITCH       reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    CASE            reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    DEFAULT         reduce using rule 128 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)


state 308

    (127) arrayAnidado -> arrays COMMA arrayAnidado .

    RBRACKET        reduce using rule 127 (arrayAnidado -> arrays COMMA arrayAnidado .)


state 309

    (131) maps -> mapArrow COMMA maps .

    RBRACKET        reduce using rule 131 (maps -> mapArrow COMMA maps .)
    RPAREN          reduce using rule 131 (maps -> mapArrow COMMA maps .)


state 310

    (132) mapArrow -> valor . ARROWMAP valor

    ARROWMAP        shift and go to state 263


state 311

    (132) mapArrow -> valor ARROWMAP valor .

    COMMA           reduce using rule 132 (mapArrow -> valor ARROWMAP valor .)
    RBRACKET        reduce using rule 132 (mapArrow -> valor ARROWMAP valor .)
    RPAREN          reduce using rule 132 (mapArrow -> valor ARROWMAP valor .)


state 312

    (123) array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 351


state 313

    (129) map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 352


state 314

    (156) objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 353


state 315

    (30) operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON . valor
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    valor                          shift and go to state 354
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 316

    (31) operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .

    LT              reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    GT              reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    LEQ             reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    GEQ             reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    EQ              reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    NEQ             reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    STRICTEQ        reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    STRICTNEQ       reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    AND             reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    LOGICAL_AND     reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    OR              reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    LOGICAL_OR      reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    RPAREN          reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    COMMA           reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    SEMICOLON       reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    PLUS            reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    MINUS           reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    TIMES           reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    DIVIDE          reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    MODULO          reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    POTENCIA        reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    PLUSEQUAL       reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    VARIABLE        reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    ECHO            reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    PRINT           reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    TRY             reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    FUNCTION        reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    RETURN          reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    ID              reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    EMPTY           reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    CLASS           reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    INTERFACE       reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    INCLUDE         reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    NAMESPACE       reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    THROW           reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    CONST           reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    THIS            reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    INT             reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    FLOAT           reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    STRING          reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    BOOL            reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    NULL            reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    ARRAY           reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    ABSTRACT        reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    PRIVATE         reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    PROTECTED       reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    PUBLIC          reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    STATIC          reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    FINAL           reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    LPAREN          reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    IF              reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    WHILE           reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    DO              reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    SWITCH          reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    FOREACH         reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    FOR             reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    CLOSETAG        reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    RBRACE          reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    BREAK           reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    ENDSWITCH       reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    CASE            reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    DEFAULT         reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    ARROWMAP        reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    RBRACKET        reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)
    COLON           reduce using rule 31 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)


state 317

    (152) try -> TRY LBRACE body RBRACE catchs FINALLY . LBRACE body RBRACE

    LBRACE          shift and go to state 355


state 318

    (155) catchs -> catch catchs .

    FINALLY         reduce using rule 155 (catchs -> catch catchs .)
    VARIABLE        reduce using rule 155 (catchs -> catch catchs .)
    ECHO            reduce using rule 155 (catchs -> catch catchs .)
    PRINT           reduce using rule 155 (catchs -> catch catchs .)
    TRY             reduce using rule 155 (catchs -> catch catchs .)
    FUNCTION        reduce using rule 155 (catchs -> catch catchs .)
    RETURN          reduce using rule 155 (catchs -> catch catchs .)
    ID              reduce using rule 155 (catchs -> catch catchs .)
    EMPTY           reduce using rule 155 (catchs -> catch catchs .)
    CLASS           reduce using rule 155 (catchs -> catch catchs .)
    INTERFACE       reduce using rule 155 (catchs -> catch catchs .)
    INCLUDE         reduce using rule 155 (catchs -> catch catchs .)
    NAMESPACE       reduce using rule 155 (catchs -> catch catchs .)
    THROW           reduce using rule 155 (catchs -> catch catchs .)
    CONST           reduce using rule 155 (catchs -> catch catchs .)
    THIS            reduce using rule 155 (catchs -> catch catchs .)
    INT             reduce using rule 155 (catchs -> catch catchs .)
    FLOAT           reduce using rule 155 (catchs -> catch catchs .)
    STRING          reduce using rule 155 (catchs -> catch catchs .)
    BOOL            reduce using rule 155 (catchs -> catch catchs .)
    NULL            reduce using rule 155 (catchs -> catch catchs .)
    ARRAY           reduce using rule 155 (catchs -> catch catchs .)
    ABSTRACT        reduce using rule 155 (catchs -> catch catchs .)
    PRIVATE         reduce using rule 155 (catchs -> catch catchs .)
    PROTECTED       reduce using rule 155 (catchs -> catch catchs .)
    PUBLIC          reduce using rule 155 (catchs -> catch catchs .)
    STATIC          reduce using rule 155 (catchs -> catch catchs .)
    FINAL           reduce using rule 155 (catchs -> catch catchs .)
    LPAREN          reduce using rule 155 (catchs -> catch catchs .)
    IF              reduce using rule 155 (catchs -> catch catchs .)
    WHILE           reduce using rule 155 (catchs -> catch catchs .)
    DO              reduce using rule 155 (catchs -> catch catchs .)
    SWITCH          reduce using rule 155 (catchs -> catch catchs .)
    FOREACH         reduce using rule 155 (catchs -> catch catchs .)
    FOR             reduce using rule 155 (catchs -> catch catchs .)
    CLOSETAG        reduce using rule 155 (catchs -> catch catchs .)
    RBRACE          reduce using rule 155 (catchs -> catch catchs .)
    BREAK           reduce using rule 155 (catchs -> catch catchs .)
    ENDSWITCH       reduce using rule 155 (catchs -> catch catchs .)
    CASE            reduce using rule 155 (catchs -> catch catchs .)
    DEFAULT         reduce using rule 155 (catchs -> catch catchs .)


state 319

    (153) catch -> CATCH LPAREN . EXCEPTION VARIABLE RPAREN LBRACE body RBRACE

    EXCEPTION       shift and go to state 356


state 320

    (157) funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE . body RBRACE
    (95) body -> . sentenciaList
    (96) body -> . empty
    (97) sentenciaList -> . sentencia
    (98) sentenciaList -> . sentencia sentenciaList
    (63) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (29) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) comparacion -> . valor comparador valor
    (55) impresion -> . ECHO imprimir SEMICOLON
    (56) impresion -> . PRINT imprimir SEMICOLON
    (64) estructurasPrograma -> . controlStructure
    (65) estructurasPrograma -> . dataStructure
    (151) try -> . TRY LBRACE body RBRACE catchs
    (152) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (157) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN valor SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (162) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (163) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (164) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (165) classDeclarate -> . classInterface
    (185) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (156) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (186) includes -> . INCLUDE STRING SEMICOLON
    (187) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (188) namespace -> . NAMESPACE ID SEMICOLON
    (189) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (190) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> . THROW valor SEMICOLON
    (192) instance -> . VARIABLE INSTANCEOF ID
    (193) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (194) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (195) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (196) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (197) minuse -> . VARIABLE MINUSEQUAL INT
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (66) controlStructure -> . if
    (67) controlStructure -> . for
    (68) controlStructure -> . while
    (69) controlStructure -> . dowhile
    (70) controlStructure -> . switch
    (71) controlStructure -> . foreach
    (120) dataStructure -> . array
    (179) data -> . ABSTRACT
    (180) data -> . PRIVATE
    (181) data -> . PROTECTED
    (182) data -> . PUBLIC
    (183) data -> . STATIC
    (184) data -> . FINAL
    (173) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (175) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (72) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> . IF LPAREN conditions RPAREN body
    (99) for -> . forStatement
    (103) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (105) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (106) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (114) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (121) array -> . VARIABLE EQUALS arrays SEMICOLON
    (122) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (124) array -> . map
    (100) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (128) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 63 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 61
    PRIVATE         shift and go to state 62
    PROTECTED       shift and go to state 63
    PUBLIC          shift and go to state 64
    STATIC          shift and go to state 65
    FINAL           shift and go to state 66
    LPAREN          shift and go to state 28
    IF              shift and go to state 67
    WHILE           shift and go to state 69
    DO              shift and go to state 70
    SWITCH          shift and go to state 71
    FOREACH         shift and go to state 72
    FOR             shift and go to state 74

    body                           shift and go to state 357
    sentenciaList                  shift and go to state 157
    empty                          shift and go to state 158
    sentencia                      shift and go to state 159
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    valor                          shift and go to state 27
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    operador_ternario              shift and go to state 53
    if                             shift and go to state 54
    for                            shift and go to state 55
    while                          shift and go to state 56
    dowhile                        shift and go to state 57
    switch                         shift and go to state 58
    foreach                        shift and go to state 59
    array                          shift and go to state 60
    forStatement                   shift and go to state 68
    map                            shift and go to state 73

state 321

    (143) argumento -> type VARIABLE EQUALS valor .

    COMMA           reduce using rule 143 (argumento -> type VARIABLE EQUALS valor .)
    RPAREN          reduce using rule 143 (argumento -> type VARIABLE EQUALS valor .)


state 322

    (168) classMember -> type VARIABLE SEMICOLON .

    INT_TYPE        reduce using rule 168 (classMember -> type VARIABLE SEMICOLON .)
    FLOAT_TYPE      reduce using rule 168 (classMember -> type VARIABLE SEMICOLON .)
    STRING_TYPE     reduce using rule 168 (classMember -> type VARIABLE SEMICOLON .)
    BOOL_TYPE       reduce using rule 168 (classMember -> type VARIABLE SEMICOLON .)
    ARRAY_TYPE      reduce using rule 168 (classMember -> type VARIABLE SEMICOLON .)
    VOID            reduce using rule 168 (classMember -> type VARIABLE SEMICOLON .)
    NEW             reduce using rule 168 (classMember -> type VARIABLE SEMICOLON .)
    RBRACE          reduce using rule 168 (classMember -> type VARIABLE SEMICOLON .)


state 323

    (169) classMember -> type FUNCTION ID . LPAREN argumentos RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 358


state 324

    (171) objectInstantiation -> NEW ID LPAREN . argumentos RPAREN
    (172) objectInstantiation -> NEW ID LPAREN . RPAREN
    (138) argumentos -> . argumento
    (139) argumentos -> . argumento COMMA argumentos
    (140) argumentos -> . empty
    (141) argumento -> . type VARIABLE
    (142) argumento -> . VARIABLE EQUALS valor
    (143) argumento -> . type VARIABLE EQUALS valor
    (144) argumento -> . operaArit
    (63) empty -> .
    (145) type -> . INT_TYPE
    (146) type -> . FLOAT_TYPE
    (147) type -> . STRING_TYPE
    (148) type -> . BOOL_TYPE
    (149) type -> . ARRAY_TYPE
    (150) type -> . VOID
    (32) operaArit -> . valor
    (33) operaArit -> . valor operador operaArit
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 360
    VARIABLE        shift and go to state 165
    INT_TYPE        shift and go to state 168
    FLOAT_TYPE      shift and go to state 169
    STRING_TYPE     shift and go to state 170
    BOOL_TYPE       shift and go to state 171
    ARRAY_TYPE      shift and go to state 172
    VOID            shift and go to state 173
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

  ! RPAREN          [ reduce using rule 63 (empty -> .) ]

    argumentos                     shift and go to state 359
    argumento                      shift and go to state 162
    empty                          shift and go to state 163
    type                           shift and go to state 164
    valor                          shift and go to state 166
    operaArit                      shift and go to state 167
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 325

    (163) classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody . RBRACE

    RBRACE          shift and go to state 361


state 326

    (174) classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface . LBRACE classBody RBRACE

    LBRACE          shift and go to state 362


state 327

    (178) impInterface -> ID COMMA impInterface .

    LBRACE          reduce using rule 178 (impInterface -> ID COMMA impInterface .)


state 328

    (173) classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody . RBRACE

    RBRACE          shift and go to state 363


state 329

    (164) classDeclarate -> data CLASS ID LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    ECHO            reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    PRINT           reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    TRY             reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    RETURN          reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    ID              reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    CLASS           reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    THROW           reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    CONST           reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    THIS            reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    INT             reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    STRING          reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    BOOL            reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    NULL            reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    STATIC          reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    FINAL           reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    LPAREN          reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    IF              reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    WHILE           reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    DO              reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    FOR             reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    BREAK           reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    CASE            reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 164 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)


state 330

    (175) classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE . classBody RBRACE
    (166) classBody -> . classMember
    (167) classBody -> . classMember classBody
    (168) classMember -> . type VARIABLE SEMICOLON
    (169) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (170) classMember -> . objectInstantiation
    (145) type -> . INT_TYPE
    (146) type -> . FLOAT_TYPE
    (147) type -> . STRING_TYPE
    (148) type -> . BOOL_TYPE
    (149) type -> . ARRAY_TYPE
    (150) type -> . VOID
    (171) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (172) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 168
    FLOAT_TYPE      shift and go to state 169
    STRING_TYPE     shift and go to state 170
    BOOL_TYPE       shift and go to state 171
    ARRAY_TYPE      shift and go to state 172
    VOID            shift and go to state 173
    NEW             shift and go to state 235

    classBody                      shift and go to state 364
    classMember                    shift and go to state 232
    type                           shift and go to state 233
    objectInstantiation            shift and go to state 234

state 331

    (176) classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS . impInterface LBRACE classBody RBRACE
    (177) impInterface -> . ID
    (178) impInterface -> . ID COMMA impInterface

    ID              shift and go to state 237

    impInterface                   shift and go to state 365

state 332

    (190) throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 366


state 333

    (195) thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .

    VARIABLE        reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    ECHO            reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    TRY             reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    EMPTY           reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    CLASS           reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    THROW           reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    THIS            reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    INT             reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    BOOL            reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    NULL            reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    STATIC          reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    FINAL           reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    DO              reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    SWITCH          reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    FOREACH         reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    CASE            reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 195 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)


state 334

    (72) if -> IF LPAREN conditions RPAREN LBRACE body . RBRACE else_blocks

    RBRACE          shift and go to state 367


state 335

    (103) while -> WHILE LPAREN condition RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 368


state 336

    (104) while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .

    VARIABLE        reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ECHO            reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    PRINT           reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    TRY             reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FUNCTION        reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ID              reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    EMPTY           reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    CLASS           reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    INTERFACE       reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    INCLUDE         reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    NAMESPACE       reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    THROW           reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    CONST           reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    THIS            reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    INT             reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FLOAT           reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    STRING          reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    BOOL            reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    NULL            reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ARRAY           reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ABSTRACT        reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    PRIVATE         reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    PROTECTED       reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    PUBLIC          reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    STATIC          reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FINAL           reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    LPAREN          reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    IF              reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    WHILE           reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    DO              reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    SWITCH          reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FOREACH         reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FOR             reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    CLOSETAG        reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    RBRACE          reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    BREAK           reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ENDSWITCH       reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    CASE            reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    DEFAULT         reduce using rule 104 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)


state 337

    (105) dowhile -> DO LBRACE body RBRACE WHILE LPAREN . condition RPAREN SEMICOLON
    (80) condition -> . valor
    (81) condition -> . valor opSymbol valor
    (82) condition -> . NOT condition
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    NOT             shift and go to state 91
    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    condition                      shift and go to state 369
    valor                          shift and go to state 89
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 338

    (106) switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists . RBRACE

    RBRACE          shift and go to state 370


state 339

    (108) caseLists -> cases .
    (109) caseLists -> cases . default
    (133) default -> . DEFAULT COLON body BREAK SEMICOLON
    (134) default -> . DEFAULT SEMICOLON body BREAK SEMICOLON
    (135) default -> . DEFAULT COLON body
    (136) default -> . DEFAULT SEMICOLON body
    (137) default -> . DEFAULT

    RBRACE          reduce using rule 108 (caseLists -> cases .)
    ENDSWITCH       reduce using rule 108 (caseLists -> cases .)
    DEFAULT         shift and go to state 343

    default                        shift and go to state 371

state 340

    (110) caseLists -> default .

    RBRACE          reduce using rule 110 (caseLists -> default .)
    ENDSWITCH       reduce using rule 110 (caseLists -> default .)


state 341

    (111) caseLists -> empty .

    RBRACE          reduce using rule 111 (caseLists -> empty .)
    ENDSWITCH       reduce using rule 111 (caseLists -> empty .)


state 342

    (112) cases -> case .
    (113) cases -> case . cases
    (112) cases -> . case
    (113) cases -> . case cases
    (115) case -> . CASE valor COLON body BREAK SEMICOLON
    (116) case -> . CASE valor SEMICOLON body BREAK SEMICOLON
    (117) case -> . CASE valor COLON body
    (118) case -> . CASE valor SEMICOLON
    (119) case -> . CASE valor

    DEFAULT         reduce using rule 112 (cases -> case .)
    RBRACE          reduce using rule 112 (cases -> case .)
    ENDSWITCH       reduce using rule 112 (cases -> case .)
    CASE            shift and go to state 344

    case                           shift and go to state 342
    cases                          shift and go to state 372

state 343

    (133) default -> DEFAULT . COLON body BREAK SEMICOLON
    (134) default -> DEFAULT . SEMICOLON body BREAK SEMICOLON
    (135) default -> DEFAULT . COLON body
    (136) default -> DEFAULT . SEMICOLON body
    (137) default -> DEFAULT .

    COLON           shift and go to state 373
    SEMICOLON       shift and go to state 374
    RBRACE          reduce using rule 137 (default -> DEFAULT .)
    ENDSWITCH       reduce using rule 137 (default -> DEFAULT .)


state 344

    (115) case -> CASE . valor COLON body BREAK SEMICOLON
    (116) case -> CASE . valor SEMICOLON body BREAK SEMICOLON
    (117) case -> CASE . valor COLON body
    (118) case -> CASE . valor SEMICOLON
    (119) case -> CASE . valor
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    valor                          shift and go to state 375
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 345

    (107) switch -> SWITCH LPAREN valor RPAREN COLON caseLists . ENDSWITCH SEMICOLON

    ENDSWITCH       shift and go to state 376


state 346

    (114) foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 377


state 347

    (100) forStatement -> FOR LPAREN forcondition RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 378


state 348

    (101) forcondition -> VARIABLE EQUALS INT SEMICOLON . VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (102) forcondition -> VARIABLE EQUALS INT SEMICOLON . VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    VARIABLE        shift and go to state 379


state 349

    (29) asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .

    VARIABLE        reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ECHO            reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    PRINT           reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    TRY             reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    RETURN          reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ID              reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    EMPTY           reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    CLASS           reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    THROW           reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    CONST           reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    THIS            reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    INT             reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    STRING          reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    BOOL            reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    NULL            reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    STATIC          reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FINAL           reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    IF              reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    WHILE           reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    DO              reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    SWITCH          reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FOREACH         reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FOR             reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    BREAK           reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    CASE            reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 29 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)


state 350

    (189) anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion . SEMICOLON

    SEMICOLON       shift and go to state 380


state 351

    (123) array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .

    VARIABLE        reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    ECHO            reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    PRINT           reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    TRY             reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    RETURN          reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    ID              reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    EMPTY           reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    CLASS           reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    THROW           reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    CONST           reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    THIS            reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    INT             reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    FLOAT           reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    STRING          reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    BOOL            reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    NULL            reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    ARRAY           reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    STATIC          reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    FINAL           reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    LPAREN          reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    IF              reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    WHILE           reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    DO              reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    SWITCH          reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    FOREACH         reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    FOR             reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    RBRACE          reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    BREAK           reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    CASE            reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 123 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)


state 352

    (129) map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .

    VARIABLE        reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    ECHO            reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    PRINT           reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    TRY             reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    RETURN          reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    ID              reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    EMPTY           reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    CLASS           reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    THROW           reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    CONST           reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    THIS            reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    INT             reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    FLOAT           reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    STRING          reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    BOOL            reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    NULL            reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    ARRAY           reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    STATIC          reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    FINAL           reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    LPAREN          reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    IF              reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    WHILE           reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    DO              reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    SWITCH          reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    FOREACH         reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    FOR             reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    RBRACE          reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    BREAK           reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    CASE            reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 129 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)


state 353

    (156) objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .

    VARIABLE        reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    ECHO            reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    PRINT           reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    TRY             reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    RETURN          reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    ID              reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    EMPTY           reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    CLASS           reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    THROW           reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    CONST           reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    THIS            reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    INT             reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    FLOAT           reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    STRING          reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    BOOL            reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    NULL            reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    ARRAY           reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    STATIC          reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    FINAL           reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    LPAREN          reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    IF              reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    WHILE           reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    DO              reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    SWITCH          reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    FOREACH         reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    FOR             reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    RBRACE          reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    BREAK           reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    CASE            reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 156 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)


state 354

    (30) operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .

    LT              reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    GT              reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    LEQ             reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    GEQ             reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    EQ              reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    NEQ             reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    STRICTEQ        reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    STRICTNEQ       reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    AND             reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    LOGICAL_AND     reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    OR              reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    LOGICAL_OR      reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    RPAREN          reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    COMMA           reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    SEMICOLON       reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    PLUS            reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    MINUS           reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    TIMES           reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    DIVIDE          reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    MODULO          reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    POTENCIA        reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    PLUSEQUAL       reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    VARIABLE        reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    ECHO            reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    PRINT           reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    TRY             reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    FUNCTION        reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    RETURN          reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    ID              reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    EMPTY           reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    CLASS           reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    INTERFACE       reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    INCLUDE         reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    NAMESPACE       reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    THROW           reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    CONST           reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    THIS            reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    INT             reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    FLOAT           reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    STRING          reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    BOOL            reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    NULL            reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    ARRAY           reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    ABSTRACT        reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    PRIVATE         reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    PROTECTED       reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    PUBLIC          reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    STATIC          reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    FINAL           reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    LPAREN          reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    IF              reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    WHILE           reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    DO              reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    SWITCH          reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    FOREACH         reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    FOR             reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    CLOSETAG        reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    RBRACE          reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    BREAK           reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    ENDSWITCH       reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    CASE            reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    DEFAULT         reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    ARROWMAP        reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    RBRACKET        reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)
    COLON           reduce using rule 30 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)


state 355

    (152) try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE . body RBRACE
    (95) body -> . sentenciaList
    (96) body -> . empty
    (97) sentenciaList -> . sentencia
    (98) sentenciaList -> . sentencia sentenciaList
    (63) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (29) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) comparacion -> . valor comparador valor
    (55) impresion -> . ECHO imprimir SEMICOLON
    (56) impresion -> . PRINT imprimir SEMICOLON
    (64) estructurasPrograma -> . controlStructure
    (65) estructurasPrograma -> . dataStructure
    (151) try -> . TRY LBRACE body RBRACE catchs
    (152) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (157) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN valor SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (162) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (163) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (164) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (165) classDeclarate -> . classInterface
    (185) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (156) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (186) includes -> . INCLUDE STRING SEMICOLON
    (187) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (188) namespace -> . NAMESPACE ID SEMICOLON
    (189) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (190) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> . THROW valor SEMICOLON
    (192) instance -> . VARIABLE INSTANCEOF ID
    (193) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (194) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (195) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (196) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (197) minuse -> . VARIABLE MINUSEQUAL INT
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (66) controlStructure -> . if
    (67) controlStructure -> . for
    (68) controlStructure -> . while
    (69) controlStructure -> . dowhile
    (70) controlStructure -> . switch
    (71) controlStructure -> . foreach
    (120) dataStructure -> . array
    (179) data -> . ABSTRACT
    (180) data -> . PRIVATE
    (181) data -> . PROTECTED
    (182) data -> . PUBLIC
    (183) data -> . STATIC
    (184) data -> . FINAL
    (173) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (175) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (72) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> . IF LPAREN conditions RPAREN body
    (99) for -> . forStatement
    (103) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (105) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (106) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (114) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (121) array -> . VARIABLE EQUALS arrays SEMICOLON
    (122) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (124) array -> . map
    (100) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (128) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 63 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 61
    PRIVATE         shift and go to state 62
    PROTECTED       shift and go to state 63
    PUBLIC          shift and go to state 64
    STATIC          shift and go to state 65
    FINAL           shift and go to state 66
    LPAREN          shift and go to state 28
    IF              shift and go to state 67
    WHILE           shift and go to state 69
    DO              shift and go to state 70
    SWITCH          shift and go to state 71
    FOREACH         shift and go to state 72
    FOR             shift and go to state 74

    body                           shift and go to state 381
    sentenciaList                  shift and go to state 157
    empty                          shift and go to state 158
    sentencia                      shift and go to state 159
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    valor                          shift and go to state 27
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    operador_ternario              shift and go to state 53
    if                             shift and go to state 54
    for                            shift and go to state 55
    while                          shift and go to state 56
    dowhile                        shift and go to state 57
    switch                         shift and go to state 58
    foreach                        shift and go to state 59
    array                          shift and go to state 60
    forStatement                   shift and go to state 68
    map                            shift and go to state 73

state 356

    (153) catch -> CATCH LPAREN EXCEPTION . VARIABLE RPAREN LBRACE body RBRACE

    VARIABLE        shift and go to state 382


state 357

    (157) funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 383


state 358

    (169) classMember -> type FUNCTION ID LPAREN . argumentos RPAREN LBRACE body RBRACE
    (138) argumentos -> . argumento
    (139) argumentos -> . argumento COMMA argumentos
    (140) argumentos -> . empty
    (141) argumento -> . type VARIABLE
    (142) argumento -> . VARIABLE EQUALS valor
    (143) argumento -> . type VARIABLE EQUALS valor
    (144) argumento -> . operaArit
    (63) empty -> .
    (145) type -> . INT_TYPE
    (146) type -> . FLOAT_TYPE
    (147) type -> . STRING_TYPE
    (148) type -> . BOOL_TYPE
    (149) type -> . ARRAY_TYPE
    (150) type -> . VOID
    (32) operaArit -> . valor
    (33) operaArit -> . valor operador operaArit
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    VARIABLE        shift and go to state 165
    RPAREN          reduce using rule 63 (empty -> .)
    INT_TYPE        shift and go to state 168
    FLOAT_TYPE      shift and go to state 169
    STRING_TYPE     shift and go to state 170
    BOOL_TYPE       shift and go to state 171
    ARRAY_TYPE      shift and go to state 172
    VOID            shift and go to state 173
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    LPAREN          shift and go to state 28

    type                           shift and go to state 164
    argumentos                     shift and go to state 384
    argumento                      shift and go to state 162
    empty                          shift and go to state 163
    valor                          shift and go to state 166
    operaArit                      shift and go to state 167
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 359

    (171) objectInstantiation -> NEW ID LPAREN argumentos . RPAREN

    RPAREN          shift and go to state 385


state 360

    (172) objectInstantiation -> NEW ID LPAREN RPAREN .

    INT_TYPE        reduce using rule 172 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    FLOAT_TYPE      reduce using rule 172 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    STRING_TYPE     reduce using rule 172 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    BOOL_TYPE       reduce using rule 172 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    ARRAY_TYPE      reduce using rule 172 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    VOID            reduce using rule 172 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    NEW             reduce using rule 172 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    RBRACE          reduce using rule 172 (objectInstantiation -> NEW ID LPAREN RPAREN .)


state 361

    (163) classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    ECHO            reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    PRINT           reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    TRY             reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    RETURN          reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    ID              reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    CLASS           reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    THROW           reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    CONST           reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    THIS            reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    INT             reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    STRING          reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    BOOL            reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    NULL            reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    STATIC          reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    FINAL           reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    LPAREN          reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    IF              reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    WHILE           reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    DO              reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    FOR             reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    BREAK           reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    CASE            reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 163 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)


state 362

    (174) classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE . classBody RBRACE
    (166) classBody -> . classMember
    (167) classBody -> . classMember classBody
    (168) classMember -> . type VARIABLE SEMICOLON
    (169) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (170) classMember -> . objectInstantiation
    (145) type -> . INT_TYPE
    (146) type -> . FLOAT_TYPE
    (147) type -> . STRING_TYPE
    (148) type -> . BOOL_TYPE
    (149) type -> . ARRAY_TYPE
    (150) type -> . VOID
    (171) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (172) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 168
    FLOAT_TYPE      shift and go to state 169
    STRING_TYPE     shift and go to state 170
    BOOL_TYPE       shift and go to state 171
    ARRAY_TYPE      shift and go to state 172
    VOID            shift and go to state 173
    NEW             shift and go to state 235

    classBody                      shift and go to state 386
    classMember                    shift and go to state 232
    type                           shift and go to state 233
    objectInstantiation            shift and go to state 234

state 363

    (173) classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ECHO            reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRINT           reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    TRY             reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RETURN          reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ID              reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLASS           reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THROW           reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CONST           reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THIS            reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INT             reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STRING          reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BOOL            reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NULL            reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STATIC          reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FINAL           reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    LPAREN          reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    IF              reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    WHILE           reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DO              reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOR             reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BREAK           reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CASE            reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 173 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)


state 364

    (175) classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody . RBRACE

    RBRACE          shift and go to state 387


state 365

    (176) classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface . LBRACE classBody RBRACE

    LBRACE          shift and go to state 388


state 366

    (190) throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .

    VARIABLE        reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    ECHO            reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    PRINT           reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    TRY             reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    RETURN          reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    ID              reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    EMPTY           reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    CLASS           reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    THROW           reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    CONST           reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    THIS            reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    INT             reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    FLOAT           reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    STRING          reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    BOOL            reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    NULL            reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    ARRAY           reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    STATIC          reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    FINAL           reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    LPAREN          reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    IF              reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    WHILE           reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    DO              reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    SWITCH          reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    FOREACH         reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    FOR             reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    RBRACE          reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    BREAK           reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    CASE            reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 190 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)


state 367

    (72) if -> IF LPAREN conditions RPAREN LBRACE body RBRACE . else_blocks
    (74) else_blocks -> . ELSE LBRACE body RBRACE
    (75) else_blocks -> . ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) else_blocks -> . empty
    (63) empty -> .

    ELSE            shift and go to state 390
    ELSEIF          shift and go to state 391
    VARIABLE        reduce using rule 63 (empty -> .)
    ECHO            reduce using rule 63 (empty -> .)
    PRINT           reduce using rule 63 (empty -> .)
    TRY             reduce using rule 63 (empty -> .)
    FUNCTION        reduce using rule 63 (empty -> .)
    RETURN          reduce using rule 63 (empty -> .)
    ID              reduce using rule 63 (empty -> .)
    EMPTY           reduce using rule 63 (empty -> .)
    CLASS           reduce using rule 63 (empty -> .)
    INTERFACE       reduce using rule 63 (empty -> .)
    INCLUDE         reduce using rule 63 (empty -> .)
    NAMESPACE       reduce using rule 63 (empty -> .)
    THROW           reduce using rule 63 (empty -> .)
    CONST           reduce using rule 63 (empty -> .)
    THIS            reduce using rule 63 (empty -> .)
    INT             reduce using rule 63 (empty -> .)
    FLOAT           reduce using rule 63 (empty -> .)
    STRING          reduce using rule 63 (empty -> .)
    BOOL            reduce using rule 63 (empty -> .)
    NULL            reduce using rule 63 (empty -> .)
    ARRAY           reduce using rule 63 (empty -> .)
    ABSTRACT        reduce using rule 63 (empty -> .)
    PRIVATE         reduce using rule 63 (empty -> .)
    PROTECTED       reduce using rule 63 (empty -> .)
    PUBLIC          reduce using rule 63 (empty -> .)
    STATIC          reduce using rule 63 (empty -> .)
    FINAL           reduce using rule 63 (empty -> .)
    LPAREN          reduce using rule 63 (empty -> .)
    IF              reduce using rule 63 (empty -> .)
    WHILE           reduce using rule 63 (empty -> .)
    DO              reduce using rule 63 (empty -> .)
    SWITCH          reduce using rule 63 (empty -> .)
    FOREACH         reduce using rule 63 (empty -> .)
    FOR             reduce using rule 63 (empty -> .)
    CLOSETAG        reduce using rule 63 (empty -> .)
    RBRACE          reduce using rule 63 (empty -> .)
    BREAK           reduce using rule 63 (empty -> .)
    ENDSWITCH       reduce using rule 63 (empty -> .)
    CASE            reduce using rule 63 (empty -> .)
    DEFAULT         reduce using rule 63 (empty -> .)

    else_blocks                    shift and go to state 389
    empty                          shift and go to state 392

state 368

    (103) while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .

    VARIABLE        reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    TRY             reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    EMPTY           reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    CLASS           reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    INTERFACE       reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    INCLUDE         reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    THROW           reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    CONST           reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    THIS            reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    PRIVATE         reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    PROTECTED       reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    PUBLIC          reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    STATIC          reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FINAL           reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    LPAREN          reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    DO              reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FOREACH         reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 103 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)


state 369

    (105) dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition . RPAREN SEMICOLON

    RPAREN          shift and go to state 393


state 370

    (106) switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .

    VARIABLE        reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ECHO            reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    PRINT           reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    TRY             reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FUNCTION        reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    RETURN          reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ID              reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    EMPTY           reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    CLASS           reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    INTERFACE       reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    INCLUDE         reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    NAMESPACE       reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    THROW           reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    CONST           reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    THIS            reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    INT             reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FLOAT           reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    STRING          reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    BOOL            reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    NULL            reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ARRAY           reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ABSTRACT        reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    PRIVATE         reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    PROTECTED       reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    PUBLIC          reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    STATIC          reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FINAL           reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    LPAREN          reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    IF              reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    WHILE           reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    DO              reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    SWITCH          reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FOREACH         reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FOR             reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    CLOSETAG        reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    RBRACE          reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    BREAK           reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ENDSWITCH       reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    CASE            reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    DEFAULT         reduce using rule 106 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)


state 371

    (109) caseLists -> cases default .

    RBRACE          reduce using rule 109 (caseLists -> cases default .)
    ENDSWITCH       reduce using rule 109 (caseLists -> cases default .)


state 372

    (113) cases -> case cases .

    DEFAULT         reduce using rule 113 (cases -> case cases .)
    RBRACE          reduce using rule 113 (cases -> case cases .)
    ENDSWITCH       reduce using rule 113 (cases -> case cases .)


state 373

    (133) default -> DEFAULT COLON . body BREAK SEMICOLON
    (135) default -> DEFAULT COLON . body
    (95) body -> . sentenciaList
    (96) body -> . empty
    (97) sentenciaList -> . sentencia
    (98) sentenciaList -> . sentencia sentenciaList
    (63) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (29) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) comparacion -> . valor comparador valor
    (55) impresion -> . ECHO imprimir SEMICOLON
    (56) impresion -> . PRINT imprimir SEMICOLON
    (64) estructurasPrograma -> . controlStructure
    (65) estructurasPrograma -> . dataStructure
    (151) try -> . TRY LBRACE body RBRACE catchs
    (152) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (157) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN valor SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (162) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (163) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (164) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (165) classDeclarate -> . classInterface
    (185) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (156) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (186) includes -> . INCLUDE STRING SEMICOLON
    (187) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (188) namespace -> . NAMESPACE ID SEMICOLON
    (189) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (190) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> . THROW valor SEMICOLON
    (192) instance -> . VARIABLE INSTANCEOF ID
    (193) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (194) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (195) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (196) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (197) minuse -> . VARIABLE MINUSEQUAL INT
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (66) controlStructure -> . if
    (67) controlStructure -> . for
    (68) controlStructure -> . while
    (69) controlStructure -> . dowhile
    (70) controlStructure -> . switch
    (71) controlStructure -> . foreach
    (120) dataStructure -> . array
    (179) data -> . ABSTRACT
    (180) data -> . PRIVATE
    (181) data -> . PROTECTED
    (182) data -> . PUBLIC
    (183) data -> . STATIC
    (184) data -> . FINAL
    (173) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (175) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (72) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> . IF LPAREN conditions RPAREN body
    (99) for -> . forStatement
    (103) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (105) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (106) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (114) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (121) array -> . VARIABLE EQUALS arrays SEMICOLON
    (122) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (124) array -> . map
    (100) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (128) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    BREAK           reduce using rule 63 (empty -> .)
    RBRACE          reduce using rule 63 (empty -> .)
    ENDSWITCH       reduce using rule 63 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 61
    PRIVATE         shift and go to state 62
    PROTECTED       shift and go to state 63
    PUBLIC          shift and go to state 64
    STATIC          shift and go to state 65
    FINAL           shift and go to state 66
    LPAREN          shift and go to state 28
    IF              shift and go to state 67
    WHILE           shift and go to state 69
    DO              shift and go to state 70
    SWITCH          shift and go to state 71
    FOREACH         shift and go to state 72
    FOR             shift and go to state 74

    body                           shift and go to state 394
    sentenciaList                  shift and go to state 157
    empty                          shift and go to state 158
    sentencia                      shift and go to state 159
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    valor                          shift and go to state 27
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    operador_ternario              shift and go to state 53
    if                             shift and go to state 54
    for                            shift and go to state 55
    while                          shift and go to state 56
    dowhile                        shift and go to state 57
    switch                         shift and go to state 58
    foreach                        shift and go to state 59
    array                          shift and go to state 60
    forStatement                   shift and go to state 68
    map                            shift and go to state 73

state 374

    (134) default -> DEFAULT SEMICOLON . body BREAK SEMICOLON
    (136) default -> DEFAULT SEMICOLON . body
    (95) body -> . sentenciaList
    (96) body -> . empty
    (97) sentenciaList -> . sentencia
    (98) sentenciaList -> . sentencia sentenciaList
    (63) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (29) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) comparacion -> . valor comparador valor
    (55) impresion -> . ECHO imprimir SEMICOLON
    (56) impresion -> . PRINT imprimir SEMICOLON
    (64) estructurasPrograma -> . controlStructure
    (65) estructurasPrograma -> . dataStructure
    (151) try -> . TRY LBRACE body RBRACE catchs
    (152) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (157) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN valor SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (162) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (163) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (164) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (165) classDeclarate -> . classInterface
    (185) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (156) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (186) includes -> . INCLUDE STRING SEMICOLON
    (187) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (188) namespace -> . NAMESPACE ID SEMICOLON
    (189) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (190) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> . THROW valor SEMICOLON
    (192) instance -> . VARIABLE INSTANCEOF ID
    (193) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (194) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (195) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (196) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (197) minuse -> . VARIABLE MINUSEQUAL INT
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (66) controlStructure -> . if
    (67) controlStructure -> . for
    (68) controlStructure -> . while
    (69) controlStructure -> . dowhile
    (70) controlStructure -> . switch
    (71) controlStructure -> . foreach
    (120) dataStructure -> . array
    (179) data -> . ABSTRACT
    (180) data -> . PRIVATE
    (181) data -> . PROTECTED
    (182) data -> . PUBLIC
    (183) data -> . STATIC
    (184) data -> . FINAL
    (173) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (175) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (72) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> . IF LPAREN conditions RPAREN body
    (99) for -> . forStatement
    (103) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (105) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (106) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (114) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (121) array -> . VARIABLE EQUALS arrays SEMICOLON
    (122) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (124) array -> . map
    (100) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (128) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    BREAK           reduce using rule 63 (empty -> .)
    RBRACE          reduce using rule 63 (empty -> .)
    ENDSWITCH       reduce using rule 63 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 61
    PRIVATE         shift and go to state 62
    PROTECTED       shift and go to state 63
    PUBLIC          shift and go to state 64
    STATIC          shift and go to state 65
    FINAL           shift and go to state 66
    LPAREN          shift and go to state 28
    IF              shift and go to state 67
    WHILE           shift and go to state 69
    DO              shift and go to state 70
    SWITCH          shift and go to state 71
    FOREACH         shift and go to state 72
    FOR             shift and go to state 74

    body                           shift and go to state 395
    sentenciaList                  shift and go to state 157
    empty                          shift and go to state 158
    sentencia                      shift and go to state 159
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    valor                          shift and go to state 27
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    operador_ternario              shift and go to state 53
    if                             shift and go to state 54
    for                            shift and go to state 55
    while                          shift and go to state 56
    dowhile                        shift and go to state 57
    switch                         shift and go to state 58
    foreach                        shift and go to state 59
    array                          shift and go to state 60
    forStatement                   shift and go to state 68
    map                            shift and go to state 73

state 375

    (115) case -> CASE valor . COLON body BREAK SEMICOLON
    (116) case -> CASE valor . SEMICOLON body BREAK SEMICOLON
    (117) case -> CASE valor . COLON body
    (118) case -> CASE valor . SEMICOLON
    (119) case -> CASE valor .

    COLON           shift and go to state 396
    SEMICOLON       shift and go to state 397
    CASE            reduce using rule 119 (case -> CASE valor .)
    DEFAULT         reduce using rule 119 (case -> CASE valor .)
    RBRACE          reduce using rule 119 (case -> CASE valor .)
    ENDSWITCH       reduce using rule 119 (case -> CASE valor .)


state 376

    (107) switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH . SEMICOLON

    SEMICOLON       shift and go to state 398


state 377

    (114) foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE . body RBRACE
    (95) body -> . sentenciaList
    (96) body -> . empty
    (97) sentenciaList -> . sentencia
    (98) sentenciaList -> . sentencia sentenciaList
    (63) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (29) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) comparacion -> . valor comparador valor
    (55) impresion -> . ECHO imprimir SEMICOLON
    (56) impresion -> . PRINT imprimir SEMICOLON
    (64) estructurasPrograma -> . controlStructure
    (65) estructurasPrograma -> . dataStructure
    (151) try -> . TRY LBRACE body RBRACE catchs
    (152) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (157) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN valor SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (162) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (163) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (164) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (165) classDeclarate -> . classInterface
    (185) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (156) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (186) includes -> . INCLUDE STRING SEMICOLON
    (187) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (188) namespace -> . NAMESPACE ID SEMICOLON
    (189) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (190) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> . THROW valor SEMICOLON
    (192) instance -> . VARIABLE INSTANCEOF ID
    (193) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (194) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (195) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (196) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (197) minuse -> . VARIABLE MINUSEQUAL INT
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (66) controlStructure -> . if
    (67) controlStructure -> . for
    (68) controlStructure -> . while
    (69) controlStructure -> . dowhile
    (70) controlStructure -> . switch
    (71) controlStructure -> . foreach
    (120) dataStructure -> . array
    (179) data -> . ABSTRACT
    (180) data -> . PRIVATE
    (181) data -> . PROTECTED
    (182) data -> . PUBLIC
    (183) data -> . STATIC
    (184) data -> . FINAL
    (173) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (175) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (72) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> . IF LPAREN conditions RPAREN body
    (99) for -> . forStatement
    (103) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (105) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (106) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (114) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (121) array -> . VARIABLE EQUALS arrays SEMICOLON
    (122) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (124) array -> . map
    (100) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (128) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 63 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 61
    PRIVATE         shift and go to state 62
    PROTECTED       shift and go to state 63
    PUBLIC          shift and go to state 64
    STATIC          shift and go to state 65
    FINAL           shift and go to state 66
    LPAREN          shift and go to state 28
    IF              shift and go to state 67
    WHILE           shift and go to state 69
    DO              shift and go to state 70
    SWITCH          shift and go to state 71
    FOREACH         shift and go to state 72
    FOR             shift and go to state 74

    body                           shift and go to state 399
    sentenciaList                  shift and go to state 157
    empty                          shift and go to state 158
    sentencia                      shift and go to state 159
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    valor                          shift and go to state 27
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    operador_ternario              shift and go to state 53
    if                             shift and go to state 54
    for                            shift and go to state 55
    while                          shift and go to state 56
    dowhile                        shift and go to state 57
    switch                         shift and go to state 58
    foreach                        shift and go to state 59
    array                          shift and go to state 60
    forStatement                   shift and go to state 68
    map                            shift and go to state 73

state 378

    (100) forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .

    VARIABLE        reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    TRY             reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    EMPTY           reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    CLASS           reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    INTERFACE       reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    INCLUDE         reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    THROW           reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    CONST           reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    THIS            reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    PRIVATE         reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    PROTECTED       reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    PUBLIC          reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    STATIC          reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FINAL           reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    LPAREN          reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    DO              reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FOREACH         reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 100 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)


state 379

    (101) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE . opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (102) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE . opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS
    (83) opSymbol -> . EQ
    (84) opSymbol -> . NEQ
    (85) opSymbol -> . STRICTEQ
    (86) opSymbol -> . STRICTNEQ
    (87) opSymbol -> . LT
    (88) opSymbol -> . GT
    (89) opSymbol -> . LEQ
    (90) opSymbol -> . GEQ

    EQ              shift and go to state 136
    NEQ             shift and go to state 137
    STRICTEQ        shift and go to state 138
    STRICTNEQ       shift and go to state 139
    LT              shift and go to state 140
    GT              shift and go to state 141
    LEQ             shift and go to state 142
    GEQ             shift and go to state 143

    opSymbol                       shift and go to state 400

state 380

    (189) anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .

    VARIABLE        reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    ECHO            reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    PRINT           reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    TRY             reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    FUNCTION        reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    RETURN          reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    ID              reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    EMPTY           reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    CLASS           reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    INTERFACE       reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    INCLUDE         reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    NAMESPACE       reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    THROW           reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    CONST           reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    THIS            reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    INT             reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    FLOAT           reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    STRING          reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    BOOL            reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    NULL            reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    ARRAY           reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    ABSTRACT        reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    PRIVATE         reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    PROTECTED       reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    PUBLIC          reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    STATIC          reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    FINAL           reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    LPAREN          reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    IF              reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    WHILE           reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    DO              reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    SWITCH          reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    FOREACH         reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    FOR             reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    CLOSETAG        reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    RBRACE          reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    BREAK           reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    ENDSWITCH       reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    CASE            reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    DEFAULT         reduce using rule 189 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)


state 381

    (152) try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body . RBRACE

    RBRACE          shift and go to state 401


state 382

    (153) catch -> CATCH LPAREN EXCEPTION VARIABLE . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 402


state 383

    (157) funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .

    VARIABLE        reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    TRY             reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    EMPTY           reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    CLASS           reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    INTERFACE       reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    INCLUDE         reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    THROW           reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    CONST           reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    THIS            reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    PRIVATE         reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    PROTECTED       reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    PUBLIC          reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    STATIC          reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FINAL           reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    LPAREN          reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    DO              reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FOREACH         reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 157 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)


state 384

    (169) classMember -> type FUNCTION ID LPAREN argumentos . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 403


state 385

    (171) objectInstantiation -> NEW ID LPAREN argumentos RPAREN .

    INT_TYPE        reduce using rule 171 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    FLOAT_TYPE      reduce using rule 171 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    STRING_TYPE     reduce using rule 171 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    BOOL_TYPE       reduce using rule 171 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    ARRAY_TYPE      reduce using rule 171 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    VOID            reduce using rule 171 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    NEW             reduce using rule 171 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    RBRACE          reduce using rule 171 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)


state 386

    (174) classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody . RBRACE

    RBRACE          shift and go to state 404


state 387

    (175) classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ECHO            reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRINT           reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    TRY             reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RETURN          reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ID              reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLASS           reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THROW           reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CONST           reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THIS            reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INT             reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STRING          reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BOOL            reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NULL            reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STATIC          reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FINAL           reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    LPAREN          reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    IF              reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    WHILE           reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DO              reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOR             reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BREAK           reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CASE            reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 175 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)


state 388

    (176) classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE . classBody RBRACE
    (166) classBody -> . classMember
    (167) classBody -> . classMember classBody
    (168) classMember -> . type VARIABLE SEMICOLON
    (169) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (170) classMember -> . objectInstantiation
    (145) type -> . INT_TYPE
    (146) type -> . FLOAT_TYPE
    (147) type -> . STRING_TYPE
    (148) type -> . BOOL_TYPE
    (149) type -> . ARRAY_TYPE
    (150) type -> . VOID
    (171) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (172) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 168
    FLOAT_TYPE      shift and go to state 169
    STRING_TYPE     shift and go to state 170
    BOOL_TYPE       shift and go to state 171
    ARRAY_TYPE      shift and go to state 172
    VOID            shift and go to state 173
    NEW             shift and go to state 235

    classBody                      shift and go to state 405
    classMember                    shift and go to state 232
    type                           shift and go to state 233
    objectInstantiation            shift and go to state 234

state 389

    (72) if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .

    VARIABLE        reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ECHO            reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PRINT           reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    TRY             reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FUNCTION        reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    RETURN          reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ID              reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    EMPTY           reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CLASS           reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INTERFACE       reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INCLUDE         reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    NAMESPACE       reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    THROW           reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CONST           reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    THIS            reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INT             reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FLOAT           reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    STRING          reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    BOOL            reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    NULL            reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ARRAY           reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ABSTRACT        reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PRIVATE         reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PROTECTED       reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PUBLIC          reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    STATIC          reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FINAL           reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    LPAREN          reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    IF              reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    WHILE           reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    DO              reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    SWITCH          reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FOREACH         reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FOR             reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CLOSETAG        reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    RBRACE          reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    BREAK           reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ENDSWITCH       reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CASE            reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    DEFAULT         reduce using rule 72 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)


state 390

    (74) else_blocks -> ELSE . LBRACE body RBRACE

    LBRACE          shift and go to state 406


state 391

    (75) else_blocks -> ELSEIF . LPAREN conditions RPAREN LBRACE body RBRACE else_blocks

    LPAREN          shift and go to state 407


state 392

    (76) else_blocks -> empty .

    VARIABLE        reduce using rule 76 (else_blocks -> empty .)
    ECHO            reduce using rule 76 (else_blocks -> empty .)
    PRINT           reduce using rule 76 (else_blocks -> empty .)
    TRY             reduce using rule 76 (else_blocks -> empty .)
    FUNCTION        reduce using rule 76 (else_blocks -> empty .)
    RETURN          reduce using rule 76 (else_blocks -> empty .)
    ID              reduce using rule 76 (else_blocks -> empty .)
    EMPTY           reduce using rule 76 (else_blocks -> empty .)
    CLASS           reduce using rule 76 (else_blocks -> empty .)
    INTERFACE       reduce using rule 76 (else_blocks -> empty .)
    INCLUDE         reduce using rule 76 (else_blocks -> empty .)
    NAMESPACE       reduce using rule 76 (else_blocks -> empty .)
    THROW           reduce using rule 76 (else_blocks -> empty .)
    CONST           reduce using rule 76 (else_blocks -> empty .)
    THIS            reduce using rule 76 (else_blocks -> empty .)
    INT             reduce using rule 76 (else_blocks -> empty .)
    FLOAT           reduce using rule 76 (else_blocks -> empty .)
    STRING          reduce using rule 76 (else_blocks -> empty .)
    BOOL            reduce using rule 76 (else_blocks -> empty .)
    NULL            reduce using rule 76 (else_blocks -> empty .)
    ARRAY           reduce using rule 76 (else_blocks -> empty .)
    ABSTRACT        reduce using rule 76 (else_blocks -> empty .)
    PRIVATE         reduce using rule 76 (else_blocks -> empty .)
    PROTECTED       reduce using rule 76 (else_blocks -> empty .)
    PUBLIC          reduce using rule 76 (else_blocks -> empty .)
    STATIC          reduce using rule 76 (else_blocks -> empty .)
    FINAL           reduce using rule 76 (else_blocks -> empty .)
    LPAREN          reduce using rule 76 (else_blocks -> empty .)
    IF              reduce using rule 76 (else_blocks -> empty .)
    WHILE           reduce using rule 76 (else_blocks -> empty .)
    DO              reduce using rule 76 (else_blocks -> empty .)
    SWITCH          reduce using rule 76 (else_blocks -> empty .)
    FOREACH         reduce using rule 76 (else_blocks -> empty .)
    FOR             reduce using rule 76 (else_blocks -> empty .)
    CLOSETAG        reduce using rule 76 (else_blocks -> empty .)
    RBRACE          reduce using rule 76 (else_blocks -> empty .)
    BREAK           reduce using rule 76 (else_blocks -> empty .)
    ENDSWITCH       reduce using rule 76 (else_blocks -> empty .)
    CASE            reduce using rule 76 (else_blocks -> empty .)
    DEFAULT         reduce using rule 76 (else_blocks -> empty .)


state 393

    (105) dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 408


state 394

    (133) default -> DEFAULT COLON body . BREAK SEMICOLON
    (135) default -> DEFAULT COLON body .

    BREAK           shift and go to state 409
    RBRACE          reduce using rule 135 (default -> DEFAULT COLON body .)
    ENDSWITCH       reduce using rule 135 (default -> DEFAULT COLON body .)


state 395

    (134) default -> DEFAULT SEMICOLON body . BREAK SEMICOLON
    (136) default -> DEFAULT SEMICOLON body .

    BREAK           shift and go to state 410
    RBRACE          reduce using rule 136 (default -> DEFAULT SEMICOLON body .)
    ENDSWITCH       reduce using rule 136 (default -> DEFAULT SEMICOLON body .)


state 396

    (115) case -> CASE valor COLON . body BREAK SEMICOLON
    (117) case -> CASE valor COLON . body
    (95) body -> . sentenciaList
    (96) body -> . empty
    (97) sentenciaList -> . sentencia
    (98) sentenciaList -> . sentencia sentenciaList
    (63) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (29) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) comparacion -> . valor comparador valor
    (55) impresion -> . ECHO imprimir SEMICOLON
    (56) impresion -> . PRINT imprimir SEMICOLON
    (64) estructurasPrograma -> . controlStructure
    (65) estructurasPrograma -> . dataStructure
    (151) try -> . TRY LBRACE body RBRACE catchs
    (152) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (157) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN valor SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (162) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (163) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (164) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (165) classDeclarate -> . classInterface
    (185) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (156) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (186) includes -> . INCLUDE STRING SEMICOLON
    (187) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (188) namespace -> . NAMESPACE ID SEMICOLON
    (189) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (190) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> . THROW valor SEMICOLON
    (192) instance -> . VARIABLE INSTANCEOF ID
    (193) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (194) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (195) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (196) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (197) minuse -> . VARIABLE MINUSEQUAL INT
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (66) controlStructure -> . if
    (67) controlStructure -> . for
    (68) controlStructure -> . while
    (69) controlStructure -> . dowhile
    (70) controlStructure -> . switch
    (71) controlStructure -> . foreach
    (120) dataStructure -> . array
    (179) data -> . ABSTRACT
    (180) data -> . PRIVATE
    (181) data -> . PROTECTED
    (182) data -> . PUBLIC
    (183) data -> . STATIC
    (184) data -> . FINAL
    (173) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (175) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (72) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> . IF LPAREN conditions RPAREN body
    (99) for -> . forStatement
    (103) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (105) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (106) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (114) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (121) array -> . VARIABLE EQUALS arrays SEMICOLON
    (122) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (124) array -> . map
    (100) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (128) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    BREAK           reduce using rule 63 (empty -> .)
    CASE            reduce using rule 63 (empty -> .)
    DEFAULT         reduce using rule 63 (empty -> .)
    RBRACE          reduce using rule 63 (empty -> .)
    ENDSWITCH       reduce using rule 63 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 61
    PRIVATE         shift and go to state 62
    PROTECTED       shift and go to state 63
    PUBLIC          shift and go to state 64
    STATIC          shift and go to state 65
    FINAL           shift and go to state 66
    LPAREN          shift and go to state 28
    IF              shift and go to state 67
    WHILE           shift and go to state 69
    DO              shift and go to state 70
    SWITCH          shift and go to state 71
    FOREACH         shift and go to state 72
    FOR             shift and go to state 74

    valor                          shift and go to state 27
    body                           shift and go to state 411
    sentenciaList                  shift and go to state 157
    empty                          shift and go to state 158
    sentencia                      shift and go to state 159
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    operador_ternario              shift and go to state 53
    if                             shift and go to state 54
    for                            shift and go to state 55
    while                          shift and go to state 56
    dowhile                        shift and go to state 57
    switch                         shift and go to state 58
    foreach                        shift and go to state 59
    array                          shift and go to state 60
    forStatement                   shift and go to state 68
    map                            shift and go to state 73

state 397

    (116) case -> CASE valor SEMICOLON . body BREAK SEMICOLON
    (118) case -> CASE valor SEMICOLON .
    (95) body -> . sentenciaList
    (96) body -> . empty
    (97) sentenciaList -> . sentencia
    (98) sentenciaList -> . sentencia sentenciaList
    (63) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (29) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) comparacion -> . valor comparador valor
    (55) impresion -> . ECHO imprimir SEMICOLON
    (56) impresion -> . PRINT imprimir SEMICOLON
    (64) estructurasPrograma -> . controlStructure
    (65) estructurasPrograma -> . dataStructure
    (151) try -> . TRY LBRACE body RBRACE catchs
    (152) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (157) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN valor SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (162) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (163) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (164) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (165) classDeclarate -> . classInterface
    (185) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (156) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (186) includes -> . INCLUDE STRING SEMICOLON
    (187) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (188) namespace -> . NAMESPACE ID SEMICOLON
    (189) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (190) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> . THROW valor SEMICOLON
    (192) instance -> . VARIABLE INSTANCEOF ID
    (193) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (194) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (195) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (196) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (197) minuse -> . VARIABLE MINUSEQUAL INT
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (66) controlStructure -> . if
    (67) controlStructure -> . for
    (68) controlStructure -> . while
    (69) controlStructure -> . dowhile
    (70) controlStructure -> . switch
    (71) controlStructure -> . foreach
    (120) dataStructure -> . array
    (179) data -> . ABSTRACT
    (180) data -> . PRIVATE
    (181) data -> . PROTECTED
    (182) data -> . PUBLIC
    (183) data -> . STATIC
    (184) data -> . FINAL
    (173) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (175) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (72) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> . IF LPAREN conditions RPAREN body
    (99) for -> . forStatement
    (103) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (105) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (106) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (114) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (121) array -> . VARIABLE EQUALS arrays SEMICOLON
    (122) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (124) array -> . map
    (100) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (128) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    CASE            reduce using rule 118 (case -> CASE valor SEMICOLON .)
    DEFAULT         reduce using rule 118 (case -> CASE valor SEMICOLON .)
    RBRACE          reduce using rule 118 (case -> CASE valor SEMICOLON .)
    ENDSWITCH       reduce using rule 118 (case -> CASE valor SEMICOLON .)
    BREAK           reduce using rule 63 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 61
    PRIVATE         shift and go to state 62
    PROTECTED       shift and go to state 63
    PUBLIC          shift and go to state 64
    STATIC          shift and go to state 65
    FINAL           shift and go to state 66
    LPAREN          shift and go to state 28
    IF              shift and go to state 67
    WHILE           shift and go to state 69
    DO              shift and go to state 70
    SWITCH          shift and go to state 71
    FOREACH         shift and go to state 72
    FOR             shift and go to state 74

    valor                          shift and go to state 27
    body                           shift and go to state 412
    sentenciaList                  shift and go to state 157
    empty                          shift and go to state 158
    sentencia                      shift and go to state 159
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    operador_ternario              shift and go to state 53
    if                             shift and go to state 54
    for                            shift and go to state 55
    while                          shift and go to state 56
    dowhile                        shift and go to state 57
    switch                         shift and go to state 58
    foreach                        shift and go to state 59
    array                          shift and go to state 60
    forStatement                   shift and go to state 68
    map                            shift and go to state 73

state 398

    (107) switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .

    VARIABLE        reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ECHO            reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    PRINT           reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    TRY             reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FUNCTION        reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    RETURN          reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ID              reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    EMPTY           reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    CLASS           reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    INTERFACE       reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    INCLUDE         reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    NAMESPACE       reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    THROW           reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    CONST           reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    THIS            reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    INT             reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FLOAT           reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    STRING          reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    BOOL            reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    NULL            reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ARRAY           reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ABSTRACT        reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    PRIVATE         reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    PROTECTED       reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    PUBLIC          reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    STATIC          reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FINAL           reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    LPAREN          reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    IF              reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    WHILE           reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    DO              reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    SWITCH          reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FOREACH         reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FOR             reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    CLOSETAG        reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    RBRACE          reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    BREAK           reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ENDSWITCH       reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    CASE            reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    DEFAULT         reduce using rule 107 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)


state 399

    (114) foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 413


state 400

    (101) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol . INT SEMICOLON VARIABLE DOUBLEPLUS
    (102) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol . INT SEMICOLON VARIABLE DOUBLEMINUS

    INT             shift and go to state 414


state 401

    (152) try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .

    VARIABLE        reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    ECHO            reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    PRINT           reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    TRY             reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    FUNCTION        reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    RETURN          reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    ID              reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    EMPTY           reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    CLASS           reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    INTERFACE       reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    INCLUDE         reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    THROW           reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    CONST           reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    THIS            reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    INT             reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    FLOAT           reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    STRING          reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    BOOL            reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    NULL            reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    ARRAY           reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    PRIVATE         reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    PROTECTED       reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    PUBLIC          reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    STATIC          reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    FINAL           reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    LPAREN          reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    IF              reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    WHILE           reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    DO              reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    SWITCH          reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    FOREACH         reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    FOR             reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    RBRACE          reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    BREAK           reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    CASE            reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    DEFAULT         reduce using rule 152 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)


state 402

    (153) catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 415


state 403

    (169) classMember -> type FUNCTION ID LPAREN argumentos RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 416


state 404

    (174) classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ECHO            reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRINT           reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    TRY             reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RETURN          reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ID              reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLASS           reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THROW           reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CONST           reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THIS            reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INT             reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STRING          reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BOOL            reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NULL            reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STATIC          reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FINAL           reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    LPAREN          reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    IF              reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    WHILE           reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DO              reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOR             reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BREAK           reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CASE            reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 174 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)


state 405

    (176) classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody . RBRACE

    RBRACE          shift and go to state 417


state 406

    (74) else_blocks -> ELSE LBRACE . body RBRACE
    (95) body -> . sentenciaList
    (96) body -> . empty
    (97) sentenciaList -> . sentencia
    (98) sentenciaList -> . sentencia sentenciaList
    (63) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (29) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) comparacion -> . valor comparador valor
    (55) impresion -> . ECHO imprimir SEMICOLON
    (56) impresion -> . PRINT imprimir SEMICOLON
    (64) estructurasPrograma -> . controlStructure
    (65) estructurasPrograma -> . dataStructure
    (151) try -> . TRY LBRACE body RBRACE catchs
    (152) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (157) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN valor SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (162) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (163) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (164) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (165) classDeclarate -> . classInterface
    (185) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (156) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (186) includes -> . INCLUDE STRING SEMICOLON
    (187) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (188) namespace -> . NAMESPACE ID SEMICOLON
    (189) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (190) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> . THROW valor SEMICOLON
    (192) instance -> . VARIABLE INSTANCEOF ID
    (193) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (194) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (195) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (196) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (197) minuse -> . VARIABLE MINUSEQUAL INT
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (66) controlStructure -> . if
    (67) controlStructure -> . for
    (68) controlStructure -> . while
    (69) controlStructure -> . dowhile
    (70) controlStructure -> . switch
    (71) controlStructure -> . foreach
    (120) dataStructure -> . array
    (179) data -> . ABSTRACT
    (180) data -> . PRIVATE
    (181) data -> . PROTECTED
    (182) data -> . PUBLIC
    (183) data -> . STATIC
    (184) data -> . FINAL
    (173) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (175) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (72) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> . IF LPAREN conditions RPAREN body
    (99) for -> . forStatement
    (103) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (105) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (106) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (114) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (121) array -> . VARIABLE EQUALS arrays SEMICOLON
    (122) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (124) array -> . map
    (100) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (128) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 63 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 61
    PRIVATE         shift and go to state 62
    PROTECTED       shift and go to state 63
    PUBLIC          shift and go to state 64
    STATIC          shift and go to state 65
    FINAL           shift and go to state 66
    LPAREN          shift and go to state 28
    IF              shift and go to state 67
    WHILE           shift and go to state 69
    DO              shift and go to state 70
    SWITCH          shift and go to state 71
    FOREACH         shift and go to state 72
    FOR             shift and go to state 74

    body                           shift and go to state 418
    sentenciaList                  shift and go to state 157
    empty                          shift and go to state 158
    sentencia                      shift and go to state 159
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    valor                          shift and go to state 27
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    operador_ternario              shift and go to state 53
    if                             shift and go to state 54
    for                            shift and go to state 55
    while                          shift and go to state 56
    dowhile                        shift and go to state 57
    switch                         shift and go to state 58
    foreach                        shift and go to state 59
    array                          shift and go to state 60
    forStatement                   shift and go to state 68
    map                            shift and go to state 73

state 407

    (75) else_blocks -> ELSEIF LPAREN . conditions RPAREN LBRACE body RBRACE else_blocks
    (77) conditions -> . condition
    (78) conditions -> . condition opLogic condition
    (79) conditions -> . LPAREN conditions RPAREN
    (80) condition -> . valor
    (81) condition -> . valor opSymbol valor
    (82) condition -> . NOT condition
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor

    LPAREN          shift and go to state 87
    NOT             shift and go to state 91
    INT             shift and go to state 48
    VARIABLE        shift and go to state 92
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    conditions                     shift and go to state 419
    condition                      shift and go to state 90
    valor                          shift and go to state 89
    llamadaFuncion                 shift and go to state 93
    operador_ternario              shift and go to state 53

state 408

    (105) dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .

    VARIABLE        reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    ECHO            reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    PRINT           reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    TRY             reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    RETURN          reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    ID              reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    EMPTY           reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    CLASS           reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    THROW           reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    CONST           reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    THIS            reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    INT             reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    FLOAT           reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    STRING          reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    BOOL            reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    NULL            reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    ARRAY           reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    STATIC          reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    FINAL           reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    LPAREN          reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    IF              reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    WHILE           reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    DO              reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    SWITCH          reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    FOREACH         reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    FOR             reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    RBRACE          reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    BREAK           reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    CASE            reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 105 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)


state 409

    (133) default -> DEFAULT COLON body BREAK . SEMICOLON

    SEMICOLON       shift and go to state 420


state 410

    (134) default -> DEFAULT SEMICOLON body BREAK . SEMICOLON

    SEMICOLON       shift and go to state 421


state 411

    (115) case -> CASE valor COLON body . BREAK SEMICOLON
    (117) case -> CASE valor COLON body .

    BREAK           shift and go to state 422
    CASE            reduce using rule 117 (case -> CASE valor COLON body .)
    DEFAULT         reduce using rule 117 (case -> CASE valor COLON body .)
    RBRACE          reduce using rule 117 (case -> CASE valor COLON body .)
    ENDSWITCH       reduce using rule 117 (case -> CASE valor COLON body .)


state 412

    (116) case -> CASE valor SEMICOLON body . BREAK SEMICOLON

    BREAK           shift and go to state 423


state 413

    (114) foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .

    VARIABLE        reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    TRY             reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    EMPTY           reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    CLASS           reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    INTERFACE       reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    INCLUDE         reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    THROW           reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    CONST           reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    THIS            reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    PRIVATE         reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    PROTECTED       reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    PUBLIC          reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    STATIC          reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    FINAL           reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    LPAREN          reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    DO              reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    FOREACH         reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 114 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)


state 414

    (101) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT . SEMICOLON VARIABLE DOUBLEPLUS
    (102) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT . SEMICOLON VARIABLE DOUBLEMINUS

    SEMICOLON       shift and go to state 424


state 415

    (153) catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE . body RBRACE
    (95) body -> . sentenciaList
    (96) body -> . empty
    (97) sentenciaList -> . sentencia
    (98) sentenciaList -> . sentencia sentenciaList
    (63) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (29) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) comparacion -> . valor comparador valor
    (55) impresion -> . ECHO imprimir SEMICOLON
    (56) impresion -> . PRINT imprimir SEMICOLON
    (64) estructurasPrograma -> . controlStructure
    (65) estructurasPrograma -> . dataStructure
    (151) try -> . TRY LBRACE body RBRACE catchs
    (152) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (157) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN valor SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (162) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (163) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (164) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (165) classDeclarate -> . classInterface
    (185) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (156) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (186) includes -> . INCLUDE STRING SEMICOLON
    (187) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (188) namespace -> . NAMESPACE ID SEMICOLON
    (189) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (190) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> . THROW valor SEMICOLON
    (192) instance -> . VARIABLE INSTANCEOF ID
    (193) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (194) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (195) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (196) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (197) minuse -> . VARIABLE MINUSEQUAL INT
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (66) controlStructure -> . if
    (67) controlStructure -> . for
    (68) controlStructure -> . while
    (69) controlStructure -> . dowhile
    (70) controlStructure -> . switch
    (71) controlStructure -> . foreach
    (120) dataStructure -> . array
    (179) data -> . ABSTRACT
    (180) data -> . PRIVATE
    (181) data -> . PROTECTED
    (182) data -> . PUBLIC
    (183) data -> . STATIC
    (184) data -> . FINAL
    (173) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (175) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (72) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> . IF LPAREN conditions RPAREN body
    (99) for -> . forStatement
    (103) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (105) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (106) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (114) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (121) array -> . VARIABLE EQUALS arrays SEMICOLON
    (122) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (124) array -> . map
    (100) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (128) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 63 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 61
    PRIVATE         shift and go to state 62
    PROTECTED       shift and go to state 63
    PUBLIC          shift and go to state 64
    STATIC          shift and go to state 65
    FINAL           shift and go to state 66
    LPAREN          shift and go to state 28
    IF              shift and go to state 67
    WHILE           shift and go to state 69
    DO              shift and go to state 70
    SWITCH          shift and go to state 71
    FOREACH         shift and go to state 72
    FOR             shift and go to state 74

    body                           shift and go to state 425
    sentenciaList                  shift and go to state 157
    empty                          shift and go to state 158
    sentencia                      shift and go to state 159
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    valor                          shift and go to state 27
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    operador_ternario              shift and go to state 53
    if                             shift and go to state 54
    for                            shift and go to state 55
    while                          shift and go to state 56
    dowhile                        shift and go to state 57
    switch                         shift and go to state 58
    foreach                        shift and go to state 59
    array                          shift and go to state 60
    forStatement                   shift and go to state 68
    map                            shift and go to state 73

state 416

    (169) classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE . body RBRACE
    (95) body -> . sentenciaList
    (96) body -> . empty
    (97) sentenciaList -> . sentencia
    (98) sentenciaList -> . sentencia sentenciaList
    (63) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (29) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) comparacion -> . valor comparador valor
    (55) impresion -> . ECHO imprimir SEMICOLON
    (56) impresion -> . PRINT imprimir SEMICOLON
    (64) estructurasPrograma -> . controlStructure
    (65) estructurasPrograma -> . dataStructure
    (151) try -> . TRY LBRACE body RBRACE catchs
    (152) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (157) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN valor SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (162) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (163) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (164) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (165) classDeclarate -> . classInterface
    (185) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (156) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (186) includes -> . INCLUDE STRING SEMICOLON
    (187) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (188) namespace -> . NAMESPACE ID SEMICOLON
    (189) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (190) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> . THROW valor SEMICOLON
    (192) instance -> . VARIABLE INSTANCEOF ID
    (193) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (194) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (195) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (196) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (197) minuse -> . VARIABLE MINUSEQUAL INT
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (66) controlStructure -> . if
    (67) controlStructure -> . for
    (68) controlStructure -> . while
    (69) controlStructure -> . dowhile
    (70) controlStructure -> . switch
    (71) controlStructure -> . foreach
    (120) dataStructure -> . array
    (179) data -> . ABSTRACT
    (180) data -> . PRIVATE
    (181) data -> . PROTECTED
    (182) data -> . PUBLIC
    (183) data -> . STATIC
    (184) data -> . FINAL
    (173) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (175) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (72) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> . IF LPAREN conditions RPAREN body
    (99) for -> . forStatement
    (103) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (105) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (106) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (114) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (121) array -> . VARIABLE EQUALS arrays SEMICOLON
    (122) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (124) array -> . map
    (100) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (128) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 63 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 61
    PRIVATE         shift and go to state 62
    PROTECTED       shift and go to state 63
    PUBLIC          shift and go to state 64
    STATIC          shift and go to state 65
    FINAL           shift and go to state 66
    LPAREN          shift and go to state 28
    IF              shift and go to state 67
    WHILE           shift and go to state 69
    DO              shift and go to state 70
    SWITCH          shift and go to state 71
    FOREACH         shift and go to state 72
    FOR             shift and go to state 74

    body                           shift and go to state 426
    sentenciaList                  shift and go to state 157
    empty                          shift and go to state 158
    sentencia                      shift and go to state 159
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    valor                          shift and go to state 27
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    operador_ternario              shift and go to state 53
    if                             shift and go to state 54
    for                            shift and go to state 55
    while                          shift and go to state 56
    dowhile                        shift and go to state 57
    switch                         shift and go to state 58
    foreach                        shift and go to state 59
    array                          shift and go to state 60
    forStatement                   shift and go to state 68
    map                            shift and go to state 73

state 417

    (176) classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ECHO            reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRINT           reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    TRY             reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RETURN          reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ID              reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLASS           reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THROW           reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CONST           reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THIS            reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INT             reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STRING          reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BOOL            reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NULL            reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STATIC          reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FINAL           reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    LPAREN          reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    IF              reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    WHILE           reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DO              reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOR             reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BREAK           reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CASE            reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 176 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)


state 418

    (74) else_blocks -> ELSE LBRACE body . RBRACE

    RBRACE          shift and go to state 427


state 419

    (75) else_blocks -> ELSEIF LPAREN conditions . RPAREN LBRACE body RBRACE else_blocks

    RPAREN          shift and go to state 428


state 420

    (133) default -> DEFAULT COLON body BREAK SEMICOLON .

    RBRACE          reduce using rule 133 (default -> DEFAULT COLON body BREAK SEMICOLON .)
    ENDSWITCH       reduce using rule 133 (default -> DEFAULT COLON body BREAK SEMICOLON .)


state 421

    (134) default -> DEFAULT SEMICOLON body BREAK SEMICOLON .

    RBRACE          reduce using rule 134 (default -> DEFAULT SEMICOLON body BREAK SEMICOLON .)
    ENDSWITCH       reduce using rule 134 (default -> DEFAULT SEMICOLON body BREAK SEMICOLON .)


state 422

    (115) case -> CASE valor COLON body BREAK . SEMICOLON

    SEMICOLON       shift and go to state 429


state 423

    (116) case -> CASE valor SEMICOLON body BREAK . SEMICOLON

    SEMICOLON       shift and go to state 430


state 424

    (101) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON . VARIABLE DOUBLEPLUS
    (102) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON . VARIABLE DOUBLEMINUS

    VARIABLE        shift and go to state 431


state 425

    (153) catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 432


state 426

    (169) classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 433


state 427

    (74) else_blocks -> ELSE LBRACE body RBRACE .

    VARIABLE        reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    ECHO            reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    PRINT           reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    TRY             reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    FUNCTION        reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    RETURN          reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    ID              reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    EMPTY           reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    CLASS           reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    INTERFACE       reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    INCLUDE         reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    THROW           reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    CONST           reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    THIS            reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    INT             reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    FLOAT           reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    STRING          reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    BOOL            reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    NULL            reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    ARRAY           reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    PRIVATE         reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    PROTECTED       reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    PUBLIC          reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    STATIC          reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    FINAL           reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    LPAREN          reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    IF              reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    WHILE           reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    DO              reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    SWITCH          reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    FOREACH         reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    FOR             reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    RBRACE          reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    BREAK           reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    CASE            reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)
    DEFAULT         reduce using rule 74 (else_blocks -> ELSE LBRACE body RBRACE .)


state 428

    (75) else_blocks -> ELSEIF LPAREN conditions RPAREN . LBRACE body RBRACE else_blocks

    LBRACE          shift and go to state 434


state 429

    (115) case -> CASE valor COLON body BREAK SEMICOLON .

    CASE            reduce using rule 115 (case -> CASE valor COLON body BREAK SEMICOLON .)
    DEFAULT         reduce using rule 115 (case -> CASE valor COLON body BREAK SEMICOLON .)
    RBRACE          reduce using rule 115 (case -> CASE valor COLON body BREAK SEMICOLON .)
    ENDSWITCH       reduce using rule 115 (case -> CASE valor COLON body BREAK SEMICOLON .)


state 430

    (116) case -> CASE valor SEMICOLON body BREAK SEMICOLON .

    CASE            reduce using rule 116 (case -> CASE valor SEMICOLON body BREAK SEMICOLON .)
    DEFAULT         reduce using rule 116 (case -> CASE valor SEMICOLON body BREAK SEMICOLON .)
    RBRACE          reduce using rule 116 (case -> CASE valor SEMICOLON body BREAK SEMICOLON .)
    ENDSWITCH       reduce using rule 116 (case -> CASE valor SEMICOLON body BREAK SEMICOLON .)


state 431

    (101) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE . DOUBLEPLUS
    (102) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE . DOUBLEMINUS

    DOUBLEPLUS      shift and go to state 435
    DOUBLEMINUS     shift and go to state 436


state 432

    (153) catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .

    CATCH           reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FINALLY         reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    VARIABLE        reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    TRY             reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    EMPTY           reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    CLASS           reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    INTERFACE       reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    INCLUDE         reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    THROW           reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    CONST           reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    THIS            reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    PRIVATE         reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    PROTECTED       reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    PUBLIC          reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    STATIC          reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FINAL           reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    LPAREN          reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    DO              reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FOREACH         reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 153 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)


state 433

    (169) classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .

    INT_TYPE        reduce using rule 169 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FLOAT_TYPE      reduce using rule 169 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    STRING_TYPE     reduce using rule 169 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    BOOL_TYPE       reduce using rule 169 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ARRAY_TYPE      reduce using rule 169 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    VOID            reduce using rule 169 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    NEW             reduce using rule 169 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 169 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)


state 434

    (75) else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE . body RBRACE else_blocks
    (95) body -> . sentenciaList
    (96) body -> . empty
    (97) sentenciaList -> . sentencia
    (98) sentenciaList -> . sentencia sentenciaList
    (63) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (27) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (28) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (29) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) comparacion -> . valor comparador valor
    (55) impresion -> . ECHO imprimir SEMICOLON
    (56) impresion -> . PRINT imprimir SEMICOLON
    (64) estructurasPrograma -> . controlStructure
    (65) estructurasPrograma -> . dataStructure
    (151) try -> . TRY LBRACE body RBRACE catchs
    (152) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (157) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (25) returnStatement -> . RETURN valor SEMICOLON
    (26) returnStatement -> . RETURN SEMICOLON
    (158) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (159) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (160) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (161) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (162) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (163) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (164) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (165) classDeclarate -> . classInterface
    (185) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (156) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (186) includes -> . INCLUDE STRING SEMICOLON
    (187) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (188) namespace -> . NAMESPACE ID SEMICOLON
    (189) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (190) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (191) throw -> . THROW valor SEMICOLON
    (192) instance -> . VARIABLE INSTANCEOF ID
    (193) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (194) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (195) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (196) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (197) minuse -> . VARIABLE MINUSEQUAL INT
    (34) valor -> . INT
    (35) valor -> . VARIABLE
    (36) valor -> . FLOAT
    (37) valor -> . STRING
    (38) valor -> . BOOL
    (39) valor -> . NULL
    (40) valor -> . ARRAY
    (41) valor -> . llamadaFuncion
    (42) valor -> . operador_ternario
    (66) controlStructure -> . if
    (67) controlStructure -> . for
    (68) controlStructure -> . while
    (69) controlStructure -> . dowhile
    (70) controlStructure -> . switch
    (71) controlStructure -> . foreach
    (120) dataStructure -> . array
    (179) data -> . ABSTRACT
    (180) data -> . PRIVATE
    (181) data -> . PROTECTED
    (182) data -> . PUBLIC
    (183) data -> . STATIC
    (184) data -> . FINAL
    (173) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (174) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (175) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (176) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (30) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (31) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (72) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (73) if -> . IF LPAREN conditions RPAREN body
    (99) for -> . forStatement
    (103) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (104) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (105) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (106) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (107) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (114) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (121) array -> . VARIABLE EQUALS arrays SEMICOLON
    (122) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (123) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (124) array -> . map
    (100) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (128) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (129) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 63 (empty -> .)
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 61
    PRIVATE         shift and go to state 62
    PROTECTED       shift and go to state 63
    PUBLIC          shift and go to state 64
    STATIC          shift and go to state 65
    FINAL           shift and go to state 66
    LPAREN          shift and go to state 28
    IF              shift and go to state 67
    WHILE           shift and go to state 69
    DO              shift and go to state 70
    SWITCH          shift and go to state 71
    FOREACH         shift and go to state 72
    FOR             shift and go to state 74

    body                           shift and go to state 437
    sentenciaList                  shift and go to state 157
    empty                          shift and go to state 158
    sentencia                      shift and go to state 159
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    valor                          shift and go to state 27
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    operador_ternario              shift and go to state 53
    if                             shift and go to state 54
    for                            shift and go to state 55
    while                          shift and go to state 56
    dowhile                        shift and go to state 57
    switch                         shift and go to state 58
    foreach                        shift and go to state 59
    array                          shift and go to state 60
    forStatement                   shift and go to state 68
    map                            shift and go to state 73

state 435

    (101) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS .

    RPAREN          reduce using rule 101 (forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS .)


state 436

    (102) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS .

    RPAREN          reduce using rule 102 (forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS .)


state 437

    (75) else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body . RBRACE else_blocks

    RBRACE          shift and go to state 438


state 438

    (75) else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE . else_blocks
    (74) else_blocks -> . ELSE LBRACE body RBRACE
    (75) else_blocks -> . ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (76) else_blocks -> . empty
    (63) empty -> .

    ELSE            shift and go to state 390
    ELSEIF          shift and go to state 391
    VARIABLE        reduce using rule 63 (empty -> .)
    ECHO            reduce using rule 63 (empty -> .)
    PRINT           reduce using rule 63 (empty -> .)
    TRY             reduce using rule 63 (empty -> .)
    FUNCTION        reduce using rule 63 (empty -> .)
    RETURN          reduce using rule 63 (empty -> .)
    ID              reduce using rule 63 (empty -> .)
    EMPTY           reduce using rule 63 (empty -> .)
    CLASS           reduce using rule 63 (empty -> .)
    INTERFACE       reduce using rule 63 (empty -> .)
    INCLUDE         reduce using rule 63 (empty -> .)
    NAMESPACE       reduce using rule 63 (empty -> .)
    THROW           reduce using rule 63 (empty -> .)
    CONST           reduce using rule 63 (empty -> .)
    THIS            reduce using rule 63 (empty -> .)
    INT             reduce using rule 63 (empty -> .)
    FLOAT           reduce using rule 63 (empty -> .)
    STRING          reduce using rule 63 (empty -> .)
    BOOL            reduce using rule 63 (empty -> .)
    NULL            reduce using rule 63 (empty -> .)
    ARRAY           reduce using rule 63 (empty -> .)
    ABSTRACT        reduce using rule 63 (empty -> .)
    PRIVATE         reduce using rule 63 (empty -> .)
    PROTECTED       reduce using rule 63 (empty -> .)
    PUBLIC          reduce using rule 63 (empty -> .)
    STATIC          reduce using rule 63 (empty -> .)
    FINAL           reduce using rule 63 (empty -> .)
    LPAREN          reduce using rule 63 (empty -> .)
    IF              reduce using rule 63 (empty -> .)
    WHILE           reduce using rule 63 (empty -> .)
    DO              reduce using rule 63 (empty -> .)
    SWITCH          reduce using rule 63 (empty -> .)
    FOREACH         reduce using rule 63 (empty -> .)
    FOR             reduce using rule 63 (empty -> .)
    CLOSETAG        reduce using rule 63 (empty -> .)
    RBRACE          reduce using rule 63 (empty -> .)
    BREAK           reduce using rule 63 (empty -> .)
    ENDSWITCH       reduce using rule 63 (empty -> .)
    CASE            reduce using rule 63 (empty -> .)
    DEFAULT         reduce using rule 63 (empty -> .)

    else_blocks                    shift and go to state 439
    empty                          shift and go to state 392

state 439

    (75) else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .

    VARIABLE        reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ECHO            reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PRINT           reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    TRY             reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FUNCTION        reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    RETURN          reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ID              reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    EMPTY           reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CLASS           reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INTERFACE       reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INCLUDE         reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    NAMESPACE       reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    THROW           reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CONST           reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    THIS            reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INT             reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FLOAT           reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    STRING          reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    BOOL            reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    NULL            reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ARRAY           reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ABSTRACT        reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PRIVATE         reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PROTECTED       reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PUBLIC          reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    STATIC          reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FINAL           reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    LPAREN          reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    IF              reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    WHILE           reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    DO              reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    SWITCH          reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FOREACH         reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FOR             reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CLOSETAG        reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    RBRACE          reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    BREAK           reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ENDSWITCH       reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CASE            reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    DEFAULT         reduce using rule 75 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 122 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 159 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 159 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 159 resolved as shift
WARNING: shift/reduce conflict for TRY in state 159 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 159 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 159 resolved as shift
WARNING: shift/reduce conflict for ID in state 159 resolved as shift
WARNING: shift/reduce conflict for EMPTY in state 159 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 159 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 159 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 159 resolved as shift
WARNING: shift/reduce conflict for NAMESPACE in state 159 resolved as shift
WARNING: shift/reduce conflict for THROW in state 159 resolved as shift
WARNING: shift/reduce conflict for CONST in state 159 resolved as shift
WARNING: shift/reduce conflict for THIS in state 159 resolved as shift
WARNING: shift/reduce conflict for INT in state 159 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 159 resolved as shift
WARNING: shift/reduce conflict for STRING in state 159 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 159 resolved as shift
WARNING: shift/reduce conflict for NULL in state 159 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 159 resolved as shift
WARNING: shift/reduce conflict for ABSTRACT in state 159 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 159 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 159 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 159 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 159 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 159 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 159 resolved as shift
WARNING: shift/reduce conflict for IF in state 159 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 159 resolved as shift
WARNING: shift/reduce conflict for DO in state 159 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 159 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 159 resolved as shift
WARNING: shift/reduce conflict for FOR in state 159 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 226 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 230 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 248 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 248 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 248 resolved as shift
WARNING: shift/reduce conflict for TRY in state 248 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 248 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 248 resolved as shift
WARNING: shift/reduce conflict for ID in state 248 resolved as shift
WARNING: shift/reduce conflict for EMPTY in state 248 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 248 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 248 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 248 resolved as shift
WARNING: shift/reduce conflict for NAMESPACE in state 248 resolved as shift
WARNING: shift/reduce conflict for THROW in state 248 resolved as shift
WARNING: shift/reduce conflict for CONST in state 248 resolved as shift
WARNING: shift/reduce conflict for THIS in state 248 resolved as shift
WARNING: shift/reduce conflict for INT in state 248 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 248 resolved as shift
WARNING: shift/reduce conflict for STRING in state 248 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 248 resolved as shift
WARNING: shift/reduce conflict for NULL in state 248 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 248 resolved as shift
WARNING: shift/reduce conflict for ABSTRACT in state 248 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 248 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 248 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 248 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 248 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 248 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 248 resolved as shift
WARNING: shift/reduce conflict for IF in state 248 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 248 resolved as shift
WARNING: shift/reduce conflict for DO in state 248 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 248 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 248 resolved as shift
WARNING: shift/reduce conflict for FOR in state 248 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 297 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 324 resolved as shift
WARNING: reduce/reduce conflict in state 153 resolved using rule (repiteValores -> valor)
WARNING: rejected rule (condition -> valor) in state 153
