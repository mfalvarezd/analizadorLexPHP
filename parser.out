Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    OBJECT_TYPE

Grammar

Rule 0     S' -> inicio
Rule 1     inicio -> OPENTAG programa CLOSETAG
Rule 2     programa -> sentencia
Rule 3     programa -> sentencia programa
Rule 4     sentencia -> asignacion
Rule 5     sentencia -> asignacion_fgets
Rule 6     sentencia -> comparacion
Rule 7     sentencia -> impresion
Rule 8     sentencia -> estructurasPrograma
Rule 9     sentencia -> try
Rule 10    sentencia -> funcionDeclaration
Rule 11    sentencia -> returnStatement
Rule 12    sentencia -> llamadaFuncion
Rule 13    sentencia -> classDeclarate
Rule 14    sentencia -> interface
Rule 15    sentencia -> objeto
Rule 16    sentencia -> includes
Rule 17    sentencia -> namespace
Rule 18    sentencia -> anonymousFunction
Rule 19    sentencia -> throw
Rule 20    sentencia -> instance
Rule 21    sentencia -> constdeclaration
Rule 22    sentencia -> thisdeclaration
Rule 23    sentencia -> concatenate
Rule 24    sentencia -> minuse
Rule 25    sentencia -> pluse
Rule 26    returnStatement -> RETURN valor SEMICOLON
Rule 27    returnStatement -> RETURN SEMICOLON
Rule 28    asignacion -> VARIABLE EQUALS operaArit SEMICOLON
Rule 29    asignacion -> VARIABLE EQUALS valor SEMICOLON
Rule 30    asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON
Rule 31    asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
Rule 32    operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor
Rule 33    operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor
Rule 34    operador_ternario -> LPAREN VARIABLE RPAREN QUESTION COLON valor
Rule 35    operaArit -> valornumerico
Rule 36    operaArit -> valornumerico operador operaArit
Rule 37    valornumerico -> INT
Rule 38    valornumerico -> FLOAT
Rule 39    valornumerico -> VARIABLE
Rule 40    valor -> INT
Rule 41    valor -> VARIABLE
Rule 42    valor -> FLOAT
Rule 43    valor -> STRING
Rule 44    valor -> BOOL
Rule 45    valor -> NULL
Rule 46    valor -> ARRAY
Rule 47    valor -> llamadaFuncion
Rule 48    operador -> PLUS
Rule 49    operador -> MINUS
Rule 50    operador -> TIMES
Rule 51    operador -> DIVIDE
Rule 52    operador -> MODULO
Rule 53    operador -> POTENCIA
Rule 54    comparacion -> valor comparador valor
Rule 55    comparador -> LT
Rule 56    comparador -> GT
Rule 57    comparador -> LEQ
Rule 58    comparador -> GEQ
Rule 59    impresion -> ECHO imprimir SEMICOLON
Rule 60    impresion -> PRINT imprimir SEMICOLON
Rule 61    imprimir -> LPAREN repiteValores RPAREN
Rule 62    imprimir -> LPAREN RPAREN
Rule 63    imprimir -> repiteValores
Rule 64    imprimir -> operador_ternario
Rule 65    imprimir -> empty
Rule 66    repiteValores -> valor
Rule 67    repiteValores -> valor COMMA repiteValores
Rule 68    empty -> <empty>
Rule 69    estructurasPrograma -> controlStructure
Rule 70    estructurasPrograma -> dataStructure
Rule 71    controlStructure -> if
Rule 72    controlStructure -> for
Rule 73    controlStructure -> while
Rule 74    controlStructure -> dowhile
Rule 75    controlStructure -> switch
Rule 76    controlStructure -> foreach
Rule 77    if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
Rule 78    if -> IF LPAREN conditions RPAREN body
Rule 79    else_blocks -> ELSE LBRACE body RBRACE
Rule 80    else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
Rule 81    else_blocks -> empty
Rule 82    conditions -> condition
Rule 83    conditions -> condition opLogic conditions
Rule 84    conditions -> LPAREN conditions RPAREN
Rule 85    condition -> valor
Rule 86    condition -> valor opSymbol valor
Rule 87    condition -> NOT condition
Rule 88    condition -> LPAREN conditions RPAREN
Rule 89    opSymbol -> EQ
Rule 90    opSymbol -> NEQ
Rule 91    opSymbol -> STRICTEQ
Rule 92    opSymbol -> STRICTNEQ
Rule 93    opSymbol -> LT
Rule 94    opSymbol -> GT
Rule 95    opSymbol -> LEQ
Rule 96    opSymbol -> GEQ
Rule 97    opLogic -> AND
Rule 98    opLogic -> LOGICAL_AND
Rule 99    opLogic -> OR
Rule 100   opLogic -> LOGICAL_OR
Rule 101   body -> sentenciaList
Rule 102   body -> empty
Rule 103   sentenciaList -> sentencia
Rule 104   sentenciaList -> sentencia sentenciaList
Rule 105   for -> forStatement
Rule 106   forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE
Rule 107   forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
Rule 108   forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS
Rule 109   while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE
Rule 110   while -> WHILE LPAREN condition RPAREN LBRACE RBRACE
Rule 111   dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
Rule 112   switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
Rule 113   switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
Rule 114   caseLists -> cases
Rule 115   caseLists -> cases default
Rule 116   caseLists -> default
Rule 117   caseLists -> empty
Rule 118   cases -> case
Rule 119   cases -> case cases
Rule 120   foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
Rule 121   case -> CASE valor COLON body BREAK SEMICOLON
Rule 122   case -> CASE valor SEMICOLON body BREAK SEMICOLON
Rule 123   case -> CASE valor COLON body
Rule 124   case -> CASE valor SEMICOLON
Rule 125   case -> CASE valor
Rule 126   dataStructure -> array
Rule 127   array -> VARIABLE EQUALS arrays SEMICOLON
Rule 128   array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
Rule 129   array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
Rule 130   array -> map
Rule 131   arrays -> LBRACKET repiteValores RBRACKET
Rule 132   arrayAnidado -> arrays
Rule 133   arrayAnidado -> arrays COMMA arrayAnidado
Rule 134   map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
Rule 135   map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON
Rule 136   maps -> mapArrow
Rule 137   maps -> mapArrow COMMA maps
Rule 138   mapArrow -> valor ARROWMAP valor
Rule 139   default -> DEFAULT COLON body BREAK SEMICOLON
Rule 140   default -> DEFAULT SEMICOLON body BREAK SEMICOLON
Rule 141   default -> DEFAULT COLON body
Rule 142   default -> DEFAULT SEMICOLON body
Rule 143   default -> DEFAULT
Rule 144   argumentos -> argumento
Rule 145   argumentos -> argumento COMMA argumentos
Rule 146   argumentos -> empty
Rule 147   argumento -> type VARIABLE
Rule 148   argumento -> VARIABLE EQUALS valor
Rule 149   argumento -> type VARIABLE EQUALS valor
Rule 150   argumento -> operaArit
Rule 151   type -> INT_TYPE
Rule 152   type -> FLOAT_TYPE
Rule 153   type -> STRING_TYPE
Rule 154   type -> BOOL_TYPE
Rule 155   type -> ARRAY_TYPE
Rule 156   type -> VOID
Rule 157   try -> TRY LBRACE body RBRACE catchs
Rule 158   try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
Rule 159   catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE
Rule 160   catchs -> catch
Rule 161   catchs -> catch catchs
Rule 162   objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
Rule 163   funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
Rule 164   llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON
Rule 165   llamadaFuncion -> EMPTY LPAREN argumentos RPAREN
Rule 166   llamadaFuncion -> ID LPAREN argumentos RPAREN
Rule 167   llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON
Rule 168   classDeclarate -> CLASS ID LBRACE classBody RBRACE
Rule 169   classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE
Rule 170   classDeclarate -> data CLASS ID LBRACE classBody RBRACE
Rule 171   classDeclarate -> classInterface
Rule 172   classBody -> classMember
Rule 173   classBody -> classMember classBody
Rule 174   classMember -> type VARIABLE SEMICOLON
Rule 175   classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
Rule 176   classMember -> objectInstantiation
Rule 177   objectInstantiation -> NEW ID LPAREN argumentos RPAREN
Rule 178   objectInstantiation -> NEW ID LPAREN RPAREN
Rule 179   classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
Rule 180   classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
Rule 181   classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
Rule 182   classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
Rule 183   impInterface -> ID
Rule 184   impInterface -> ID COMMA impInterface
Rule 185   data -> ABSTRACT
Rule 186   data -> PRIVATE
Rule 187   data -> PROTECTED
Rule 188   data -> PUBLIC
Rule 189   data -> STATIC
Rule 190   data -> FINAL
Rule 191   interface -> INTERFACE ID LBRACE classBody RBRACE
Rule 192   includes -> INCLUDE STRING SEMICOLON
Rule 193   includes -> INCLUDE STRING DOT STRING SEMICOLON
Rule 194   namespace -> NAMESPACE ID SEMICOLON
Rule 195   anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
Rule 196   throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
Rule 197   throw -> THROW valor SEMICOLON
Rule 198   instance -> VARIABLE INSTANCEOF ID
Rule 199   constdeclaration -> CONST ID EQUALS valor SEMICOLON
Rule 200   thisdeclaration -> THIS ARROW ID SEMICOLON
Rule 201   thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON
Rule 202   concatenate -> VARIABLE CONCATENATEEQUAL STRING
Rule 203   minuse -> VARIABLE MINUSEQUAL INT
Rule 204   pluse -> VARIABLE PLUSEQUAL INT

Terminals, with rules where they appear

ABSTRACT             : 185
AND                  : 97
ARRAY                : 46 129 135
ARRAY_TYPE           : 155
ARROW                : 162 200 201
ARROWMAP             : 138 195
AS                   : 120
BOOL                 : 44
BOOL_TYPE            : 154
BREAK                : 121 122 139 140
CASE                 : 121 122 123 124 125
CATCH                : 159
CLASS                : 168 169 170 179 180 181 182
CLOSETAG             : 1
COLON                : 32 33 34 113 121 123 139 141
COMMA                : 67 133 137 145 184
CONCATENATEEQUAL     : 202
CONST                : 199
DEFAULT              : 139 140 141 142 143
DIVIDE               : 51
DO                   : 111
DOT                  : 193
DOUBLEMINUS          : 108
DOUBLEPLUS           : 107
ECHO                 : 59
ELSE                 : 79
ELSEIF               : 80
EMPTY                : 165 167
ENDSWITCH            : 113
EQ                   : 89
EQUALS               : 28 29 30 31 107 108 127 128 129 134 135 148 149 195 199
EXCEPTION            : 159 196
EXTENDS              : 169 180 182
FGETS                : 31
FINAL                : 190
FINALLY              : 158
FLOAT                : 38 42
FLOAT_TYPE           : 152
FN                   : 195
FOR                  : 106
FOREACH              : 120
FUNCTION             : 163 175
GEQ                  : 58 96
GT                   : 56 94
ID                   : 162 163 164 166 168 169 169 170 175 177 178 179 180 180 181 182 182 183 184 191 194 198 199 200 201
IF                   : 77 78
IMPLEMENTS           : 179 180 181 182
INCLUDE              : 192 193
INSTANCEOF           : 198
INT                  : 37 40 107 107 108 108 203 204
INTERFACE            : 191
INT_TYPE             : 151
LBRACE               : 77 79 80 106 109 110 111 112 120 157 158 158 159 163 168 169 170 175 179 180 181 182 191
LBRACKET             : 128 131 134
LEQ                  : 57 95
LOGICAL_AND          : 98
LOGICAL_OR           : 100
LPAREN               : 31 32 33 34 61 62 77 78 80 84 88 106 109 110 111 112 113 120 129 135 159 162 163 164 165 166 167 175 177 178 195 196 201
LT                   : 55 93
MINUS                : 49
MINUSEQUAL           : 203
MODULO               : 52
NAMESPACE            : 194
NEQ                  : 90
NEW                  : 177 178 196
NOT                  : 87
NULL                 : 45
OBJECT_TYPE          : 
OPENTAG              : 1
OR                   : 99
PLUS                 : 48
PLUSEQUAL            : 204
POTENCIA             : 53
PRINT                : 60
PRIVATE              : 186
PROTECTED            : 187
PUBLIC               : 188
QUESTION             : 32 33 34
RBRACE               : 77 79 80 106 109 110 111 112 120 157 158 158 159 163 168 169 170 175 179 180 181 182 191
RBRACKET             : 128 131 134
RETURN               : 26 27
RPAREN               : 31 32 33 34 61 62 77 78 80 84 88 106 109 110 111 112 113 120 129 135 159 162 163 164 165 166 167 175 177 178 195 196 201
SEMICOLON            : 26 27 28 29 30 31 59 60 107 107 108 108 111 113 121 122 122 124 127 128 129 134 135 139 140 140 142 162 164 167 174 192 193 194 195 196 197 199 200 201
STATIC               : 189
STDIN                : 31
STRICTEQ             : 91
STRICTNEQ            : 92
STRING               : 43 192 193 193 202
STRING_TYPE          : 153
SWITCH               : 112 113
THIS                 : 200 201
THROW                : 196 197
TIMES                : 50
TRY                  : 157 158
VARIABLE             : 28 29 30 31 34 39 41 107 107 107 108 108 108 120 120 127 128 129 134 135 147 148 149 159 162 174 195 198 202 203 204
VOID                 : 156
WHILE                : 109 110 111
error                : 

Nonterminals, with rules where they appear

anonymousFunction    : 18
argumento            : 144 145
argumentos           : 145 162 163 164 165 166 167 175 177
array                : 126
arrayAnidado         : 128 133
arrays               : 127 132 133
asignacion           : 4
asignacion_fgets     : 5
body                 : 77 78 79 80 106 109 111 120 121 122 123 139 140 141 142 157 158 158 159 163 175
case                 : 118 119
caseLists            : 112 113
cases                : 114 115 119
catch                : 160 161
catchs               : 157 158 161
classBody            : 168 169 170 173 179 180 181 182 191
classDeclarate       : 13
classInterface       : 171
classMember          : 172 173
comparacion          : 6 195
comparador           : 54
concatenate          : 23
condition            : 82 83 87 109 110 111
conditions           : 32 33 77 78 80 83 84 88
constdeclaration     : 21
controlStructure     : 69
data                 : 170 181 182
dataStructure        : 70
default              : 115 116
dowhile              : 74
else_blocks          : 77 80
empty                : 65 81 102 117 146
estructurasPrograma  : 8
for                  : 72
forStatement         : 105
forcondition         : 106
foreach              : 76
funcionDeclaration   : 10
if                   : 71
impInterface         : 179 180 181 182 184
impresion            : 7
imprimir             : 59 60
includes             : 16
inicio               : 0
instance             : 20
interface            : 14
llamadaFuncion       : 12 47
map                  : 130
mapArrow             : 136 137
maps                 : 134 135 137
minuse               : 24
namespace            : 17
objectInstantiation  : 176
objeto               : 15
opLogic              : 83
opSymbol             : 86 107 108
operaArit            : 28 36 150
operador             : 36
operador_ternario    : 30 64
pluse                : 25
programa             : 1 3
repiteValores        : 61 63 67 129 131 196
returnStatement      : 11
sentencia            : 2 3 103 104
sentenciaList        : 101 104
switch               : 75
thisdeclaration      : 22
throw                : 19
try                  : 9
type                 : 147 149 174 175
valor                : 26 29 32 32 33 34 54 54 66 67 85 86 86 112 113 121 122 123 124 125 138 138 148 149 197 199
valornumerico        : 35 36
while                : 73

Parsing method: LALR

state 0

    (0) S' -> . inicio
    (1) inicio -> . OPENTAG programa CLOSETAG

    OPENTAG         shift and go to state 2

    inicio                         shift and go to state 1

state 1

    (0) S' -> inicio .



state 2

    (1) inicio -> OPENTAG . programa CLOSETAG
    (2) programa -> . sentencia
    (3) programa -> . sentencia programa
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (25) sentencia -> . pluse
    (28) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (29) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (30) asignacion -> . VARIABLE EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (54) comparacion -> . valor comparador valor
    (59) impresion -> . ECHO imprimir SEMICOLON
    (60) impresion -> . PRINT imprimir SEMICOLON
    (69) estructurasPrograma -> . controlStructure
    (70) estructurasPrograma -> . dataStructure
    (157) try -> . TRY LBRACE body RBRACE catchs
    (158) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (163) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (26) returnStatement -> . RETURN valor SEMICOLON
    (27) returnStatement -> . RETURN SEMICOLON
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (168) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (170) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (171) classDeclarate -> . classInterface
    (191) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (162) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (192) includes -> . INCLUDE STRING SEMICOLON
    (193) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (194) namespace -> . NAMESPACE ID SEMICOLON
    (195) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> . THROW valor SEMICOLON
    (198) instance -> . VARIABLE INSTANCEOF ID
    (199) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (200) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (201) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (202) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (203) minuse -> . VARIABLE MINUSEQUAL INT
    (204) pluse -> . VARIABLE PLUSEQUAL INT
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (71) controlStructure -> . if
    (72) controlStructure -> . for
    (73) controlStructure -> . while
    (74) controlStructure -> . dowhile
    (75) controlStructure -> . switch
    (76) controlStructure -> . foreach
    (126) dataStructure -> . array
    (185) data -> . ABSTRACT
    (186) data -> . PRIVATE
    (187) data -> . PROTECTED
    (188) data -> . PUBLIC
    (189) data -> . STATIC
    (190) data -> . FINAL
    (179) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (181) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (77) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> . IF LPAREN conditions RPAREN body
    (105) for -> . forStatement
    (109) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (111) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (112) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (120) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (127) array -> . VARIABLE EQUALS arrays SEMICOLON
    (128) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (130) array -> . map
    (106) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (134) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    VARIABLE        shift and go to state 27
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 60
    PRIVATE         shift and go to state 61
    PROTECTED       shift and go to state 62
    PUBLIC          shift and go to state 63
    STATIC          shift and go to state 64
    FINAL           shift and go to state 65
    IF              shift and go to state 66
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    SWITCH          shift and go to state 70
    FOREACH         shift and go to state 71
    FOR             shift and go to state 73

    programa                       shift and go to state 3
    sentencia                      shift and go to state 4
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    pluse                          shift and go to state 26
    valor                          shift and go to state 28
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    if                             shift and go to state 53
    for                            shift and go to state 54
    while                          shift and go to state 55
    dowhile                        shift and go to state 56
    switch                         shift and go to state 57
    foreach                        shift and go to state 58
    array                          shift and go to state 59
    forStatement                   shift and go to state 67
    map                            shift and go to state 72

state 3

    (1) inicio -> OPENTAG programa . CLOSETAG

    CLOSETAG        shift and go to state 74


state 4

    (2) programa -> sentencia .
    (3) programa -> sentencia . programa
    (2) programa -> . sentencia
    (3) programa -> . sentencia programa
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (25) sentencia -> . pluse
    (28) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (29) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (30) asignacion -> . VARIABLE EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (54) comparacion -> . valor comparador valor
    (59) impresion -> . ECHO imprimir SEMICOLON
    (60) impresion -> . PRINT imprimir SEMICOLON
    (69) estructurasPrograma -> . controlStructure
    (70) estructurasPrograma -> . dataStructure
    (157) try -> . TRY LBRACE body RBRACE catchs
    (158) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (163) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (26) returnStatement -> . RETURN valor SEMICOLON
    (27) returnStatement -> . RETURN SEMICOLON
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (168) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (170) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (171) classDeclarate -> . classInterface
    (191) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (162) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (192) includes -> . INCLUDE STRING SEMICOLON
    (193) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (194) namespace -> . NAMESPACE ID SEMICOLON
    (195) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> . THROW valor SEMICOLON
    (198) instance -> . VARIABLE INSTANCEOF ID
    (199) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (200) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (201) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (202) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (203) minuse -> . VARIABLE MINUSEQUAL INT
    (204) pluse -> . VARIABLE PLUSEQUAL INT
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (71) controlStructure -> . if
    (72) controlStructure -> . for
    (73) controlStructure -> . while
    (74) controlStructure -> . dowhile
    (75) controlStructure -> . switch
    (76) controlStructure -> . foreach
    (126) dataStructure -> . array
    (185) data -> . ABSTRACT
    (186) data -> . PRIVATE
    (187) data -> . PROTECTED
    (188) data -> . PUBLIC
    (189) data -> . STATIC
    (190) data -> . FINAL
    (179) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (181) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (77) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> . IF LPAREN conditions RPAREN body
    (105) for -> . forStatement
    (109) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (111) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (112) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (120) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (127) array -> . VARIABLE EQUALS arrays SEMICOLON
    (128) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (130) array -> . map
    (106) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (134) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    CLOSETAG        reduce using rule 2 (programa -> sentencia .)
    VARIABLE        shift and go to state 27
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 60
    PRIVATE         shift and go to state 61
    PROTECTED       shift and go to state 62
    PUBLIC          shift and go to state 63
    STATIC          shift and go to state 64
    FINAL           shift and go to state 65
    IF              shift and go to state 66
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    SWITCH          shift and go to state 70
    FOREACH         shift and go to state 71
    FOR             shift and go to state 73

    sentencia                      shift and go to state 4
    programa                       shift and go to state 75
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    pluse                          shift and go to state 26
    valor                          shift and go to state 28
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    if                             shift and go to state 53
    for                            shift and go to state 54
    while                          shift and go to state 55
    dowhile                        shift and go to state 56
    switch                         shift and go to state 57
    foreach                        shift and go to state 58
    array                          shift and go to state 59
    forStatement                   shift and go to state 67
    map                            shift and go to state 72

state 5

    (4) sentencia -> asignacion .

    VARIABLE        reduce using rule 4 (sentencia -> asignacion .)
    ECHO            reduce using rule 4 (sentencia -> asignacion .)
    PRINT           reduce using rule 4 (sentencia -> asignacion .)
    TRY             reduce using rule 4 (sentencia -> asignacion .)
    FUNCTION        reduce using rule 4 (sentencia -> asignacion .)
    RETURN          reduce using rule 4 (sentencia -> asignacion .)
    ID              reduce using rule 4 (sentencia -> asignacion .)
    EMPTY           reduce using rule 4 (sentencia -> asignacion .)
    CLASS           reduce using rule 4 (sentencia -> asignacion .)
    INTERFACE       reduce using rule 4 (sentencia -> asignacion .)
    INCLUDE         reduce using rule 4 (sentencia -> asignacion .)
    NAMESPACE       reduce using rule 4 (sentencia -> asignacion .)
    THROW           reduce using rule 4 (sentencia -> asignacion .)
    CONST           reduce using rule 4 (sentencia -> asignacion .)
    THIS            reduce using rule 4 (sentencia -> asignacion .)
    INT             reduce using rule 4 (sentencia -> asignacion .)
    FLOAT           reduce using rule 4 (sentencia -> asignacion .)
    STRING          reduce using rule 4 (sentencia -> asignacion .)
    BOOL            reduce using rule 4 (sentencia -> asignacion .)
    NULL            reduce using rule 4 (sentencia -> asignacion .)
    ARRAY           reduce using rule 4 (sentencia -> asignacion .)
    ABSTRACT        reduce using rule 4 (sentencia -> asignacion .)
    PRIVATE         reduce using rule 4 (sentencia -> asignacion .)
    PROTECTED       reduce using rule 4 (sentencia -> asignacion .)
    PUBLIC          reduce using rule 4 (sentencia -> asignacion .)
    STATIC          reduce using rule 4 (sentencia -> asignacion .)
    FINAL           reduce using rule 4 (sentencia -> asignacion .)
    IF              reduce using rule 4 (sentencia -> asignacion .)
    WHILE           reduce using rule 4 (sentencia -> asignacion .)
    DO              reduce using rule 4 (sentencia -> asignacion .)
    SWITCH          reduce using rule 4 (sentencia -> asignacion .)
    FOREACH         reduce using rule 4 (sentencia -> asignacion .)
    FOR             reduce using rule 4 (sentencia -> asignacion .)
    CLOSETAG        reduce using rule 4 (sentencia -> asignacion .)
    RBRACE          reduce using rule 4 (sentencia -> asignacion .)
    BREAK           reduce using rule 4 (sentencia -> asignacion .)
    ENDSWITCH       reduce using rule 4 (sentencia -> asignacion .)
    CASE            reduce using rule 4 (sentencia -> asignacion .)
    DEFAULT         reduce using rule 4 (sentencia -> asignacion .)


state 6

    (5) sentencia -> asignacion_fgets .

    VARIABLE        reduce using rule 5 (sentencia -> asignacion_fgets .)
    ECHO            reduce using rule 5 (sentencia -> asignacion_fgets .)
    PRINT           reduce using rule 5 (sentencia -> asignacion_fgets .)
    TRY             reduce using rule 5 (sentencia -> asignacion_fgets .)
    FUNCTION        reduce using rule 5 (sentencia -> asignacion_fgets .)
    RETURN          reduce using rule 5 (sentencia -> asignacion_fgets .)
    ID              reduce using rule 5 (sentencia -> asignacion_fgets .)
    EMPTY           reduce using rule 5 (sentencia -> asignacion_fgets .)
    CLASS           reduce using rule 5 (sentencia -> asignacion_fgets .)
    INTERFACE       reduce using rule 5 (sentencia -> asignacion_fgets .)
    INCLUDE         reduce using rule 5 (sentencia -> asignacion_fgets .)
    NAMESPACE       reduce using rule 5 (sentencia -> asignacion_fgets .)
    THROW           reduce using rule 5 (sentencia -> asignacion_fgets .)
    CONST           reduce using rule 5 (sentencia -> asignacion_fgets .)
    THIS            reduce using rule 5 (sentencia -> asignacion_fgets .)
    INT             reduce using rule 5 (sentencia -> asignacion_fgets .)
    FLOAT           reduce using rule 5 (sentencia -> asignacion_fgets .)
    STRING          reduce using rule 5 (sentencia -> asignacion_fgets .)
    BOOL            reduce using rule 5 (sentencia -> asignacion_fgets .)
    NULL            reduce using rule 5 (sentencia -> asignacion_fgets .)
    ARRAY           reduce using rule 5 (sentencia -> asignacion_fgets .)
    ABSTRACT        reduce using rule 5 (sentencia -> asignacion_fgets .)
    PRIVATE         reduce using rule 5 (sentencia -> asignacion_fgets .)
    PROTECTED       reduce using rule 5 (sentencia -> asignacion_fgets .)
    PUBLIC          reduce using rule 5 (sentencia -> asignacion_fgets .)
    STATIC          reduce using rule 5 (sentencia -> asignacion_fgets .)
    FINAL           reduce using rule 5 (sentencia -> asignacion_fgets .)
    IF              reduce using rule 5 (sentencia -> asignacion_fgets .)
    WHILE           reduce using rule 5 (sentencia -> asignacion_fgets .)
    DO              reduce using rule 5 (sentencia -> asignacion_fgets .)
    SWITCH          reduce using rule 5 (sentencia -> asignacion_fgets .)
    FOREACH         reduce using rule 5 (sentencia -> asignacion_fgets .)
    FOR             reduce using rule 5 (sentencia -> asignacion_fgets .)
    CLOSETAG        reduce using rule 5 (sentencia -> asignacion_fgets .)
    RBRACE          reduce using rule 5 (sentencia -> asignacion_fgets .)
    BREAK           reduce using rule 5 (sentencia -> asignacion_fgets .)
    ENDSWITCH       reduce using rule 5 (sentencia -> asignacion_fgets .)
    CASE            reduce using rule 5 (sentencia -> asignacion_fgets .)
    DEFAULT         reduce using rule 5 (sentencia -> asignacion_fgets .)


state 7

    (6) sentencia -> comparacion .

    VARIABLE        reduce using rule 6 (sentencia -> comparacion .)
    ECHO            reduce using rule 6 (sentencia -> comparacion .)
    PRINT           reduce using rule 6 (sentencia -> comparacion .)
    TRY             reduce using rule 6 (sentencia -> comparacion .)
    FUNCTION        reduce using rule 6 (sentencia -> comparacion .)
    RETURN          reduce using rule 6 (sentencia -> comparacion .)
    ID              reduce using rule 6 (sentencia -> comparacion .)
    EMPTY           reduce using rule 6 (sentencia -> comparacion .)
    CLASS           reduce using rule 6 (sentencia -> comparacion .)
    INTERFACE       reduce using rule 6 (sentencia -> comparacion .)
    INCLUDE         reduce using rule 6 (sentencia -> comparacion .)
    NAMESPACE       reduce using rule 6 (sentencia -> comparacion .)
    THROW           reduce using rule 6 (sentencia -> comparacion .)
    CONST           reduce using rule 6 (sentencia -> comparacion .)
    THIS            reduce using rule 6 (sentencia -> comparacion .)
    INT             reduce using rule 6 (sentencia -> comparacion .)
    FLOAT           reduce using rule 6 (sentencia -> comparacion .)
    STRING          reduce using rule 6 (sentencia -> comparacion .)
    BOOL            reduce using rule 6 (sentencia -> comparacion .)
    NULL            reduce using rule 6 (sentencia -> comparacion .)
    ARRAY           reduce using rule 6 (sentencia -> comparacion .)
    ABSTRACT        reduce using rule 6 (sentencia -> comparacion .)
    PRIVATE         reduce using rule 6 (sentencia -> comparacion .)
    PROTECTED       reduce using rule 6 (sentencia -> comparacion .)
    PUBLIC          reduce using rule 6 (sentencia -> comparacion .)
    STATIC          reduce using rule 6 (sentencia -> comparacion .)
    FINAL           reduce using rule 6 (sentencia -> comparacion .)
    IF              reduce using rule 6 (sentencia -> comparacion .)
    WHILE           reduce using rule 6 (sentencia -> comparacion .)
    DO              reduce using rule 6 (sentencia -> comparacion .)
    SWITCH          reduce using rule 6 (sentencia -> comparacion .)
    FOREACH         reduce using rule 6 (sentencia -> comparacion .)
    FOR             reduce using rule 6 (sentencia -> comparacion .)
    CLOSETAG        reduce using rule 6 (sentencia -> comparacion .)
    RBRACE          reduce using rule 6 (sentencia -> comparacion .)
    BREAK           reduce using rule 6 (sentencia -> comparacion .)
    ENDSWITCH       reduce using rule 6 (sentencia -> comparacion .)
    CASE            reduce using rule 6 (sentencia -> comparacion .)
    DEFAULT         reduce using rule 6 (sentencia -> comparacion .)


state 8

    (7) sentencia -> impresion .

    VARIABLE        reduce using rule 7 (sentencia -> impresion .)
    ECHO            reduce using rule 7 (sentencia -> impresion .)
    PRINT           reduce using rule 7 (sentencia -> impresion .)
    TRY             reduce using rule 7 (sentencia -> impresion .)
    FUNCTION        reduce using rule 7 (sentencia -> impresion .)
    RETURN          reduce using rule 7 (sentencia -> impresion .)
    ID              reduce using rule 7 (sentencia -> impresion .)
    EMPTY           reduce using rule 7 (sentencia -> impresion .)
    CLASS           reduce using rule 7 (sentencia -> impresion .)
    INTERFACE       reduce using rule 7 (sentencia -> impresion .)
    INCLUDE         reduce using rule 7 (sentencia -> impresion .)
    NAMESPACE       reduce using rule 7 (sentencia -> impresion .)
    THROW           reduce using rule 7 (sentencia -> impresion .)
    CONST           reduce using rule 7 (sentencia -> impresion .)
    THIS            reduce using rule 7 (sentencia -> impresion .)
    INT             reduce using rule 7 (sentencia -> impresion .)
    FLOAT           reduce using rule 7 (sentencia -> impresion .)
    STRING          reduce using rule 7 (sentencia -> impresion .)
    BOOL            reduce using rule 7 (sentencia -> impresion .)
    NULL            reduce using rule 7 (sentencia -> impresion .)
    ARRAY           reduce using rule 7 (sentencia -> impresion .)
    ABSTRACT        reduce using rule 7 (sentencia -> impresion .)
    PRIVATE         reduce using rule 7 (sentencia -> impresion .)
    PROTECTED       reduce using rule 7 (sentencia -> impresion .)
    PUBLIC          reduce using rule 7 (sentencia -> impresion .)
    STATIC          reduce using rule 7 (sentencia -> impresion .)
    FINAL           reduce using rule 7 (sentencia -> impresion .)
    IF              reduce using rule 7 (sentencia -> impresion .)
    WHILE           reduce using rule 7 (sentencia -> impresion .)
    DO              reduce using rule 7 (sentencia -> impresion .)
    SWITCH          reduce using rule 7 (sentencia -> impresion .)
    FOREACH         reduce using rule 7 (sentencia -> impresion .)
    FOR             reduce using rule 7 (sentencia -> impresion .)
    CLOSETAG        reduce using rule 7 (sentencia -> impresion .)
    RBRACE          reduce using rule 7 (sentencia -> impresion .)
    BREAK           reduce using rule 7 (sentencia -> impresion .)
    ENDSWITCH       reduce using rule 7 (sentencia -> impresion .)
    CASE            reduce using rule 7 (sentencia -> impresion .)
    DEFAULT         reduce using rule 7 (sentencia -> impresion .)


state 9

    (8) sentencia -> estructurasPrograma .

    VARIABLE        reduce using rule 8 (sentencia -> estructurasPrograma .)
    ECHO            reduce using rule 8 (sentencia -> estructurasPrograma .)
    PRINT           reduce using rule 8 (sentencia -> estructurasPrograma .)
    TRY             reduce using rule 8 (sentencia -> estructurasPrograma .)
    FUNCTION        reduce using rule 8 (sentencia -> estructurasPrograma .)
    RETURN          reduce using rule 8 (sentencia -> estructurasPrograma .)
    ID              reduce using rule 8 (sentencia -> estructurasPrograma .)
    EMPTY           reduce using rule 8 (sentencia -> estructurasPrograma .)
    CLASS           reduce using rule 8 (sentencia -> estructurasPrograma .)
    INTERFACE       reduce using rule 8 (sentencia -> estructurasPrograma .)
    INCLUDE         reduce using rule 8 (sentencia -> estructurasPrograma .)
    NAMESPACE       reduce using rule 8 (sentencia -> estructurasPrograma .)
    THROW           reduce using rule 8 (sentencia -> estructurasPrograma .)
    CONST           reduce using rule 8 (sentencia -> estructurasPrograma .)
    THIS            reduce using rule 8 (sentencia -> estructurasPrograma .)
    INT             reduce using rule 8 (sentencia -> estructurasPrograma .)
    FLOAT           reduce using rule 8 (sentencia -> estructurasPrograma .)
    STRING          reduce using rule 8 (sentencia -> estructurasPrograma .)
    BOOL            reduce using rule 8 (sentencia -> estructurasPrograma .)
    NULL            reduce using rule 8 (sentencia -> estructurasPrograma .)
    ARRAY           reduce using rule 8 (sentencia -> estructurasPrograma .)
    ABSTRACT        reduce using rule 8 (sentencia -> estructurasPrograma .)
    PRIVATE         reduce using rule 8 (sentencia -> estructurasPrograma .)
    PROTECTED       reduce using rule 8 (sentencia -> estructurasPrograma .)
    PUBLIC          reduce using rule 8 (sentencia -> estructurasPrograma .)
    STATIC          reduce using rule 8 (sentencia -> estructurasPrograma .)
    FINAL           reduce using rule 8 (sentencia -> estructurasPrograma .)
    IF              reduce using rule 8 (sentencia -> estructurasPrograma .)
    WHILE           reduce using rule 8 (sentencia -> estructurasPrograma .)
    DO              reduce using rule 8 (sentencia -> estructurasPrograma .)
    SWITCH          reduce using rule 8 (sentencia -> estructurasPrograma .)
    FOREACH         reduce using rule 8 (sentencia -> estructurasPrograma .)
    FOR             reduce using rule 8 (sentencia -> estructurasPrograma .)
    CLOSETAG        reduce using rule 8 (sentencia -> estructurasPrograma .)
    RBRACE          reduce using rule 8 (sentencia -> estructurasPrograma .)
    BREAK           reduce using rule 8 (sentencia -> estructurasPrograma .)
    ENDSWITCH       reduce using rule 8 (sentencia -> estructurasPrograma .)
    CASE            reduce using rule 8 (sentencia -> estructurasPrograma .)
    DEFAULT         reduce using rule 8 (sentencia -> estructurasPrograma .)


state 10

    (9) sentencia -> try .

    VARIABLE        reduce using rule 9 (sentencia -> try .)
    ECHO            reduce using rule 9 (sentencia -> try .)
    PRINT           reduce using rule 9 (sentencia -> try .)
    TRY             reduce using rule 9 (sentencia -> try .)
    FUNCTION        reduce using rule 9 (sentencia -> try .)
    RETURN          reduce using rule 9 (sentencia -> try .)
    ID              reduce using rule 9 (sentencia -> try .)
    EMPTY           reduce using rule 9 (sentencia -> try .)
    CLASS           reduce using rule 9 (sentencia -> try .)
    INTERFACE       reduce using rule 9 (sentencia -> try .)
    INCLUDE         reduce using rule 9 (sentencia -> try .)
    NAMESPACE       reduce using rule 9 (sentencia -> try .)
    THROW           reduce using rule 9 (sentencia -> try .)
    CONST           reduce using rule 9 (sentencia -> try .)
    THIS            reduce using rule 9 (sentencia -> try .)
    INT             reduce using rule 9 (sentencia -> try .)
    FLOAT           reduce using rule 9 (sentencia -> try .)
    STRING          reduce using rule 9 (sentencia -> try .)
    BOOL            reduce using rule 9 (sentencia -> try .)
    NULL            reduce using rule 9 (sentencia -> try .)
    ARRAY           reduce using rule 9 (sentencia -> try .)
    ABSTRACT        reduce using rule 9 (sentencia -> try .)
    PRIVATE         reduce using rule 9 (sentencia -> try .)
    PROTECTED       reduce using rule 9 (sentencia -> try .)
    PUBLIC          reduce using rule 9 (sentencia -> try .)
    STATIC          reduce using rule 9 (sentencia -> try .)
    FINAL           reduce using rule 9 (sentencia -> try .)
    IF              reduce using rule 9 (sentencia -> try .)
    WHILE           reduce using rule 9 (sentencia -> try .)
    DO              reduce using rule 9 (sentencia -> try .)
    SWITCH          reduce using rule 9 (sentencia -> try .)
    FOREACH         reduce using rule 9 (sentencia -> try .)
    FOR             reduce using rule 9 (sentencia -> try .)
    CLOSETAG        reduce using rule 9 (sentencia -> try .)
    RBRACE          reduce using rule 9 (sentencia -> try .)
    BREAK           reduce using rule 9 (sentencia -> try .)
    ENDSWITCH       reduce using rule 9 (sentencia -> try .)
    CASE            reduce using rule 9 (sentencia -> try .)
    DEFAULT         reduce using rule 9 (sentencia -> try .)


state 11

    (10) sentencia -> funcionDeclaration .

    VARIABLE        reduce using rule 10 (sentencia -> funcionDeclaration .)
    ECHO            reduce using rule 10 (sentencia -> funcionDeclaration .)
    PRINT           reduce using rule 10 (sentencia -> funcionDeclaration .)
    TRY             reduce using rule 10 (sentencia -> funcionDeclaration .)
    FUNCTION        reduce using rule 10 (sentencia -> funcionDeclaration .)
    RETURN          reduce using rule 10 (sentencia -> funcionDeclaration .)
    ID              reduce using rule 10 (sentencia -> funcionDeclaration .)
    EMPTY           reduce using rule 10 (sentencia -> funcionDeclaration .)
    CLASS           reduce using rule 10 (sentencia -> funcionDeclaration .)
    INTERFACE       reduce using rule 10 (sentencia -> funcionDeclaration .)
    INCLUDE         reduce using rule 10 (sentencia -> funcionDeclaration .)
    NAMESPACE       reduce using rule 10 (sentencia -> funcionDeclaration .)
    THROW           reduce using rule 10 (sentencia -> funcionDeclaration .)
    CONST           reduce using rule 10 (sentencia -> funcionDeclaration .)
    THIS            reduce using rule 10 (sentencia -> funcionDeclaration .)
    INT             reduce using rule 10 (sentencia -> funcionDeclaration .)
    FLOAT           reduce using rule 10 (sentencia -> funcionDeclaration .)
    STRING          reduce using rule 10 (sentencia -> funcionDeclaration .)
    BOOL            reduce using rule 10 (sentencia -> funcionDeclaration .)
    NULL            reduce using rule 10 (sentencia -> funcionDeclaration .)
    ARRAY           reduce using rule 10 (sentencia -> funcionDeclaration .)
    ABSTRACT        reduce using rule 10 (sentencia -> funcionDeclaration .)
    PRIVATE         reduce using rule 10 (sentencia -> funcionDeclaration .)
    PROTECTED       reduce using rule 10 (sentencia -> funcionDeclaration .)
    PUBLIC          reduce using rule 10 (sentencia -> funcionDeclaration .)
    STATIC          reduce using rule 10 (sentencia -> funcionDeclaration .)
    FINAL           reduce using rule 10 (sentencia -> funcionDeclaration .)
    IF              reduce using rule 10 (sentencia -> funcionDeclaration .)
    WHILE           reduce using rule 10 (sentencia -> funcionDeclaration .)
    DO              reduce using rule 10 (sentencia -> funcionDeclaration .)
    SWITCH          reduce using rule 10 (sentencia -> funcionDeclaration .)
    FOREACH         reduce using rule 10 (sentencia -> funcionDeclaration .)
    FOR             reduce using rule 10 (sentencia -> funcionDeclaration .)
    CLOSETAG        reduce using rule 10 (sentencia -> funcionDeclaration .)
    RBRACE          reduce using rule 10 (sentencia -> funcionDeclaration .)
    BREAK           reduce using rule 10 (sentencia -> funcionDeclaration .)
    ENDSWITCH       reduce using rule 10 (sentencia -> funcionDeclaration .)
    CASE            reduce using rule 10 (sentencia -> funcionDeclaration .)
    DEFAULT         reduce using rule 10 (sentencia -> funcionDeclaration .)


state 12

    (11) sentencia -> returnStatement .

    VARIABLE        reduce using rule 11 (sentencia -> returnStatement .)
    ECHO            reduce using rule 11 (sentencia -> returnStatement .)
    PRINT           reduce using rule 11 (sentencia -> returnStatement .)
    TRY             reduce using rule 11 (sentencia -> returnStatement .)
    FUNCTION        reduce using rule 11 (sentencia -> returnStatement .)
    RETURN          reduce using rule 11 (sentencia -> returnStatement .)
    ID              reduce using rule 11 (sentencia -> returnStatement .)
    EMPTY           reduce using rule 11 (sentencia -> returnStatement .)
    CLASS           reduce using rule 11 (sentencia -> returnStatement .)
    INTERFACE       reduce using rule 11 (sentencia -> returnStatement .)
    INCLUDE         reduce using rule 11 (sentencia -> returnStatement .)
    NAMESPACE       reduce using rule 11 (sentencia -> returnStatement .)
    THROW           reduce using rule 11 (sentencia -> returnStatement .)
    CONST           reduce using rule 11 (sentencia -> returnStatement .)
    THIS            reduce using rule 11 (sentencia -> returnStatement .)
    INT             reduce using rule 11 (sentencia -> returnStatement .)
    FLOAT           reduce using rule 11 (sentencia -> returnStatement .)
    STRING          reduce using rule 11 (sentencia -> returnStatement .)
    BOOL            reduce using rule 11 (sentencia -> returnStatement .)
    NULL            reduce using rule 11 (sentencia -> returnStatement .)
    ARRAY           reduce using rule 11 (sentencia -> returnStatement .)
    ABSTRACT        reduce using rule 11 (sentencia -> returnStatement .)
    PRIVATE         reduce using rule 11 (sentencia -> returnStatement .)
    PROTECTED       reduce using rule 11 (sentencia -> returnStatement .)
    PUBLIC          reduce using rule 11 (sentencia -> returnStatement .)
    STATIC          reduce using rule 11 (sentencia -> returnStatement .)
    FINAL           reduce using rule 11 (sentencia -> returnStatement .)
    IF              reduce using rule 11 (sentencia -> returnStatement .)
    WHILE           reduce using rule 11 (sentencia -> returnStatement .)
    DO              reduce using rule 11 (sentencia -> returnStatement .)
    SWITCH          reduce using rule 11 (sentencia -> returnStatement .)
    FOREACH         reduce using rule 11 (sentencia -> returnStatement .)
    FOR             reduce using rule 11 (sentencia -> returnStatement .)
    CLOSETAG        reduce using rule 11 (sentencia -> returnStatement .)
    RBRACE          reduce using rule 11 (sentencia -> returnStatement .)
    BREAK           reduce using rule 11 (sentencia -> returnStatement .)
    ENDSWITCH       reduce using rule 11 (sentencia -> returnStatement .)
    CASE            reduce using rule 11 (sentencia -> returnStatement .)
    DEFAULT         reduce using rule 11 (sentencia -> returnStatement .)


state 13

    (12) sentencia -> llamadaFuncion .
    (47) valor -> llamadaFuncion .

    VARIABLE        reduce using rule 12 (sentencia -> llamadaFuncion .)
    ECHO            reduce using rule 12 (sentencia -> llamadaFuncion .)
    PRINT           reduce using rule 12 (sentencia -> llamadaFuncion .)
    TRY             reduce using rule 12 (sentencia -> llamadaFuncion .)
    FUNCTION        reduce using rule 12 (sentencia -> llamadaFuncion .)
    RETURN          reduce using rule 12 (sentencia -> llamadaFuncion .)
    ID              reduce using rule 12 (sentencia -> llamadaFuncion .)
    EMPTY           reduce using rule 12 (sentencia -> llamadaFuncion .)
    CLASS           reduce using rule 12 (sentencia -> llamadaFuncion .)
    INTERFACE       reduce using rule 12 (sentencia -> llamadaFuncion .)
    INCLUDE         reduce using rule 12 (sentencia -> llamadaFuncion .)
    NAMESPACE       reduce using rule 12 (sentencia -> llamadaFuncion .)
    THROW           reduce using rule 12 (sentencia -> llamadaFuncion .)
    CONST           reduce using rule 12 (sentencia -> llamadaFuncion .)
    THIS            reduce using rule 12 (sentencia -> llamadaFuncion .)
    INT             reduce using rule 12 (sentencia -> llamadaFuncion .)
    FLOAT           reduce using rule 12 (sentencia -> llamadaFuncion .)
    STRING          reduce using rule 12 (sentencia -> llamadaFuncion .)
    BOOL            reduce using rule 12 (sentencia -> llamadaFuncion .)
    NULL            reduce using rule 12 (sentencia -> llamadaFuncion .)
    ARRAY           reduce using rule 12 (sentencia -> llamadaFuncion .)
    ABSTRACT        reduce using rule 12 (sentencia -> llamadaFuncion .)
    PRIVATE         reduce using rule 12 (sentencia -> llamadaFuncion .)
    PROTECTED       reduce using rule 12 (sentencia -> llamadaFuncion .)
    PUBLIC          reduce using rule 12 (sentencia -> llamadaFuncion .)
    STATIC          reduce using rule 12 (sentencia -> llamadaFuncion .)
    FINAL           reduce using rule 12 (sentencia -> llamadaFuncion .)
    IF              reduce using rule 12 (sentencia -> llamadaFuncion .)
    WHILE           reduce using rule 12 (sentencia -> llamadaFuncion .)
    DO              reduce using rule 12 (sentencia -> llamadaFuncion .)
    SWITCH          reduce using rule 12 (sentencia -> llamadaFuncion .)
    FOREACH         reduce using rule 12 (sentencia -> llamadaFuncion .)
    FOR             reduce using rule 12 (sentencia -> llamadaFuncion .)
    CLOSETAG        reduce using rule 12 (sentencia -> llamadaFuncion .)
    RBRACE          reduce using rule 12 (sentencia -> llamadaFuncion .)
    BREAK           reduce using rule 12 (sentencia -> llamadaFuncion .)
    ENDSWITCH       reduce using rule 12 (sentencia -> llamadaFuncion .)
    CASE            reduce using rule 12 (sentencia -> llamadaFuncion .)
    DEFAULT         reduce using rule 12 (sentencia -> llamadaFuncion .)
    LT              reduce using rule 47 (valor -> llamadaFuncion .)
    GT              reduce using rule 47 (valor -> llamadaFuncion .)
    LEQ             reduce using rule 47 (valor -> llamadaFuncion .)
    GEQ             reduce using rule 47 (valor -> llamadaFuncion .)


state 14

    (13) sentencia -> classDeclarate .

    VARIABLE        reduce using rule 13 (sentencia -> classDeclarate .)
    ECHO            reduce using rule 13 (sentencia -> classDeclarate .)
    PRINT           reduce using rule 13 (sentencia -> classDeclarate .)
    TRY             reduce using rule 13 (sentencia -> classDeclarate .)
    FUNCTION        reduce using rule 13 (sentencia -> classDeclarate .)
    RETURN          reduce using rule 13 (sentencia -> classDeclarate .)
    ID              reduce using rule 13 (sentencia -> classDeclarate .)
    EMPTY           reduce using rule 13 (sentencia -> classDeclarate .)
    CLASS           reduce using rule 13 (sentencia -> classDeclarate .)
    INTERFACE       reduce using rule 13 (sentencia -> classDeclarate .)
    INCLUDE         reduce using rule 13 (sentencia -> classDeclarate .)
    NAMESPACE       reduce using rule 13 (sentencia -> classDeclarate .)
    THROW           reduce using rule 13 (sentencia -> classDeclarate .)
    CONST           reduce using rule 13 (sentencia -> classDeclarate .)
    THIS            reduce using rule 13 (sentencia -> classDeclarate .)
    INT             reduce using rule 13 (sentencia -> classDeclarate .)
    FLOAT           reduce using rule 13 (sentencia -> classDeclarate .)
    STRING          reduce using rule 13 (sentencia -> classDeclarate .)
    BOOL            reduce using rule 13 (sentencia -> classDeclarate .)
    NULL            reduce using rule 13 (sentencia -> classDeclarate .)
    ARRAY           reduce using rule 13 (sentencia -> classDeclarate .)
    ABSTRACT        reduce using rule 13 (sentencia -> classDeclarate .)
    PRIVATE         reduce using rule 13 (sentencia -> classDeclarate .)
    PROTECTED       reduce using rule 13 (sentencia -> classDeclarate .)
    PUBLIC          reduce using rule 13 (sentencia -> classDeclarate .)
    STATIC          reduce using rule 13 (sentencia -> classDeclarate .)
    FINAL           reduce using rule 13 (sentencia -> classDeclarate .)
    IF              reduce using rule 13 (sentencia -> classDeclarate .)
    WHILE           reduce using rule 13 (sentencia -> classDeclarate .)
    DO              reduce using rule 13 (sentencia -> classDeclarate .)
    SWITCH          reduce using rule 13 (sentencia -> classDeclarate .)
    FOREACH         reduce using rule 13 (sentencia -> classDeclarate .)
    FOR             reduce using rule 13 (sentencia -> classDeclarate .)
    CLOSETAG        reduce using rule 13 (sentencia -> classDeclarate .)
    RBRACE          reduce using rule 13 (sentencia -> classDeclarate .)
    BREAK           reduce using rule 13 (sentencia -> classDeclarate .)
    ENDSWITCH       reduce using rule 13 (sentencia -> classDeclarate .)
    CASE            reduce using rule 13 (sentencia -> classDeclarate .)
    DEFAULT         reduce using rule 13 (sentencia -> classDeclarate .)


state 15

    (14) sentencia -> interface .

    VARIABLE        reduce using rule 14 (sentencia -> interface .)
    ECHO            reduce using rule 14 (sentencia -> interface .)
    PRINT           reduce using rule 14 (sentencia -> interface .)
    TRY             reduce using rule 14 (sentencia -> interface .)
    FUNCTION        reduce using rule 14 (sentencia -> interface .)
    RETURN          reduce using rule 14 (sentencia -> interface .)
    ID              reduce using rule 14 (sentencia -> interface .)
    EMPTY           reduce using rule 14 (sentencia -> interface .)
    CLASS           reduce using rule 14 (sentencia -> interface .)
    INTERFACE       reduce using rule 14 (sentencia -> interface .)
    INCLUDE         reduce using rule 14 (sentencia -> interface .)
    NAMESPACE       reduce using rule 14 (sentencia -> interface .)
    THROW           reduce using rule 14 (sentencia -> interface .)
    CONST           reduce using rule 14 (sentencia -> interface .)
    THIS            reduce using rule 14 (sentencia -> interface .)
    INT             reduce using rule 14 (sentencia -> interface .)
    FLOAT           reduce using rule 14 (sentencia -> interface .)
    STRING          reduce using rule 14 (sentencia -> interface .)
    BOOL            reduce using rule 14 (sentencia -> interface .)
    NULL            reduce using rule 14 (sentencia -> interface .)
    ARRAY           reduce using rule 14 (sentencia -> interface .)
    ABSTRACT        reduce using rule 14 (sentencia -> interface .)
    PRIVATE         reduce using rule 14 (sentencia -> interface .)
    PROTECTED       reduce using rule 14 (sentencia -> interface .)
    PUBLIC          reduce using rule 14 (sentencia -> interface .)
    STATIC          reduce using rule 14 (sentencia -> interface .)
    FINAL           reduce using rule 14 (sentencia -> interface .)
    IF              reduce using rule 14 (sentencia -> interface .)
    WHILE           reduce using rule 14 (sentencia -> interface .)
    DO              reduce using rule 14 (sentencia -> interface .)
    SWITCH          reduce using rule 14 (sentencia -> interface .)
    FOREACH         reduce using rule 14 (sentencia -> interface .)
    FOR             reduce using rule 14 (sentencia -> interface .)
    CLOSETAG        reduce using rule 14 (sentencia -> interface .)
    RBRACE          reduce using rule 14 (sentencia -> interface .)
    BREAK           reduce using rule 14 (sentencia -> interface .)
    ENDSWITCH       reduce using rule 14 (sentencia -> interface .)
    CASE            reduce using rule 14 (sentencia -> interface .)
    DEFAULT         reduce using rule 14 (sentencia -> interface .)


state 16

    (15) sentencia -> objeto .

    VARIABLE        reduce using rule 15 (sentencia -> objeto .)
    ECHO            reduce using rule 15 (sentencia -> objeto .)
    PRINT           reduce using rule 15 (sentencia -> objeto .)
    TRY             reduce using rule 15 (sentencia -> objeto .)
    FUNCTION        reduce using rule 15 (sentencia -> objeto .)
    RETURN          reduce using rule 15 (sentencia -> objeto .)
    ID              reduce using rule 15 (sentencia -> objeto .)
    EMPTY           reduce using rule 15 (sentencia -> objeto .)
    CLASS           reduce using rule 15 (sentencia -> objeto .)
    INTERFACE       reduce using rule 15 (sentencia -> objeto .)
    INCLUDE         reduce using rule 15 (sentencia -> objeto .)
    NAMESPACE       reduce using rule 15 (sentencia -> objeto .)
    THROW           reduce using rule 15 (sentencia -> objeto .)
    CONST           reduce using rule 15 (sentencia -> objeto .)
    THIS            reduce using rule 15 (sentencia -> objeto .)
    INT             reduce using rule 15 (sentencia -> objeto .)
    FLOAT           reduce using rule 15 (sentencia -> objeto .)
    STRING          reduce using rule 15 (sentencia -> objeto .)
    BOOL            reduce using rule 15 (sentencia -> objeto .)
    NULL            reduce using rule 15 (sentencia -> objeto .)
    ARRAY           reduce using rule 15 (sentencia -> objeto .)
    ABSTRACT        reduce using rule 15 (sentencia -> objeto .)
    PRIVATE         reduce using rule 15 (sentencia -> objeto .)
    PROTECTED       reduce using rule 15 (sentencia -> objeto .)
    PUBLIC          reduce using rule 15 (sentencia -> objeto .)
    STATIC          reduce using rule 15 (sentencia -> objeto .)
    FINAL           reduce using rule 15 (sentencia -> objeto .)
    IF              reduce using rule 15 (sentencia -> objeto .)
    WHILE           reduce using rule 15 (sentencia -> objeto .)
    DO              reduce using rule 15 (sentencia -> objeto .)
    SWITCH          reduce using rule 15 (sentencia -> objeto .)
    FOREACH         reduce using rule 15 (sentencia -> objeto .)
    FOR             reduce using rule 15 (sentencia -> objeto .)
    CLOSETAG        reduce using rule 15 (sentencia -> objeto .)
    RBRACE          reduce using rule 15 (sentencia -> objeto .)
    BREAK           reduce using rule 15 (sentencia -> objeto .)
    ENDSWITCH       reduce using rule 15 (sentencia -> objeto .)
    CASE            reduce using rule 15 (sentencia -> objeto .)
    DEFAULT         reduce using rule 15 (sentencia -> objeto .)


state 17

    (16) sentencia -> includes .

    VARIABLE        reduce using rule 16 (sentencia -> includes .)
    ECHO            reduce using rule 16 (sentencia -> includes .)
    PRINT           reduce using rule 16 (sentencia -> includes .)
    TRY             reduce using rule 16 (sentencia -> includes .)
    FUNCTION        reduce using rule 16 (sentencia -> includes .)
    RETURN          reduce using rule 16 (sentencia -> includes .)
    ID              reduce using rule 16 (sentencia -> includes .)
    EMPTY           reduce using rule 16 (sentencia -> includes .)
    CLASS           reduce using rule 16 (sentencia -> includes .)
    INTERFACE       reduce using rule 16 (sentencia -> includes .)
    INCLUDE         reduce using rule 16 (sentencia -> includes .)
    NAMESPACE       reduce using rule 16 (sentencia -> includes .)
    THROW           reduce using rule 16 (sentencia -> includes .)
    CONST           reduce using rule 16 (sentencia -> includes .)
    THIS            reduce using rule 16 (sentencia -> includes .)
    INT             reduce using rule 16 (sentencia -> includes .)
    FLOAT           reduce using rule 16 (sentencia -> includes .)
    STRING          reduce using rule 16 (sentencia -> includes .)
    BOOL            reduce using rule 16 (sentencia -> includes .)
    NULL            reduce using rule 16 (sentencia -> includes .)
    ARRAY           reduce using rule 16 (sentencia -> includes .)
    ABSTRACT        reduce using rule 16 (sentencia -> includes .)
    PRIVATE         reduce using rule 16 (sentencia -> includes .)
    PROTECTED       reduce using rule 16 (sentencia -> includes .)
    PUBLIC          reduce using rule 16 (sentencia -> includes .)
    STATIC          reduce using rule 16 (sentencia -> includes .)
    FINAL           reduce using rule 16 (sentencia -> includes .)
    IF              reduce using rule 16 (sentencia -> includes .)
    WHILE           reduce using rule 16 (sentencia -> includes .)
    DO              reduce using rule 16 (sentencia -> includes .)
    SWITCH          reduce using rule 16 (sentencia -> includes .)
    FOREACH         reduce using rule 16 (sentencia -> includes .)
    FOR             reduce using rule 16 (sentencia -> includes .)
    CLOSETAG        reduce using rule 16 (sentencia -> includes .)
    RBRACE          reduce using rule 16 (sentencia -> includes .)
    BREAK           reduce using rule 16 (sentencia -> includes .)
    ENDSWITCH       reduce using rule 16 (sentencia -> includes .)
    CASE            reduce using rule 16 (sentencia -> includes .)
    DEFAULT         reduce using rule 16 (sentencia -> includes .)


state 18

    (17) sentencia -> namespace .

    VARIABLE        reduce using rule 17 (sentencia -> namespace .)
    ECHO            reduce using rule 17 (sentencia -> namespace .)
    PRINT           reduce using rule 17 (sentencia -> namespace .)
    TRY             reduce using rule 17 (sentencia -> namespace .)
    FUNCTION        reduce using rule 17 (sentencia -> namespace .)
    RETURN          reduce using rule 17 (sentencia -> namespace .)
    ID              reduce using rule 17 (sentencia -> namespace .)
    EMPTY           reduce using rule 17 (sentencia -> namespace .)
    CLASS           reduce using rule 17 (sentencia -> namespace .)
    INTERFACE       reduce using rule 17 (sentencia -> namespace .)
    INCLUDE         reduce using rule 17 (sentencia -> namespace .)
    NAMESPACE       reduce using rule 17 (sentencia -> namespace .)
    THROW           reduce using rule 17 (sentencia -> namespace .)
    CONST           reduce using rule 17 (sentencia -> namespace .)
    THIS            reduce using rule 17 (sentencia -> namespace .)
    INT             reduce using rule 17 (sentencia -> namespace .)
    FLOAT           reduce using rule 17 (sentencia -> namespace .)
    STRING          reduce using rule 17 (sentencia -> namespace .)
    BOOL            reduce using rule 17 (sentencia -> namespace .)
    NULL            reduce using rule 17 (sentencia -> namespace .)
    ARRAY           reduce using rule 17 (sentencia -> namespace .)
    ABSTRACT        reduce using rule 17 (sentencia -> namespace .)
    PRIVATE         reduce using rule 17 (sentencia -> namespace .)
    PROTECTED       reduce using rule 17 (sentencia -> namespace .)
    PUBLIC          reduce using rule 17 (sentencia -> namespace .)
    STATIC          reduce using rule 17 (sentencia -> namespace .)
    FINAL           reduce using rule 17 (sentencia -> namespace .)
    IF              reduce using rule 17 (sentencia -> namespace .)
    WHILE           reduce using rule 17 (sentencia -> namespace .)
    DO              reduce using rule 17 (sentencia -> namespace .)
    SWITCH          reduce using rule 17 (sentencia -> namespace .)
    FOREACH         reduce using rule 17 (sentencia -> namespace .)
    FOR             reduce using rule 17 (sentencia -> namespace .)
    CLOSETAG        reduce using rule 17 (sentencia -> namespace .)
    RBRACE          reduce using rule 17 (sentencia -> namespace .)
    BREAK           reduce using rule 17 (sentencia -> namespace .)
    ENDSWITCH       reduce using rule 17 (sentencia -> namespace .)
    CASE            reduce using rule 17 (sentencia -> namespace .)
    DEFAULT         reduce using rule 17 (sentencia -> namespace .)


state 19

    (18) sentencia -> anonymousFunction .

    VARIABLE        reduce using rule 18 (sentencia -> anonymousFunction .)
    ECHO            reduce using rule 18 (sentencia -> anonymousFunction .)
    PRINT           reduce using rule 18 (sentencia -> anonymousFunction .)
    TRY             reduce using rule 18 (sentencia -> anonymousFunction .)
    FUNCTION        reduce using rule 18 (sentencia -> anonymousFunction .)
    RETURN          reduce using rule 18 (sentencia -> anonymousFunction .)
    ID              reduce using rule 18 (sentencia -> anonymousFunction .)
    EMPTY           reduce using rule 18 (sentencia -> anonymousFunction .)
    CLASS           reduce using rule 18 (sentencia -> anonymousFunction .)
    INTERFACE       reduce using rule 18 (sentencia -> anonymousFunction .)
    INCLUDE         reduce using rule 18 (sentencia -> anonymousFunction .)
    NAMESPACE       reduce using rule 18 (sentencia -> anonymousFunction .)
    THROW           reduce using rule 18 (sentencia -> anonymousFunction .)
    CONST           reduce using rule 18 (sentencia -> anonymousFunction .)
    THIS            reduce using rule 18 (sentencia -> anonymousFunction .)
    INT             reduce using rule 18 (sentencia -> anonymousFunction .)
    FLOAT           reduce using rule 18 (sentencia -> anonymousFunction .)
    STRING          reduce using rule 18 (sentencia -> anonymousFunction .)
    BOOL            reduce using rule 18 (sentencia -> anonymousFunction .)
    NULL            reduce using rule 18 (sentencia -> anonymousFunction .)
    ARRAY           reduce using rule 18 (sentencia -> anonymousFunction .)
    ABSTRACT        reduce using rule 18 (sentencia -> anonymousFunction .)
    PRIVATE         reduce using rule 18 (sentencia -> anonymousFunction .)
    PROTECTED       reduce using rule 18 (sentencia -> anonymousFunction .)
    PUBLIC          reduce using rule 18 (sentencia -> anonymousFunction .)
    STATIC          reduce using rule 18 (sentencia -> anonymousFunction .)
    FINAL           reduce using rule 18 (sentencia -> anonymousFunction .)
    IF              reduce using rule 18 (sentencia -> anonymousFunction .)
    WHILE           reduce using rule 18 (sentencia -> anonymousFunction .)
    DO              reduce using rule 18 (sentencia -> anonymousFunction .)
    SWITCH          reduce using rule 18 (sentencia -> anonymousFunction .)
    FOREACH         reduce using rule 18 (sentencia -> anonymousFunction .)
    FOR             reduce using rule 18 (sentencia -> anonymousFunction .)
    CLOSETAG        reduce using rule 18 (sentencia -> anonymousFunction .)
    RBRACE          reduce using rule 18 (sentencia -> anonymousFunction .)
    BREAK           reduce using rule 18 (sentencia -> anonymousFunction .)
    ENDSWITCH       reduce using rule 18 (sentencia -> anonymousFunction .)
    CASE            reduce using rule 18 (sentencia -> anonymousFunction .)
    DEFAULT         reduce using rule 18 (sentencia -> anonymousFunction .)


state 20

    (19) sentencia -> throw .

    VARIABLE        reduce using rule 19 (sentencia -> throw .)
    ECHO            reduce using rule 19 (sentencia -> throw .)
    PRINT           reduce using rule 19 (sentencia -> throw .)
    TRY             reduce using rule 19 (sentencia -> throw .)
    FUNCTION        reduce using rule 19 (sentencia -> throw .)
    RETURN          reduce using rule 19 (sentencia -> throw .)
    ID              reduce using rule 19 (sentencia -> throw .)
    EMPTY           reduce using rule 19 (sentencia -> throw .)
    CLASS           reduce using rule 19 (sentencia -> throw .)
    INTERFACE       reduce using rule 19 (sentencia -> throw .)
    INCLUDE         reduce using rule 19 (sentencia -> throw .)
    NAMESPACE       reduce using rule 19 (sentencia -> throw .)
    THROW           reduce using rule 19 (sentencia -> throw .)
    CONST           reduce using rule 19 (sentencia -> throw .)
    THIS            reduce using rule 19 (sentencia -> throw .)
    INT             reduce using rule 19 (sentencia -> throw .)
    FLOAT           reduce using rule 19 (sentencia -> throw .)
    STRING          reduce using rule 19 (sentencia -> throw .)
    BOOL            reduce using rule 19 (sentencia -> throw .)
    NULL            reduce using rule 19 (sentencia -> throw .)
    ARRAY           reduce using rule 19 (sentencia -> throw .)
    ABSTRACT        reduce using rule 19 (sentencia -> throw .)
    PRIVATE         reduce using rule 19 (sentencia -> throw .)
    PROTECTED       reduce using rule 19 (sentencia -> throw .)
    PUBLIC          reduce using rule 19 (sentencia -> throw .)
    STATIC          reduce using rule 19 (sentencia -> throw .)
    FINAL           reduce using rule 19 (sentencia -> throw .)
    IF              reduce using rule 19 (sentencia -> throw .)
    WHILE           reduce using rule 19 (sentencia -> throw .)
    DO              reduce using rule 19 (sentencia -> throw .)
    SWITCH          reduce using rule 19 (sentencia -> throw .)
    FOREACH         reduce using rule 19 (sentencia -> throw .)
    FOR             reduce using rule 19 (sentencia -> throw .)
    CLOSETAG        reduce using rule 19 (sentencia -> throw .)
    RBRACE          reduce using rule 19 (sentencia -> throw .)
    BREAK           reduce using rule 19 (sentencia -> throw .)
    ENDSWITCH       reduce using rule 19 (sentencia -> throw .)
    CASE            reduce using rule 19 (sentencia -> throw .)
    DEFAULT         reduce using rule 19 (sentencia -> throw .)


state 21

    (20) sentencia -> instance .

    VARIABLE        reduce using rule 20 (sentencia -> instance .)
    ECHO            reduce using rule 20 (sentencia -> instance .)
    PRINT           reduce using rule 20 (sentencia -> instance .)
    TRY             reduce using rule 20 (sentencia -> instance .)
    FUNCTION        reduce using rule 20 (sentencia -> instance .)
    RETURN          reduce using rule 20 (sentencia -> instance .)
    ID              reduce using rule 20 (sentencia -> instance .)
    EMPTY           reduce using rule 20 (sentencia -> instance .)
    CLASS           reduce using rule 20 (sentencia -> instance .)
    INTERFACE       reduce using rule 20 (sentencia -> instance .)
    INCLUDE         reduce using rule 20 (sentencia -> instance .)
    NAMESPACE       reduce using rule 20 (sentencia -> instance .)
    THROW           reduce using rule 20 (sentencia -> instance .)
    CONST           reduce using rule 20 (sentencia -> instance .)
    THIS            reduce using rule 20 (sentencia -> instance .)
    INT             reduce using rule 20 (sentencia -> instance .)
    FLOAT           reduce using rule 20 (sentencia -> instance .)
    STRING          reduce using rule 20 (sentencia -> instance .)
    BOOL            reduce using rule 20 (sentencia -> instance .)
    NULL            reduce using rule 20 (sentencia -> instance .)
    ARRAY           reduce using rule 20 (sentencia -> instance .)
    ABSTRACT        reduce using rule 20 (sentencia -> instance .)
    PRIVATE         reduce using rule 20 (sentencia -> instance .)
    PROTECTED       reduce using rule 20 (sentencia -> instance .)
    PUBLIC          reduce using rule 20 (sentencia -> instance .)
    STATIC          reduce using rule 20 (sentencia -> instance .)
    FINAL           reduce using rule 20 (sentencia -> instance .)
    IF              reduce using rule 20 (sentencia -> instance .)
    WHILE           reduce using rule 20 (sentencia -> instance .)
    DO              reduce using rule 20 (sentencia -> instance .)
    SWITCH          reduce using rule 20 (sentencia -> instance .)
    FOREACH         reduce using rule 20 (sentencia -> instance .)
    FOR             reduce using rule 20 (sentencia -> instance .)
    CLOSETAG        reduce using rule 20 (sentencia -> instance .)
    RBRACE          reduce using rule 20 (sentencia -> instance .)
    BREAK           reduce using rule 20 (sentencia -> instance .)
    ENDSWITCH       reduce using rule 20 (sentencia -> instance .)
    CASE            reduce using rule 20 (sentencia -> instance .)
    DEFAULT         reduce using rule 20 (sentencia -> instance .)


state 22

    (21) sentencia -> constdeclaration .

    VARIABLE        reduce using rule 21 (sentencia -> constdeclaration .)
    ECHO            reduce using rule 21 (sentencia -> constdeclaration .)
    PRINT           reduce using rule 21 (sentencia -> constdeclaration .)
    TRY             reduce using rule 21 (sentencia -> constdeclaration .)
    FUNCTION        reduce using rule 21 (sentencia -> constdeclaration .)
    RETURN          reduce using rule 21 (sentencia -> constdeclaration .)
    ID              reduce using rule 21 (sentencia -> constdeclaration .)
    EMPTY           reduce using rule 21 (sentencia -> constdeclaration .)
    CLASS           reduce using rule 21 (sentencia -> constdeclaration .)
    INTERFACE       reduce using rule 21 (sentencia -> constdeclaration .)
    INCLUDE         reduce using rule 21 (sentencia -> constdeclaration .)
    NAMESPACE       reduce using rule 21 (sentencia -> constdeclaration .)
    THROW           reduce using rule 21 (sentencia -> constdeclaration .)
    CONST           reduce using rule 21 (sentencia -> constdeclaration .)
    THIS            reduce using rule 21 (sentencia -> constdeclaration .)
    INT             reduce using rule 21 (sentencia -> constdeclaration .)
    FLOAT           reduce using rule 21 (sentencia -> constdeclaration .)
    STRING          reduce using rule 21 (sentencia -> constdeclaration .)
    BOOL            reduce using rule 21 (sentencia -> constdeclaration .)
    NULL            reduce using rule 21 (sentencia -> constdeclaration .)
    ARRAY           reduce using rule 21 (sentencia -> constdeclaration .)
    ABSTRACT        reduce using rule 21 (sentencia -> constdeclaration .)
    PRIVATE         reduce using rule 21 (sentencia -> constdeclaration .)
    PROTECTED       reduce using rule 21 (sentencia -> constdeclaration .)
    PUBLIC          reduce using rule 21 (sentencia -> constdeclaration .)
    STATIC          reduce using rule 21 (sentencia -> constdeclaration .)
    FINAL           reduce using rule 21 (sentencia -> constdeclaration .)
    IF              reduce using rule 21 (sentencia -> constdeclaration .)
    WHILE           reduce using rule 21 (sentencia -> constdeclaration .)
    DO              reduce using rule 21 (sentencia -> constdeclaration .)
    SWITCH          reduce using rule 21 (sentencia -> constdeclaration .)
    FOREACH         reduce using rule 21 (sentencia -> constdeclaration .)
    FOR             reduce using rule 21 (sentencia -> constdeclaration .)
    CLOSETAG        reduce using rule 21 (sentencia -> constdeclaration .)
    RBRACE          reduce using rule 21 (sentencia -> constdeclaration .)
    BREAK           reduce using rule 21 (sentencia -> constdeclaration .)
    ENDSWITCH       reduce using rule 21 (sentencia -> constdeclaration .)
    CASE            reduce using rule 21 (sentencia -> constdeclaration .)
    DEFAULT         reduce using rule 21 (sentencia -> constdeclaration .)


state 23

    (22) sentencia -> thisdeclaration .

    VARIABLE        reduce using rule 22 (sentencia -> thisdeclaration .)
    ECHO            reduce using rule 22 (sentencia -> thisdeclaration .)
    PRINT           reduce using rule 22 (sentencia -> thisdeclaration .)
    TRY             reduce using rule 22 (sentencia -> thisdeclaration .)
    FUNCTION        reduce using rule 22 (sentencia -> thisdeclaration .)
    RETURN          reduce using rule 22 (sentencia -> thisdeclaration .)
    ID              reduce using rule 22 (sentencia -> thisdeclaration .)
    EMPTY           reduce using rule 22 (sentencia -> thisdeclaration .)
    CLASS           reduce using rule 22 (sentencia -> thisdeclaration .)
    INTERFACE       reduce using rule 22 (sentencia -> thisdeclaration .)
    INCLUDE         reduce using rule 22 (sentencia -> thisdeclaration .)
    NAMESPACE       reduce using rule 22 (sentencia -> thisdeclaration .)
    THROW           reduce using rule 22 (sentencia -> thisdeclaration .)
    CONST           reduce using rule 22 (sentencia -> thisdeclaration .)
    THIS            reduce using rule 22 (sentencia -> thisdeclaration .)
    INT             reduce using rule 22 (sentencia -> thisdeclaration .)
    FLOAT           reduce using rule 22 (sentencia -> thisdeclaration .)
    STRING          reduce using rule 22 (sentencia -> thisdeclaration .)
    BOOL            reduce using rule 22 (sentencia -> thisdeclaration .)
    NULL            reduce using rule 22 (sentencia -> thisdeclaration .)
    ARRAY           reduce using rule 22 (sentencia -> thisdeclaration .)
    ABSTRACT        reduce using rule 22 (sentencia -> thisdeclaration .)
    PRIVATE         reduce using rule 22 (sentencia -> thisdeclaration .)
    PROTECTED       reduce using rule 22 (sentencia -> thisdeclaration .)
    PUBLIC          reduce using rule 22 (sentencia -> thisdeclaration .)
    STATIC          reduce using rule 22 (sentencia -> thisdeclaration .)
    FINAL           reduce using rule 22 (sentencia -> thisdeclaration .)
    IF              reduce using rule 22 (sentencia -> thisdeclaration .)
    WHILE           reduce using rule 22 (sentencia -> thisdeclaration .)
    DO              reduce using rule 22 (sentencia -> thisdeclaration .)
    SWITCH          reduce using rule 22 (sentencia -> thisdeclaration .)
    FOREACH         reduce using rule 22 (sentencia -> thisdeclaration .)
    FOR             reduce using rule 22 (sentencia -> thisdeclaration .)
    CLOSETAG        reduce using rule 22 (sentencia -> thisdeclaration .)
    RBRACE          reduce using rule 22 (sentencia -> thisdeclaration .)
    BREAK           reduce using rule 22 (sentencia -> thisdeclaration .)
    ENDSWITCH       reduce using rule 22 (sentencia -> thisdeclaration .)
    CASE            reduce using rule 22 (sentencia -> thisdeclaration .)
    DEFAULT         reduce using rule 22 (sentencia -> thisdeclaration .)


state 24

    (23) sentencia -> concatenate .

    VARIABLE        reduce using rule 23 (sentencia -> concatenate .)
    ECHO            reduce using rule 23 (sentencia -> concatenate .)
    PRINT           reduce using rule 23 (sentencia -> concatenate .)
    TRY             reduce using rule 23 (sentencia -> concatenate .)
    FUNCTION        reduce using rule 23 (sentencia -> concatenate .)
    RETURN          reduce using rule 23 (sentencia -> concatenate .)
    ID              reduce using rule 23 (sentencia -> concatenate .)
    EMPTY           reduce using rule 23 (sentencia -> concatenate .)
    CLASS           reduce using rule 23 (sentencia -> concatenate .)
    INTERFACE       reduce using rule 23 (sentencia -> concatenate .)
    INCLUDE         reduce using rule 23 (sentencia -> concatenate .)
    NAMESPACE       reduce using rule 23 (sentencia -> concatenate .)
    THROW           reduce using rule 23 (sentencia -> concatenate .)
    CONST           reduce using rule 23 (sentencia -> concatenate .)
    THIS            reduce using rule 23 (sentencia -> concatenate .)
    INT             reduce using rule 23 (sentencia -> concatenate .)
    FLOAT           reduce using rule 23 (sentencia -> concatenate .)
    STRING          reduce using rule 23 (sentencia -> concatenate .)
    BOOL            reduce using rule 23 (sentencia -> concatenate .)
    NULL            reduce using rule 23 (sentencia -> concatenate .)
    ARRAY           reduce using rule 23 (sentencia -> concatenate .)
    ABSTRACT        reduce using rule 23 (sentencia -> concatenate .)
    PRIVATE         reduce using rule 23 (sentencia -> concatenate .)
    PROTECTED       reduce using rule 23 (sentencia -> concatenate .)
    PUBLIC          reduce using rule 23 (sentencia -> concatenate .)
    STATIC          reduce using rule 23 (sentencia -> concatenate .)
    FINAL           reduce using rule 23 (sentencia -> concatenate .)
    IF              reduce using rule 23 (sentencia -> concatenate .)
    WHILE           reduce using rule 23 (sentencia -> concatenate .)
    DO              reduce using rule 23 (sentencia -> concatenate .)
    SWITCH          reduce using rule 23 (sentencia -> concatenate .)
    FOREACH         reduce using rule 23 (sentencia -> concatenate .)
    FOR             reduce using rule 23 (sentencia -> concatenate .)
    CLOSETAG        reduce using rule 23 (sentencia -> concatenate .)
    RBRACE          reduce using rule 23 (sentencia -> concatenate .)
    BREAK           reduce using rule 23 (sentencia -> concatenate .)
    ENDSWITCH       reduce using rule 23 (sentencia -> concatenate .)
    CASE            reduce using rule 23 (sentencia -> concatenate .)
    DEFAULT         reduce using rule 23 (sentencia -> concatenate .)


state 25

    (24) sentencia -> minuse .

    VARIABLE        reduce using rule 24 (sentencia -> minuse .)
    ECHO            reduce using rule 24 (sentencia -> minuse .)
    PRINT           reduce using rule 24 (sentencia -> minuse .)
    TRY             reduce using rule 24 (sentencia -> minuse .)
    FUNCTION        reduce using rule 24 (sentencia -> minuse .)
    RETURN          reduce using rule 24 (sentencia -> minuse .)
    ID              reduce using rule 24 (sentencia -> minuse .)
    EMPTY           reduce using rule 24 (sentencia -> minuse .)
    CLASS           reduce using rule 24 (sentencia -> minuse .)
    INTERFACE       reduce using rule 24 (sentencia -> minuse .)
    INCLUDE         reduce using rule 24 (sentencia -> minuse .)
    NAMESPACE       reduce using rule 24 (sentencia -> minuse .)
    THROW           reduce using rule 24 (sentencia -> minuse .)
    CONST           reduce using rule 24 (sentencia -> minuse .)
    THIS            reduce using rule 24 (sentencia -> minuse .)
    INT             reduce using rule 24 (sentencia -> minuse .)
    FLOAT           reduce using rule 24 (sentencia -> minuse .)
    STRING          reduce using rule 24 (sentencia -> minuse .)
    BOOL            reduce using rule 24 (sentencia -> minuse .)
    NULL            reduce using rule 24 (sentencia -> minuse .)
    ARRAY           reduce using rule 24 (sentencia -> minuse .)
    ABSTRACT        reduce using rule 24 (sentencia -> minuse .)
    PRIVATE         reduce using rule 24 (sentencia -> minuse .)
    PROTECTED       reduce using rule 24 (sentencia -> minuse .)
    PUBLIC          reduce using rule 24 (sentencia -> minuse .)
    STATIC          reduce using rule 24 (sentencia -> minuse .)
    FINAL           reduce using rule 24 (sentencia -> minuse .)
    IF              reduce using rule 24 (sentencia -> minuse .)
    WHILE           reduce using rule 24 (sentencia -> minuse .)
    DO              reduce using rule 24 (sentencia -> minuse .)
    SWITCH          reduce using rule 24 (sentencia -> minuse .)
    FOREACH         reduce using rule 24 (sentencia -> minuse .)
    FOR             reduce using rule 24 (sentencia -> minuse .)
    CLOSETAG        reduce using rule 24 (sentencia -> minuse .)
    RBRACE          reduce using rule 24 (sentencia -> minuse .)
    BREAK           reduce using rule 24 (sentencia -> minuse .)
    ENDSWITCH       reduce using rule 24 (sentencia -> minuse .)
    CASE            reduce using rule 24 (sentencia -> minuse .)
    DEFAULT         reduce using rule 24 (sentencia -> minuse .)


state 26

    (25) sentencia -> pluse .

    VARIABLE        reduce using rule 25 (sentencia -> pluse .)
    ECHO            reduce using rule 25 (sentencia -> pluse .)
    PRINT           reduce using rule 25 (sentencia -> pluse .)
    TRY             reduce using rule 25 (sentencia -> pluse .)
    FUNCTION        reduce using rule 25 (sentencia -> pluse .)
    RETURN          reduce using rule 25 (sentencia -> pluse .)
    ID              reduce using rule 25 (sentencia -> pluse .)
    EMPTY           reduce using rule 25 (sentencia -> pluse .)
    CLASS           reduce using rule 25 (sentencia -> pluse .)
    INTERFACE       reduce using rule 25 (sentencia -> pluse .)
    INCLUDE         reduce using rule 25 (sentencia -> pluse .)
    NAMESPACE       reduce using rule 25 (sentencia -> pluse .)
    THROW           reduce using rule 25 (sentencia -> pluse .)
    CONST           reduce using rule 25 (sentencia -> pluse .)
    THIS            reduce using rule 25 (sentencia -> pluse .)
    INT             reduce using rule 25 (sentencia -> pluse .)
    FLOAT           reduce using rule 25 (sentencia -> pluse .)
    STRING          reduce using rule 25 (sentencia -> pluse .)
    BOOL            reduce using rule 25 (sentencia -> pluse .)
    NULL            reduce using rule 25 (sentencia -> pluse .)
    ARRAY           reduce using rule 25 (sentencia -> pluse .)
    ABSTRACT        reduce using rule 25 (sentencia -> pluse .)
    PRIVATE         reduce using rule 25 (sentencia -> pluse .)
    PROTECTED       reduce using rule 25 (sentencia -> pluse .)
    PUBLIC          reduce using rule 25 (sentencia -> pluse .)
    STATIC          reduce using rule 25 (sentencia -> pluse .)
    FINAL           reduce using rule 25 (sentencia -> pluse .)
    IF              reduce using rule 25 (sentencia -> pluse .)
    WHILE           reduce using rule 25 (sentencia -> pluse .)
    DO              reduce using rule 25 (sentencia -> pluse .)
    SWITCH          reduce using rule 25 (sentencia -> pluse .)
    FOREACH         reduce using rule 25 (sentencia -> pluse .)
    FOR             reduce using rule 25 (sentencia -> pluse .)
    CLOSETAG        reduce using rule 25 (sentencia -> pluse .)
    RBRACE          reduce using rule 25 (sentencia -> pluse .)
    BREAK           reduce using rule 25 (sentencia -> pluse .)
    ENDSWITCH       reduce using rule 25 (sentencia -> pluse .)
    CASE            reduce using rule 25 (sentencia -> pluse .)
    DEFAULT         reduce using rule 25 (sentencia -> pluse .)


state 27

    (28) asignacion -> VARIABLE . EQUALS operaArit SEMICOLON
    (29) asignacion -> VARIABLE . EQUALS valor SEMICOLON
    (30) asignacion -> VARIABLE . EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> VARIABLE . EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (162) objeto -> VARIABLE . ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (195) anonymousFunction -> VARIABLE . EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (198) instance -> VARIABLE . INSTANCEOF ID
    (202) concatenate -> VARIABLE . CONCATENATEEQUAL STRING
    (203) minuse -> VARIABLE . MINUSEQUAL INT
    (204) pluse -> VARIABLE . PLUSEQUAL INT
    (41) valor -> VARIABLE .
    (127) array -> VARIABLE . EQUALS arrays SEMICOLON
    (128) array -> VARIABLE . EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> VARIABLE . EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (134) map -> VARIABLE . EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> VARIABLE . EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    EQUALS          shift and go to state 76
    ARROW           shift and go to state 77
    INSTANCEOF      shift and go to state 78
    CONCATENATEEQUAL shift and go to state 79
    MINUSEQUAL      shift and go to state 80
    PLUSEQUAL       shift and go to state 81
    LT              reduce using rule 41 (valor -> VARIABLE .)
    GT              reduce using rule 41 (valor -> VARIABLE .)
    LEQ             reduce using rule 41 (valor -> VARIABLE .)
    GEQ             reduce using rule 41 (valor -> VARIABLE .)


state 28

    (54) comparacion -> valor . comparador valor
    (55) comparador -> . LT
    (56) comparador -> . GT
    (57) comparador -> . LEQ
    (58) comparador -> . GEQ

    LT              shift and go to state 83
    GT              shift and go to state 84
    LEQ             shift and go to state 85
    GEQ             shift and go to state 86

    comparador                     shift and go to state 82

state 29

    (59) impresion -> ECHO . imprimir SEMICOLON
    (61) imprimir -> . LPAREN repiteValores RPAREN
    (62) imprimir -> . LPAREN RPAREN
    (63) imprimir -> . repiteValores
    (64) imprimir -> . operador_ternario
    (65) imprimir -> . empty
    (66) repiteValores -> . valor
    (67) repiteValores -> . valor COMMA repiteValores
    (32) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (33) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (34) operador_ternario -> . LPAREN VARIABLE RPAREN QUESTION COLON valor
    (68) empty -> .
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 88
    SEMICOLON       reduce using rule 68 (empty -> .)
    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    imprimir                       shift and go to state 87
    repiteValores                  shift and go to state 89
    operador_ternario              shift and go to state 90
    empty                          shift and go to state 91
    valor                          shift and go to state 92
    llamadaFuncion                 shift and go to state 94

state 30

    (60) impresion -> PRINT . imprimir SEMICOLON
    (61) imprimir -> . LPAREN repiteValores RPAREN
    (62) imprimir -> . LPAREN RPAREN
    (63) imprimir -> . repiteValores
    (64) imprimir -> . operador_ternario
    (65) imprimir -> . empty
    (66) repiteValores -> . valor
    (67) repiteValores -> . valor COMMA repiteValores
    (32) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (33) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (34) operador_ternario -> . LPAREN VARIABLE RPAREN QUESTION COLON valor
    (68) empty -> .
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 88
    SEMICOLON       reduce using rule 68 (empty -> .)
    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    imprimir                       shift and go to state 95
    repiteValores                  shift and go to state 89
    operador_ternario              shift and go to state 90
    empty                          shift and go to state 91
    valor                          shift and go to state 92
    llamadaFuncion                 shift and go to state 94

state 31

    (69) estructurasPrograma -> controlStructure .

    VARIABLE        reduce using rule 69 (estructurasPrograma -> controlStructure .)
    ECHO            reduce using rule 69 (estructurasPrograma -> controlStructure .)
    PRINT           reduce using rule 69 (estructurasPrograma -> controlStructure .)
    TRY             reduce using rule 69 (estructurasPrograma -> controlStructure .)
    FUNCTION        reduce using rule 69 (estructurasPrograma -> controlStructure .)
    RETURN          reduce using rule 69 (estructurasPrograma -> controlStructure .)
    ID              reduce using rule 69 (estructurasPrograma -> controlStructure .)
    EMPTY           reduce using rule 69 (estructurasPrograma -> controlStructure .)
    CLASS           reduce using rule 69 (estructurasPrograma -> controlStructure .)
    INTERFACE       reduce using rule 69 (estructurasPrograma -> controlStructure .)
    INCLUDE         reduce using rule 69 (estructurasPrograma -> controlStructure .)
    NAMESPACE       reduce using rule 69 (estructurasPrograma -> controlStructure .)
    THROW           reduce using rule 69 (estructurasPrograma -> controlStructure .)
    CONST           reduce using rule 69 (estructurasPrograma -> controlStructure .)
    THIS            reduce using rule 69 (estructurasPrograma -> controlStructure .)
    INT             reduce using rule 69 (estructurasPrograma -> controlStructure .)
    FLOAT           reduce using rule 69 (estructurasPrograma -> controlStructure .)
    STRING          reduce using rule 69 (estructurasPrograma -> controlStructure .)
    BOOL            reduce using rule 69 (estructurasPrograma -> controlStructure .)
    NULL            reduce using rule 69 (estructurasPrograma -> controlStructure .)
    ARRAY           reduce using rule 69 (estructurasPrograma -> controlStructure .)
    ABSTRACT        reduce using rule 69 (estructurasPrograma -> controlStructure .)
    PRIVATE         reduce using rule 69 (estructurasPrograma -> controlStructure .)
    PROTECTED       reduce using rule 69 (estructurasPrograma -> controlStructure .)
    PUBLIC          reduce using rule 69 (estructurasPrograma -> controlStructure .)
    STATIC          reduce using rule 69 (estructurasPrograma -> controlStructure .)
    FINAL           reduce using rule 69 (estructurasPrograma -> controlStructure .)
    IF              reduce using rule 69 (estructurasPrograma -> controlStructure .)
    WHILE           reduce using rule 69 (estructurasPrograma -> controlStructure .)
    DO              reduce using rule 69 (estructurasPrograma -> controlStructure .)
    SWITCH          reduce using rule 69 (estructurasPrograma -> controlStructure .)
    FOREACH         reduce using rule 69 (estructurasPrograma -> controlStructure .)
    FOR             reduce using rule 69 (estructurasPrograma -> controlStructure .)
    CLOSETAG        reduce using rule 69 (estructurasPrograma -> controlStructure .)
    RBRACE          reduce using rule 69 (estructurasPrograma -> controlStructure .)
    BREAK           reduce using rule 69 (estructurasPrograma -> controlStructure .)
    ENDSWITCH       reduce using rule 69 (estructurasPrograma -> controlStructure .)
    CASE            reduce using rule 69 (estructurasPrograma -> controlStructure .)
    DEFAULT         reduce using rule 69 (estructurasPrograma -> controlStructure .)


state 32

    (70) estructurasPrograma -> dataStructure .

    VARIABLE        reduce using rule 70 (estructurasPrograma -> dataStructure .)
    ECHO            reduce using rule 70 (estructurasPrograma -> dataStructure .)
    PRINT           reduce using rule 70 (estructurasPrograma -> dataStructure .)
    TRY             reduce using rule 70 (estructurasPrograma -> dataStructure .)
    FUNCTION        reduce using rule 70 (estructurasPrograma -> dataStructure .)
    RETURN          reduce using rule 70 (estructurasPrograma -> dataStructure .)
    ID              reduce using rule 70 (estructurasPrograma -> dataStructure .)
    EMPTY           reduce using rule 70 (estructurasPrograma -> dataStructure .)
    CLASS           reduce using rule 70 (estructurasPrograma -> dataStructure .)
    INTERFACE       reduce using rule 70 (estructurasPrograma -> dataStructure .)
    INCLUDE         reduce using rule 70 (estructurasPrograma -> dataStructure .)
    NAMESPACE       reduce using rule 70 (estructurasPrograma -> dataStructure .)
    THROW           reduce using rule 70 (estructurasPrograma -> dataStructure .)
    CONST           reduce using rule 70 (estructurasPrograma -> dataStructure .)
    THIS            reduce using rule 70 (estructurasPrograma -> dataStructure .)
    INT             reduce using rule 70 (estructurasPrograma -> dataStructure .)
    FLOAT           reduce using rule 70 (estructurasPrograma -> dataStructure .)
    STRING          reduce using rule 70 (estructurasPrograma -> dataStructure .)
    BOOL            reduce using rule 70 (estructurasPrograma -> dataStructure .)
    NULL            reduce using rule 70 (estructurasPrograma -> dataStructure .)
    ARRAY           reduce using rule 70 (estructurasPrograma -> dataStructure .)
    ABSTRACT        reduce using rule 70 (estructurasPrograma -> dataStructure .)
    PRIVATE         reduce using rule 70 (estructurasPrograma -> dataStructure .)
    PROTECTED       reduce using rule 70 (estructurasPrograma -> dataStructure .)
    PUBLIC          reduce using rule 70 (estructurasPrograma -> dataStructure .)
    STATIC          reduce using rule 70 (estructurasPrograma -> dataStructure .)
    FINAL           reduce using rule 70 (estructurasPrograma -> dataStructure .)
    IF              reduce using rule 70 (estructurasPrograma -> dataStructure .)
    WHILE           reduce using rule 70 (estructurasPrograma -> dataStructure .)
    DO              reduce using rule 70 (estructurasPrograma -> dataStructure .)
    SWITCH          reduce using rule 70 (estructurasPrograma -> dataStructure .)
    FOREACH         reduce using rule 70 (estructurasPrograma -> dataStructure .)
    FOR             reduce using rule 70 (estructurasPrograma -> dataStructure .)
    CLOSETAG        reduce using rule 70 (estructurasPrograma -> dataStructure .)
    RBRACE          reduce using rule 70 (estructurasPrograma -> dataStructure .)
    BREAK           reduce using rule 70 (estructurasPrograma -> dataStructure .)
    ENDSWITCH       reduce using rule 70 (estructurasPrograma -> dataStructure .)
    CASE            reduce using rule 70 (estructurasPrograma -> dataStructure .)
    DEFAULT         reduce using rule 70 (estructurasPrograma -> dataStructure .)


state 33

    (157) try -> TRY . LBRACE body RBRACE catchs
    (158) try -> TRY . LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE

    LBRACE          shift and go to state 96


state 34

    (163) funcionDeclaration -> FUNCTION . ID LPAREN argumentos RPAREN LBRACE body RBRACE

    ID              shift and go to state 97


state 35

    (164) llamadaFuncion -> ID . LPAREN argumentos RPAREN SEMICOLON
    (166) llamadaFuncion -> ID . LPAREN argumentos RPAREN

    LPAREN          shift and go to state 98


state 36

    (26) returnStatement -> RETURN . valor SEMICOLON
    (27) returnStatement -> RETURN . SEMICOLON
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    SEMICOLON       shift and go to state 100
    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    valor                          shift and go to state 99
    llamadaFuncion                 shift and go to state 94

state 37

    (165) llamadaFuncion -> EMPTY . LPAREN argumentos RPAREN
    (167) llamadaFuncion -> EMPTY . LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 101


state 38

    (168) classDeclarate -> CLASS . ID LBRACE classBody RBRACE
    (169) classDeclarate -> CLASS . ID EXTENDS ID LBRACE classBody RBRACE
    (179) classInterface -> CLASS . ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> CLASS . ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    ID              shift and go to state 102


state 39

    (170) classDeclarate -> data . CLASS ID LBRACE classBody RBRACE
    (181) classInterface -> data . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> data . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    CLASS           shift and go to state 103


state 40

    (171) classDeclarate -> classInterface .

    VARIABLE        reduce using rule 171 (classDeclarate -> classInterface .)
    ECHO            reduce using rule 171 (classDeclarate -> classInterface .)
    PRINT           reduce using rule 171 (classDeclarate -> classInterface .)
    TRY             reduce using rule 171 (classDeclarate -> classInterface .)
    FUNCTION        reduce using rule 171 (classDeclarate -> classInterface .)
    RETURN          reduce using rule 171 (classDeclarate -> classInterface .)
    ID              reduce using rule 171 (classDeclarate -> classInterface .)
    EMPTY           reduce using rule 171 (classDeclarate -> classInterface .)
    CLASS           reduce using rule 171 (classDeclarate -> classInterface .)
    INTERFACE       reduce using rule 171 (classDeclarate -> classInterface .)
    INCLUDE         reduce using rule 171 (classDeclarate -> classInterface .)
    NAMESPACE       reduce using rule 171 (classDeclarate -> classInterface .)
    THROW           reduce using rule 171 (classDeclarate -> classInterface .)
    CONST           reduce using rule 171 (classDeclarate -> classInterface .)
    THIS            reduce using rule 171 (classDeclarate -> classInterface .)
    INT             reduce using rule 171 (classDeclarate -> classInterface .)
    FLOAT           reduce using rule 171 (classDeclarate -> classInterface .)
    STRING          reduce using rule 171 (classDeclarate -> classInterface .)
    BOOL            reduce using rule 171 (classDeclarate -> classInterface .)
    NULL            reduce using rule 171 (classDeclarate -> classInterface .)
    ARRAY           reduce using rule 171 (classDeclarate -> classInterface .)
    ABSTRACT        reduce using rule 171 (classDeclarate -> classInterface .)
    PRIVATE         reduce using rule 171 (classDeclarate -> classInterface .)
    PROTECTED       reduce using rule 171 (classDeclarate -> classInterface .)
    PUBLIC          reduce using rule 171 (classDeclarate -> classInterface .)
    STATIC          reduce using rule 171 (classDeclarate -> classInterface .)
    FINAL           reduce using rule 171 (classDeclarate -> classInterface .)
    IF              reduce using rule 171 (classDeclarate -> classInterface .)
    WHILE           reduce using rule 171 (classDeclarate -> classInterface .)
    DO              reduce using rule 171 (classDeclarate -> classInterface .)
    SWITCH          reduce using rule 171 (classDeclarate -> classInterface .)
    FOREACH         reduce using rule 171 (classDeclarate -> classInterface .)
    FOR             reduce using rule 171 (classDeclarate -> classInterface .)
    CLOSETAG        reduce using rule 171 (classDeclarate -> classInterface .)
    RBRACE          reduce using rule 171 (classDeclarate -> classInterface .)
    BREAK           reduce using rule 171 (classDeclarate -> classInterface .)
    ENDSWITCH       reduce using rule 171 (classDeclarate -> classInterface .)
    CASE            reduce using rule 171 (classDeclarate -> classInterface .)
    DEFAULT         reduce using rule 171 (classDeclarate -> classInterface .)


state 41

    (191) interface -> INTERFACE . ID LBRACE classBody RBRACE

    ID              shift and go to state 104


state 42

    (192) includes -> INCLUDE . STRING SEMICOLON
    (193) includes -> INCLUDE . STRING DOT STRING SEMICOLON

    STRING          shift and go to state 105


state 43

    (43) valor -> STRING .

    LT              reduce using rule 43 (valor -> STRING .)
    GT              reduce using rule 43 (valor -> STRING .)
    LEQ             reduce using rule 43 (valor -> STRING .)
    GEQ             reduce using rule 43 (valor -> STRING .)
    COMMA           reduce using rule 43 (valor -> STRING .)
    SEMICOLON       reduce using rule 43 (valor -> STRING .)
    VARIABLE        reduce using rule 43 (valor -> STRING .)
    ECHO            reduce using rule 43 (valor -> STRING .)
    PRINT           reduce using rule 43 (valor -> STRING .)
    TRY             reduce using rule 43 (valor -> STRING .)
    FUNCTION        reduce using rule 43 (valor -> STRING .)
    RETURN          reduce using rule 43 (valor -> STRING .)
    ID              reduce using rule 43 (valor -> STRING .)
    EMPTY           reduce using rule 43 (valor -> STRING .)
    CLASS           reduce using rule 43 (valor -> STRING .)
    INTERFACE       reduce using rule 43 (valor -> STRING .)
    INCLUDE         reduce using rule 43 (valor -> STRING .)
    NAMESPACE       reduce using rule 43 (valor -> STRING .)
    THROW           reduce using rule 43 (valor -> STRING .)
    CONST           reduce using rule 43 (valor -> STRING .)
    THIS            reduce using rule 43 (valor -> STRING .)
    INT             reduce using rule 43 (valor -> STRING .)
    FLOAT           reduce using rule 43 (valor -> STRING .)
    STRING          reduce using rule 43 (valor -> STRING .)
    BOOL            reduce using rule 43 (valor -> STRING .)
    NULL            reduce using rule 43 (valor -> STRING .)
    ARRAY           reduce using rule 43 (valor -> STRING .)
    ABSTRACT        reduce using rule 43 (valor -> STRING .)
    PRIVATE         reduce using rule 43 (valor -> STRING .)
    PROTECTED       reduce using rule 43 (valor -> STRING .)
    PUBLIC          reduce using rule 43 (valor -> STRING .)
    STATIC          reduce using rule 43 (valor -> STRING .)
    FINAL           reduce using rule 43 (valor -> STRING .)
    IF              reduce using rule 43 (valor -> STRING .)
    WHILE           reduce using rule 43 (valor -> STRING .)
    DO              reduce using rule 43 (valor -> STRING .)
    SWITCH          reduce using rule 43 (valor -> STRING .)
    FOREACH         reduce using rule 43 (valor -> STRING .)
    FOR             reduce using rule 43 (valor -> STRING .)
    CLOSETAG        reduce using rule 43 (valor -> STRING .)
    RBRACE          reduce using rule 43 (valor -> STRING .)
    BREAK           reduce using rule 43 (valor -> STRING .)
    ENDSWITCH       reduce using rule 43 (valor -> STRING .)
    CASE            reduce using rule 43 (valor -> STRING .)
    DEFAULT         reduce using rule 43 (valor -> STRING .)
    EQ              reduce using rule 43 (valor -> STRING .)
    NEQ             reduce using rule 43 (valor -> STRING .)
    STRICTEQ        reduce using rule 43 (valor -> STRING .)
    STRICTNEQ       reduce using rule 43 (valor -> STRING .)
    RPAREN          reduce using rule 43 (valor -> STRING .)
    AND             reduce using rule 43 (valor -> STRING .)
    LOGICAL_AND     reduce using rule 43 (valor -> STRING .)
    OR              reduce using rule 43 (valor -> STRING .)
    LOGICAL_OR      reduce using rule 43 (valor -> STRING .)
    ARROWMAP        reduce using rule 43 (valor -> STRING .)
    RBRACKET        reduce using rule 43 (valor -> STRING .)
    COLON           reduce using rule 43 (valor -> STRING .)


state 44

    (194) namespace -> NAMESPACE . ID SEMICOLON

    ID              shift and go to state 106


state 45

    (196) throw -> THROW . NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> THROW . valor SEMICOLON
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    NEW             shift and go to state 107
    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    valor                          shift and go to state 108
    llamadaFuncion                 shift and go to state 94

state 46

    (199) constdeclaration -> CONST . ID EQUALS valor SEMICOLON

    ID              shift and go to state 109


state 47

    (200) thisdeclaration -> THIS . ARROW ID SEMICOLON
    (201) thisdeclaration -> THIS . ARROW ID LPAREN RPAREN SEMICOLON

    ARROW           shift and go to state 110


state 48

    (40) valor -> INT .

    LT              reduce using rule 40 (valor -> INT .)
    GT              reduce using rule 40 (valor -> INT .)
    LEQ             reduce using rule 40 (valor -> INT .)
    GEQ             reduce using rule 40 (valor -> INT .)
    COMMA           reduce using rule 40 (valor -> INT .)
    SEMICOLON       reduce using rule 40 (valor -> INT .)
    VARIABLE        reduce using rule 40 (valor -> INT .)
    ECHO            reduce using rule 40 (valor -> INT .)
    PRINT           reduce using rule 40 (valor -> INT .)
    TRY             reduce using rule 40 (valor -> INT .)
    FUNCTION        reduce using rule 40 (valor -> INT .)
    RETURN          reduce using rule 40 (valor -> INT .)
    ID              reduce using rule 40 (valor -> INT .)
    EMPTY           reduce using rule 40 (valor -> INT .)
    CLASS           reduce using rule 40 (valor -> INT .)
    INTERFACE       reduce using rule 40 (valor -> INT .)
    INCLUDE         reduce using rule 40 (valor -> INT .)
    NAMESPACE       reduce using rule 40 (valor -> INT .)
    THROW           reduce using rule 40 (valor -> INT .)
    CONST           reduce using rule 40 (valor -> INT .)
    THIS            reduce using rule 40 (valor -> INT .)
    INT             reduce using rule 40 (valor -> INT .)
    FLOAT           reduce using rule 40 (valor -> INT .)
    STRING          reduce using rule 40 (valor -> INT .)
    BOOL            reduce using rule 40 (valor -> INT .)
    NULL            reduce using rule 40 (valor -> INT .)
    ARRAY           reduce using rule 40 (valor -> INT .)
    ABSTRACT        reduce using rule 40 (valor -> INT .)
    PRIVATE         reduce using rule 40 (valor -> INT .)
    PROTECTED       reduce using rule 40 (valor -> INT .)
    PUBLIC          reduce using rule 40 (valor -> INT .)
    STATIC          reduce using rule 40 (valor -> INT .)
    FINAL           reduce using rule 40 (valor -> INT .)
    IF              reduce using rule 40 (valor -> INT .)
    WHILE           reduce using rule 40 (valor -> INT .)
    DO              reduce using rule 40 (valor -> INT .)
    SWITCH          reduce using rule 40 (valor -> INT .)
    FOREACH         reduce using rule 40 (valor -> INT .)
    FOR             reduce using rule 40 (valor -> INT .)
    CLOSETAG        reduce using rule 40 (valor -> INT .)
    RBRACE          reduce using rule 40 (valor -> INT .)
    BREAK           reduce using rule 40 (valor -> INT .)
    ENDSWITCH       reduce using rule 40 (valor -> INT .)
    CASE            reduce using rule 40 (valor -> INT .)
    DEFAULT         reduce using rule 40 (valor -> INT .)
    EQ              reduce using rule 40 (valor -> INT .)
    NEQ             reduce using rule 40 (valor -> INT .)
    STRICTEQ        reduce using rule 40 (valor -> INT .)
    STRICTNEQ       reduce using rule 40 (valor -> INT .)
    RPAREN          reduce using rule 40 (valor -> INT .)
    AND             reduce using rule 40 (valor -> INT .)
    LOGICAL_AND     reduce using rule 40 (valor -> INT .)
    OR              reduce using rule 40 (valor -> INT .)
    LOGICAL_OR      reduce using rule 40 (valor -> INT .)
    ARROWMAP        reduce using rule 40 (valor -> INT .)
    RBRACKET        reduce using rule 40 (valor -> INT .)
    COLON           reduce using rule 40 (valor -> INT .)


state 49

    (42) valor -> FLOAT .

    LT              reduce using rule 42 (valor -> FLOAT .)
    GT              reduce using rule 42 (valor -> FLOAT .)
    LEQ             reduce using rule 42 (valor -> FLOAT .)
    GEQ             reduce using rule 42 (valor -> FLOAT .)
    COMMA           reduce using rule 42 (valor -> FLOAT .)
    SEMICOLON       reduce using rule 42 (valor -> FLOAT .)
    VARIABLE        reduce using rule 42 (valor -> FLOAT .)
    ECHO            reduce using rule 42 (valor -> FLOAT .)
    PRINT           reduce using rule 42 (valor -> FLOAT .)
    TRY             reduce using rule 42 (valor -> FLOAT .)
    FUNCTION        reduce using rule 42 (valor -> FLOAT .)
    RETURN          reduce using rule 42 (valor -> FLOAT .)
    ID              reduce using rule 42 (valor -> FLOAT .)
    EMPTY           reduce using rule 42 (valor -> FLOAT .)
    CLASS           reduce using rule 42 (valor -> FLOAT .)
    INTERFACE       reduce using rule 42 (valor -> FLOAT .)
    INCLUDE         reduce using rule 42 (valor -> FLOAT .)
    NAMESPACE       reduce using rule 42 (valor -> FLOAT .)
    THROW           reduce using rule 42 (valor -> FLOAT .)
    CONST           reduce using rule 42 (valor -> FLOAT .)
    THIS            reduce using rule 42 (valor -> FLOAT .)
    INT             reduce using rule 42 (valor -> FLOAT .)
    FLOAT           reduce using rule 42 (valor -> FLOAT .)
    STRING          reduce using rule 42 (valor -> FLOAT .)
    BOOL            reduce using rule 42 (valor -> FLOAT .)
    NULL            reduce using rule 42 (valor -> FLOAT .)
    ARRAY           reduce using rule 42 (valor -> FLOAT .)
    ABSTRACT        reduce using rule 42 (valor -> FLOAT .)
    PRIVATE         reduce using rule 42 (valor -> FLOAT .)
    PROTECTED       reduce using rule 42 (valor -> FLOAT .)
    PUBLIC          reduce using rule 42 (valor -> FLOAT .)
    STATIC          reduce using rule 42 (valor -> FLOAT .)
    FINAL           reduce using rule 42 (valor -> FLOAT .)
    IF              reduce using rule 42 (valor -> FLOAT .)
    WHILE           reduce using rule 42 (valor -> FLOAT .)
    DO              reduce using rule 42 (valor -> FLOAT .)
    SWITCH          reduce using rule 42 (valor -> FLOAT .)
    FOREACH         reduce using rule 42 (valor -> FLOAT .)
    FOR             reduce using rule 42 (valor -> FLOAT .)
    CLOSETAG        reduce using rule 42 (valor -> FLOAT .)
    RBRACE          reduce using rule 42 (valor -> FLOAT .)
    BREAK           reduce using rule 42 (valor -> FLOAT .)
    ENDSWITCH       reduce using rule 42 (valor -> FLOAT .)
    CASE            reduce using rule 42 (valor -> FLOAT .)
    DEFAULT         reduce using rule 42 (valor -> FLOAT .)
    EQ              reduce using rule 42 (valor -> FLOAT .)
    NEQ             reduce using rule 42 (valor -> FLOAT .)
    STRICTEQ        reduce using rule 42 (valor -> FLOAT .)
    STRICTNEQ       reduce using rule 42 (valor -> FLOAT .)
    RPAREN          reduce using rule 42 (valor -> FLOAT .)
    AND             reduce using rule 42 (valor -> FLOAT .)
    LOGICAL_AND     reduce using rule 42 (valor -> FLOAT .)
    OR              reduce using rule 42 (valor -> FLOAT .)
    LOGICAL_OR      reduce using rule 42 (valor -> FLOAT .)
    ARROWMAP        reduce using rule 42 (valor -> FLOAT .)
    RBRACKET        reduce using rule 42 (valor -> FLOAT .)
    COLON           reduce using rule 42 (valor -> FLOAT .)


state 50

    (44) valor -> BOOL .

    LT              reduce using rule 44 (valor -> BOOL .)
    GT              reduce using rule 44 (valor -> BOOL .)
    LEQ             reduce using rule 44 (valor -> BOOL .)
    GEQ             reduce using rule 44 (valor -> BOOL .)
    COMMA           reduce using rule 44 (valor -> BOOL .)
    SEMICOLON       reduce using rule 44 (valor -> BOOL .)
    VARIABLE        reduce using rule 44 (valor -> BOOL .)
    ECHO            reduce using rule 44 (valor -> BOOL .)
    PRINT           reduce using rule 44 (valor -> BOOL .)
    TRY             reduce using rule 44 (valor -> BOOL .)
    FUNCTION        reduce using rule 44 (valor -> BOOL .)
    RETURN          reduce using rule 44 (valor -> BOOL .)
    ID              reduce using rule 44 (valor -> BOOL .)
    EMPTY           reduce using rule 44 (valor -> BOOL .)
    CLASS           reduce using rule 44 (valor -> BOOL .)
    INTERFACE       reduce using rule 44 (valor -> BOOL .)
    INCLUDE         reduce using rule 44 (valor -> BOOL .)
    NAMESPACE       reduce using rule 44 (valor -> BOOL .)
    THROW           reduce using rule 44 (valor -> BOOL .)
    CONST           reduce using rule 44 (valor -> BOOL .)
    THIS            reduce using rule 44 (valor -> BOOL .)
    INT             reduce using rule 44 (valor -> BOOL .)
    FLOAT           reduce using rule 44 (valor -> BOOL .)
    STRING          reduce using rule 44 (valor -> BOOL .)
    BOOL            reduce using rule 44 (valor -> BOOL .)
    NULL            reduce using rule 44 (valor -> BOOL .)
    ARRAY           reduce using rule 44 (valor -> BOOL .)
    ABSTRACT        reduce using rule 44 (valor -> BOOL .)
    PRIVATE         reduce using rule 44 (valor -> BOOL .)
    PROTECTED       reduce using rule 44 (valor -> BOOL .)
    PUBLIC          reduce using rule 44 (valor -> BOOL .)
    STATIC          reduce using rule 44 (valor -> BOOL .)
    FINAL           reduce using rule 44 (valor -> BOOL .)
    IF              reduce using rule 44 (valor -> BOOL .)
    WHILE           reduce using rule 44 (valor -> BOOL .)
    DO              reduce using rule 44 (valor -> BOOL .)
    SWITCH          reduce using rule 44 (valor -> BOOL .)
    FOREACH         reduce using rule 44 (valor -> BOOL .)
    FOR             reduce using rule 44 (valor -> BOOL .)
    CLOSETAG        reduce using rule 44 (valor -> BOOL .)
    RBRACE          reduce using rule 44 (valor -> BOOL .)
    BREAK           reduce using rule 44 (valor -> BOOL .)
    ENDSWITCH       reduce using rule 44 (valor -> BOOL .)
    CASE            reduce using rule 44 (valor -> BOOL .)
    DEFAULT         reduce using rule 44 (valor -> BOOL .)
    EQ              reduce using rule 44 (valor -> BOOL .)
    NEQ             reduce using rule 44 (valor -> BOOL .)
    STRICTEQ        reduce using rule 44 (valor -> BOOL .)
    STRICTNEQ       reduce using rule 44 (valor -> BOOL .)
    RPAREN          reduce using rule 44 (valor -> BOOL .)
    AND             reduce using rule 44 (valor -> BOOL .)
    LOGICAL_AND     reduce using rule 44 (valor -> BOOL .)
    OR              reduce using rule 44 (valor -> BOOL .)
    LOGICAL_OR      reduce using rule 44 (valor -> BOOL .)
    ARROWMAP        reduce using rule 44 (valor -> BOOL .)
    RBRACKET        reduce using rule 44 (valor -> BOOL .)
    COLON           reduce using rule 44 (valor -> BOOL .)


state 51

    (45) valor -> NULL .

    LT              reduce using rule 45 (valor -> NULL .)
    GT              reduce using rule 45 (valor -> NULL .)
    LEQ             reduce using rule 45 (valor -> NULL .)
    GEQ             reduce using rule 45 (valor -> NULL .)
    COMMA           reduce using rule 45 (valor -> NULL .)
    SEMICOLON       reduce using rule 45 (valor -> NULL .)
    VARIABLE        reduce using rule 45 (valor -> NULL .)
    ECHO            reduce using rule 45 (valor -> NULL .)
    PRINT           reduce using rule 45 (valor -> NULL .)
    TRY             reduce using rule 45 (valor -> NULL .)
    FUNCTION        reduce using rule 45 (valor -> NULL .)
    RETURN          reduce using rule 45 (valor -> NULL .)
    ID              reduce using rule 45 (valor -> NULL .)
    EMPTY           reduce using rule 45 (valor -> NULL .)
    CLASS           reduce using rule 45 (valor -> NULL .)
    INTERFACE       reduce using rule 45 (valor -> NULL .)
    INCLUDE         reduce using rule 45 (valor -> NULL .)
    NAMESPACE       reduce using rule 45 (valor -> NULL .)
    THROW           reduce using rule 45 (valor -> NULL .)
    CONST           reduce using rule 45 (valor -> NULL .)
    THIS            reduce using rule 45 (valor -> NULL .)
    INT             reduce using rule 45 (valor -> NULL .)
    FLOAT           reduce using rule 45 (valor -> NULL .)
    STRING          reduce using rule 45 (valor -> NULL .)
    BOOL            reduce using rule 45 (valor -> NULL .)
    NULL            reduce using rule 45 (valor -> NULL .)
    ARRAY           reduce using rule 45 (valor -> NULL .)
    ABSTRACT        reduce using rule 45 (valor -> NULL .)
    PRIVATE         reduce using rule 45 (valor -> NULL .)
    PROTECTED       reduce using rule 45 (valor -> NULL .)
    PUBLIC          reduce using rule 45 (valor -> NULL .)
    STATIC          reduce using rule 45 (valor -> NULL .)
    FINAL           reduce using rule 45 (valor -> NULL .)
    IF              reduce using rule 45 (valor -> NULL .)
    WHILE           reduce using rule 45 (valor -> NULL .)
    DO              reduce using rule 45 (valor -> NULL .)
    SWITCH          reduce using rule 45 (valor -> NULL .)
    FOREACH         reduce using rule 45 (valor -> NULL .)
    FOR             reduce using rule 45 (valor -> NULL .)
    CLOSETAG        reduce using rule 45 (valor -> NULL .)
    RBRACE          reduce using rule 45 (valor -> NULL .)
    BREAK           reduce using rule 45 (valor -> NULL .)
    ENDSWITCH       reduce using rule 45 (valor -> NULL .)
    CASE            reduce using rule 45 (valor -> NULL .)
    DEFAULT         reduce using rule 45 (valor -> NULL .)
    EQ              reduce using rule 45 (valor -> NULL .)
    NEQ             reduce using rule 45 (valor -> NULL .)
    STRICTEQ        reduce using rule 45 (valor -> NULL .)
    STRICTNEQ       reduce using rule 45 (valor -> NULL .)
    RPAREN          reduce using rule 45 (valor -> NULL .)
    AND             reduce using rule 45 (valor -> NULL .)
    LOGICAL_AND     reduce using rule 45 (valor -> NULL .)
    OR              reduce using rule 45 (valor -> NULL .)
    LOGICAL_OR      reduce using rule 45 (valor -> NULL .)
    ARROWMAP        reduce using rule 45 (valor -> NULL .)
    RBRACKET        reduce using rule 45 (valor -> NULL .)
    COLON           reduce using rule 45 (valor -> NULL .)


state 52

    (46) valor -> ARRAY .

    LT              reduce using rule 46 (valor -> ARRAY .)
    GT              reduce using rule 46 (valor -> ARRAY .)
    LEQ             reduce using rule 46 (valor -> ARRAY .)
    GEQ             reduce using rule 46 (valor -> ARRAY .)
    COMMA           reduce using rule 46 (valor -> ARRAY .)
    SEMICOLON       reduce using rule 46 (valor -> ARRAY .)
    VARIABLE        reduce using rule 46 (valor -> ARRAY .)
    ECHO            reduce using rule 46 (valor -> ARRAY .)
    PRINT           reduce using rule 46 (valor -> ARRAY .)
    TRY             reduce using rule 46 (valor -> ARRAY .)
    FUNCTION        reduce using rule 46 (valor -> ARRAY .)
    RETURN          reduce using rule 46 (valor -> ARRAY .)
    ID              reduce using rule 46 (valor -> ARRAY .)
    EMPTY           reduce using rule 46 (valor -> ARRAY .)
    CLASS           reduce using rule 46 (valor -> ARRAY .)
    INTERFACE       reduce using rule 46 (valor -> ARRAY .)
    INCLUDE         reduce using rule 46 (valor -> ARRAY .)
    NAMESPACE       reduce using rule 46 (valor -> ARRAY .)
    THROW           reduce using rule 46 (valor -> ARRAY .)
    CONST           reduce using rule 46 (valor -> ARRAY .)
    THIS            reduce using rule 46 (valor -> ARRAY .)
    INT             reduce using rule 46 (valor -> ARRAY .)
    FLOAT           reduce using rule 46 (valor -> ARRAY .)
    STRING          reduce using rule 46 (valor -> ARRAY .)
    BOOL            reduce using rule 46 (valor -> ARRAY .)
    NULL            reduce using rule 46 (valor -> ARRAY .)
    ARRAY           reduce using rule 46 (valor -> ARRAY .)
    ABSTRACT        reduce using rule 46 (valor -> ARRAY .)
    PRIVATE         reduce using rule 46 (valor -> ARRAY .)
    PROTECTED       reduce using rule 46 (valor -> ARRAY .)
    PUBLIC          reduce using rule 46 (valor -> ARRAY .)
    STATIC          reduce using rule 46 (valor -> ARRAY .)
    FINAL           reduce using rule 46 (valor -> ARRAY .)
    IF              reduce using rule 46 (valor -> ARRAY .)
    WHILE           reduce using rule 46 (valor -> ARRAY .)
    DO              reduce using rule 46 (valor -> ARRAY .)
    SWITCH          reduce using rule 46 (valor -> ARRAY .)
    FOREACH         reduce using rule 46 (valor -> ARRAY .)
    FOR             reduce using rule 46 (valor -> ARRAY .)
    CLOSETAG        reduce using rule 46 (valor -> ARRAY .)
    RBRACE          reduce using rule 46 (valor -> ARRAY .)
    BREAK           reduce using rule 46 (valor -> ARRAY .)
    ENDSWITCH       reduce using rule 46 (valor -> ARRAY .)
    CASE            reduce using rule 46 (valor -> ARRAY .)
    DEFAULT         reduce using rule 46 (valor -> ARRAY .)
    EQ              reduce using rule 46 (valor -> ARRAY .)
    NEQ             reduce using rule 46 (valor -> ARRAY .)
    STRICTEQ        reduce using rule 46 (valor -> ARRAY .)
    STRICTNEQ       reduce using rule 46 (valor -> ARRAY .)
    RPAREN          reduce using rule 46 (valor -> ARRAY .)
    AND             reduce using rule 46 (valor -> ARRAY .)
    LOGICAL_AND     reduce using rule 46 (valor -> ARRAY .)
    OR              reduce using rule 46 (valor -> ARRAY .)
    LOGICAL_OR      reduce using rule 46 (valor -> ARRAY .)
    ARROWMAP        reduce using rule 46 (valor -> ARRAY .)
    RBRACKET        reduce using rule 46 (valor -> ARRAY .)
    COLON           reduce using rule 46 (valor -> ARRAY .)


state 53

    (71) controlStructure -> if .

    VARIABLE        reduce using rule 71 (controlStructure -> if .)
    ECHO            reduce using rule 71 (controlStructure -> if .)
    PRINT           reduce using rule 71 (controlStructure -> if .)
    TRY             reduce using rule 71 (controlStructure -> if .)
    FUNCTION        reduce using rule 71 (controlStructure -> if .)
    RETURN          reduce using rule 71 (controlStructure -> if .)
    ID              reduce using rule 71 (controlStructure -> if .)
    EMPTY           reduce using rule 71 (controlStructure -> if .)
    CLASS           reduce using rule 71 (controlStructure -> if .)
    INTERFACE       reduce using rule 71 (controlStructure -> if .)
    INCLUDE         reduce using rule 71 (controlStructure -> if .)
    NAMESPACE       reduce using rule 71 (controlStructure -> if .)
    THROW           reduce using rule 71 (controlStructure -> if .)
    CONST           reduce using rule 71 (controlStructure -> if .)
    THIS            reduce using rule 71 (controlStructure -> if .)
    INT             reduce using rule 71 (controlStructure -> if .)
    FLOAT           reduce using rule 71 (controlStructure -> if .)
    STRING          reduce using rule 71 (controlStructure -> if .)
    BOOL            reduce using rule 71 (controlStructure -> if .)
    NULL            reduce using rule 71 (controlStructure -> if .)
    ARRAY           reduce using rule 71 (controlStructure -> if .)
    ABSTRACT        reduce using rule 71 (controlStructure -> if .)
    PRIVATE         reduce using rule 71 (controlStructure -> if .)
    PROTECTED       reduce using rule 71 (controlStructure -> if .)
    PUBLIC          reduce using rule 71 (controlStructure -> if .)
    STATIC          reduce using rule 71 (controlStructure -> if .)
    FINAL           reduce using rule 71 (controlStructure -> if .)
    IF              reduce using rule 71 (controlStructure -> if .)
    WHILE           reduce using rule 71 (controlStructure -> if .)
    DO              reduce using rule 71 (controlStructure -> if .)
    SWITCH          reduce using rule 71 (controlStructure -> if .)
    FOREACH         reduce using rule 71 (controlStructure -> if .)
    FOR             reduce using rule 71 (controlStructure -> if .)
    CLOSETAG        reduce using rule 71 (controlStructure -> if .)
    RBRACE          reduce using rule 71 (controlStructure -> if .)
    BREAK           reduce using rule 71 (controlStructure -> if .)
    ENDSWITCH       reduce using rule 71 (controlStructure -> if .)
    CASE            reduce using rule 71 (controlStructure -> if .)
    DEFAULT         reduce using rule 71 (controlStructure -> if .)


state 54

    (72) controlStructure -> for .

    VARIABLE        reduce using rule 72 (controlStructure -> for .)
    ECHO            reduce using rule 72 (controlStructure -> for .)
    PRINT           reduce using rule 72 (controlStructure -> for .)
    TRY             reduce using rule 72 (controlStructure -> for .)
    FUNCTION        reduce using rule 72 (controlStructure -> for .)
    RETURN          reduce using rule 72 (controlStructure -> for .)
    ID              reduce using rule 72 (controlStructure -> for .)
    EMPTY           reduce using rule 72 (controlStructure -> for .)
    CLASS           reduce using rule 72 (controlStructure -> for .)
    INTERFACE       reduce using rule 72 (controlStructure -> for .)
    INCLUDE         reduce using rule 72 (controlStructure -> for .)
    NAMESPACE       reduce using rule 72 (controlStructure -> for .)
    THROW           reduce using rule 72 (controlStructure -> for .)
    CONST           reduce using rule 72 (controlStructure -> for .)
    THIS            reduce using rule 72 (controlStructure -> for .)
    INT             reduce using rule 72 (controlStructure -> for .)
    FLOAT           reduce using rule 72 (controlStructure -> for .)
    STRING          reduce using rule 72 (controlStructure -> for .)
    BOOL            reduce using rule 72 (controlStructure -> for .)
    NULL            reduce using rule 72 (controlStructure -> for .)
    ARRAY           reduce using rule 72 (controlStructure -> for .)
    ABSTRACT        reduce using rule 72 (controlStructure -> for .)
    PRIVATE         reduce using rule 72 (controlStructure -> for .)
    PROTECTED       reduce using rule 72 (controlStructure -> for .)
    PUBLIC          reduce using rule 72 (controlStructure -> for .)
    STATIC          reduce using rule 72 (controlStructure -> for .)
    FINAL           reduce using rule 72 (controlStructure -> for .)
    IF              reduce using rule 72 (controlStructure -> for .)
    WHILE           reduce using rule 72 (controlStructure -> for .)
    DO              reduce using rule 72 (controlStructure -> for .)
    SWITCH          reduce using rule 72 (controlStructure -> for .)
    FOREACH         reduce using rule 72 (controlStructure -> for .)
    FOR             reduce using rule 72 (controlStructure -> for .)
    CLOSETAG        reduce using rule 72 (controlStructure -> for .)
    RBRACE          reduce using rule 72 (controlStructure -> for .)
    BREAK           reduce using rule 72 (controlStructure -> for .)
    ENDSWITCH       reduce using rule 72 (controlStructure -> for .)
    CASE            reduce using rule 72 (controlStructure -> for .)
    DEFAULT         reduce using rule 72 (controlStructure -> for .)


state 55

    (73) controlStructure -> while .

    VARIABLE        reduce using rule 73 (controlStructure -> while .)
    ECHO            reduce using rule 73 (controlStructure -> while .)
    PRINT           reduce using rule 73 (controlStructure -> while .)
    TRY             reduce using rule 73 (controlStructure -> while .)
    FUNCTION        reduce using rule 73 (controlStructure -> while .)
    RETURN          reduce using rule 73 (controlStructure -> while .)
    ID              reduce using rule 73 (controlStructure -> while .)
    EMPTY           reduce using rule 73 (controlStructure -> while .)
    CLASS           reduce using rule 73 (controlStructure -> while .)
    INTERFACE       reduce using rule 73 (controlStructure -> while .)
    INCLUDE         reduce using rule 73 (controlStructure -> while .)
    NAMESPACE       reduce using rule 73 (controlStructure -> while .)
    THROW           reduce using rule 73 (controlStructure -> while .)
    CONST           reduce using rule 73 (controlStructure -> while .)
    THIS            reduce using rule 73 (controlStructure -> while .)
    INT             reduce using rule 73 (controlStructure -> while .)
    FLOAT           reduce using rule 73 (controlStructure -> while .)
    STRING          reduce using rule 73 (controlStructure -> while .)
    BOOL            reduce using rule 73 (controlStructure -> while .)
    NULL            reduce using rule 73 (controlStructure -> while .)
    ARRAY           reduce using rule 73 (controlStructure -> while .)
    ABSTRACT        reduce using rule 73 (controlStructure -> while .)
    PRIVATE         reduce using rule 73 (controlStructure -> while .)
    PROTECTED       reduce using rule 73 (controlStructure -> while .)
    PUBLIC          reduce using rule 73 (controlStructure -> while .)
    STATIC          reduce using rule 73 (controlStructure -> while .)
    FINAL           reduce using rule 73 (controlStructure -> while .)
    IF              reduce using rule 73 (controlStructure -> while .)
    WHILE           reduce using rule 73 (controlStructure -> while .)
    DO              reduce using rule 73 (controlStructure -> while .)
    SWITCH          reduce using rule 73 (controlStructure -> while .)
    FOREACH         reduce using rule 73 (controlStructure -> while .)
    FOR             reduce using rule 73 (controlStructure -> while .)
    CLOSETAG        reduce using rule 73 (controlStructure -> while .)
    RBRACE          reduce using rule 73 (controlStructure -> while .)
    BREAK           reduce using rule 73 (controlStructure -> while .)
    ENDSWITCH       reduce using rule 73 (controlStructure -> while .)
    CASE            reduce using rule 73 (controlStructure -> while .)
    DEFAULT         reduce using rule 73 (controlStructure -> while .)


state 56

    (74) controlStructure -> dowhile .

    VARIABLE        reduce using rule 74 (controlStructure -> dowhile .)
    ECHO            reduce using rule 74 (controlStructure -> dowhile .)
    PRINT           reduce using rule 74 (controlStructure -> dowhile .)
    TRY             reduce using rule 74 (controlStructure -> dowhile .)
    FUNCTION        reduce using rule 74 (controlStructure -> dowhile .)
    RETURN          reduce using rule 74 (controlStructure -> dowhile .)
    ID              reduce using rule 74 (controlStructure -> dowhile .)
    EMPTY           reduce using rule 74 (controlStructure -> dowhile .)
    CLASS           reduce using rule 74 (controlStructure -> dowhile .)
    INTERFACE       reduce using rule 74 (controlStructure -> dowhile .)
    INCLUDE         reduce using rule 74 (controlStructure -> dowhile .)
    NAMESPACE       reduce using rule 74 (controlStructure -> dowhile .)
    THROW           reduce using rule 74 (controlStructure -> dowhile .)
    CONST           reduce using rule 74 (controlStructure -> dowhile .)
    THIS            reduce using rule 74 (controlStructure -> dowhile .)
    INT             reduce using rule 74 (controlStructure -> dowhile .)
    FLOAT           reduce using rule 74 (controlStructure -> dowhile .)
    STRING          reduce using rule 74 (controlStructure -> dowhile .)
    BOOL            reduce using rule 74 (controlStructure -> dowhile .)
    NULL            reduce using rule 74 (controlStructure -> dowhile .)
    ARRAY           reduce using rule 74 (controlStructure -> dowhile .)
    ABSTRACT        reduce using rule 74 (controlStructure -> dowhile .)
    PRIVATE         reduce using rule 74 (controlStructure -> dowhile .)
    PROTECTED       reduce using rule 74 (controlStructure -> dowhile .)
    PUBLIC          reduce using rule 74 (controlStructure -> dowhile .)
    STATIC          reduce using rule 74 (controlStructure -> dowhile .)
    FINAL           reduce using rule 74 (controlStructure -> dowhile .)
    IF              reduce using rule 74 (controlStructure -> dowhile .)
    WHILE           reduce using rule 74 (controlStructure -> dowhile .)
    DO              reduce using rule 74 (controlStructure -> dowhile .)
    SWITCH          reduce using rule 74 (controlStructure -> dowhile .)
    FOREACH         reduce using rule 74 (controlStructure -> dowhile .)
    FOR             reduce using rule 74 (controlStructure -> dowhile .)
    CLOSETAG        reduce using rule 74 (controlStructure -> dowhile .)
    RBRACE          reduce using rule 74 (controlStructure -> dowhile .)
    BREAK           reduce using rule 74 (controlStructure -> dowhile .)
    ENDSWITCH       reduce using rule 74 (controlStructure -> dowhile .)
    CASE            reduce using rule 74 (controlStructure -> dowhile .)
    DEFAULT         reduce using rule 74 (controlStructure -> dowhile .)


state 57

    (75) controlStructure -> switch .

    VARIABLE        reduce using rule 75 (controlStructure -> switch .)
    ECHO            reduce using rule 75 (controlStructure -> switch .)
    PRINT           reduce using rule 75 (controlStructure -> switch .)
    TRY             reduce using rule 75 (controlStructure -> switch .)
    FUNCTION        reduce using rule 75 (controlStructure -> switch .)
    RETURN          reduce using rule 75 (controlStructure -> switch .)
    ID              reduce using rule 75 (controlStructure -> switch .)
    EMPTY           reduce using rule 75 (controlStructure -> switch .)
    CLASS           reduce using rule 75 (controlStructure -> switch .)
    INTERFACE       reduce using rule 75 (controlStructure -> switch .)
    INCLUDE         reduce using rule 75 (controlStructure -> switch .)
    NAMESPACE       reduce using rule 75 (controlStructure -> switch .)
    THROW           reduce using rule 75 (controlStructure -> switch .)
    CONST           reduce using rule 75 (controlStructure -> switch .)
    THIS            reduce using rule 75 (controlStructure -> switch .)
    INT             reduce using rule 75 (controlStructure -> switch .)
    FLOAT           reduce using rule 75 (controlStructure -> switch .)
    STRING          reduce using rule 75 (controlStructure -> switch .)
    BOOL            reduce using rule 75 (controlStructure -> switch .)
    NULL            reduce using rule 75 (controlStructure -> switch .)
    ARRAY           reduce using rule 75 (controlStructure -> switch .)
    ABSTRACT        reduce using rule 75 (controlStructure -> switch .)
    PRIVATE         reduce using rule 75 (controlStructure -> switch .)
    PROTECTED       reduce using rule 75 (controlStructure -> switch .)
    PUBLIC          reduce using rule 75 (controlStructure -> switch .)
    STATIC          reduce using rule 75 (controlStructure -> switch .)
    FINAL           reduce using rule 75 (controlStructure -> switch .)
    IF              reduce using rule 75 (controlStructure -> switch .)
    WHILE           reduce using rule 75 (controlStructure -> switch .)
    DO              reduce using rule 75 (controlStructure -> switch .)
    SWITCH          reduce using rule 75 (controlStructure -> switch .)
    FOREACH         reduce using rule 75 (controlStructure -> switch .)
    FOR             reduce using rule 75 (controlStructure -> switch .)
    CLOSETAG        reduce using rule 75 (controlStructure -> switch .)
    RBRACE          reduce using rule 75 (controlStructure -> switch .)
    BREAK           reduce using rule 75 (controlStructure -> switch .)
    ENDSWITCH       reduce using rule 75 (controlStructure -> switch .)
    CASE            reduce using rule 75 (controlStructure -> switch .)
    DEFAULT         reduce using rule 75 (controlStructure -> switch .)


state 58

    (76) controlStructure -> foreach .

    VARIABLE        reduce using rule 76 (controlStructure -> foreach .)
    ECHO            reduce using rule 76 (controlStructure -> foreach .)
    PRINT           reduce using rule 76 (controlStructure -> foreach .)
    TRY             reduce using rule 76 (controlStructure -> foreach .)
    FUNCTION        reduce using rule 76 (controlStructure -> foreach .)
    RETURN          reduce using rule 76 (controlStructure -> foreach .)
    ID              reduce using rule 76 (controlStructure -> foreach .)
    EMPTY           reduce using rule 76 (controlStructure -> foreach .)
    CLASS           reduce using rule 76 (controlStructure -> foreach .)
    INTERFACE       reduce using rule 76 (controlStructure -> foreach .)
    INCLUDE         reduce using rule 76 (controlStructure -> foreach .)
    NAMESPACE       reduce using rule 76 (controlStructure -> foreach .)
    THROW           reduce using rule 76 (controlStructure -> foreach .)
    CONST           reduce using rule 76 (controlStructure -> foreach .)
    THIS            reduce using rule 76 (controlStructure -> foreach .)
    INT             reduce using rule 76 (controlStructure -> foreach .)
    FLOAT           reduce using rule 76 (controlStructure -> foreach .)
    STRING          reduce using rule 76 (controlStructure -> foreach .)
    BOOL            reduce using rule 76 (controlStructure -> foreach .)
    NULL            reduce using rule 76 (controlStructure -> foreach .)
    ARRAY           reduce using rule 76 (controlStructure -> foreach .)
    ABSTRACT        reduce using rule 76 (controlStructure -> foreach .)
    PRIVATE         reduce using rule 76 (controlStructure -> foreach .)
    PROTECTED       reduce using rule 76 (controlStructure -> foreach .)
    PUBLIC          reduce using rule 76 (controlStructure -> foreach .)
    STATIC          reduce using rule 76 (controlStructure -> foreach .)
    FINAL           reduce using rule 76 (controlStructure -> foreach .)
    IF              reduce using rule 76 (controlStructure -> foreach .)
    WHILE           reduce using rule 76 (controlStructure -> foreach .)
    DO              reduce using rule 76 (controlStructure -> foreach .)
    SWITCH          reduce using rule 76 (controlStructure -> foreach .)
    FOREACH         reduce using rule 76 (controlStructure -> foreach .)
    FOR             reduce using rule 76 (controlStructure -> foreach .)
    CLOSETAG        reduce using rule 76 (controlStructure -> foreach .)
    RBRACE          reduce using rule 76 (controlStructure -> foreach .)
    BREAK           reduce using rule 76 (controlStructure -> foreach .)
    ENDSWITCH       reduce using rule 76 (controlStructure -> foreach .)
    CASE            reduce using rule 76 (controlStructure -> foreach .)
    DEFAULT         reduce using rule 76 (controlStructure -> foreach .)


state 59

    (126) dataStructure -> array .

    VARIABLE        reduce using rule 126 (dataStructure -> array .)
    ECHO            reduce using rule 126 (dataStructure -> array .)
    PRINT           reduce using rule 126 (dataStructure -> array .)
    TRY             reduce using rule 126 (dataStructure -> array .)
    FUNCTION        reduce using rule 126 (dataStructure -> array .)
    RETURN          reduce using rule 126 (dataStructure -> array .)
    ID              reduce using rule 126 (dataStructure -> array .)
    EMPTY           reduce using rule 126 (dataStructure -> array .)
    CLASS           reduce using rule 126 (dataStructure -> array .)
    INTERFACE       reduce using rule 126 (dataStructure -> array .)
    INCLUDE         reduce using rule 126 (dataStructure -> array .)
    NAMESPACE       reduce using rule 126 (dataStructure -> array .)
    THROW           reduce using rule 126 (dataStructure -> array .)
    CONST           reduce using rule 126 (dataStructure -> array .)
    THIS            reduce using rule 126 (dataStructure -> array .)
    INT             reduce using rule 126 (dataStructure -> array .)
    FLOAT           reduce using rule 126 (dataStructure -> array .)
    STRING          reduce using rule 126 (dataStructure -> array .)
    BOOL            reduce using rule 126 (dataStructure -> array .)
    NULL            reduce using rule 126 (dataStructure -> array .)
    ARRAY           reduce using rule 126 (dataStructure -> array .)
    ABSTRACT        reduce using rule 126 (dataStructure -> array .)
    PRIVATE         reduce using rule 126 (dataStructure -> array .)
    PROTECTED       reduce using rule 126 (dataStructure -> array .)
    PUBLIC          reduce using rule 126 (dataStructure -> array .)
    STATIC          reduce using rule 126 (dataStructure -> array .)
    FINAL           reduce using rule 126 (dataStructure -> array .)
    IF              reduce using rule 126 (dataStructure -> array .)
    WHILE           reduce using rule 126 (dataStructure -> array .)
    DO              reduce using rule 126 (dataStructure -> array .)
    SWITCH          reduce using rule 126 (dataStructure -> array .)
    FOREACH         reduce using rule 126 (dataStructure -> array .)
    FOR             reduce using rule 126 (dataStructure -> array .)
    CLOSETAG        reduce using rule 126 (dataStructure -> array .)
    RBRACE          reduce using rule 126 (dataStructure -> array .)
    BREAK           reduce using rule 126 (dataStructure -> array .)
    ENDSWITCH       reduce using rule 126 (dataStructure -> array .)
    CASE            reduce using rule 126 (dataStructure -> array .)
    DEFAULT         reduce using rule 126 (dataStructure -> array .)


state 60

    (185) data -> ABSTRACT .

    CLASS           reduce using rule 185 (data -> ABSTRACT .)


state 61

    (186) data -> PRIVATE .

    CLASS           reduce using rule 186 (data -> PRIVATE .)


state 62

    (187) data -> PROTECTED .

    CLASS           reduce using rule 187 (data -> PROTECTED .)


state 63

    (188) data -> PUBLIC .

    CLASS           reduce using rule 188 (data -> PUBLIC .)


state 64

    (189) data -> STATIC .

    CLASS           reduce using rule 189 (data -> STATIC .)


state 65

    (190) data -> FINAL .

    CLASS           reduce using rule 190 (data -> FINAL .)


state 66

    (77) if -> IF . LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> IF . LPAREN conditions RPAREN body

    LPAREN          shift and go to state 111


state 67

    (105) for -> forStatement .

    VARIABLE        reduce using rule 105 (for -> forStatement .)
    ECHO            reduce using rule 105 (for -> forStatement .)
    PRINT           reduce using rule 105 (for -> forStatement .)
    TRY             reduce using rule 105 (for -> forStatement .)
    FUNCTION        reduce using rule 105 (for -> forStatement .)
    RETURN          reduce using rule 105 (for -> forStatement .)
    ID              reduce using rule 105 (for -> forStatement .)
    EMPTY           reduce using rule 105 (for -> forStatement .)
    CLASS           reduce using rule 105 (for -> forStatement .)
    INTERFACE       reduce using rule 105 (for -> forStatement .)
    INCLUDE         reduce using rule 105 (for -> forStatement .)
    NAMESPACE       reduce using rule 105 (for -> forStatement .)
    THROW           reduce using rule 105 (for -> forStatement .)
    CONST           reduce using rule 105 (for -> forStatement .)
    THIS            reduce using rule 105 (for -> forStatement .)
    INT             reduce using rule 105 (for -> forStatement .)
    FLOAT           reduce using rule 105 (for -> forStatement .)
    STRING          reduce using rule 105 (for -> forStatement .)
    BOOL            reduce using rule 105 (for -> forStatement .)
    NULL            reduce using rule 105 (for -> forStatement .)
    ARRAY           reduce using rule 105 (for -> forStatement .)
    ABSTRACT        reduce using rule 105 (for -> forStatement .)
    PRIVATE         reduce using rule 105 (for -> forStatement .)
    PROTECTED       reduce using rule 105 (for -> forStatement .)
    PUBLIC          reduce using rule 105 (for -> forStatement .)
    STATIC          reduce using rule 105 (for -> forStatement .)
    FINAL           reduce using rule 105 (for -> forStatement .)
    IF              reduce using rule 105 (for -> forStatement .)
    WHILE           reduce using rule 105 (for -> forStatement .)
    DO              reduce using rule 105 (for -> forStatement .)
    SWITCH          reduce using rule 105 (for -> forStatement .)
    FOREACH         reduce using rule 105 (for -> forStatement .)
    FOR             reduce using rule 105 (for -> forStatement .)
    CLOSETAG        reduce using rule 105 (for -> forStatement .)
    RBRACE          reduce using rule 105 (for -> forStatement .)
    BREAK           reduce using rule 105 (for -> forStatement .)
    ENDSWITCH       reduce using rule 105 (for -> forStatement .)
    CASE            reduce using rule 105 (for -> forStatement .)
    DEFAULT         reduce using rule 105 (for -> forStatement .)


state 68

    (109) while -> WHILE . LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> WHILE . LPAREN condition RPAREN LBRACE RBRACE

    LPAREN          shift and go to state 112


state 69

    (111) dowhile -> DO . LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON

    LBRACE          shift and go to state 113


state 70

    (112) switch -> SWITCH . LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> SWITCH . LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON

    LPAREN          shift and go to state 114


state 71

    (120) foreach -> FOREACH . LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 115


state 72

    (130) array -> map .

    VARIABLE        reduce using rule 130 (array -> map .)
    ECHO            reduce using rule 130 (array -> map .)
    PRINT           reduce using rule 130 (array -> map .)
    TRY             reduce using rule 130 (array -> map .)
    FUNCTION        reduce using rule 130 (array -> map .)
    RETURN          reduce using rule 130 (array -> map .)
    ID              reduce using rule 130 (array -> map .)
    EMPTY           reduce using rule 130 (array -> map .)
    CLASS           reduce using rule 130 (array -> map .)
    INTERFACE       reduce using rule 130 (array -> map .)
    INCLUDE         reduce using rule 130 (array -> map .)
    NAMESPACE       reduce using rule 130 (array -> map .)
    THROW           reduce using rule 130 (array -> map .)
    CONST           reduce using rule 130 (array -> map .)
    THIS            reduce using rule 130 (array -> map .)
    INT             reduce using rule 130 (array -> map .)
    FLOAT           reduce using rule 130 (array -> map .)
    STRING          reduce using rule 130 (array -> map .)
    BOOL            reduce using rule 130 (array -> map .)
    NULL            reduce using rule 130 (array -> map .)
    ARRAY           reduce using rule 130 (array -> map .)
    ABSTRACT        reduce using rule 130 (array -> map .)
    PRIVATE         reduce using rule 130 (array -> map .)
    PROTECTED       reduce using rule 130 (array -> map .)
    PUBLIC          reduce using rule 130 (array -> map .)
    STATIC          reduce using rule 130 (array -> map .)
    FINAL           reduce using rule 130 (array -> map .)
    IF              reduce using rule 130 (array -> map .)
    WHILE           reduce using rule 130 (array -> map .)
    DO              reduce using rule 130 (array -> map .)
    SWITCH          reduce using rule 130 (array -> map .)
    FOREACH         reduce using rule 130 (array -> map .)
    FOR             reduce using rule 130 (array -> map .)
    CLOSETAG        reduce using rule 130 (array -> map .)
    RBRACE          reduce using rule 130 (array -> map .)
    BREAK           reduce using rule 130 (array -> map .)
    ENDSWITCH       reduce using rule 130 (array -> map .)
    CASE            reduce using rule 130 (array -> map .)
    DEFAULT         reduce using rule 130 (array -> map .)


state 73

    (106) forStatement -> FOR . LPAREN forcondition RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 116


state 74

    (1) inicio -> OPENTAG programa CLOSETAG .

    $end            reduce using rule 1 (inicio -> OPENTAG programa CLOSETAG .)


state 75

    (3) programa -> sentencia programa .

    CLOSETAG        reduce using rule 3 (programa -> sentencia programa .)


state 76

    (28) asignacion -> VARIABLE EQUALS . operaArit SEMICOLON
    (29) asignacion -> VARIABLE EQUALS . valor SEMICOLON
    (30) asignacion -> VARIABLE EQUALS . operador_ternario SEMICOLON
    (31) asignacion_fgets -> VARIABLE EQUALS . FGETS LPAREN STDIN RPAREN SEMICOLON
    (195) anonymousFunction -> VARIABLE EQUALS . FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (127) array -> VARIABLE EQUALS . arrays SEMICOLON
    (128) array -> VARIABLE EQUALS . LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> VARIABLE EQUALS . ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (134) map -> VARIABLE EQUALS . LBRACKET maps RBRACKET SEMICOLON
    (135) map -> VARIABLE EQUALS . ARRAY LPAREN maps RPAREN SEMICOLON
    (35) operaArit -> . valornumerico
    (36) operaArit -> . valornumerico operador operaArit
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (32) operador_ternario -> . LPAREN conditions RPAREN QUESTION valor COLON valor
    (33) operador_ternario -> . LPAREN conditions RPAREN QUESTION COLON valor
    (34) operador_ternario -> . LPAREN VARIABLE RPAREN QUESTION COLON valor
    (131) arrays -> . LBRACKET repiteValores RBRACKET
    (37) valornumerico -> . INT
    (38) valornumerico -> . FLOAT
    (39) valornumerico -> . VARIABLE
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    FGETS           shift and go to state 121
    FN              shift and go to state 123
    LBRACKET        shift and go to state 125
    ARRAY           shift and go to state 126
    INT             shift and go to state 128
    VARIABLE        shift and go to state 117
    FLOAT           shift and go to state 129
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    LPAREN          shift and go to state 122
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    operaArit                      shift and go to state 118
    valor                          shift and go to state 119
    operador_ternario              shift and go to state 120
    arrays                         shift and go to state 124
    valornumerico                  shift and go to state 127
    llamadaFuncion                 shift and go to state 94

state 77

    (162) objeto -> VARIABLE ARROW . ID LPAREN argumentos RPAREN SEMICOLON

    ID              shift and go to state 130


state 78

    (198) instance -> VARIABLE INSTANCEOF . ID

    ID              shift and go to state 131


state 79

    (202) concatenate -> VARIABLE CONCATENATEEQUAL . STRING

    STRING          shift and go to state 132


state 80

    (203) minuse -> VARIABLE MINUSEQUAL . INT

    INT             shift and go to state 133


state 81

    (204) pluse -> VARIABLE PLUSEQUAL . INT

    INT             shift and go to state 134


state 82

    (54) comparacion -> valor comparador . valor
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    valor                          shift and go to state 135
    llamadaFuncion                 shift and go to state 94

state 83

    (55) comparador -> LT .

    INT             reduce using rule 55 (comparador -> LT .)
    VARIABLE        reduce using rule 55 (comparador -> LT .)
    FLOAT           reduce using rule 55 (comparador -> LT .)
    STRING          reduce using rule 55 (comparador -> LT .)
    BOOL            reduce using rule 55 (comparador -> LT .)
    NULL            reduce using rule 55 (comparador -> LT .)
    ARRAY           reduce using rule 55 (comparador -> LT .)
    ID              reduce using rule 55 (comparador -> LT .)
    EMPTY           reduce using rule 55 (comparador -> LT .)


state 84

    (56) comparador -> GT .

    INT             reduce using rule 56 (comparador -> GT .)
    VARIABLE        reduce using rule 56 (comparador -> GT .)
    FLOAT           reduce using rule 56 (comparador -> GT .)
    STRING          reduce using rule 56 (comparador -> GT .)
    BOOL            reduce using rule 56 (comparador -> GT .)
    NULL            reduce using rule 56 (comparador -> GT .)
    ARRAY           reduce using rule 56 (comparador -> GT .)
    ID              reduce using rule 56 (comparador -> GT .)
    EMPTY           reduce using rule 56 (comparador -> GT .)


state 85

    (57) comparador -> LEQ .

    INT             reduce using rule 57 (comparador -> LEQ .)
    VARIABLE        reduce using rule 57 (comparador -> LEQ .)
    FLOAT           reduce using rule 57 (comparador -> LEQ .)
    STRING          reduce using rule 57 (comparador -> LEQ .)
    BOOL            reduce using rule 57 (comparador -> LEQ .)
    NULL            reduce using rule 57 (comparador -> LEQ .)
    ARRAY           reduce using rule 57 (comparador -> LEQ .)
    ID              reduce using rule 57 (comparador -> LEQ .)
    EMPTY           reduce using rule 57 (comparador -> LEQ .)


state 86

    (58) comparador -> GEQ .

    INT             reduce using rule 58 (comparador -> GEQ .)
    VARIABLE        reduce using rule 58 (comparador -> GEQ .)
    FLOAT           reduce using rule 58 (comparador -> GEQ .)
    STRING          reduce using rule 58 (comparador -> GEQ .)
    BOOL            reduce using rule 58 (comparador -> GEQ .)
    NULL            reduce using rule 58 (comparador -> GEQ .)
    ARRAY           reduce using rule 58 (comparador -> GEQ .)
    ID              reduce using rule 58 (comparador -> GEQ .)
    EMPTY           reduce using rule 58 (comparador -> GEQ .)


state 87

    (59) impresion -> ECHO imprimir . SEMICOLON

    SEMICOLON       shift and go to state 136


state 88

    (61) imprimir -> LPAREN . repiteValores RPAREN
    (62) imprimir -> LPAREN . RPAREN
    (32) operador_ternario -> LPAREN . conditions RPAREN QUESTION valor COLON valor
    (33) operador_ternario -> LPAREN . conditions RPAREN QUESTION COLON valor
    (34) operador_ternario -> LPAREN . VARIABLE RPAREN QUESTION COLON valor
    (66) repiteValores -> . valor
    (67) repiteValores -> . valor COMMA repiteValores
    (82) conditions -> . condition
    (83) conditions -> . condition opLogic conditions
    (84) conditions -> . LPAREN conditions RPAREN
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (85) condition -> . valor
    (86) condition -> . valor opSymbol valor
    (87) condition -> . NOT condition
    (88) condition -> . LPAREN conditions RPAREN
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    RPAREN          shift and go to state 139
    VARIABLE        shift and go to state 142
    LPAREN          shift and go to state 137
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    NOT             shift and go to state 144
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    repiteValores                  shift and go to state 138
    conditions                     shift and go to state 140
    valor                          shift and go to state 141
    condition                      shift and go to state 143
    llamadaFuncion                 shift and go to state 94

state 89

    (63) imprimir -> repiteValores .

    SEMICOLON       reduce using rule 63 (imprimir -> repiteValores .)


state 90

    (64) imprimir -> operador_ternario .

    SEMICOLON       reduce using rule 64 (imprimir -> operador_ternario .)


state 91

    (65) imprimir -> empty .

    SEMICOLON       reduce using rule 65 (imprimir -> empty .)


state 92

    (66) repiteValores -> valor .
    (67) repiteValores -> valor . COMMA repiteValores

    SEMICOLON       reduce using rule 66 (repiteValores -> valor .)
    RPAREN          reduce using rule 66 (repiteValores -> valor .)
    RBRACKET        reduce using rule 66 (repiteValores -> valor .)
    COMMA           shift and go to state 145


state 93

    (41) valor -> VARIABLE .

    COMMA           reduce using rule 41 (valor -> VARIABLE .)
    SEMICOLON       reduce using rule 41 (valor -> VARIABLE .)
    VARIABLE        reduce using rule 41 (valor -> VARIABLE .)
    ECHO            reduce using rule 41 (valor -> VARIABLE .)
    PRINT           reduce using rule 41 (valor -> VARIABLE .)
    TRY             reduce using rule 41 (valor -> VARIABLE .)
    FUNCTION        reduce using rule 41 (valor -> VARIABLE .)
    RETURN          reduce using rule 41 (valor -> VARIABLE .)
    ID              reduce using rule 41 (valor -> VARIABLE .)
    EMPTY           reduce using rule 41 (valor -> VARIABLE .)
    CLASS           reduce using rule 41 (valor -> VARIABLE .)
    INTERFACE       reduce using rule 41 (valor -> VARIABLE .)
    INCLUDE         reduce using rule 41 (valor -> VARIABLE .)
    NAMESPACE       reduce using rule 41 (valor -> VARIABLE .)
    THROW           reduce using rule 41 (valor -> VARIABLE .)
    CONST           reduce using rule 41 (valor -> VARIABLE .)
    THIS            reduce using rule 41 (valor -> VARIABLE .)
    INT             reduce using rule 41 (valor -> VARIABLE .)
    FLOAT           reduce using rule 41 (valor -> VARIABLE .)
    STRING          reduce using rule 41 (valor -> VARIABLE .)
    BOOL            reduce using rule 41 (valor -> VARIABLE .)
    NULL            reduce using rule 41 (valor -> VARIABLE .)
    ARRAY           reduce using rule 41 (valor -> VARIABLE .)
    ABSTRACT        reduce using rule 41 (valor -> VARIABLE .)
    PRIVATE         reduce using rule 41 (valor -> VARIABLE .)
    PROTECTED       reduce using rule 41 (valor -> VARIABLE .)
    PUBLIC          reduce using rule 41 (valor -> VARIABLE .)
    STATIC          reduce using rule 41 (valor -> VARIABLE .)
    FINAL           reduce using rule 41 (valor -> VARIABLE .)
    IF              reduce using rule 41 (valor -> VARIABLE .)
    WHILE           reduce using rule 41 (valor -> VARIABLE .)
    DO              reduce using rule 41 (valor -> VARIABLE .)
    SWITCH          reduce using rule 41 (valor -> VARIABLE .)
    FOREACH         reduce using rule 41 (valor -> VARIABLE .)
    FOR             reduce using rule 41 (valor -> VARIABLE .)
    CLOSETAG        reduce using rule 41 (valor -> VARIABLE .)
    RBRACE          reduce using rule 41 (valor -> VARIABLE .)
    BREAK           reduce using rule 41 (valor -> VARIABLE .)
    ENDSWITCH       reduce using rule 41 (valor -> VARIABLE .)
    CASE            reduce using rule 41 (valor -> VARIABLE .)
    DEFAULT         reduce using rule 41 (valor -> VARIABLE .)
    EQ              reduce using rule 41 (valor -> VARIABLE .)
    NEQ             reduce using rule 41 (valor -> VARIABLE .)
    STRICTEQ        reduce using rule 41 (valor -> VARIABLE .)
    STRICTNEQ       reduce using rule 41 (valor -> VARIABLE .)
    LT              reduce using rule 41 (valor -> VARIABLE .)
    GT              reduce using rule 41 (valor -> VARIABLE .)
    LEQ             reduce using rule 41 (valor -> VARIABLE .)
    GEQ             reduce using rule 41 (valor -> VARIABLE .)
    AND             reduce using rule 41 (valor -> VARIABLE .)
    LOGICAL_AND     reduce using rule 41 (valor -> VARIABLE .)
    OR              reduce using rule 41 (valor -> VARIABLE .)
    LOGICAL_OR      reduce using rule 41 (valor -> VARIABLE .)
    RPAREN          reduce using rule 41 (valor -> VARIABLE .)
    ARROWMAP        reduce using rule 41 (valor -> VARIABLE .)
    RBRACKET        reduce using rule 41 (valor -> VARIABLE .)
    COLON           reduce using rule 41 (valor -> VARIABLE .)


state 94

    (47) valor -> llamadaFuncion .

    COMMA           reduce using rule 47 (valor -> llamadaFuncion .)
    SEMICOLON       reduce using rule 47 (valor -> llamadaFuncion .)
    VARIABLE        reduce using rule 47 (valor -> llamadaFuncion .)
    ECHO            reduce using rule 47 (valor -> llamadaFuncion .)
    PRINT           reduce using rule 47 (valor -> llamadaFuncion .)
    TRY             reduce using rule 47 (valor -> llamadaFuncion .)
    FUNCTION        reduce using rule 47 (valor -> llamadaFuncion .)
    RETURN          reduce using rule 47 (valor -> llamadaFuncion .)
    ID              reduce using rule 47 (valor -> llamadaFuncion .)
    EMPTY           reduce using rule 47 (valor -> llamadaFuncion .)
    CLASS           reduce using rule 47 (valor -> llamadaFuncion .)
    INTERFACE       reduce using rule 47 (valor -> llamadaFuncion .)
    INCLUDE         reduce using rule 47 (valor -> llamadaFuncion .)
    NAMESPACE       reduce using rule 47 (valor -> llamadaFuncion .)
    THROW           reduce using rule 47 (valor -> llamadaFuncion .)
    CONST           reduce using rule 47 (valor -> llamadaFuncion .)
    THIS            reduce using rule 47 (valor -> llamadaFuncion .)
    INT             reduce using rule 47 (valor -> llamadaFuncion .)
    FLOAT           reduce using rule 47 (valor -> llamadaFuncion .)
    STRING          reduce using rule 47 (valor -> llamadaFuncion .)
    BOOL            reduce using rule 47 (valor -> llamadaFuncion .)
    NULL            reduce using rule 47 (valor -> llamadaFuncion .)
    ARRAY           reduce using rule 47 (valor -> llamadaFuncion .)
    ABSTRACT        reduce using rule 47 (valor -> llamadaFuncion .)
    PRIVATE         reduce using rule 47 (valor -> llamadaFuncion .)
    PROTECTED       reduce using rule 47 (valor -> llamadaFuncion .)
    PUBLIC          reduce using rule 47 (valor -> llamadaFuncion .)
    STATIC          reduce using rule 47 (valor -> llamadaFuncion .)
    FINAL           reduce using rule 47 (valor -> llamadaFuncion .)
    IF              reduce using rule 47 (valor -> llamadaFuncion .)
    WHILE           reduce using rule 47 (valor -> llamadaFuncion .)
    DO              reduce using rule 47 (valor -> llamadaFuncion .)
    SWITCH          reduce using rule 47 (valor -> llamadaFuncion .)
    FOREACH         reduce using rule 47 (valor -> llamadaFuncion .)
    FOR             reduce using rule 47 (valor -> llamadaFuncion .)
    CLOSETAG        reduce using rule 47 (valor -> llamadaFuncion .)
    RBRACE          reduce using rule 47 (valor -> llamadaFuncion .)
    BREAK           reduce using rule 47 (valor -> llamadaFuncion .)
    ENDSWITCH       reduce using rule 47 (valor -> llamadaFuncion .)
    CASE            reduce using rule 47 (valor -> llamadaFuncion .)
    DEFAULT         reduce using rule 47 (valor -> llamadaFuncion .)
    EQ              reduce using rule 47 (valor -> llamadaFuncion .)
    NEQ             reduce using rule 47 (valor -> llamadaFuncion .)
    STRICTEQ        reduce using rule 47 (valor -> llamadaFuncion .)
    STRICTNEQ       reduce using rule 47 (valor -> llamadaFuncion .)
    LT              reduce using rule 47 (valor -> llamadaFuncion .)
    GT              reduce using rule 47 (valor -> llamadaFuncion .)
    LEQ             reduce using rule 47 (valor -> llamadaFuncion .)
    GEQ             reduce using rule 47 (valor -> llamadaFuncion .)
    RPAREN          reduce using rule 47 (valor -> llamadaFuncion .)
    AND             reduce using rule 47 (valor -> llamadaFuncion .)
    LOGICAL_AND     reduce using rule 47 (valor -> llamadaFuncion .)
    OR              reduce using rule 47 (valor -> llamadaFuncion .)
    LOGICAL_OR      reduce using rule 47 (valor -> llamadaFuncion .)
    ARROWMAP        reduce using rule 47 (valor -> llamadaFuncion .)
    RBRACKET        reduce using rule 47 (valor -> llamadaFuncion .)
    COLON           reduce using rule 47 (valor -> llamadaFuncion .)


state 95

    (60) impresion -> PRINT imprimir . SEMICOLON

    SEMICOLON       shift and go to state 146


state 96

    (157) try -> TRY LBRACE . body RBRACE catchs
    (158) try -> TRY LBRACE . body RBRACE catchs FINALLY LBRACE body RBRACE
    (101) body -> . sentenciaList
    (102) body -> . empty
    (103) sentenciaList -> . sentencia
    (104) sentenciaList -> . sentencia sentenciaList
    (68) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (25) sentencia -> . pluse
    (28) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (29) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (30) asignacion -> . VARIABLE EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (54) comparacion -> . valor comparador valor
    (59) impresion -> . ECHO imprimir SEMICOLON
    (60) impresion -> . PRINT imprimir SEMICOLON
    (69) estructurasPrograma -> . controlStructure
    (70) estructurasPrograma -> . dataStructure
    (157) try -> . TRY LBRACE body RBRACE catchs
    (158) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (163) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (26) returnStatement -> . RETURN valor SEMICOLON
    (27) returnStatement -> . RETURN SEMICOLON
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (168) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (170) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (171) classDeclarate -> . classInterface
    (191) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (162) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (192) includes -> . INCLUDE STRING SEMICOLON
    (193) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (194) namespace -> . NAMESPACE ID SEMICOLON
    (195) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> . THROW valor SEMICOLON
    (198) instance -> . VARIABLE INSTANCEOF ID
    (199) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (200) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (201) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (202) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (203) minuse -> . VARIABLE MINUSEQUAL INT
    (204) pluse -> . VARIABLE PLUSEQUAL INT
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (71) controlStructure -> . if
    (72) controlStructure -> . for
    (73) controlStructure -> . while
    (74) controlStructure -> . dowhile
    (75) controlStructure -> . switch
    (76) controlStructure -> . foreach
    (126) dataStructure -> . array
    (185) data -> . ABSTRACT
    (186) data -> . PRIVATE
    (187) data -> . PROTECTED
    (188) data -> . PUBLIC
    (189) data -> . STATIC
    (190) data -> . FINAL
    (179) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (181) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (77) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> . IF LPAREN conditions RPAREN body
    (105) for -> . forStatement
    (109) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (111) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (112) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (120) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (127) array -> . VARIABLE EQUALS arrays SEMICOLON
    (128) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (130) array -> . map
    (106) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (134) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 68 (empty -> .)
    VARIABLE        shift and go to state 27
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 60
    PRIVATE         shift and go to state 61
    PROTECTED       shift and go to state 62
    PUBLIC          shift and go to state 63
    STATIC          shift and go to state 64
    FINAL           shift and go to state 65
    IF              shift and go to state 66
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    SWITCH          shift and go to state 70
    FOREACH         shift and go to state 71
    FOR             shift and go to state 73

    body                           shift and go to state 147
    sentenciaList                  shift and go to state 148
    empty                          shift and go to state 149
    sentencia                      shift and go to state 150
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    pluse                          shift and go to state 26
    valor                          shift and go to state 28
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    if                             shift and go to state 53
    for                            shift and go to state 54
    while                          shift and go to state 55
    dowhile                        shift and go to state 56
    switch                         shift and go to state 57
    foreach                        shift and go to state 58
    array                          shift and go to state 59
    forStatement                   shift and go to state 67
    map                            shift and go to state 72

state 97

    (163) funcionDeclaration -> FUNCTION ID . LPAREN argumentos RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 151


state 98

    (164) llamadaFuncion -> ID LPAREN . argumentos RPAREN SEMICOLON
    (166) llamadaFuncion -> ID LPAREN . argumentos RPAREN
    (144) argumentos -> . argumento
    (145) argumentos -> . argumento COMMA argumentos
    (146) argumentos -> . empty
    (147) argumento -> . type VARIABLE
    (148) argumento -> . VARIABLE EQUALS valor
    (149) argumento -> . type VARIABLE EQUALS valor
    (150) argumento -> . operaArit
    (68) empty -> .
    (151) type -> . INT_TYPE
    (152) type -> . FLOAT_TYPE
    (153) type -> . STRING_TYPE
    (154) type -> . BOOL_TYPE
    (155) type -> . ARRAY_TYPE
    (156) type -> . VOID
    (35) operaArit -> . valornumerico
    (36) operaArit -> . valornumerico operador operaArit
    (37) valornumerico -> . INT
    (38) valornumerico -> . FLOAT
    (39) valornumerico -> . VARIABLE

    VARIABLE        shift and go to state 156
    RPAREN          reduce using rule 68 (empty -> .)
    INT_TYPE        shift and go to state 158
    FLOAT_TYPE      shift and go to state 159
    STRING_TYPE     shift and go to state 160
    BOOL_TYPE       shift and go to state 161
    ARRAY_TYPE      shift and go to state 162
    VOID            shift and go to state 163
    INT             shift and go to state 164
    FLOAT           shift and go to state 165

    argumentos                     shift and go to state 152
    argumento                      shift and go to state 153
    empty                          shift and go to state 154
    type                           shift and go to state 155
    operaArit                      shift and go to state 157
    valornumerico                  shift and go to state 127

state 99

    (26) returnStatement -> RETURN valor . SEMICOLON

    SEMICOLON       shift and go to state 166


state 100

    (27) returnStatement -> RETURN SEMICOLON .

    VARIABLE        reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    ECHO            reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    PRINT           reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    TRY             reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    FUNCTION        reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    ID              reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    EMPTY           reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    CLASS           reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    INTERFACE       reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    INCLUDE         reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    NAMESPACE       reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    THROW           reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    CONST           reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    THIS            reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    INT             reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    STRING          reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    BOOL            reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    NULL            reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    ARRAY           reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    ABSTRACT        reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    PRIVATE         reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    PROTECTED       reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    PUBLIC          reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    STATIC          reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    FINAL           reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    IF              reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    DO              reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    FOREACH         reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    FOR             reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    CLOSETAG        reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    ENDSWITCH       reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    CASE            reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 27 (returnStatement -> RETURN SEMICOLON .)


state 101

    (165) llamadaFuncion -> EMPTY LPAREN . argumentos RPAREN
    (167) llamadaFuncion -> EMPTY LPAREN . argumentos RPAREN SEMICOLON
    (144) argumentos -> . argumento
    (145) argumentos -> . argumento COMMA argumentos
    (146) argumentos -> . empty
    (147) argumento -> . type VARIABLE
    (148) argumento -> . VARIABLE EQUALS valor
    (149) argumento -> . type VARIABLE EQUALS valor
    (150) argumento -> . operaArit
    (68) empty -> .
    (151) type -> . INT_TYPE
    (152) type -> . FLOAT_TYPE
    (153) type -> . STRING_TYPE
    (154) type -> . BOOL_TYPE
    (155) type -> . ARRAY_TYPE
    (156) type -> . VOID
    (35) operaArit -> . valornumerico
    (36) operaArit -> . valornumerico operador operaArit
    (37) valornumerico -> . INT
    (38) valornumerico -> . FLOAT
    (39) valornumerico -> . VARIABLE

    VARIABLE        shift and go to state 156
    RPAREN          reduce using rule 68 (empty -> .)
    INT_TYPE        shift and go to state 158
    FLOAT_TYPE      shift and go to state 159
    STRING_TYPE     shift and go to state 160
    BOOL_TYPE       shift and go to state 161
    ARRAY_TYPE      shift and go to state 162
    VOID            shift and go to state 163
    INT             shift and go to state 164
    FLOAT           shift and go to state 165

    argumentos                     shift and go to state 167
    argumento                      shift and go to state 153
    empty                          shift and go to state 154
    type                           shift and go to state 155
    operaArit                      shift and go to state 157
    valornumerico                  shift and go to state 127

state 102

    (168) classDeclarate -> CLASS ID . LBRACE classBody RBRACE
    (169) classDeclarate -> CLASS ID . EXTENDS ID LBRACE classBody RBRACE
    (179) classInterface -> CLASS ID . IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> CLASS ID . EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    LBRACE          shift and go to state 168
    EXTENDS         shift and go to state 169
    IMPLEMENTS      shift and go to state 170


state 103

    (170) classDeclarate -> data CLASS . ID LBRACE classBody RBRACE
    (181) classInterface -> data CLASS . ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> data CLASS . ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    ID              shift and go to state 171


state 104

    (191) interface -> INTERFACE ID . LBRACE classBody RBRACE

    LBRACE          shift and go to state 172


state 105

    (192) includes -> INCLUDE STRING . SEMICOLON
    (193) includes -> INCLUDE STRING . DOT STRING SEMICOLON

    SEMICOLON       shift and go to state 173
    DOT             shift and go to state 174


state 106

    (194) namespace -> NAMESPACE ID . SEMICOLON

    SEMICOLON       shift and go to state 175


state 107

    (196) throw -> THROW NEW . EXCEPTION LPAREN repiteValores RPAREN SEMICOLON

    EXCEPTION       shift and go to state 176


state 108

    (197) throw -> THROW valor . SEMICOLON

    SEMICOLON       shift and go to state 177


state 109

    (199) constdeclaration -> CONST ID . EQUALS valor SEMICOLON

    EQUALS          shift and go to state 178


state 110

    (200) thisdeclaration -> THIS ARROW . ID SEMICOLON
    (201) thisdeclaration -> THIS ARROW . ID LPAREN RPAREN SEMICOLON

    ID              shift and go to state 179


state 111

    (77) if -> IF LPAREN . conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> IF LPAREN . conditions RPAREN body
    (82) conditions -> . condition
    (83) conditions -> . condition opLogic conditions
    (84) conditions -> . LPAREN conditions RPAREN
    (85) condition -> . valor
    (86) condition -> . valor opSymbol valor
    (87) condition -> . NOT condition
    (88) condition -> . LPAREN conditions RPAREN
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 137
    NOT             shift and go to state 144
    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    conditions                     shift and go to state 180
    condition                      shift and go to state 143
    valor                          shift and go to state 181
    llamadaFuncion                 shift and go to state 94

state 112

    (109) while -> WHILE LPAREN . condition RPAREN LBRACE body RBRACE
    (110) while -> WHILE LPAREN . condition RPAREN LBRACE RBRACE
    (85) condition -> . valor
    (86) condition -> . valor opSymbol valor
    (87) condition -> . NOT condition
    (88) condition -> . LPAREN conditions RPAREN
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    NOT             shift and go to state 144
    LPAREN          shift and go to state 182
    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    condition                      shift and go to state 183
    valor                          shift and go to state 181
    llamadaFuncion                 shift and go to state 94

state 113

    (111) dowhile -> DO LBRACE . body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (101) body -> . sentenciaList
    (102) body -> . empty
    (103) sentenciaList -> . sentencia
    (104) sentenciaList -> . sentencia sentenciaList
    (68) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (25) sentencia -> . pluse
    (28) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (29) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (30) asignacion -> . VARIABLE EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (54) comparacion -> . valor comparador valor
    (59) impresion -> . ECHO imprimir SEMICOLON
    (60) impresion -> . PRINT imprimir SEMICOLON
    (69) estructurasPrograma -> . controlStructure
    (70) estructurasPrograma -> . dataStructure
    (157) try -> . TRY LBRACE body RBRACE catchs
    (158) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (163) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (26) returnStatement -> . RETURN valor SEMICOLON
    (27) returnStatement -> . RETURN SEMICOLON
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (168) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (170) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (171) classDeclarate -> . classInterface
    (191) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (162) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (192) includes -> . INCLUDE STRING SEMICOLON
    (193) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (194) namespace -> . NAMESPACE ID SEMICOLON
    (195) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> . THROW valor SEMICOLON
    (198) instance -> . VARIABLE INSTANCEOF ID
    (199) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (200) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (201) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (202) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (203) minuse -> . VARIABLE MINUSEQUAL INT
    (204) pluse -> . VARIABLE PLUSEQUAL INT
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (71) controlStructure -> . if
    (72) controlStructure -> . for
    (73) controlStructure -> . while
    (74) controlStructure -> . dowhile
    (75) controlStructure -> . switch
    (76) controlStructure -> . foreach
    (126) dataStructure -> . array
    (185) data -> . ABSTRACT
    (186) data -> . PRIVATE
    (187) data -> . PROTECTED
    (188) data -> . PUBLIC
    (189) data -> . STATIC
    (190) data -> . FINAL
    (179) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (181) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (77) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> . IF LPAREN conditions RPAREN body
    (105) for -> . forStatement
    (109) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (111) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (112) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (120) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (127) array -> . VARIABLE EQUALS arrays SEMICOLON
    (128) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (130) array -> . map
    (106) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (134) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 68 (empty -> .)
    VARIABLE        shift and go to state 27
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 60
    PRIVATE         shift and go to state 61
    PROTECTED       shift and go to state 62
    PUBLIC          shift and go to state 63
    STATIC          shift and go to state 64
    FINAL           shift and go to state 65
    IF              shift and go to state 66
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    SWITCH          shift and go to state 70
    FOREACH         shift and go to state 71
    FOR             shift and go to state 73

    body                           shift and go to state 184
    sentenciaList                  shift and go to state 148
    empty                          shift and go to state 149
    sentencia                      shift and go to state 150
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    pluse                          shift and go to state 26
    valor                          shift and go to state 28
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    if                             shift and go to state 53
    for                            shift and go to state 54
    while                          shift and go to state 55
    dowhile                        shift and go to state 56
    switch                         shift and go to state 57
    foreach                        shift and go to state 58
    array                          shift and go to state 59
    forStatement                   shift and go to state 67
    map                            shift and go to state 72

state 114

    (112) switch -> SWITCH LPAREN . valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> SWITCH LPAREN . valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    valor                          shift and go to state 185
    llamadaFuncion                 shift and go to state 94

state 115

    (120) foreach -> FOREACH LPAREN . VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE

    VARIABLE        shift and go to state 186


state 116

    (106) forStatement -> FOR LPAREN . forcondition RPAREN LBRACE body RBRACE
    (107) forcondition -> . VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (108) forcondition -> . VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    VARIABLE        shift and go to state 188

    forcondition                   shift and go to state 187

state 117

    (41) valor -> VARIABLE .
    (39) valornumerico -> VARIABLE .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 39 (valornumerico -> VARIABLE .)
    PLUS            reduce using rule 39 (valornumerico -> VARIABLE .)
    MINUS           reduce using rule 39 (valornumerico -> VARIABLE .)
    TIMES           reduce using rule 39 (valornumerico -> VARIABLE .)
    DIVIDE          reduce using rule 39 (valornumerico -> VARIABLE .)
    MODULO          reduce using rule 39 (valornumerico -> VARIABLE .)
    POTENCIA        reduce using rule 39 (valornumerico -> VARIABLE .)
    SEMICOLON       reduce using rule 39 (valornumerico -> VARIABLE .)

  ! SEMICOLON       [ reduce using rule 41 (valor -> VARIABLE .) ]


state 118

    (28) asignacion -> VARIABLE EQUALS operaArit . SEMICOLON

    SEMICOLON       shift and go to state 189


state 119

    (29) asignacion -> VARIABLE EQUALS valor . SEMICOLON

    SEMICOLON       shift and go to state 190


state 120

    (30) asignacion -> VARIABLE EQUALS operador_ternario . SEMICOLON

    SEMICOLON       shift and go to state 191


state 121

    (31) asignacion_fgets -> VARIABLE EQUALS FGETS . LPAREN STDIN RPAREN SEMICOLON

    LPAREN          shift and go to state 192


state 122

    (32) operador_ternario -> LPAREN . conditions RPAREN QUESTION valor COLON valor
    (33) operador_ternario -> LPAREN . conditions RPAREN QUESTION COLON valor
    (34) operador_ternario -> LPAREN . VARIABLE RPAREN QUESTION COLON valor
    (82) conditions -> . condition
    (83) conditions -> . condition opLogic conditions
    (84) conditions -> . LPAREN conditions RPAREN
    (85) condition -> . valor
    (86) condition -> . valor opSymbol valor
    (87) condition -> . NOT condition
    (88) condition -> . LPAREN conditions RPAREN
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    VARIABLE        shift and go to state 142
    LPAREN          shift and go to state 137
    NOT             shift and go to state 144
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    conditions                     shift and go to state 140
    valor                          shift and go to state 181
    condition                      shift and go to state 143
    llamadaFuncion                 shift and go to state 94

state 123

    (195) anonymousFunction -> VARIABLE EQUALS FN . LPAREN RPAREN ARROWMAP comparacion SEMICOLON

    LPAREN          shift and go to state 193


state 124

    (127) array -> VARIABLE EQUALS arrays . SEMICOLON

    SEMICOLON       shift and go to state 194


state 125

    (128) array -> VARIABLE EQUALS LBRACKET . arrayAnidado RBRACKET SEMICOLON
    (134) map -> VARIABLE EQUALS LBRACKET . maps RBRACKET SEMICOLON
    (131) arrays -> LBRACKET . repiteValores RBRACKET
    (132) arrayAnidado -> . arrays
    (133) arrayAnidado -> . arrays COMMA arrayAnidado
    (136) maps -> . mapArrow
    (137) maps -> . mapArrow COMMA maps
    (66) repiteValores -> . valor
    (67) repiteValores -> . valor COMMA repiteValores
    (131) arrays -> . LBRACKET repiteValores RBRACKET
    (138) mapArrow -> . valor ARROWMAP valor
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LBRACKET        shift and go to state 195
    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    arrayAnidado                   shift and go to state 196
    maps                           shift and go to state 197
    repiteValores                  shift and go to state 198
    arrays                         shift and go to state 199
    mapArrow                       shift and go to state 200
    valor                          shift and go to state 201
    llamadaFuncion                 shift and go to state 94

state 126

    (129) array -> VARIABLE EQUALS ARRAY . LPAREN repiteValores RPAREN SEMICOLON
    (135) map -> VARIABLE EQUALS ARRAY . LPAREN maps RPAREN SEMICOLON
    (46) valor -> ARRAY .

    LPAREN          shift and go to state 202
    SEMICOLON       reduce using rule 46 (valor -> ARRAY .)


state 127

    (35) operaArit -> valornumerico .
    (36) operaArit -> valornumerico . operador operaArit
    (48) operador -> . PLUS
    (49) operador -> . MINUS
    (50) operador -> . TIMES
    (51) operador -> . DIVIDE
    (52) operador -> . MODULO
    (53) operador -> . POTENCIA

    SEMICOLON       reduce using rule 35 (operaArit -> valornumerico .)
    COMMA           reduce using rule 35 (operaArit -> valornumerico .)
    RPAREN          reduce using rule 35 (operaArit -> valornumerico .)
    PLUS            shift and go to state 204
    MINUS           shift and go to state 205
    TIMES           shift and go to state 206
    DIVIDE          shift and go to state 207
    MODULO          shift and go to state 208
    POTENCIA        shift and go to state 209

    operador                       shift and go to state 203

state 128

    (40) valor -> INT .
    (37) valornumerico -> INT .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 37 (valornumerico -> INT .)
    PLUS            reduce using rule 37 (valornumerico -> INT .)
    MINUS           reduce using rule 37 (valornumerico -> INT .)
    TIMES           reduce using rule 37 (valornumerico -> INT .)
    DIVIDE          reduce using rule 37 (valornumerico -> INT .)
    MODULO          reduce using rule 37 (valornumerico -> INT .)
    POTENCIA        reduce using rule 37 (valornumerico -> INT .)
    SEMICOLON       reduce using rule 37 (valornumerico -> INT .)

  ! SEMICOLON       [ reduce using rule 40 (valor -> INT .) ]


state 129

    (42) valor -> FLOAT .
    (38) valornumerico -> FLOAT .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 38 (valornumerico -> FLOAT .)
    PLUS            reduce using rule 38 (valornumerico -> FLOAT .)
    MINUS           reduce using rule 38 (valornumerico -> FLOAT .)
    TIMES           reduce using rule 38 (valornumerico -> FLOAT .)
    DIVIDE          reduce using rule 38 (valornumerico -> FLOAT .)
    MODULO          reduce using rule 38 (valornumerico -> FLOAT .)
    POTENCIA        reduce using rule 38 (valornumerico -> FLOAT .)
    SEMICOLON       reduce using rule 38 (valornumerico -> FLOAT .)

  ! SEMICOLON       [ reduce using rule 42 (valor -> FLOAT .) ]


state 130

    (162) objeto -> VARIABLE ARROW ID . LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 210


state 131

    (198) instance -> VARIABLE INSTANCEOF ID .

    VARIABLE        reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    ECHO            reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    PRINT           reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    TRY             reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    FUNCTION        reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    RETURN          reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    ID              reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    EMPTY           reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    CLASS           reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    INTERFACE       reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    INCLUDE         reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    NAMESPACE       reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    THROW           reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    CONST           reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    THIS            reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    INT             reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    FLOAT           reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    STRING          reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    BOOL            reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    NULL            reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    ARRAY           reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    ABSTRACT        reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    PRIVATE         reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    PROTECTED       reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    PUBLIC          reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    STATIC          reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    FINAL           reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    IF              reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    WHILE           reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    DO              reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    SWITCH          reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    FOREACH         reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    FOR             reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    CLOSETAG        reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    RBRACE          reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    BREAK           reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    ENDSWITCH       reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    CASE            reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)
    DEFAULT         reduce using rule 198 (instance -> VARIABLE INSTANCEOF ID .)


state 132

    (202) concatenate -> VARIABLE CONCATENATEEQUAL STRING .

    VARIABLE        reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    ECHO            reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    PRINT           reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    TRY             reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    FUNCTION        reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    RETURN          reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    ID              reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    EMPTY           reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    CLASS           reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    INTERFACE       reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    INCLUDE         reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    NAMESPACE       reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    THROW           reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    CONST           reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    THIS            reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    INT             reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    FLOAT           reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    STRING          reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    BOOL            reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    NULL            reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    ARRAY           reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    ABSTRACT        reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    PRIVATE         reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    PROTECTED       reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    PUBLIC          reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    STATIC          reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    FINAL           reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    IF              reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    WHILE           reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    DO              reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    SWITCH          reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    FOREACH         reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    FOR             reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    CLOSETAG        reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    RBRACE          reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    BREAK           reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    ENDSWITCH       reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    CASE            reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)
    DEFAULT         reduce using rule 202 (concatenate -> VARIABLE CONCATENATEEQUAL STRING .)


state 133

    (203) minuse -> VARIABLE MINUSEQUAL INT .

    VARIABLE        reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    ECHO            reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    PRINT           reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    TRY             reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    FUNCTION        reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    RETURN          reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    ID              reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    EMPTY           reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    CLASS           reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    INTERFACE       reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    INCLUDE         reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    NAMESPACE       reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    THROW           reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    CONST           reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    THIS            reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    INT             reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    FLOAT           reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    STRING          reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    BOOL            reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    NULL            reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    ARRAY           reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    ABSTRACT        reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    PRIVATE         reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    PROTECTED       reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    PUBLIC          reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    STATIC          reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    FINAL           reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    IF              reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    WHILE           reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    DO              reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    SWITCH          reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    FOREACH         reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    FOR             reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    CLOSETAG        reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    RBRACE          reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    BREAK           reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    ENDSWITCH       reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    CASE            reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)
    DEFAULT         reduce using rule 203 (minuse -> VARIABLE MINUSEQUAL INT .)


state 134

    (204) pluse -> VARIABLE PLUSEQUAL INT .

    VARIABLE        reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    ECHO            reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    PRINT           reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    TRY             reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    FUNCTION        reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    RETURN          reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    ID              reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    EMPTY           reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    CLASS           reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    INTERFACE       reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    INCLUDE         reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    NAMESPACE       reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    THROW           reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    CONST           reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    THIS            reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    INT             reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    FLOAT           reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    STRING          reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    BOOL            reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    NULL            reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    ARRAY           reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    ABSTRACT        reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    PRIVATE         reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    PROTECTED       reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    PUBLIC          reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    STATIC          reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    FINAL           reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    IF              reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    WHILE           reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    DO              reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    SWITCH          reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    FOREACH         reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    FOR             reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    CLOSETAG        reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    RBRACE          reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    BREAK           reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    ENDSWITCH       reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    CASE            reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)
    DEFAULT         reduce using rule 204 (pluse -> VARIABLE PLUSEQUAL INT .)


state 135

    (54) comparacion -> valor comparador valor .

    VARIABLE        reduce using rule 54 (comparacion -> valor comparador valor .)
    ECHO            reduce using rule 54 (comparacion -> valor comparador valor .)
    PRINT           reduce using rule 54 (comparacion -> valor comparador valor .)
    TRY             reduce using rule 54 (comparacion -> valor comparador valor .)
    FUNCTION        reduce using rule 54 (comparacion -> valor comparador valor .)
    RETURN          reduce using rule 54 (comparacion -> valor comparador valor .)
    ID              reduce using rule 54 (comparacion -> valor comparador valor .)
    EMPTY           reduce using rule 54 (comparacion -> valor comparador valor .)
    CLASS           reduce using rule 54 (comparacion -> valor comparador valor .)
    INTERFACE       reduce using rule 54 (comparacion -> valor comparador valor .)
    INCLUDE         reduce using rule 54 (comparacion -> valor comparador valor .)
    NAMESPACE       reduce using rule 54 (comparacion -> valor comparador valor .)
    THROW           reduce using rule 54 (comparacion -> valor comparador valor .)
    CONST           reduce using rule 54 (comparacion -> valor comparador valor .)
    THIS            reduce using rule 54 (comparacion -> valor comparador valor .)
    INT             reduce using rule 54 (comparacion -> valor comparador valor .)
    FLOAT           reduce using rule 54 (comparacion -> valor comparador valor .)
    STRING          reduce using rule 54 (comparacion -> valor comparador valor .)
    BOOL            reduce using rule 54 (comparacion -> valor comparador valor .)
    NULL            reduce using rule 54 (comparacion -> valor comparador valor .)
    ARRAY           reduce using rule 54 (comparacion -> valor comparador valor .)
    ABSTRACT        reduce using rule 54 (comparacion -> valor comparador valor .)
    PRIVATE         reduce using rule 54 (comparacion -> valor comparador valor .)
    PROTECTED       reduce using rule 54 (comparacion -> valor comparador valor .)
    PUBLIC          reduce using rule 54 (comparacion -> valor comparador valor .)
    STATIC          reduce using rule 54 (comparacion -> valor comparador valor .)
    FINAL           reduce using rule 54 (comparacion -> valor comparador valor .)
    IF              reduce using rule 54 (comparacion -> valor comparador valor .)
    WHILE           reduce using rule 54 (comparacion -> valor comparador valor .)
    DO              reduce using rule 54 (comparacion -> valor comparador valor .)
    SWITCH          reduce using rule 54 (comparacion -> valor comparador valor .)
    FOREACH         reduce using rule 54 (comparacion -> valor comparador valor .)
    FOR             reduce using rule 54 (comparacion -> valor comparador valor .)
    CLOSETAG        reduce using rule 54 (comparacion -> valor comparador valor .)
    RBRACE          reduce using rule 54 (comparacion -> valor comparador valor .)
    BREAK           reduce using rule 54 (comparacion -> valor comparador valor .)
    ENDSWITCH       reduce using rule 54 (comparacion -> valor comparador valor .)
    CASE            reduce using rule 54 (comparacion -> valor comparador valor .)
    DEFAULT         reduce using rule 54 (comparacion -> valor comparador valor .)
    SEMICOLON       reduce using rule 54 (comparacion -> valor comparador valor .)


state 136

    (59) impresion -> ECHO imprimir SEMICOLON .

    VARIABLE        reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    ECHO            reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    PRINT           reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    TRY             reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    FUNCTION        reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    RETURN          reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    ID              reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    EMPTY           reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    CLASS           reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    INTERFACE       reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    INCLUDE         reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    NAMESPACE       reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    THROW           reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    CONST           reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    THIS            reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    INT             reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    FLOAT           reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    STRING          reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    BOOL            reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    NULL            reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    ARRAY           reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    ABSTRACT        reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    PRIVATE         reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    PROTECTED       reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    PUBLIC          reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    STATIC          reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    FINAL           reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    IF              reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    WHILE           reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    DO              reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    SWITCH          reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    FOREACH         reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    FOR             reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    CLOSETAG        reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    RBRACE          reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    BREAK           reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    ENDSWITCH       reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    CASE            reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)
    DEFAULT         reduce using rule 59 (impresion -> ECHO imprimir SEMICOLON .)


state 137

    (84) conditions -> LPAREN . conditions RPAREN
    (88) condition -> LPAREN . conditions RPAREN
    (82) conditions -> . condition
    (83) conditions -> . condition opLogic conditions
    (84) conditions -> . LPAREN conditions RPAREN
    (85) condition -> . valor
    (86) condition -> . valor opSymbol valor
    (87) condition -> . NOT condition
    (88) condition -> . LPAREN conditions RPAREN
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 137
    NOT             shift and go to state 144
    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    conditions                     shift and go to state 211
    condition                      shift and go to state 143
    valor                          shift and go to state 181
    llamadaFuncion                 shift and go to state 94

state 138

    (61) imprimir -> LPAREN repiteValores . RPAREN

    RPAREN          shift and go to state 212


state 139

    (62) imprimir -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 62 (imprimir -> LPAREN RPAREN .)


state 140

    (32) operador_ternario -> LPAREN conditions . RPAREN QUESTION valor COLON valor
    (33) operador_ternario -> LPAREN conditions . RPAREN QUESTION COLON valor

    RPAREN          shift and go to state 213


state 141

    (66) repiteValores -> valor .
    (67) repiteValores -> valor . COMMA repiteValores
    (85) condition -> valor .
    (86) condition -> valor . opSymbol valor
    (89) opSymbol -> . EQ
    (90) opSymbol -> . NEQ
    (91) opSymbol -> . STRICTEQ
    (92) opSymbol -> . STRICTNEQ
    (93) opSymbol -> . LT
    (94) opSymbol -> . GT
    (95) opSymbol -> . LEQ
    (96) opSymbol -> . GEQ

  ! reduce/reduce conflict for RPAREN resolved using rule 66 (repiteValores -> valor .)
    RPAREN          reduce using rule 66 (repiteValores -> valor .)
    COMMA           shift and go to state 145
    AND             reduce using rule 85 (condition -> valor .)
    LOGICAL_AND     reduce using rule 85 (condition -> valor .)
    OR              reduce using rule 85 (condition -> valor .)
    LOGICAL_OR      reduce using rule 85 (condition -> valor .)
    EQ              shift and go to state 215
    NEQ             shift and go to state 216
    STRICTEQ        shift and go to state 217
    STRICTNEQ       shift and go to state 218
    LT              shift and go to state 219
    GT              shift and go to state 220
    LEQ             shift and go to state 221
    GEQ             shift and go to state 222

  ! RPAREN          [ reduce using rule 85 (condition -> valor .) ]

    opSymbol                       shift and go to state 214

state 142

    (34) operador_ternario -> LPAREN VARIABLE . RPAREN QUESTION COLON valor
    (41) valor -> VARIABLE .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 223
    COMMA           reduce using rule 41 (valor -> VARIABLE .)
    EQ              reduce using rule 41 (valor -> VARIABLE .)
    NEQ             reduce using rule 41 (valor -> VARIABLE .)
    STRICTEQ        reduce using rule 41 (valor -> VARIABLE .)
    STRICTNEQ       reduce using rule 41 (valor -> VARIABLE .)
    LT              reduce using rule 41 (valor -> VARIABLE .)
    GT              reduce using rule 41 (valor -> VARIABLE .)
    LEQ             reduce using rule 41 (valor -> VARIABLE .)
    GEQ             reduce using rule 41 (valor -> VARIABLE .)
    AND             reduce using rule 41 (valor -> VARIABLE .)
    LOGICAL_AND     reduce using rule 41 (valor -> VARIABLE .)
    OR              reduce using rule 41 (valor -> VARIABLE .)
    LOGICAL_OR      reduce using rule 41 (valor -> VARIABLE .)

  ! RPAREN          [ reduce using rule 41 (valor -> VARIABLE .) ]


state 143

    (82) conditions -> condition .
    (83) conditions -> condition . opLogic conditions
    (97) opLogic -> . AND
    (98) opLogic -> . LOGICAL_AND
    (99) opLogic -> . OR
    (100) opLogic -> . LOGICAL_OR

    RPAREN          reduce using rule 82 (conditions -> condition .)
    AND             shift and go to state 225
    LOGICAL_AND     shift and go to state 226
    OR              shift and go to state 227
    LOGICAL_OR      shift and go to state 228

    opLogic                        shift and go to state 224

state 144

    (87) condition -> NOT . condition
    (85) condition -> . valor
    (86) condition -> . valor opSymbol valor
    (87) condition -> . NOT condition
    (88) condition -> . LPAREN conditions RPAREN
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    NOT             shift and go to state 144
    LPAREN          shift and go to state 182
    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    condition                      shift and go to state 229
    valor                          shift and go to state 181
    llamadaFuncion                 shift and go to state 94

state 145

    (67) repiteValores -> valor COMMA . repiteValores
    (66) repiteValores -> . valor
    (67) repiteValores -> . valor COMMA repiteValores
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    valor                          shift and go to state 92
    repiteValores                  shift and go to state 230
    llamadaFuncion                 shift and go to state 94

state 146

    (60) impresion -> PRINT imprimir SEMICOLON .

    VARIABLE        reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    ECHO            reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    PRINT           reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    TRY             reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    FUNCTION        reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    RETURN          reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    ID              reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    EMPTY           reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    CLASS           reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    INTERFACE       reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    INCLUDE         reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    NAMESPACE       reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    THROW           reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    CONST           reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    THIS            reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    INT             reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    FLOAT           reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    STRING          reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    BOOL            reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    NULL            reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    ARRAY           reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    ABSTRACT        reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    PRIVATE         reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    PROTECTED       reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    PUBLIC          reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    STATIC          reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    FINAL           reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    IF              reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    WHILE           reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    DO              reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    SWITCH          reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    FOREACH         reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    FOR             reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    CLOSETAG        reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    RBRACE          reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    BREAK           reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    ENDSWITCH       reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    CASE            reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)
    DEFAULT         reduce using rule 60 (impresion -> PRINT imprimir SEMICOLON .)


state 147

    (157) try -> TRY LBRACE body . RBRACE catchs
    (158) try -> TRY LBRACE body . RBRACE catchs FINALLY LBRACE body RBRACE

    RBRACE          shift and go to state 231


state 148

    (101) body -> sentenciaList .

    RBRACE          reduce using rule 101 (body -> sentenciaList .)
    VARIABLE        reduce using rule 101 (body -> sentenciaList .)
    ECHO            reduce using rule 101 (body -> sentenciaList .)
    PRINT           reduce using rule 101 (body -> sentenciaList .)
    TRY             reduce using rule 101 (body -> sentenciaList .)
    FUNCTION        reduce using rule 101 (body -> sentenciaList .)
    RETURN          reduce using rule 101 (body -> sentenciaList .)
    ID              reduce using rule 101 (body -> sentenciaList .)
    EMPTY           reduce using rule 101 (body -> sentenciaList .)
    CLASS           reduce using rule 101 (body -> sentenciaList .)
    INTERFACE       reduce using rule 101 (body -> sentenciaList .)
    INCLUDE         reduce using rule 101 (body -> sentenciaList .)
    NAMESPACE       reduce using rule 101 (body -> sentenciaList .)
    THROW           reduce using rule 101 (body -> sentenciaList .)
    CONST           reduce using rule 101 (body -> sentenciaList .)
    THIS            reduce using rule 101 (body -> sentenciaList .)
    INT             reduce using rule 101 (body -> sentenciaList .)
    FLOAT           reduce using rule 101 (body -> sentenciaList .)
    STRING          reduce using rule 101 (body -> sentenciaList .)
    BOOL            reduce using rule 101 (body -> sentenciaList .)
    NULL            reduce using rule 101 (body -> sentenciaList .)
    ARRAY           reduce using rule 101 (body -> sentenciaList .)
    ABSTRACT        reduce using rule 101 (body -> sentenciaList .)
    PRIVATE         reduce using rule 101 (body -> sentenciaList .)
    PROTECTED       reduce using rule 101 (body -> sentenciaList .)
    PUBLIC          reduce using rule 101 (body -> sentenciaList .)
    STATIC          reduce using rule 101 (body -> sentenciaList .)
    FINAL           reduce using rule 101 (body -> sentenciaList .)
    IF              reduce using rule 101 (body -> sentenciaList .)
    WHILE           reduce using rule 101 (body -> sentenciaList .)
    DO              reduce using rule 101 (body -> sentenciaList .)
    SWITCH          reduce using rule 101 (body -> sentenciaList .)
    FOREACH         reduce using rule 101 (body -> sentenciaList .)
    FOR             reduce using rule 101 (body -> sentenciaList .)
    CLOSETAG        reduce using rule 101 (body -> sentenciaList .)
    BREAK           reduce using rule 101 (body -> sentenciaList .)
    ENDSWITCH       reduce using rule 101 (body -> sentenciaList .)
    CASE            reduce using rule 101 (body -> sentenciaList .)
    DEFAULT         reduce using rule 101 (body -> sentenciaList .)


state 149

    (102) body -> empty .

    RBRACE          reduce using rule 102 (body -> empty .)
    VARIABLE        reduce using rule 102 (body -> empty .)
    ECHO            reduce using rule 102 (body -> empty .)
    PRINT           reduce using rule 102 (body -> empty .)
    TRY             reduce using rule 102 (body -> empty .)
    FUNCTION        reduce using rule 102 (body -> empty .)
    RETURN          reduce using rule 102 (body -> empty .)
    ID              reduce using rule 102 (body -> empty .)
    EMPTY           reduce using rule 102 (body -> empty .)
    CLASS           reduce using rule 102 (body -> empty .)
    INTERFACE       reduce using rule 102 (body -> empty .)
    INCLUDE         reduce using rule 102 (body -> empty .)
    NAMESPACE       reduce using rule 102 (body -> empty .)
    THROW           reduce using rule 102 (body -> empty .)
    CONST           reduce using rule 102 (body -> empty .)
    THIS            reduce using rule 102 (body -> empty .)
    INT             reduce using rule 102 (body -> empty .)
    FLOAT           reduce using rule 102 (body -> empty .)
    STRING          reduce using rule 102 (body -> empty .)
    BOOL            reduce using rule 102 (body -> empty .)
    NULL            reduce using rule 102 (body -> empty .)
    ARRAY           reduce using rule 102 (body -> empty .)
    ABSTRACT        reduce using rule 102 (body -> empty .)
    PRIVATE         reduce using rule 102 (body -> empty .)
    PROTECTED       reduce using rule 102 (body -> empty .)
    PUBLIC          reduce using rule 102 (body -> empty .)
    STATIC          reduce using rule 102 (body -> empty .)
    FINAL           reduce using rule 102 (body -> empty .)
    IF              reduce using rule 102 (body -> empty .)
    WHILE           reduce using rule 102 (body -> empty .)
    DO              reduce using rule 102 (body -> empty .)
    SWITCH          reduce using rule 102 (body -> empty .)
    FOREACH         reduce using rule 102 (body -> empty .)
    FOR             reduce using rule 102 (body -> empty .)
    CLOSETAG        reduce using rule 102 (body -> empty .)
    BREAK           reduce using rule 102 (body -> empty .)
    ENDSWITCH       reduce using rule 102 (body -> empty .)
    CASE            reduce using rule 102 (body -> empty .)
    DEFAULT         reduce using rule 102 (body -> empty .)


state 150

    (103) sentenciaList -> sentencia .
    (104) sentenciaList -> sentencia . sentenciaList
    (103) sentenciaList -> . sentencia
    (104) sentenciaList -> . sentencia sentenciaList
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (25) sentencia -> . pluse
    (28) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (29) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (30) asignacion -> . VARIABLE EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (54) comparacion -> . valor comparador valor
    (59) impresion -> . ECHO imprimir SEMICOLON
    (60) impresion -> . PRINT imprimir SEMICOLON
    (69) estructurasPrograma -> . controlStructure
    (70) estructurasPrograma -> . dataStructure
    (157) try -> . TRY LBRACE body RBRACE catchs
    (158) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (163) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (26) returnStatement -> . RETURN valor SEMICOLON
    (27) returnStatement -> . RETURN SEMICOLON
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (168) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (170) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (171) classDeclarate -> . classInterface
    (191) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (162) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (192) includes -> . INCLUDE STRING SEMICOLON
    (193) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (194) namespace -> . NAMESPACE ID SEMICOLON
    (195) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> . THROW valor SEMICOLON
    (198) instance -> . VARIABLE INSTANCEOF ID
    (199) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (200) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (201) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (202) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (203) minuse -> . VARIABLE MINUSEQUAL INT
    (204) pluse -> . VARIABLE PLUSEQUAL INT
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (71) controlStructure -> . if
    (72) controlStructure -> . for
    (73) controlStructure -> . while
    (74) controlStructure -> . dowhile
    (75) controlStructure -> . switch
    (76) controlStructure -> . foreach
    (126) dataStructure -> . array
    (185) data -> . ABSTRACT
    (186) data -> . PRIVATE
    (187) data -> . PROTECTED
    (188) data -> . PUBLIC
    (189) data -> . STATIC
    (190) data -> . FINAL
    (179) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (181) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (77) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> . IF LPAREN conditions RPAREN body
    (105) for -> . forStatement
    (109) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (111) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (112) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (120) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (127) array -> . VARIABLE EQUALS arrays SEMICOLON
    (128) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (130) array -> . map
    (106) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (134) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for EMPTY resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for NAMESPACE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for ABSTRACT resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    RBRACE          reduce using rule 103 (sentenciaList -> sentencia .)
    CLOSETAG        reduce using rule 103 (sentenciaList -> sentencia .)
    BREAK           reduce using rule 103 (sentenciaList -> sentencia .)
    ENDSWITCH       reduce using rule 103 (sentenciaList -> sentencia .)
    CASE            reduce using rule 103 (sentenciaList -> sentencia .)
    DEFAULT         reduce using rule 103 (sentenciaList -> sentencia .)
    VARIABLE        shift and go to state 27
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 60
    PRIVATE         shift and go to state 61
    PROTECTED       shift and go to state 62
    PUBLIC          shift and go to state 63
    STATIC          shift and go to state 64
    FINAL           shift and go to state 65
    IF              shift and go to state 66
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    SWITCH          shift and go to state 70
    FOREACH         shift and go to state 71
    FOR             shift and go to state 73

  ! VARIABLE        [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! ECHO            [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! PRINT           [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! TRY             [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! FUNCTION        [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! RETURN          [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! ID              [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! EMPTY           [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! CLASS           [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! INTERFACE       [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! INCLUDE         [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! NAMESPACE       [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! THROW           [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! CONST           [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! THIS            [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! INT             [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! FLOAT           [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! STRING          [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! BOOL            [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! NULL            [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! ARRAY           [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! ABSTRACT        [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! PRIVATE         [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! PROTECTED       [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! PUBLIC          [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! STATIC          [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! FINAL           [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! IF              [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! WHILE           [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! DO              [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! SWITCH          [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! FOREACH         [ reduce using rule 103 (sentenciaList -> sentencia .) ]
  ! FOR             [ reduce using rule 103 (sentenciaList -> sentencia .) ]

    sentencia                      shift and go to state 150
    sentenciaList                  shift and go to state 232
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    pluse                          shift and go to state 26
    valor                          shift and go to state 28
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    if                             shift and go to state 53
    for                            shift and go to state 54
    while                          shift and go to state 55
    dowhile                        shift and go to state 56
    switch                         shift and go to state 57
    foreach                        shift and go to state 58
    array                          shift and go to state 59
    forStatement                   shift and go to state 67
    map                            shift and go to state 72

state 151

    (163) funcionDeclaration -> FUNCTION ID LPAREN . argumentos RPAREN LBRACE body RBRACE
    (144) argumentos -> . argumento
    (145) argumentos -> . argumento COMMA argumentos
    (146) argumentos -> . empty
    (147) argumento -> . type VARIABLE
    (148) argumento -> . VARIABLE EQUALS valor
    (149) argumento -> . type VARIABLE EQUALS valor
    (150) argumento -> . operaArit
    (68) empty -> .
    (151) type -> . INT_TYPE
    (152) type -> . FLOAT_TYPE
    (153) type -> . STRING_TYPE
    (154) type -> . BOOL_TYPE
    (155) type -> . ARRAY_TYPE
    (156) type -> . VOID
    (35) operaArit -> . valornumerico
    (36) operaArit -> . valornumerico operador operaArit
    (37) valornumerico -> . INT
    (38) valornumerico -> . FLOAT
    (39) valornumerico -> . VARIABLE

    VARIABLE        shift and go to state 156
    RPAREN          reduce using rule 68 (empty -> .)
    INT_TYPE        shift and go to state 158
    FLOAT_TYPE      shift and go to state 159
    STRING_TYPE     shift and go to state 160
    BOOL_TYPE       shift and go to state 161
    ARRAY_TYPE      shift and go to state 162
    VOID            shift and go to state 163
    INT             shift and go to state 164
    FLOAT           shift and go to state 165

    argumentos                     shift and go to state 233
    argumento                      shift and go to state 153
    empty                          shift and go to state 154
    type                           shift and go to state 155
    operaArit                      shift and go to state 157
    valornumerico                  shift and go to state 127

state 152

    (164) llamadaFuncion -> ID LPAREN argumentos . RPAREN SEMICOLON
    (166) llamadaFuncion -> ID LPAREN argumentos . RPAREN

    RPAREN          shift and go to state 234


state 153

    (144) argumentos -> argumento .
    (145) argumentos -> argumento . COMMA argumentos

    RPAREN          reduce using rule 144 (argumentos -> argumento .)
    COMMA           shift and go to state 235


state 154

    (146) argumentos -> empty .

    RPAREN          reduce using rule 146 (argumentos -> empty .)


state 155

    (147) argumento -> type . VARIABLE
    (149) argumento -> type . VARIABLE EQUALS valor

    VARIABLE        shift and go to state 236


state 156

    (148) argumento -> VARIABLE . EQUALS valor
    (39) valornumerico -> VARIABLE .

    EQUALS          shift and go to state 237
    PLUS            reduce using rule 39 (valornumerico -> VARIABLE .)
    MINUS           reduce using rule 39 (valornumerico -> VARIABLE .)
    TIMES           reduce using rule 39 (valornumerico -> VARIABLE .)
    DIVIDE          reduce using rule 39 (valornumerico -> VARIABLE .)
    MODULO          reduce using rule 39 (valornumerico -> VARIABLE .)
    POTENCIA        reduce using rule 39 (valornumerico -> VARIABLE .)
    COMMA           reduce using rule 39 (valornumerico -> VARIABLE .)
    RPAREN          reduce using rule 39 (valornumerico -> VARIABLE .)


state 157

    (150) argumento -> operaArit .

    COMMA           reduce using rule 150 (argumento -> operaArit .)
    RPAREN          reduce using rule 150 (argumento -> operaArit .)


state 158

    (151) type -> INT_TYPE .

    VARIABLE        reduce using rule 151 (type -> INT_TYPE .)
    FUNCTION        reduce using rule 151 (type -> INT_TYPE .)


state 159

    (152) type -> FLOAT_TYPE .

    VARIABLE        reduce using rule 152 (type -> FLOAT_TYPE .)
    FUNCTION        reduce using rule 152 (type -> FLOAT_TYPE .)


state 160

    (153) type -> STRING_TYPE .

    VARIABLE        reduce using rule 153 (type -> STRING_TYPE .)
    FUNCTION        reduce using rule 153 (type -> STRING_TYPE .)


state 161

    (154) type -> BOOL_TYPE .

    VARIABLE        reduce using rule 154 (type -> BOOL_TYPE .)
    FUNCTION        reduce using rule 154 (type -> BOOL_TYPE .)


state 162

    (155) type -> ARRAY_TYPE .

    VARIABLE        reduce using rule 155 (type -> ARRAY_TYPE .)
    FUNCTION        reduce using rule 155 (type -> ARRAY_TYPE .)


state 163

    (156) type -> VOID .

    VARIABLE        reduce using rule 156 (type -> VOID .)
    FUNCTION        reduce using rule 156 (type -> VOID .)


state 164

    (37) valornumerico -> INT .

    PLUS            reduce using rule 37 (valornumerico -> INT .)
    MINUS           reduce using rule 37 (valornumerico -> INT .)
    TIMES           reduce using rule 37 (valornumerico -> INT .)
    DIVIDE          reduce using rule 37 (valornumerico -> INT .)
    MODULO          reduce using rule 37 (valornumerico -> INT .)
    POTENCIA        reduce using rule 37 (valornumerico -> INT .)
    COMMA           reduce using rule 37 (valornumerico -> INT .)
    RPAREN          reduce using rule 37 (valornumerico -> INT .)
    SEMICOLON       reduce using rule 37 (valornumerico -> INT .)


state 165

    (38) valornumerico -> FLOAT .

    PLUS            reduce using rule 38 (valornumerico -> FLOAT .)
    MINUS           reduce using rule 38 (valornumerico -> FLOAT .)
    TIMES           reduce using rule 38 (valornumerico -> FLOAT .)
    DIVIDE          reduce using rule 38 (valornumerico -> FLOAT .)
    MODULO          reduce using rule 38 (valornumerico -> FLOAT .)
    POTENCIA        reduce using rule 38 (valornumerico -> FLOAT .)
    COMMA           reduce using rule 38 (valornumerico -> FLOAT .)
    RPAREN          reduce using rule 38 (valornumerico -> FLOAT .)
    SEMICOLON       reduce using rule 38 (valornumerico -> FLOAT .)


state 166

    (26) returnStatement -> RETURN valor SEMICOLON .

    VARIABLE        reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    ECHO            reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    PRINT           reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    TRY             reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    FUNCTION        reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    RETURN          reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    ID              reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    EMPTY           reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    CLASS           reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    INTERFACE       reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    INCLUDE         reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    NAMESPACE       reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    THROW           reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    CONST           reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    THIS            reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    INT             reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    FLOAT           reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    STRING          reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    BOOL            reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    NULL            reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    ARRAY           reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    ABSTRACT        reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    PRIVATE         reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    PROTECTED       reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    PUBLIC          reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    STATIC          reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    FINAL           reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    IF              reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    WHILE           reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    DO              reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    SWITCH          reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    FOREACH         reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    FOR             reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    CLOSETAG        reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    RBRACE          reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    BREAK           reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    ENDSWITCH       reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    CASE            reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)
    DEFAULT         reduce using rule 26 (returnStatement -> RETURN valor SEMICOLON .)


state 167

    (165) llamadaFuncion -> EMPTY LPAREN argumentos . RPAREN
    (167) llamadaFuncion -> EMPTY LPAREN argumentos . RPAREN SEMICOLON

    RPAREN          shift and go to state 238


state 168

    (168) classDeclarate -> CLASS ID LBRACE . classBody RBRACE
    (172) classBody -> . classMember
    (173) classBody -> . classMember classBody
    (174) classMember -> . type VARIABLE SEMICOLON
    (175) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (176) classMember -> . objectInstantiation
    (151) type -> . INT_TYPE
    (152) type -> . FLOAT_TYPE
    (153) type -> . STRING_TYPE
    (154) type -> . BOOL_TYPE
    (155) type -> . ARRAY_TYPE
    (156) type -> . VOID
    (177) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (178) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 158
    FLOAT_TYPE      shift and go to state 159
    STRING_TYPE     shift and go to state 160
    BOOL_TYPE       shift and go to state 161
    ARRAY_TYPE      shift and go to state 162
    VOID            shift and go to state 163
    NEW             shift and go to state 243

    classBody                      shift and go to state 239
    classMember                    shift and go to state 240
    type                           shift and go to state 241
    objectInstantiation            shift and go to state 242

state 169

    (169) classDeclarate -> CLASS ID EXTENDS . ID LBRACE classBody RBRACE
    (180) classInterface -> CLASS ID EXTENDS . ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    ID              shift and go to state 244


state 170

    (179) classInterface -> CLASS ID IMPLEMENTS . impInterface LBRACE classBody RBRACE
    (183) impInterface -> . ID
    (184) impInterface -> . ID COMMA impInterface

    ID              shift and go to state 245

    impInterface                   shift and go to state 246

state 171

    (170) classDeclarate -> data CLASS ID . LBRACE classBody RBRACE
    (181) classInterface -> data CLASS ID . IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> data CLASS ID . EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    LBRACE          shift and go to state 247
    IMPLEMENTS      shift and go to state 248
    EXTENDS         shift and go to state 249


state 172

    (191) interface -> INTERFACE ID LBRACE . classBody RBRACE
    (172) classBody -> . classMember
    (173) classBody -> . classMember classBody
    (174) classMember -> . type VARIABLE SEMICOLON
    (175) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (176) classMember -> . objectInstantiation
    (151) type -> . INT_TYPE
    (152) type -> . FLOAT_TYPE
    (153) type -> . STRING_TYPE
    (154) type -> . BOOL_TYPE
    (155) type -> . ARRAY_TYPE
    (156) type -> . VOID
    (177) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (178) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 158
    FLOAT_TYPE      shift and go to state 159
    STRING_TYPE     shift and go to state 160
    BOOL_TYPE       shift and go to state 161
    ARRAY_TYPE      shift and go to state 162
    VOID            shift and go to state 163
    NEW             shift and go to state 243

    classBody                      shift and go to state 250
    classMember                    shift and go to state 240
    type                           shift and go to state 241
    objectInstantiation            shift and go to state 242

state 173

    (192) includes -> INCLUDE STRING SEMICOLON .

    VARIABLE        reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    ECHO            reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    PRINT           reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    TRY             reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    FUNCTION        reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    RETURN          reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    ID              reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    EMPTY           reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    CLASS           reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    INTERFACE       reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    INCLUDE         reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    NAMESPACE       reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    THROW           reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    CONST           reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    THIS            reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    INT             reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    FLOAT           reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    STRING          reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    BOOL            reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    NULL            reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    ARRAY           reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    ABSTRACT        reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    PRIVATE         reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    PROTECTED       reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    PUBLIC          reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    STATIC          reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    FINAL           reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    IF              reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    WHILE           reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    DO              reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    SWITCH          reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    FOREACH         reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    FOR             reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    CLOSETAG        reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    RBRACE          reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    BREAK           reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    ENDSWITCH       reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    CASE            reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)
    DEFAULT         reduce using rule 192 (includes -> INCLUDE STRING SEMICOLON .)


state 174

    (193) includes -> INCLUDE STRING DOT . STRING SEMICOLON

    STRING          shift and go to state 251


state 175

    (194) namespace -> NAMESPACE ID SEMICOLON .

    VARIABLE        reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    ECHO            reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    PRINT           reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    TRY             reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    FUNCTION        reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    RETURN          reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    ID              reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    EMPTY           reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    CLASS           reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    INTERFACE       reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    INCLUDE         reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    NAMESPACE       reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    THROW           reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    CONST           reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    THIS            reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    INT             reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    FLOAT           reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    STRING          reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    BOOL            reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    NULL            reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    ARRAY           reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    ABSTRACT        reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    PRIVATE         reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    PROTECTED       reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    PUBLIC          reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    STATIC          reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    FINAL           reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    IF              reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    WHILE           reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    DO              reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    SWITCH          reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    FOREACH         reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    FOR             reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    CLOSETAG        reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    RBRACE          reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    BREAK           reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    ENDSWITCH       reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    CASE            reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)
    DEFAULT         reduce using rule 194 (namespace -> NAMESPACE ID SEMICOLON .)


state 176

    (196) throw -> THROW NEW EXCEPTION . LPAREN repiteValores RPAREN SEMICOLON

    LPAREN          shift and go to state 252


state 177

    (197) throw -> THROW valor SEMICOLON .

    VARIABLE        reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    ECHO            reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    PRINT           reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    TRY             reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    FUNCTION        reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    RETURN          reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    ID              reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    EMPTY           reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    CLASS           reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    INTERFACE       reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    INCLUDE         reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    NAMESPACE       reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    THROW           reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    CONST           reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    THIS            reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    INT             reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    FLOAT           reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    STRING          reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    BOOL            reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    NULL            reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    ARRAY           reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    ABSTRACT        reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    PRIVATE         reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    PROTECTED       reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    PUBLIC          reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    STATIC          reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    FINAL           reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    IF              reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    WHILE           reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    DO              reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    SWITCH          reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    FOREACH         reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    FOR             reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    CLOSETAG        reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    RBRACE          reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    BREAK           reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    ENDSWITCH       reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    CASE            reduce using rule 197 (throw -> THROW valor SEMICOLON .)
    DEFAULT         reduce using rule 197 (throw -> THROW valor SEMICOLON .)


state 178

    (199) constdeclaration -> CONST ID EQUALS . valor SEMICOLON
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    valor                          shift and go to state 253
    llamadaFuncion                 shift and go to state 94

state 179

    (200) thisdeclaration -> THIS ARROW ID . SEMICOLON
    (201) thisdeclaration -> THIS ARROW ID . LPAREN RPAREN SEMICOLON

    SEMICOLON       shift and go to state 254
    LPAREN          shift and go to state 255


state 180

    (77) if -> IF LPAREN conditions . RPAREN LBRACE body RBRACE else_blocks
    (78) if -> IF LPAREN conditions . RPAREN body

    RPAREN          shift and go to state 256


state 181

    (85) condition -> valor .
    (86) condition -> valor . opSymbol valor
    (89) opSymbol -> . EQ
    (90) opSymbol -> . NEQ
    (91) opSymbol -> . STRICTEQ
    (92) opSymbol -> . STRICTNEQ
    (93) opSymbol -> . LT
    (94) opSymbol -> . GT
    (95) opSymbol -> . LEQ
    (96) opSymbol -> . GEQ

    AND             reduce using rule 85 (condition -> valor .)
    LOGICAL_AND     reduce using rule 85 (condition -> valor .)
    OR              reduce using rule 85 (condition -> valor .)
    LOGICAL_OR      reduce using rule 85 (condition -> valor .)
    RPAREN          reduce using rule 85 (condition -> valor .)
    EQ              shift and go to state 215
    NEQ             shift and go to state 216
    STRICTEQ        shift and go to state 217
    STRICTNEQ       shift and go to state 218
    LT              shift and go to state 219
    GT              shift and go to state 220
    LEQ             shift and go to state 221
    GEQ             shift and go to state 222

    opSymbol                       shift and go to state 214

state 182

    (88) condition -> LPAREN . conditions RPAREN
    (82) conditions -> . condition
    (83) conditions -> . condition opLogic conditions
    (84) conditions -> . LPAREN conditions RPAREN
    (85) condition -> . valor
    (86) condition -> . valor opSymbol valor
    (87) condition -> . NOT condition
    (88) condition -> . LPAREN conditions RPAREN
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 137
    NOT             shift and go to state 144
    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    conditions                     shift and go to state 257
    condition                      shift and go to state 143
    valor                          shift and go to state 181
    llamadaFuncion                 shift and go to state 94

state 183

    (109) while -> WHILE LPAREN condition . RPAREN LBRACE body RBRACE
    (110) while -> WHILE LPAREN condition . RPAREN LBRACE RBRACE

    RPAREN          shift and go to state 258


state 184

    (111) dowhile -> DO LBRACE body . RBRACE WHILE LPAREN condition RPAREN SEMICOLON

    RBRACE          shift and go to state 259


state 185

    (112) switch -> SWITCH LPAREN valor . RPAREN LBRACE caseLists RBRACE
    (113) switch -> SWITCH LPAREN valor . RPAREN COLON caseLists ENDSWITCH SEMICOLON

    RPAREN          shift and go to state 260


state 186

    (120) foreach -> FOREACH LPAREN VARIABLE . AS VARIABLE RPAREN LBRACE body RBRACE

    AS              shift and go to state 261


state 187

    (106) forStatement -> FOR LPAREN forcondition . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 262


state 188

    (107) forcondition -> VARIABLE . EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (108) forcondition -> VARIABLE . EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    EQUALS          shift and go to state 263


state 189

    (28) asignacion -> VARIABLE EQUALS operaArit SEMICOLON .

    VARIABLE        reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    ECHO            reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    PRINT           reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    TRY             reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    FUNCTION        reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    RETURN          reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    ID              reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    EMPTY           reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    CLASS           reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    INTERFACE       reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    INCLUDE         reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    NAMESPACE       reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    THROW           reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    CONST           reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    THIS            reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    INT             reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    FLOAT           reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    STRING          reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    BOOL            reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    NULL            reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    ARRAY           reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    ABSTRACT        reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    PRIVATE         reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    PROTECTED       reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    PUBLIC          reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    STATIC          reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    FINAL           reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    IF              reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    WHILE           reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    DO              reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    SWITCH          reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    FOREACH         reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    FOR             reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    CLOSETAG        reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    RBRACE          reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    BREAK           reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    ENDSWITCH       reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    CASE            reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)
    DEFAULT         reduce using rule 28 (asignacion -> VARIABLE EQUALS operaArit SEMICOLON .)


state 190

    (29) asignacion -> VARIABLE EQUALS valor SEMICOLON .

    VARIABLE        reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    ECHO            reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    PRINT           reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    TRY             reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    FUNCTION        reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    RETURN          reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    ID              reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    EMPTY           reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    CLASS           reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    INTERFACE       reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    INCLUDE         reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    NAMESPACE       reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    THROW           reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    CONST           reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    THIS            reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    INT             reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    FLOAT           reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    STRING          reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    BOOL            reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    NULL            reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    ARRAY           reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    ABSTRACT        reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    PRIVATE         reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    PROTECTED       reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    PUBLIC          reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    STATIC          reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    FINAL           reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    IF              reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    WHILE           reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    DO              reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    SWITCH          reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    FOREACH         reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    FOR             reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    CLOSETAG        reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    RBRACE          reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    BREAK           reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    ENDSWITCH       reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    CASE            reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)
    DEFAULT         reduce using rule 29 (asignacion -> VARIABLE EQUALS valor SEMICOLON .)


state 191

    (30) asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .

    VARIABLE        reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    ECHO            reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    PRINT           reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    TRY             reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    FUNCTION        reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    RETURN          reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    ID              reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    EMPTY           reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    CLASS           reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    INTERFACE       reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    INCLUDE         reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    NAMESPACE       reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    THROW           reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    CONST           reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    THIS            reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    INT             reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    FLOAT           reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    STRING          reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    BOOL            reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    NULL            reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    ARRAY           reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    ABSTRACT        reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    PRIVATE         reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    PROTECTED       reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    PUBLIC          reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    STATIC          reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    FINAL           reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    IF              reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    WHILE           reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    DO              reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    SWITCH          reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    FOREACH         reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    FOR             reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    CLOSETAG        reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    RBRACE          reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    BREAK           reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    ENDSWITCH       reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    CASE            reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)
    DEFAULT         reduce using rule 30 (asignacion -> VARIABLE EQUALS operador_ternario SEMICOLON .)


state 192

    (31) asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN . STDIN RPAREN SEMICOLON

    STDIN           shift and go to state 264


state 193

    (195) anonymousFunction -> VARIABLE EQUALS FN LPAREN . RPAREN ARROWMAP comparacion SEMICOLON

    RPAREN          shift and go to state 265


state 194

    (127) array -> VARIABLE EQUALS arrays SEMICOLON .

    VARIABLE        reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    ECHO            reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    PRINT           reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    TRY             reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    FUNCTION        reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    RETURN          reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    ID              reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    EMPTY           reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    CLASS           reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    INTERFACE       reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    INCLUDE         reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    NAMESPACE       reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    THROW           reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    CONST           reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    THIS            reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    INT             reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    FLOAT           reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    STRING          reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    BOOL            reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    NULL            reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    ARRAY           reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    ABSTRACT        reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    PRIVATE         reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    PROTECTED       reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    PUBLIC          reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    STATIC          reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    FINAL           reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    IF              reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    WHILE           reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    DO              reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    SWITCH          reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    FOREACH         reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    FOR             reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    CLOSETAG        reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    RBRACE          reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    BREAK           reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    ENDSWITCH       reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    CASE            reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)
    DEFAULT         reduce using rule 127 (array -> VARIABLE EQUALS arrays SEMICOLON .)


state 195

    (131) arrays -> LBRACKET . repiteValores RBRACKET
    (66) repiteValores -> . valor
    (67) repiteValores -> . valor COMMA repiteValores
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    repiteValores                  shift and go to state 198
    valor                          shift and go to state 92
    llamadaFuncion                 shift and go to state 94

state 196

    (128) array -> VARIABLE EQUALS LBRACKET arrayAnidado . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 266


state 197

    (134) map -> VARIABLE EQUALS LBRACKET maps . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 267


state 198

    (131) arrays -> LBRACKET repiteValores . RBRACKET

    RBRACKET        shift and go to state 268


state 199

    (132) arrayAnidado -> arrays .
    (133) arrayAnidado -> arrays . COMMA arrayAnidado

    RBRACKET        reduce using rule 132 (arrayAnidado -> arrays .)
    COMMA           shift and go to state 269


state 200

    (136) maps -> mapArrow .
    (137) maps -> mapArrow . COMMA maps

    RBRACKET        reduce using rule 136 (maps -> mapArrow .)
    RPAREN          reduce using rule 136 (maps -> mapArrow .)
    COMMA           shift and go to state 270


state 201

    (66) repiteValores -> valor .
    (67) repiteValores -> valor . COMMA repiteValores
    (138) mapArrow -> valor . ARROWMAP valor

    RBRACKET        reduce using rule 66 (repiteValores -> valor .)
    RPAREN          reduce using rule 66 (repiteValores -> valor .)
    COMMA           shift and go to state 145
    ARROWMAP        shift and go to state 271


state 202

    (129) array -> VARIABLE EQUALS ARRAY LPAREN . repiteValores RPAREN SEMICOLON
    (135) map -> VARIABLE EQUALS ARRAY LPAREN . maps RPAREN SEMICOLON
    (66) repiteValores -> . valor
    (67) repiteValores -> . valor COMMA repiteValores
    (136) maps -> . mapArrow
    (137) maps -> . mapArrow COMMA maps
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (138) mapArrow -> . valor ARROWMAP valor
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    repiteValores                  shift and go to state 272
    maps                           shift and go to state 273
    valor                          shift and go to state 201
    mapArrow                       shift and go to state 200
    llamadaFuncion                 shift and go to state 94

state 203

    (36) operaArit -> valornumerico operador . operaArit
    (35) operaArit -> . valornumerico
    (36) operaArit -> . valornumerico operador operaArit
    (37) valornumerico -> . INT
    (38) valornumerico -> . FLOAT
    (39) valornumerico -> . VARIABLE

    INT             shift and go to state 164
    FLOAT           shift and go to state 165
    VARIABLE        shift and go to state 275

    valornumerico                  shift and go to state 127
    operaArit                      shift and go to state 274

state 204

    (48) operador -> PLUS .

    INT             reduce using rule 48 (operador -> PLUS .)
    FLOAT           reduce using rule 48 (operador -> PLUS .)
    VARIABLE        reduce using rule 48 (operador -> PLUS .)


state 205

    (49) operador -> MINUS .

    INT             reduce using rule 49 (operador -> MINUS .)
    FLOAT           reduce using rule 49 (operador -> MINUS .)
    VARIABLE        reduce using rule 49 (operador -> MINUS .)


state 206

    (50) operador -> TIMES .

    INT             reduce using rule 50 (operador -> TIMES .)
    FLOAT           reduce using rule 50 (operador -> TIMES .)
    VARIABLE        reduce using rule 50 (operador -> TIMES .)


state 207

    (51) operador -> DIVIDE .

    INT             reduce using rule 51 (operador -> DIVIDE .)
    FLOAT           reduce using rule 51 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 51 (operador -> DIVIDE .)


state 208

    (52) operador -> MODULO .

    INT             reduce using rule 52 (operador -> MODULO .)
    FLOAT           reduce using rule 52 (operador -> MODULO .)
    VARIABLE        reduce using rule 52 (operador -> MODULO .)


state 209

    (53) operador -> POTENCIA .

    INT             reduce using rule 53 (operador -> POTENCIA .)
    FLOAT           reduce using rule 53 (operador -> POTENCIA .)
    VARIABLE        reduce using rule 53 (operador -> POTENCIA .)


state 210

    (162) objeto -> VARIABLE ARROW ID LPAREN . argumentos RPAREN SEMICOLON
    (144) argumentos -> . argumento
    (145) argumentos -> . argumento COMMA argumentos
    (146) argumentos -> . empty
    (147) argumento -> . type VARIABLE
    (148) argumento -> . VARIABLE EQUALS valor
    (149) argumento -> . type VARIABLE EQUALS valor
    (150) argumento -> . operaArit
    (68) empty -> .
    (151) type -> . INT_TYPE
    (152) type -> . FLOAT_TYPE
    (153) type -> . STRING_TYPE
    (154) type -> . BOOL_TYPE
    (155) type -> . ARRAY_TYPE
    (156) type -> . VOID
    (35) operaArit -> . valornumerico
    (36) operaArit -> . valornumerico operador operaArit
    (37) valornumerico -> . INT
    (38) valornumerico -> . FLOAT
    (39) valornumerico -> . VARIABLE

    VARIABLE        shift and go to state 156
    RPAREN          reduce using rule 68 (empty -> .)
    INT_TYPE        shift and go to state 158
    FLOAT_TYPE      shift and go to state 159
    STRING_TYPE     shift and go to state 160
    BOOL_TYPE       shift and go to state 161
    ARRAY_TYPE      shift and go to state 162
    VOID            shift and go to state 163
    INT             shift and go to state 164
    FLOAT           shift and go to state 165

    argumentos                     shift and go to state 276
    argumento                      shift and go to state 153
    empty                          shift and go to state 154
    type                           shift and go to state 155
    operaArit                      shift and go to state 157
    valornumerico                  shift and go to state 127

state 211

    (84) conditions -> LPAREN conditions . RPAREN
    (88) condition -> LPAREN conditions . RPAREN

    RPAREN          shift and go to state 277


state 212

    (61) imprimir -> LPAREN repiteValores RPAREN .

    SEMICOLON       reduce using rule 61 (imprimir -> LPAREN repiteValores RPAREN .)


state 213

    (32) operador_ternario -> LPAREN conditions RPAREN . QUESTION valor COLON valor
    (33) operador_ternario -> LPAREN conditions RPAREN . QUESTION COLON valor

    QUESTION        shift and go to state 278


state 214

    (86) condition -> valor opSymbol . valor
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    valor                          shift and go to state 279
    llamadaFuncion                 shift and go to state 94

state 215

    (89) opSymbol -> EQ .

    INT             reduce using rule 89 (opSymbol -> EQ .)
    VARIABLE        reduce using rule 89 (opSymbol -> EQ .)
    FLOAT           reduce using rule 89 (opSymbol -> EQ .)
    STRING          reduce using rule 89 (opSymbol -> EQ .)
    BOOL            reduce using rule 89 (opSymbol -> EQ .)
    NULL            reduce using rule 89 (opSymbol -> EQ .)
    ARRAY           reduce using rule 89 (opSymbol -> EQ .)
    ID              reduce using rule 89 (opSymbol -> EQ .)
    EMPTY           reduce using rule 89 (opSymbol -> EQ .)


state 216

    (90) opSymbol -> NEQ .

    INT             reduce using rule 90 (opSymbol -> NEQ .)
    VARIABLE        reduce using rule 90 (opSymbol -> NEQ .)
    FLOAT           reduce using rule 90 (opSymbol -> NEQ .)
    STRING          reduce using rule 90 (opSymbol -> NEQ .)
    BOOL            reduce using rule 90 (opSymbol -> NEQ .)
    NULL            reduce using rule 90 (opSymbol -> NEQ .)
    ARRAY           reduce using rule 90 (opSymbol -> NEQ .)
    ID              reduce using rule 90 (opSymbol -> NEQ .)
    EMPTY           reduce using rule 90 (opSymbol -> NEQ .)


state 217

    (91) opSymbol -> STRICTEQ .

    INT             reduce using rule 91 (opSymbol -> STRICTEQ .)
    VARIABLE        reduce using rule 91 (opSymbol -> STRICTEQ .)
    FLOAT           reduce using rule 91 (opSymbol -> STRICTEQ .)
    STRING          reduce using rule 91 (opSymbol -> STRICTEQ .)
    BOOL            reduce using rule 91 (opSymbol -> STRICTEQ .)
    NULL            reduce using rule 91 (opSymbol -> STRICTEQ .)
    ARRAY           reduce using rule 91 (opSymbol -> STRICTEQ .)
    ID              reduce using rule 91 (opSymbol -> STRICTEQ .)
    EMPTY           reduce using rule 91 (opSymbol -> STRICTEQ .)


state 218

    (92) opSymbol -> STRICTNEQ .

    INT             reduce using rule 92 (opSymbol -> STRICTNEQ .)
    VARIABLE        reduce using rule 92 (opSymbol -> STRICTNEQ .)
    FLOAT           reduce using rule 92 (opSymbol -> STRICTNEQ .)
    STRING          reduce using rule 92 (opSymbol -> STRICTNEQ .)
    BOOL            reduce using rule 92 (opSymbol -> STRICTNEQ .)
    NULL            reduce using rule 92 (opSymbol -> STRICTNEQ .)
    ARRAY           reduce using rule 92 (opSymbol -> STRICTNEQ .)
    ID              reduce using rule 92 (opSymbol -> STRICTNEQ .)
    EMPTY           reduce using rule 92 (opSymbol -> STRICTNEQ .)


state 219

    (93) opSymbol -> LT .

    INT             reduce using rule 93 (opSymbol -> LT .)
    VARIABLE        reduce using rule 93 (opSymbol -> LT .)
    FLOAT           reduce using rule 93 (opSymbol -> LT .)
    STRING          reduce using rule 93 (opSymbol -> LT .)
    BOOL            reduce using rule 93 (opSymbol -> LT .)
    NULL            reduce using rule 93 (opSymbol -> LT .)
    ARRAY           reduce using rule 93 (opSymbol -> LT .)
    ID              reduce using rule 93 (opSymbol -> LT .)
    EMPTY           reduce using rule 93 (opSymbol -> LT .)


state 220

    (94) opSymbol -> GT .

    INT             reduce using rule 94 (opSymbol -> GT .)
    VARIABLE        reduce using rule 94 (opSymbol -> GT .)
    FLOAT           reduce using rule 94 (opSymbol -> GT .)
    STRING          reduce using rule 94 (opSymbol -> GT .)
    BOOL            reduce using rule 94 (opSymbol -> GT .)
    NULL            reduce using rule 94 (opSymbol -> GT .)
    ARRAY           reduce using rule 94 (opSymbol -> GT .)
    ID              reduce using rule 94 (opSymbol -> GT .)
    EMPTY           reduce using rule 94 (opSymbol -> GT .)


state 221

    (95) opSymbol -> LEQ .

    INT             reduce using rule 95 (opSymbol -> LEQ .)
    VARIABLE        reduce using rule 95 (opSymbol -> LEQ .)
    FLOAT           reduce using rule 95 (opSymbol -> LEQ .)
    STRING          reduce using rule 95 (opSymbol -> LEQ .)
    BOOL            reduce using rule 95 (opSymbol -> LEQ .)
    NULL            reduce using rule 95 (opSymbol -> LEQ .)
    ARRAY           reduce using rule 95 (opSymbol -> LEQ .)
    ID              reduce using rule 95 (opSymbol -> LEQ .)
    EMPTY           reduce using rule 95 (opSymbol -> LEQ .)


state 222

    (96) opSymbol -> GEQ .

    INT             reduce using rule 96 (opSymbol -> GEQ .)
    VARIABLE        reduce using rule 96 (opSymbol -> GEQ .)
    FLOAT           reduce using rule 96 (opSymbol -> GEQ .)
    STRING          reduce using rule 96 (opSymbol -> GEQ .)
    BOOL            reduce using rule 96 (opSymbol -> GEQ .)
    NULL            reduce using rule 96 (opSymbol -> GEQ .)
    ARRAY           reduce using rule 96 (opSymbol -> GEQ .)
    ID              reduce using rule 96 (opSymbol -> GEQ .)
    EMPTY           reduce using rule 96 (opSymbol -> GEQ .)


state 223

    (34) operador_ternario -> LPAREN VARIABLE RPAREN . QUESTION COLON valor

    QUESTION        shift and go to state 280


state 224

    (83) conditions -> condition opLogic . conditions
    (82) conditions -> . condition
    (83) conditions -> . condition opLogic conditions
    (84) conditions -> . LPAREN conditions RPAREN
    (85) condition -> . valor
    (86) condition -> . valor opSymbol valor
    (87) condition -> . NOT condition
    (88) condition -> . LPAREN conditions RPAREN
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 137
    NOT             shift and go to state 144
    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    condition                      shift and go to state 143
    conditions                     shift and go to state 281
    valor                          shift and go to state 181
    llamadaFuncion                 shift and go to state 94

state 225

    (97) opLogic -> AND .

    LPAREN          reduce using rule 97 (opLogic -> AND .)
    NOT             reduce using rule 97 (opLogic -> AND .)
    INT             reduce using rule 97 (opLogic -> AND .)
    VARIABLE        reduce using rule 97 (opLogic -> AND .)
    FLOAT           reduce using rule 97 (opLogic -> AND .)
    STRING          reduce using rule 97 (opLogic -> AND .)
    BOOL            reduce using rule 97 (opLogic -> AND .)
    NULL            reduce using rule 97 (opLogic -> AND .)
    ARRAY           reduce using rule 97 (opLogic -> AND .)
    ID              reduce using rule 97 (opLogic -> AND .)
    EMPTY           reduce using rule 97 (opLogic -> AND .)


state 226

    (98) opLogic -> LOGICAL_AND .

    LPAREN          reduce using rule 98 (opLogic -> LOGICAL_AND .)
    NOT             reduce using rule 98 (opLogic -> LOGICAL_AND .)
    INT             reduce using rule 98 (opLogic -> LOGICAL_AND .)
    VARIABLE        reduce using rule 98 (opLogic -> LOGICAL_AND .)
    FLOAT           reduce using rule 98 (opLogic -> LOGICAL_AND .)
    STRING          reduce using rule 98 (opLogic -> LOGICAL_AND .)
    BOOL            reduce using rule 98 (opLogic -> LOGICAL_AND .)
    NULL            reduce using rule 98 (opLogic -> LOGICAL_AND .)
    ARRAY           reduce using rule 98 (opLogic -> LOGICAL_AND .)
    ID              reduce using rule 98 (opLogic -> LOGICAL_AND .)
    EMPTY           reduce using rule 98 (opLogic -> LOGICAL_AND .)


state 227

    (99) opLogic -> OR .

    LPAREN          reduce using rule 99 (opLogic -> OR .)
    NOT             reduce using rule 99 (opLogic -> OR .)
    INT             reduce using rule 99 (opLogic -> OR .)
    VARIABLE        reduce using rule 99 (opLogic -> OR .)
    FLOAT           reduce using rule 99 (opLogic -> OR .)
    STRING          reduce using rule 99 (opLogic -> OR .)
    BOOL            reduce using rule 99 (opLogic -> OR .)
    NULL            reduce using rule 99 (opLogic -> OR .)
    ARRAY           reduce using rule 99 (opLogic -> OR .)
    ID              reduce using rule 99 (opLogic -> OR .)
    EMPTY           reduce using rule 99 (opLogic -> OR .)


state 228

    (100) opLogic -> LOGICAL_OR .

    LPAREN          reduce using rule 100 (opLogic -> LOGICAL_OR .)
    NOT             reduce using rule 100 (opLogic -> LOGICAL_OR .)
    INT             reduce using rule 100 (opLogic -> LOGICAL_OR .)
    VARIABLE        reduce using rule 100 (opLogic -> LOGICAL_OR .)
    FLOAT           reduce using rule 100 (opLogic -> LOGICAL_OR .)
    STRING          reduce using rule 100 (opLogic -> LOGICAL_OR .)
    BOOL            reduce using rule 100 (opLogic -> LOGICAL_OR .)
    NULL            reduce using rule 100 (opLogic -> LOGICAL_OR .)
    ARRAY           reduce using rule 100 (opLogic -> LOGICAL_OR .)
    ID              reduce using rule 100 (opLogic -> LOGICAL_OR .)
    EMPTY           reduce using rule 100 (opLogic -> LOGICAL_OR .)


state 229

    (87) condition -> NOT condition .

    AND             reduce using rule 87 (condition -> NOT condition .)
    LOGICAL_AND     reduce using rule 87 (condition -> NOT condition .)
    OR              reduce using rule 87 (condition -> NOT condition .)
    LOGICAL_OR      reduce using rule 87 (condition -> NOT condition .)
    RPAREN          reduce using rule 87 (condition -> NOT condition .)


state 230

    (67) repiteValores -> valor COMMA repiteValores .

    SEMICOLON       reduce using rule 67 (repiteValores -> valor COMMA repiteValores .)
    RPAREN          reduce using rule 67 (repiteValores -> valor COMMA repiteValores .)
    RBRACKET        reduce using rule 67 (repiteValores -> valor COMMA repiteValores .)


state 231

    (157) try -> TRY LBRACE body RBRACE . catchs
    (158) try -> TRY LBRACE body RBRACE . catchs FINALLY LBRACE body RBRACE
    (160) catchs -> . catch
    (161) catchs -> . catch catchs
    (159) catch -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE

    CATCH           shift and go to state 284

    catchs                         shift and go to state 282
    catch                          shift and go to state 283

state 232

    (104) sentenciaList -> sentencia sentenciaList .

    RBRACE          reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    VARIABLE        reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    ECHO            reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    PRINT           reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    TRY             reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    FUNCTION        reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    RETURN          reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    ID              reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    EMPTY           reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    CLASS           reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    INTERFACE       reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    INCLUDE         reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    NAMESPACE       reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    THROW           reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    CONST           reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    THIS            reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    INT             reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    FLOAT           reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    STRING          reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    BOOL            reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    NULL            reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    ARRAY           reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    ABSTRACT        reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    PRIVATE         reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    PROTECTED       reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    PUBLIC          reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    STATIC          reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    FINAL           reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    IF              reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    WHILE           reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    DO              reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    SWITCH          reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    FOREACH         reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    FOR             reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    CLOSETAG        reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    BREAK           reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    ENDSWITCH       reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    CASE            reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)
    DEFAULT         reduce using rule 104 (sentenciaList -> sentencia sentenciaList .)


state 233

    (163) funcionDeclaration -> FUNCTION ID LPAREN argumentos . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 285


state 234

    (164) llamadaFuncion -> ID LPAREN argumentos RPAREN . SEMICOLON
    (166) llamadaFuncion -> ID LPAREN argumentos RPAREN .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 286
    VARIABLE        reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ECHO            reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    PRINT           reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    TRY             reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    FUNCTION        reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    RETURN          reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ID              reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    EMPTY           reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    CLASS           reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    INTERFACE       reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    INCLUDE         reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    NAMESPACE       reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    THROW           reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    CONST           reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    THIS            reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    INT             reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    FLOAT           reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    STRING          reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    BOOL            reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    NULL            reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ARRAY           reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ABSTRACT        reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    PRIVATE         reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    PROTECTED       reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    PUBLIC          reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    STATIC          reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    FINAL           reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    IF              reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    WHILE           reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    DO              reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    SWITCH          reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    FOREACH         reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    FOR             reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    CLOSETAG        reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    LT              reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    GT              reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    LEQ             reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    GEQ             reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    COMMA           reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    RBRACE          reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    BREAK           reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ENDSWITCH       reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    CASE            reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    DEFAULT         reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    EQ              reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    NEQ             reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    STRICTEQ        reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    STRICTNEQ       reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    RPAREN          reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    AND             reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    LOGICAL_AND     reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    OR              reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    LOGICAL_OR      reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    ARROWMAP        reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    RBRACKET        reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)
    COLON           reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .)

  ! SEMICOLON       [ reduce using rule 166 (llamadaFuncion -> ID LPAREN argumentos RPAREN .) ]


state 235

    (145) argumentos -> argumento COMMA . argumentos
    (144) argumentos -> . argumento
    (145) argumentos -> . argumento COMMA argumentos
    (146) argumentos -> . empty
    (147) argumento -> . type VARIABLE
    (148) argumento -> . VARIABLE EQUALS valor
    (149) argumento -> . type VARIABLE EQUALS valor
    (150) argumento -> . operaArit
    (68) empty -> .
    (151) type -> . INT_TYPE
    (152) type -> . FLOAT_TYPE
    (153) type -> . STRING_TYPE
    (154) type -> . BOOL_TYPE
    (155) type -> . ARRAY_TYPE
    (156) type -> . VOID
    (35) operaArit -> . valornumerico
    (36) operaArit -> . valornumerico operador operaArit
    (37) valornumerico -> . INT
    (38) valornumerico -> . FLOAT
    (39) valornumerico -> . VARIABLE

    VARIABLE        shift and go to state 156
    RPAREN          reduce using rule 68 (empty -> .)
    INT_TYPE        shift and go to state 158
    FLOAT_TYPE      shift and go to state 159
    STRING_TYPE     shift and go to state 160
    BOOL_TYPE       shift and go to state 161
    ARRAY_TYPE      shift and go to state 162
    VOID            shift and go to state 163
    INT             shift and go to state 164
    FLOAT           shift and go to state 165

    argumento                      shift and go to state 153
    argumentos                     shift and go to state 287
    empty                          shift and go to state 154
    type                           shift and go to state 155
    operaArit                      shift and go to state 157
    valornumerico                  shift and go to state 127

state 236

    (147) argumento -> type VARIABLE .
    (149) argumento -> type VARIABLE . EQUALS valor

    COMMA           reduce using rule 147 (argumento -> type VARIABLE .)
    RPAREN          reduce using rule 147 (argumento -> type VARIABLE .)
    EQUALS          shift and go to state 288


state 237

    (148) argumento -> VARIABLE EQUALS . valor
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    valor                          shift and go to state 289
    llamadaFuncion                 shift and go to state 94

state 238

    (165) llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .
    (167) llamadaFuncion -> EMPTY LPAREN argumentos RPAREN . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    VARIABLE        reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ECHO            reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    PRINT           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    TRY             reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    FUNCTION        reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    RETURN          reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ID              reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    EMPTY           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    CLASS           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    INTERFACE       reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    INCLUDE         reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    NAMESPACE       reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    THROW           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    CONST           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    THIS            reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    INT             reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    FLOAT           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    STRING          reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    BOOL            reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    NULL            reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ARRAY           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ABSTRACT        reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    PRIVATE         reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    PROTECTED       reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    PUBLIC          reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    STATIC          reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    FINAL           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    IF              reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    WHILE           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    DO              reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    SWITCH          reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    FOREACH         reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    FOR             reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    CLOSETAG        reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    LT              reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    GT              reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    LEQ             reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    GEQ             reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    COMMA           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    RBRACE          reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    BREAK           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ENDSWITCH       reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    CASE            reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    DEFAULT         reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    EQ              reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    NEQ             reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    STRICTEQ        reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    STRICTNEQ       reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    RPAREN          reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    AND             reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    LOGICAL_AND     reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    OR              reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    LOGICAL_OR      reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    ARROWMAP        reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    RBRACKET        reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    COLON           reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .)
    SEMICOLON       shift and go to state 290

  ! SEMICOLON       [ reduce using rule 165 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN .) ]


state 239

    (168) classDeclarate -> CLASS ID LBRACE classBody . RBRACE

    RBRACE          shift and go to state 291


state 240

    (172) classBody -> classMember .
    (173) classBody -> classMember . classBody
    (172) classBody -> . classMember
    (173) classBody -> . classMember classBody
    (174) classMember -> . type VARIABLE SEMICOLON
    (175) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (176) classMember -> . objectInstantiation
    (151) type -> . INT_TYPE
    (152) type -> . FLOAT_TYPE
    (153) type -> . STRING_TYPE
    (154) type -> . BOOL_TYPE
    (155) type -> . ARRAY_TYPE
    (156) type -> . VOID
    (177) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (178) objectInstantiation -> . NEW ID LPAREN RPAREN

    RBRACE          reduce using rule 172 (classBody -> classMember .)
    INT_TYPE        shift and go to state 158
    FLOAT_TYPE      shift and go to state 159
    STRING_TYPE     shift and go to state 160
    BOOL_TYPE       shift and go to state 161
    ARRAY_TYPE      shift and go to state 162
    VOID            shift and go to state 163
    NEW             shift and go to state 243

    classMember                    shift and go to state 240
    classBody                      shift and go to state 292
    type                           shift and go to state 241
    objectInstantiation            shift and go to state 242

state 241

    (174) classMember -> type . VARIABLE SEMICOLON
    (175) classMember -> type . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE

    VARIABLE        shift and go to state 293
    FUNCTION        shift and go to state 294


state 242

    (176) classMember -> objectInstantiation .

    INT_TYPE        reduce using rule 176 (classMember -> objectInstantiation .)
    FLOAT_TYPE      reduce using rule 176 (classMember -> objectInstantiation .)
    STRING_TYPE     reduce using rule 176 (classMember -> objectInstantiation .)
    BOOL_TYPE       reduce using rule 176 (classMember -> objectInstantiation .)
    ARRAY_TYPE      reduce using rule 176 (classMember -> objectInstantiation .)
    VOID            reduce using rule 176 (classMember -> objectInstantiation .)
    NEW             reduce using rule 176 (classMember -> objectInstantiation .)
    RBRACE          reduce using rule 176 (classMember -> objectInstantiation .)


state 243

    (177) objectInstantiation -> NEW . ID LPAREN argumentos RPAREN
    (178) objectInstantiation -> NEW . ID LPAREN RPAREN

    ID              shift and go to state 295


state 244

    (169) classDeclarate -> CLASS ID EXTENDS ID . LBRACE classBody RBRACE
    (180) classInterface -> CLASS ID EXTENDS ID . IMPLEMENTS impInterface LBRACE classBody RBRACE

    LBRACE          shift and go to state 296
    IMPLEMENTS      shift and go to state 297


state 245

    (183) impInterface -> ID .
    (184) impInterface -> ID . COMMA impInterface

    LBRACE          reduce using rule 183 (impInterface -> ID .)
    COMMA           shift and go to state 298


state 246

    (179) classInterface -> CLASS ID IMPLEMENTS impInterface . LBRACE classBody RBRACE

    LBRACE          shift and go to state 299


state 247

    (170) classDeclarate -> data CLASS ID LBRACE . classBody RBRACE
    (172) classBody -> . classMember
    (173) classBody -> . classMember classBody
    (174) classMember -> . type VARIABLE SEMICOLON
    (175) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (176) classMember -> . objectInstantiation
    (151) type -> . INT_TYPE
    (152) type -> . FLOAT_TYPE
    (153) type -> . STRING_TYPE
    (154) type -> . BOOL_TYPE
    (155) type -> . ARRAY_TYPE
    (156) type -> . VOID
    (177) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (178) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 158
    FLOAT_TYPE      shift and go to state 159
    STRING_TYPE     shift and go to state 160
    BOOL_TYPE       shift and go to state 161
    ARRAY_TYPE      shift and go to state 162
    VOID            shift and go to state 163
    NEW             shift and go to state 243

    classBody                      shift and go to state 300
    classMember                    shift and go to state 240
    type                           shift and go to state 241
    objectInstantiation            shift and go to state 242

state 248

    (181) classInterface -> data CLASS ID IMPLEMENTS . impInterface LBRACE classBody RBRACE
    (183) impInterface -> . ID
    (184) impInterface -> . ID COMMA impInterface

    ID              shift and go to state 245

    impInterface                   shift and go to state 301

state 249

    (182) classInterface -> data CLASS ID EXTENDS . ID IMPLEMENTS impInterface LBRACE classBody RBRACE

    ID              shift and go to state 302


state 250

    (191) interface -> INTERFACE ID LBRACE classBody . RBRACE

    RBRACE          shift and go to state 303


state 251

    (193) includes -> INCLUDE STRING DOT STRING . SEMICOLON

    SEMICOLON       shift and go to state 304


state 252

    (196) throw -> THROW NEW EXCEPTION LPAREN . repiteValores RPAREN SEMICOLON
    (66) repiteValores -> . valor
    (67) repiteValores -> . valor COMMA repiteValores
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    repiteValores                  shift and go to state 305
    valor                          shift and go to state 92
    llamadaFuncion                 shift and go to state 94

state 253

    (199) constdeclaration -> CONST ID EQUALS valor . SEMICOLON

    SEMICOLON       shift and go to state 306


state 254

    (200) thisdeclaration -> THIS ARROW ID SEMICOLON .

    VARIABLE        reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    ECHO            reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    PRINT           reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    TRY             reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    FUNCTION        reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    RETURN          reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    ID              reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    EMPTY           reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    CLASS           reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    INTERFACE       reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    INCLUDE         reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    NAMESPACE       reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    THROW           reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    CONST           reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    THIS            reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    INT             reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    FLOAT           reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    STRING          reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    BOOL            reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    NULL            reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    ARRAY           reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    ABSTRACT        reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    PRIVATE         reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    PROTECTED       reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    PUBLIC          reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    STATIC          reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    FINAL           reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    IF              reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    WHILE           reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    DO              reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    SWITCH          reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    FOREACH         reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    FOR             reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    CLOSETAG        reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    RBRACE          reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    BREAK           reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    ENDSWITCH       reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    CASE            reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)
    DEFAULT         reduce using rule 200 (thisdeclaration -> THIS ARROW ID SEMICOLON .)


state 255

    (201) thisdeclaration -> THIS ARROW ID LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 307


state 256

    (77) if -> IF LPAREN conditions RPAREN . LBRACE body RBRACE else_blocks
    (78) if -> IF LPAREN conditions RPAREN . body
    (101) body -> . sentenciaList
    (102) body -> . empty
    (103) sentenciaList -> . sentencia
    (104) sentenciaList -> . sentencia sentenciaList
    (68) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (25) sentencia -> . pluse
    (28) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (29) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (30) asignacion -> . VARIABLE EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (54) comparacion -> . valor comparador valor
    (59) impresion -> . ECHO imprimir SEMICOLON
    (60) impresion -> . PRINT imprimir SEMICOLON
    (69) estructurasPrograma -> . controlStructure
    (70) estructurasPrograma -> . dataStructure
    (157) try -> . TRY LBRACE body RBRACE catchs
    (158) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (163) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (26) returnStatement -> . RETURN valor SEMICOLON
    (27) returnStatement -> . RETURN SEMICOLON
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (168) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (170) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (171) classDeclarate -> . classInterface
    (191) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (162) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (192) includes -> . INCLUDE STRING SEMICOLON
    (193) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (194) namespace -> . NAMESPACE ID SEMICOLON
    (195) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> . THROW valor SEMICOLON
    (198) instance -> . VARIABLE INSTANCEOF ID
    (199) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (200) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (201) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (202) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (203) minuse -> . VARIABLE MINUSEQUAL INT
    (204) pluse -> . VARIABLE PLUSEQUAL INT
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (71) controlStructure -> . if
    (72) controlStructure -> . for
    (73) controlStructure -> . while
    (74) controlStructure -> . dowhile
    (75) controlStructure -> . switch
    (76) controlStructure -> . foreach
    (126) dataStructure -> . array
    (185) data -> . ABSTRACT
    (186) data -> . PRIVATE
    (187) data -> . PROTECTED
    (188) data -> . PUBLIC
    (189) data -> . STATIC
    (190) data -> . FINAL
    (179) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (181) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (77) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> . IF LPAREN conditions RPAREN body
    (105) for -> . forStatement
    (109) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (111) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (112) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (120) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (127) array -> . VARIABLE EQUALS arrays SEMICOLON
    (128) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (130) array -> . map
    (106) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (134) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for EMPTY resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for NAMESPACE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for ABSTRACT resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    LBRACE          shift and go to state 308
    RBRACE          reduce using rule 68 (empty -> .)
    CLOSETAG        reduce using rule 68 (empty -> .)
    BREAK           reduce using rule 68 (empty -> .)
    ENDSWITCH       reduce using rule 68 (empty -> .)
    CASE            reduce using rule 68 (empty -> .)
    DEFAULT         reduce using rule 68 (empty -> .)
    VARIABLE        shift and go to state 27
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 60
    PRIVATE         shift and go to state 61
    PROTECTED       shift and go to state 62
    PUBLIC          shift and go to state 63
    STATIC          shift and go to state 64
    FINAL           shift and go to state 65
    IF              shift and go to state 66
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    SWITCH          shift and go to state 70
    FOREACH         shift and go to state 71
    FOR             shift and go to state 73

  ! VARIABLE        [ reduce using rule 68 (empty -> .) ]
  ! ECHO            [ reduce using rule 68 (empty -> .) ]
  ! PRINT           [ reduce using rule 68 (empty -> .) ]
  ! TRY             [ reduce using rule 68 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 68 (empty -> .) ]
  ! RETURN          [ reduce using rule 68 (empty -> .) ]
  ! ID              [ reduce using rule 68 (empty -> .) ]
  ! EMPTY           [ reduce using rule 68 (empty -> .) ]
  ! CLASS           [ reduce using rule 68 (empty -> .) ]
  ! INTERFACE       [ reduce using rule 68 (empty -> .) ]
  ! INCLUDE         [ reduce using rule 68 (empty -> .) ]
  ! NAMESPACE       [ reduce using rule 68 (empty -> .) ]
  ! THROW           [ reduce using rule 68 (empty -> .) ]
  ! CONST           [ reduce using rule 68 (empty -> .) ]
  ! THIS            [ reduce using rule 68 (empty -> .) ]
  ! INT             [ reduce using rule 68 (empty -> .) ]
  ! FLOAT           [ reduce using rule 68 (empty -> .) ]
  ! STRING          [ reduce using rule 68 (empty -> .) ]
  ! BOOL            [ reduce using rule 68 (empty -> .) ]
  ! NULL            [ reduce using rule 68 (empty -> .) ]
  ! ARRAY           [ reduce using rule 68 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 68 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 68 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 68 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 68 (empty -> .) ]
  ! STATIC          [ reduce using rule 68 (empty -> .) ]
  ! FINAL           [ reduce using rule 68 (empty -> .) ]
  ! IF              [ reduce using rule 68 (empty -> .) ]
  ! WHILE           [ reduce using rule 68 (empty -> .) ]
  ! DO              [ reduce using rule 68 (empty -> .) ]
  ! SWITCH          [ reduce using rule 68 (empty -> .) ]
  ! FOREACH         [ reduce using rule 68 (empty -> .) ]
  ! FOR             [ reduce using rule 68 (empty -> .) ]

    body                           shift and go to state 309
    sentenciaList                  shift and go to state 148
    empty                          shift and go to state 149
    sentencia                      shift and go to state 150
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    pluse                          shift and go to state 26
    valor                          shift and go to state 28
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    if                             shift and go to state 53
    for                            shift and go to state 54
    while                          shift and go to state 55
    dowhile                        shift and go to state 56
    switch                         shift and go to state 57
    foreach                        shift and go to state 58
    array                          shift and go to state 59
    forStatement                   shift and go to state 67
    map                            shift and go to state 72

state 257

    (88) condition -> LPAREN conditions . RPAREN

    RPAREN          shift and go to state 310


state 258

    (109) while -> WHILE LPAREN condition RPAREN . LBRACE body RBRACE
    (110) while -> WHILE LPAREN condition RPAREN . LBRACE RBRACE

    LBRACE          shift and go to state 311


state 259

    (111) dowhile -> DO LBRACE body RBRACE . WHILE LPAREN condition RPAREN SEMICOLON

    WHILE           shift and go to state 312


state 260

    (112) switch -> SWITCH LPAREN valor RPAREN . LBRACE caseLists RBRACE
    (113) switch -> SWITCH LPAREN valor RPAREN . COLON caseLists ENDSWITCH SEMICOLON

    LBRACE          shift and go to state 313
    COLON           shift and go to state 314


state 261

    (120) foreach -> FOREACH LPAREN VARIABLE AS . VARIABLE RPAREN LBRACE body RBRACE

    VARIABLE        shift and go to state 315


state 262

    (106) forStatement -> FOR LPAREN forcondition RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 316


state 263

    (107) forcondition -> VARIABLE EQUALS . INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (108) forcondition -> VARIABLE EQUALS . INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    INT             shift and go to state 317


state 264

    (31) asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN . RPAREN SEMICOLON

    RPAREN          shift and go to state 318


state 265

    (195) anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN . ARROWMAP comparacion SEMICOLON

    ARROWMAP        shift and go to state 319


state 266

    (128) array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 320


state 267

    (134) map -> VARIABLE EQUALS LBRACKET maps RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 321


state 268

    (131) arrays -> LBRACKET repiteValores RBRACKET .

    SEMICOLON       reduce using rule 131 (arrays -> LBRACKET repiteValores RBRACKET .)
    COMMA           reduce using rule 131 (arrays -> LBRACKET repiteValores RBRACKET .)
    RBRACKET        reduce using rule 131 (arrays -> LBRACKET repiteValores RBRACKET .)


state 269

    (133) arrayAnidado -> arrays COMMA . arrayAnidado
    (132) arrayAnidado -> . arrays
    (133) arrayAnidado -> . arrays COMMA arrayAnidado
    (131) arrays -> . LBRACKET repiteValores RBRACKET

    LBRACKET        shift and go to state 195

    arrays                         shift and go to state 199
    arrayAnidado                   shift and go to state 322

state 270

    (137) maps -> mapArrow COMMA . maps
    (136) maps -> . mapArrow
    (137) maps -> . mapArrow COMMA maps
    (138) mapArrow -> . valor ARROWMAP valor
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    mapArrow                       shift and go to state 200
    maps                           shift and go to state 323
    valor                          shift and go to state 324
    llamadaFuncion                 shift and go to state 94

state 271

    (138) mapArrow -> valor ARROWMAP . valor
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    valor                          shift and go to state 325
    llamadaFuncion                 shift and go to state 94

state 272

    (129) array -> VARIABLE EQUALS ARRAY LPAREN repiteValores . RPAREN SEMICOLON

    RPAREN          shift and go to state 326


state 273

    (135) map -> VARIABLE EQUALS ARRAY LPAREN maps . RPAREN SEMICOLON

    RPAREN          shift and go to state 327


state 274

    (36) operaArit -> valornumerico operador operaArit .

    SEMICOLON       reduce using rule 36 (operaArit -> valornumerico operador operaArit .)
    COMMA           reduce using rule 36 (operaArit -> valornumerico operador operaArit .)
    RPAREN          reduce using rule 36 (operaArit -> valornumerico operador operaArit .)


state 275

    (39) valornumerico -> VARIABLE .

    PLUS            reduce using rule 39 (valornumerico -> VARIABLE .)
    MINUS           reduce using rule 39 (valornumerico -> VARIABLE .)
    TIMES           reduce using rule 39 (valornumerico -> VARIABLE .)
    DIVIDE          reduce using rule 39 (valornumerico -> VARIABLE .)
    MODULO          reduce using rule 39 (valornumerico -> VARIABLE .)
    POTENCIA        reduce using rule 39 (valornumerico -> VARIABLE .)
    SEMICOLON       reduce using rule 39 (valornumerico -> VARIABLE .)
    COMMA           reduce using rule 39 (valornumerico -> VARIABLE .)
    RPAREN          reduce using rule 39 (valornumerico -> VARIABLE .)


state 276

    (162) objeto -> VARIABLE ARROW ID LPAREN argumentos . RPAREN SEMICOLON

    RPAREN          shift and go to state 328


state 277

    (84) conditions -> LPAREN conditions RPAREN .
    (88) condition -> LPAREN conditions RPAREN .

  ! reduce/reduce conflict for RPAREN resolved using rule 84 (conditions -> LPAREN conditions RPAREN .)
    RPAREN          reduce using rule 84 (conditions -> LPAREN conditions RPAREN .)
    AND             reduce using rule 88 (condition -> LPAREN conditions RPAREN .)
    LOGICAL_AND     reduce using rule 88 (condition -> LPAREN conditions RPAREN .)
    OR              reduce using rule 88 (condition -> LPAREN conditions RPAREN .)
    LOGICAL_OR      reduce using rule 88 (condition -> LPAREN conditions RPAREN .)

  ! RPAREN          [ reduce using rule 88 (condition -> LPAREN conditions RPAREN .) ]


state 278

    (32) operador_ternario -> LPAREN conditions RPAREN QUESTION . valor COLON valor
    (33) operador_ternario -> LPAREN conditions RPAREN QUESTION . COLON valor
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    COLON           shift and go to state 330
    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    valor                          shift and go to state 329
    llamadaFuncion                 shift and go to state 94

state 279

    (86) condition -> valor opSymbol valor .

    AND             reduce using rule 86 (condition -> valor opSymbol valor .)
    LOGICAL_AND     reduce using rule 86 (condition -> valor opSymbol valor .)
    OR              reduce using rule 86 (condition -> valor opSymbol valor .)
    LOGICAL_OR      reduce using rule 86 (condition -> valor opSymbol valor .)
    RPAREN          reduce using rule 86 (condition -> valor opSymbol valor .)


state 280

    (34) operador_ternario -> LPAREN VARIABLE RPAREN QUESTION . COLON valor

    COLON           shift and go to state 331


state 281

    (83) conditions -> condition opLogic conditions .

    RPAREN          reduce using rule 83 (conditions -> condition opLogic conditions .)


state 282

    (157) try -> TRY LBRACE body RBRACE catchs .
    (158) try -> TRY LBRACE body RBRACE catchs . FINALLY LBRACE body RBRACE

    VARIABLE        reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    ECHO            reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    PRINT           reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    TRY             reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    FUNCTION        reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    RETURN          reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    ID              reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    EMPTY           reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    CLASS           reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    INTERFACE       reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    INCLUDE         reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    NAMESPACE       reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    THROW           reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    CONST           reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    THIS            reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    INT             reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    FLOAT           reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    STRING          reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    BOOL            reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    NULL            reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    ARRAY           reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    ABSTRACT        reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    PRIVATE         reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    PROTECTED       reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    PUBLIC          reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    STATIC          reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    FINAL           reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    IF              reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    WHILE           reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    DO              reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    SWITCH          reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    FOREACH         reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    FOR             reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    CLOSETAG        reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    RBRACE          reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    BREAK           reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    ENDSWITCH       reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    CASE            reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    DEFAULT         reduce using rule 157 (try -> TRY LBRACE body RBRACE catchs .)
    FINALLY         shift and go to state 332


state 283

    (160) catchs -> catch .
    (161) catchs -> catch . catchs
    (160) catchs -> . catch
    (161) catchs -> . catch catchs
    (159) catch -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE

    FINALLY         reduce using rule 160 (catchs -> catch .)
    VARIABLE        reduce using rule 160 (catchs -> catch .)
    ECHO            reduce using rule 160 (catchs -> catch .)
    PRINT           reduce using rule 160 (catchs -> catch .)
    TRY             reduce using rule 160 (catchs -> catch .)
    FUNCTION        reduce using rule 160 (catchs -> catch .)
    RETURN          reduce using rule 160 (catchs -> catch .)
    ID              reduce using rule 160 (catchs -> catch .)
    EMPTY           reduce using rule 160 (catchs -> catch .)
    CLASS           reduce using rule 160 (catchs -> catch .)
    INTERFACE       reduce using rule 160 (catchs -> catch .)
    INCLUDE         reduce using rule 160 (catchs -> catch .)
    NAMESPACE       reduce using rule 160 (catchs -> catch .)
    THROW           reduce using rule 160 (catchs -> catch .)
    CONST           reduce using rule 160 (catchs -> catch .)
    THIS            reduce using rule 160 (catchs -> catch .)
    INT             reduce using rule 160 (catchs -> catch .)
    FLOAT           reduce using rule 160 (catchs -> catch .)
    STRING          reduce using rule 160 (catchs -> catch .)
    BOOL            reduce using rule 160 (catchs -> catch .)
    NULL            reduce using rule 160 (catchs -> catch .)
    ARRAY           reduce using rule 160 (catchs -> catch .)
    ABSTRACT        reduce using rule 160 (catchs -> catch .)
    PRIVATE         reduce using rule 160 (catchs -> catch .)
    PROTECTED       reduce using rule 160 (catchs -> catch .)
    PUBLIC          reduce using rule 160 (catchs -> catch .)
    STATIC          reduce using rule 160 (catchs -> catch .)
    FINAL           reduce using rule 160 (catchs -> catch .)
    IF              reduce using rule 160 (catchs -> catch .)
    WHILE           reduce using rule 160 (catchs -> catch .)
    DO              reduce using rule 160 (catchs -> catch .)
    SWITCH          reduce using rule 160 (catchs -> catch .)
    FOREACH         reduce using rule 160 (catchs -> catch .)
    FOR             reduce using rule 160 (catchs -> catch .)
    CLOSETAG        reduce using rule 160 (catchs -> catch .)
    RBRACE          reduce using rule 160 (catchs -> catch .)
    BREAK           reduce using rule 160 (catchs -> catch .)
    ENDSWITCH       reduce using rule 160 (catchs -> catch .)
    CASE            reduce using rule 160 (catchs -> catch .)
    DEFAULT         reduce using rule 160 (catchs -> catch .)
    CATCH           shift and go to state 284

    catch                          shift and go to state 283
    catchs                         shift and go to state 333

state 284

    (159) catch -> CATCH . LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 334


state 285

    (163) funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 335


state 286

    (164) llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .

    VARIABLE        reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ECHO            reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    PRINT           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    TRY             reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    RETURN          reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ID              reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    EMPTY           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    CLASS           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    THROW           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    CONST           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    THIS            reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    INT             reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FLOAT           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    STRING          reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    BOOL            reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    NULL            reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ARRAY           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    STATIC          reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FINAL           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    IF              reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    WHILE           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    DO              reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    SWITCH          reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FOREACH         reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    FOR             reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    LT              reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    GT              reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    LEQ             reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    GEQ             reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    COMMA           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    RBRACE          reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    BREAK           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    CASE            reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    EQ              reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    NEQ             reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    STRICTEQ        reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    STRICTNEQ       reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    RPAREN          reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    AND             reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    LOGICAL_AND     reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    OR              reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    LOGICAL_OR      reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    ARROWMAP        reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)
    COLON           reduce using rule 164 (llamadaFuncion -> ID LPAREN argumentos RPAREN SEMICOLON .)


state 287

    (145) argumentos -> argumento COMMA argumentos .

    RPAREN          reduce using rule 145 (argumentos -> argumento COMMA argumentos .)


state 288

    (149) argumento -> type VARIABLE EQUALS . valor
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    valor                          shift and go to state 336
    llamadaFuncion                 shift and go to state 94

state 289

    (148) argumento -> VARIABLE EQUALS valor .

    COMMA           reduce using rule 148 (argumento -> VARIABLE EQUALS valor .)
    RPAREN          reduce using rule 148 (argumento -> VARIABLE EQUALS valor .)


state 290

    (167) llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .

    VARIABLE        reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ECHO            reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    PRINT           reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    TRY             reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    RETURN          reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ID              reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    EMPTY           reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    CLASS           reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    THROW           reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    CONST           reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    THIS            reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    INT             reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    FLOAT           reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    STRING          reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    BOOL            reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    NULL            reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ARRAY           reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    STATIC          reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    FINAL           reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    IF              reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    WHILE           reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    DO              reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    SWITCH          reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    FOREACH         reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    FOR             reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    LT              reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    GT              reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    LEQ             reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    GEQ             reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    COMMA           reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    RBRACE          reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    BREAK           reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    CASE            reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    EQ              reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    NEQ             reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    STRICTEQ        reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    STRICTNEQ       reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    RPAREN          reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    AND             reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    LOGICAL_AND     reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    OR              reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    LOGICAL_OR      reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    ARROWMAP        reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)
    COLON           reduce using rule 167 (llamadaFuncion -> EMPTY LPAREN argumentos RPAREN SEMICOLON .)


state 291

    (168) classDeclarate -> CLASS ID LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    ECHO            reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    PRINT           reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    TRY             reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    RETURN          reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    ID              reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    CLASS           reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    THROW           reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    CONST           reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    THIS            reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    INT             reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    STRING          reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    BOOL            reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    NULL            reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    STATIC          reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    FINAL           reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    IF              reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    WHILE           reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    DO              reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    FOR             reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    BREAK           reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    CASE            reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 168 (classDeclarate -> CLASS ID LBRACE classBody RBRACE .)


state 292

    (173) classBody -> classMember classBody .

    RBRACE          reduce using rule 173 (classBody -> classMember classBody .)


state 293

    (174) classMember -> type VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 337


state 294

    (175) classMember -> type FUNCTION . ID LPAREN argumentos RPAREN LBRACE body RBRACE

    ID              shift and go to state 338


state 295

    (177) objectInstantiation -> NEW ID . LPAREN argumentos RPAREN
    (178) objectInstantiation -> NEW ID . LPAREN RPAREN

    LPAREN          shift and go to state 339


state 296

    (169) classDeclarate -> CLASS ID EXTENDS ID LBRACE . classBody RBRACE
    (172) classBody -> . classMember
    (173) classBody -> . classMember classBody
    (174) classMember -> . type VARIABLE SEMICOLON
    (175) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (176) classMember -> . objectInstantiation
    (151) type -> . INT_TYPE
    (152) type -> . FLOAT_TYPE
    (153) type -> . STRING_TYPE
    (154) type -> . BOOL_TYPE
    (155) type -> . ARRAY_TYPE
    (156) type -> . VOID
    (177) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (178) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 158
    FLOAT_TYPE      shift and go to state 159
    STRING_TYPE     shift and go to state 160
    BOOL_TYPE       shift and go to state 161
    ARRAY_TYPE      shift and go to state 162
    VOID            shift and go to state 163
    NEW             shift and go to state 243

    classBody                      shift and go to state 340
    classMember                    shift and go to state 240
    type                           shift and go to state 241
    objectInstantiation            shift and go to state 242

state 297

    (180) classInterface -> CLASS ID EXTENDS ID IMPLEMENTS . impInterface LBRACE classBody RBRACE
    (183) impInterface -> . ID
    (184) impInterface -> . ID COMMA impInterface

    ID              shift and go to state 245

    impInterface                   shift and go to state 341

state 298

    (184) impInterface -> ID COMMA . impInterface
    (183) impInterface -> . ID
    (184) impInterface -> . ID COMMA impInterface

    ID              shift and go to state 245

    impInterface                   shift and go to state 342

state 299

    (179) classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE . classBody RBRACE
    (172) classBody -> . classMember
    (173) classBody -> . classMember classBody
    (174) classMember -> . type VARIABLE SEMICOLON
    (175) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (176) classMember -> . objectInstantiation
    (151) type -> . INT_TYPE
    (152) type -> . FLOAT_TYPE
    (153) type -> . STRING_TYPE
    (154) type -> . BOOL_TYPE
    (155) type -> . ARRAY_TYPE
    (156) type -> . VOID
    (177) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (178) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 158
    FLOAT_TYPE      shift and go to state 159
    STRING_TYPE     shift and go to state 160
    BOOL_TYPE       shift and go to state 161
    ARRAY_TYPE      shift and go to state 162
    VOID            shift and go to state 163
    NEW             shift and go to state 243

    classBody                      shift and go to state 343
    classMember                    shift and go to state 240
    type                           shift and go to state 241
    objectInstantiation            shift and go to state 242

state 300

    (170) classDeclarate -> data CLASS ID LBRACE classBody . RBRACE

    RBRACE          shift and go to state 344


state 301

    (181) classInterface -> data CLASS ID IMPLEMENTS impInterface . LBRACE classBody RBRACE

    LBRACE          shift and go to state 345


state 302

    (182) classInterface -> data CLASS ID EXTENDS ID . IMPLEMENTS impInterface LBRACE classBody RBRACE

    IMPLEMENTS      shift and go to state 346


state 303

    (191) interface -> INTERFACE ID LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    ECHO            reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    PRINT           reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    TRY             reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    RETURN          reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    ID              reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    CLASS           reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    THROW           reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    CONST           reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    THIS            reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    INT             reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    STRING          reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    BOOL            reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    NULL            reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    STATIC          reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    FINAL           reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    IF              reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    WHILE           reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    DO              reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    FOR             reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    BREAK           reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    CASE            reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 191 (interface -> INTERFACE ID LBRACE classBody RBRACE .)


state 304

    (193) includes -> INCLUDE STRING DOT STRING SEMICOLON .

    VARIABLE        reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    ECHO            reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    PRINT           reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    TRY             reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    FUNCTION        reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    RETURN          reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    ID              reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    EMPTY           reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    CLASS           reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    INTERFACE       reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    INCLUDE         reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    NAMESPACE       reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    THROW           reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    CONST           reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    THIS            reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    INT             reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    FLOAT           reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    STRING          reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    BOOL            reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    NULL            reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    ARRAY           reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    ABSTRACT        reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    PRIVATE         reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    PROTECTED       reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    PUBLIC          reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    STATIC          reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    FINAL           reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    IF              reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    WHILE           reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    DO              reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    SWITCH          reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    FOREACH         reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    FOR             reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    CLOSETAG        reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    RBRACE          reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    BREAK           reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    ENDSWITCH       reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    CASE            reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)
    DEFAULT         reduce using rule 193 (includes -> INCLUDE STRING DOT STRING SEMICOLON .)


state 305

    (196) throw -> THROW NEW EXCEPTION LPAREN repiteValores . RPAREN SEMICOLON

    RPAREN          shift and go to state 347


state 306

    (199) constdeclaration -> CONST ID EQUALS valor SEMICOLON .

    VARIABLE        reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    ECHO            reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    PRINT           reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    TRY             reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    FUNCTION        reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    RETURN          reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    ID              reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    EMPTY           reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    CLASS           reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    INTERFACE       reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    INCLUDE         reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    NAMESPACE       reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    THROW           reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    CONST           reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    THIS            reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    INT             reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    FLOAT           reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    STRING          reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    BOOL            reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    NULL            reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    ARRAY           reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    ABSTRACT        reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    PRIVATE         reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    PROTECTED       reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    PUBLIC          reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    STATIC          reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    FINAL           reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    IF              reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    WHILE           reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    DO              reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    SWITCH          reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    FOREACH         reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    FOR             reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    CLOSETAG        reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    RBRACE          reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    BREAK           reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    ENDSWITCH       reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    CASE            reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)
    DEFAULT         reduce using rule 199 (constdeclaration -> CONST ID EQUALS valor SEMICOLON .)


state 307

    (201) thisdeclaration -> THIS ARROW ID LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 348


state 308

    (77) if -> IF LPAREN conditions RPAREN LBRACE . body RBRACE else_blocks
    (101) body -> . sentenciaList
    (102) body -> . empty
    (103) sentenciaList -> . sentencia
    (104) sentenciaList -> . sentencia sentenciaList
    (68) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (25) sentencia -> . pluse
    (28) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (29) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (30) asignacion -> . VARIABLE EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (54) comparacion -> . valor comparador valor
    (59) impresion -> . ECHO imprimir SEMICOLON
    (60) impresion -> . PRINT imprimir SEMICOLON
    (69) estructurasPrograma -> . controlStructure
    (70) estructurasPrograma -> . dataStructure
    (157) try -> . TRY LBRACE body RBRACE catchs
    (158) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (163) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (26) returnStatement -> . RETURN valor SEMICOLON
    (27) returnStatement -> . RETURN SEMICOLON
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (168) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (170) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (171) classDeclarate -> . classInterface
    (191) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (162) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (192) includes -> . INCLUDE STRING SEMICOLON
    (193) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (194) namespace -> . NAMESPACE ID SEMICOLON
    (195) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> . THROW valor SEMICOLON
    (198) instance -> . VARIABLE INSTANCEOF ID
    (199) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (200) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (201) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (202) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (203) minuse -> . VARIABLE MINUSEQUAL INT
    (204) pluse -> . VARIABLE PLUSEQUAL INT
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (71) controlStructure -> . if
    (72) controlStructure -> . for
    (73) controlStructure -> . while
    (74) controlStructure -> . dowhile
    (75) controlStructure -> . switch
    (76) controlStructure -> . foreach
    (126) dataStructure -> . array
    (185) data -> . ABSTRACT
    (186) data -> . PRIVATE
    (187) data -> . PROTECTED
    (188) data -> . PUBLIC
    (189) data -> . STATIC
    (190) data -> . FINAL
    (179) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (181) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (77) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> . IF LPAREN conditions RPAREN body
    (105) for -> . forStatement
    (109) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (111) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (112) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (120) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (127) array -> . VARIABLE EQUALS arrays SEMICOLON
    (128) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (130) array -> . map
    (106) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (134) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 68 (empty -> .)
    VARIABLE        shift and go to state 27
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 60
    PRIVATE         shift and go to state 61
    PROTECTED       shift and go to state 62
    PUBLIC          shift and go to state 63
    STATIC          shift and go to state 64
    FINAL           shift and go to state 65
    IF              shift and go to state 66
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    SWITCH          shift and go to state 70
    FOREACH         shift and go to state 71
    FOR             shift and go to state 73

    body                           shift and go to state 349
    sentenciaList                  shift and go to state 148
    empty                          shift and go to state 149
    sentencia                      shift and go to state 150
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    pluse                          shift and go to state 26
    valor                          shift and go to state 28
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    if                             shift and go to state 53
    for                            shift and go to state 54
    while                          shift and go to state 55
    dowhile                        shift and go to state 56
    switch                         shift and go to state 57
    foreach                        shift and go to state 58
    array                          shift and go to state 59
    forStatement                   shift and go to state 67
    map                            shift and go to state 72

state 309

    (78) if -> IF LPAREN conditions RPAREN body .

    VARIABLE        reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    ECHO            reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    PRINT           reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    TRY             reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    FUNCTION        reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    RETURN          reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    ID              reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    EMPTY           reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    CLASS           reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    INTERFACE       reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    INCLUDE         reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    NAMESPACE       reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    THROW           reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    CONST           reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    THIS            reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    INT             reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    FLOAT           reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    STRING          reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    BOOL            reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    NULL            reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    ARRAY           reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    ABSTRACT        reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    PRIVATE         reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    PROTECTED       reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    PUBLIC          reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    STATIC          reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    FINAL           reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    IF              reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    WHILE           reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    DO              reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    SWITCH          reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    FOREACH         reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    FOR             reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    CLOSETAG        reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    RBRACE          reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    BREAK           reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    ENDSWITCH       reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    CASE            reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)
    DEFAULT         reduce using rule 78 (if -> IF LPAREN conditions RPAREN body .)


state 310

    (88) condition -> LPAREN conditions RPAREN .

    RPAREN          reduce using rule 88 (condition -> LPAREN conditions RPAREN .)
    AND             reduce using rule 88 (condition -> LPAREN conditions RPAREN .)
    LOGICAL_AND     reduce using rule 88 (condition -> LPAREN conditions RPAREN .)
    OR              reduce using rule 88 (condition -> LPAREN conditions RPAREN .)
    LOGICAL_OR      reduce using rule 88 (condition -> LPAREN conditions RPAREN .)


state 311

    (109) while -> WHILE LPAREN condition RPAREN LBRACE . body RBRACE
    (110) while -> WHILE LPAREN condition RPAREN LBRACE . RBRACE
    (101) body -> . sentenciaList
    (102) body -> . empty
    (103) sentenciaList -> . sentencia
    (104) sentenciaList -> . sentencia sentenciaList
    (68) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (25) sentencia -> . pluse
    (28) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (29) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (30) asignacion -> . VARIABLE EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (54) comparacion -> . valor comparador valor
    (59) impresion -> . ECHO imprimir SEMICOLON
    (60) impresion -> . PRINT imprimir SEMICOLON
    (69) estructurasPrograma -> . controlStructure
    (70) estructurasPrograma -> . dataStructure
    (157) try -> . TRY LBRACE body RBRACE catchs
    (158) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (163) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (26) returnStatement -> . RETURN valor SEMICOLON
    (27) returnStatement -> . RETURN SEMICOLON
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (168) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (170) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (171) classDeclarate -> . classInterface
    (191) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (162) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (192) includes -> . INCLUDE STRING SEMICOLON
    (193) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (194) namespace -> . NAMESPACE ID SEMICOLON
    (195) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> . THROW valor SEMICOLON
    (198) instance -> . VARIABLE INSTANCEOF ID
    (199) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (200) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (201) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (202) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (203) minuse -> . VARIABLE MINUSEQUAL INT
    (204) pluse -> . VARIABLE PLUSEQUAL INT
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (71) controlStructure -> . if
    (72) controlStructure -> . for
    (73) controlStructure -> . while
    (74) controlStructure -> . dowhile
    (75) controlStructure -> . switch
    (76) controlStructure -> . foreach
    (126) dataStructure -> . array
    (185) data -> . ABSTRACT
    (186) data -> . PRIVATE
    (187) data -> . PROTECTED
    (188) data -> . PUBLIC
    (189) data -> . STATIC
    (190) data -> . FINAL
    (179) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (181) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (77) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> . IF LPAREN conditions RPAREN body
    (105) for -> . forStatement
    (109) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (111) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (112) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (120) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (127) array -> . VARIABLE EQUALS arrays SEMICOLON
    (128) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (130) array -> . map
    (106) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (134) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 351
    VARIABLE        shift and go to state 27
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 60
    PRIVATE         shift and go to state 61
    PROTECTED       shift and go to state 62
    PUBLIC          shift and go to state 63
    STATIC          shift and go to state 64
    FINAL           shift and go to state 65
    IF              shift and go to state 66
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    SWITCH          shift and go to state 70
    FOREACH         shift and go to state 71
    FOR             shift and go to state 73

  ! RBRACE          [ reduce using rule 68 (empty -> .) ]

    body                           shift and go to state 350
    sentenciaList                  shift and go to state 148
    empty                          shift and go to state 149
    sentencia                      shift and go to state 150
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    pluse                          shift and go to state 26
    valor                          shift and go to state 28
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    if                             shift and go to state 53
    for                            shift and go to state 54
    while                          shift and go to state 55
    dowhile                        shift and go to state 56
    switch                         shift and go to state 57
    foreach                        shift and go to state 58
    array                          shift and go to state 59
    forStatement                   shift and go to state 67
    map                            shift and go to state 72

state 312

    (111) dowhile -> DO LBRACE body RBRACE WHILE . LPAREN condition RPAREN SEMICOLON

    LPAREN          shift and go to state 352


state 313

    (112) switch -> SWITCH LPAREN valor RPAREN LBRACE . caseLists RBRACE
    (114) caseLists -> . cases
    (115) caseLists -> . cases default
    (116) caseLists -> . default
    (117) caseLists -> . empty
    (118) cases -> . case
    (119) cases -> . case cases
    (139) default -> . DEFAULT COLON body BREAK SEMICOLON
    (140) default -> . DEFAULT SEMICOLON body BREAK SEMICOLON
    (141) default -> . DEFAULT COLON body
    (142) default -> . DEFAULT SEMICOLON body
    (143) default -> . DEFAULT
    (68) empty -> .
    (121) case -> . CASE valor COLON body BREAK SEMICOLON
    (122) case -> . CASE valor SEMICOLON body BREAK SEMICOLON
    (123) case -> . CASE valor COLON body
    (124) case -> . CASE valor SEMICOLON
    (125) case -> . CASE valor

    DEFAULT         shift and go to state 358
    RBRACE          reduce using rule 68 (empty -> .)
    CASE            shift and go to state 359

    caseLists                      shift and go to state 353
    cases                          shift and go to state 354
    default                        shift and go to state 355
    empty                          shift and go to state 356
    case                           shift and go to state 357

state 314

    (113) switch -> SWITCH LPAREN valor RPAREN COLON . caseLists ENDSWITCH SEMICOLON
    (114) caseLists -> . cases
    (115) caseLists -> . cases default
    (116) caseLists -> . default
    (117) caseLists -> . empty
    (118) cases -> . case
    (119) cases -> . case cases
    (139) default -> . DEFAULT COLON body BREAK SEMICOLON
    (140) default -> . DEFAULT SEMICOLON body BREAK SEMICOLON
    (141) default -> . DEFAULT COLON body
    (142) default -> . DEFAULT SEMICOLON body
    (143) default -> . DEFAULT
    (68) empty -> .
    (121) case -> . CASE valor COLON body BREAK SEMICOLON
    (122) case -> . CASE valor SEMICOLON body BREAK SEMICOLON
    (123) case -> . CASE valor COLON body
    (124) case -> . CASE valor SEMICOLON
    (125) case -> . CASE valor

    DEFAULT         shift and go to state 358
    ENDSWITCH       reduce using rule 68 (empty -> .)
    CASE            shift and go to state 359

    caseLists                      shift and go to state 360
    cases                          shift and go to state 354
    default                        shift and go to state 355
    empty                          shift and go to state 356
    case                           shift and go to state 357

state 315

    (120) foreach -> FOREACH LPAREN VARIABLE AS VARIABLE . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 361


state 316

    (106) forStatement -> FOR LPAREN forcondition RPAREN LBRACE . body RBRACE
    (101) body -> . sentenciaList
    (102) body -> . empty
    (103) sentenciaList -> . sentencia
    (104) sentenciaList -> . sentencia sentenciaList
    (68) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (25) sentencia -> . pluse
    (28) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (29) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (30) asignacion -> . VARIABLE EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (54) comparacion -> . valor comparador valor
    (59) impresion -> . ECHO imprimir SEMICOLON
    (60) impresion -> . PRINT imprimir SEMICOLON
    (69) estructurasPrograma -> . controlStructure
    (70) estructurasPrograma -> . dataStructure
    (157) try -> . TRY LBRACE body RBRACE catchs
    (158) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (163) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (26) returnStatement -> . RETURN valor SEMICOLON
    (27) returnStatement -> . RETURN SEMICOLON
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (168) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (170) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (171) classDeclarate -> . classInterface
    (191) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (162) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (192) includes -> . INCLUDE STRING SEMICOLON
    (193) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (194) namespace -> . NAMESPACE ID SEMICOLON
    (195) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> . THROW valor SEMICOLON
    (198) instance -> . VARIABLE INSTANCEOF ID
    (199) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (200) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (201) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (202) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (203) minuse -> . VARIABLE MINUSEQUAL INT
    (204) pluse -> . VARIABLE PLUSEQUAL INT
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (71) controlStructure -> . if
    (72) controlStructure -> . for
    (73) controlStructure -> . while
    (74) controlStructure -> . dowhile
    (75) controlStructure -> . switch
    (76) controlStructure -> . foreach
    (126) dataStructure -> . array
    (185) data -> . ABSTRACT
    (186) data -> . PRIVATE
    (187) data -> . PROTECTED
    (188) data -> . PUBLIC
    (189) data -> . STATIC
    (190) data -> . FINAL
    (179) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (181) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (77) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> . IF LPAREN conditions RPAREN body
    (105) for -> . forStatement
    (109) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (111) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (112) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (120) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (127) array -> . VARIABLE EQUALS arrays SEMICOLON
    (128) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (130) array -> . map
    (106) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (134) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 68 (empty -> .)
    VARIABLE        shift and go to state 27
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 60
    PRIVATE         shift and go to state 61
    PROTECTED       shift and go to state 62
    PUBLIC          shift and go to state 63
    STATIC          shift and go to state 64
    FINAL           shift and go to state 65
    IF              shift and go to state 66
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    SWITCH          shift and go to state 70
    FOREACH         shift and go to state 71
    FOR             shift and go to state 73

    body                           shift and go to state 362
    sentenciaList                  shift and go to state 148
    empty                          shift and go to state 149
    sentencia                      shift and go to state 150
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    pluse                          shift and go to state 26
    valor                          shift and go to state 28
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    if                             shift and go to state 53
    for                            shift and go to state 54
    while                          shift and go to state 55
    dowhile                        shift and go to state 56
    switch                         shift and go to state 57
    foreach                        shift and go to state 58
    array                          shift and go to state 59
    forStatement                   shift and go to state 67
    map                            shift and go to state 72

state 317

    (107) forcondition -> VARIABLE EQUALS INT . SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (108) forcondition -> VARIABLE EQUALS INT . SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    SEMICOLON       shift and go to state 363


state 318

    (31) asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 364


state 319

    (195) anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP . comparacion SEMICOLON
    (54) comparacion -> . valor comparador valor
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    comparacion                    shift and go to state 365
    valor                          shift and go to state 28
    llamadaFuncion                 shift and go to state 94

state 320

    (128) array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .

    VARIABLE        reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    ECHO            reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    PRINT           reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    TRY             reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    FUNCTION        reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    RETURN          reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    ID              reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    EMPTY           reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    CLASS           reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    INTERFACE       reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    INCLUDE         reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    NAMESPACE       reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    THROW           reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    CONST           reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    THIS            reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    INT             reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    STRING          reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    BOOL            reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    NULL            reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    ARRAY           reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    ABSTRACT        reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    PRIVATE         reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    PROTECTED       reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    PUBLIC          reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    STATIC          reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    FINAL           reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    IF              reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    WHILE           reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    DO              reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    SWITCH          reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    FOREACH         reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    FOR             reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    CLOSETAG        reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    BREAK           reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    ENDSWITCH       reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    CASE            reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)
    DEFAULT         reduce using rule 128 (array -> VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON .)


state 321

    (134) map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .

    VARIABLE        reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    ECHO            reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    PRINT           reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    TRY             reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    FUNCTION        reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    RETURN          reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    ID              reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    EMPTY           reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    CLASS           reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    INTERFACE       reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    INCLUDE         reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    NAMESPACE       reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    THROW           reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    CONST           reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    THIS            reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    INT             reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    STRING          reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    BOOL            reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    NULL            reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    ARRAY           reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    ABSTRACT        reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    PRIVATE         reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    PROTECTED       reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    PUBLIC          reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    STATIC          reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    FINAL           reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    IF              reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    WHILE           reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    DO              reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    SWITCH          reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    FOREACH         reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    FOR             reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    CLOSETAG        reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    BREAK           reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    ENDSWITCH       reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    CASE            reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)
    DEFAULT         reduce using rule 134 (map -> VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON .)


state 322

    (133) arrayAnidado -> arrays COMMA arrayAnidado .

    RBRACKET        reduce using rule 133 (arrayAnidado -> arrays COMMA arrayAnidado .)


state 323

    (137) maps -> mapArrow COMMA maps .

    RBRACKET        reduce using rule 137 (maps -> mapArrow COMMA maps .)
    RPAREN          reduce using rule 137 (maps -> mapArrow COMMA maps .)


state 324

    (138) mapArrow -> valor . ARROWMAP valor

    ARROWMAP        shift and go to state 271


state 325

    (138) mapArrow -> valor ARROWMAP valor .

    COMMA           reduce using rule 138 (mapArrow -> valor ARROWMAP valor .)
    RBRACKET        reduce using rule 138 (mapArrow -> valor ARROWMAP valor .)
    RPAREN          reduce using rule 138 (mapArrow -> valor ARROWMAP valor .)


state 326

    (129) array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 366


state 327

    (135) map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 367


state 328

    (162) objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 368


state 329

    (32) operador_ternario -> LPAREN conditions RPAREN QUESTION valor . COLON valor

    COLON           shift and go to state 369


state 330

    (33) operador_ternario -> LPAREN conditions RPAREN QUESTION COLON . valor
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    valor                          shift and go to state 370
    llamadaFuncion                 shift and go to state 94

state 331

    (34) operador_ternario -> LPAREN VARIABLE RPAREN QUESTION COLON . valor
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    valor                          shift and go to state 371
    llamadaFuncion                 shift and go to state 94

state 332

    (158) try -> TRY LBRACE body RBRACE catchs FINALLY . LBRACE body RBRACE

    LBRACE          shift and go to state 372


state 333

    (161) catchs -> catch catchs .

    FINALLY         reduce using rule 161 (catchs -> catch catchs .)
    VARIABLE        reduce using rule 161 (catchs -> catch catchs .)
    ECHO            reduce using rule 161 (catchs -> catch catchs .)
    PRINT           reduce using rule 161 (catchs -> catch catchs .)
    TRY             reduce using rule 161 (catchs -> catch catchs .)
    FUNCTION        reduce using rule 161 (catchs -> catch catchs .)
    RETURN          reduce using rule 161 (catchs -> catch catchs .)
    ID              reduce using rule 161 (catchs -> catch catchs .)
    EMPTY           reduce using rule 161 (catchs -> catch catchs .)
    CLASS           reduce using rule 161 (catchs -> catch catchs .)
    INTERFACE       reduce using rule 161 (catchs -> catch catchs .)
    INCLUDE         reduce using rule 161 (catchs -> catch catchs .)
    NAMESPACE       reduce using rule 161 (catchs -> catch catchs .)
    THROW           reduce using rule 161 (catchs -> catch catchs .)
    CONST           reduce using rule 161 (catchs -> catch catchs .)
    THIS            reduce using rule 161 (catchs -> catch catchs .)
    INT             reduce using rule 161 (catchs -> catch catchs .)
    FLOAT           reduce using rule 161 (catchs -> catch catchs .)
    STRING          reduce using rule 161 (catchs -> catch catchs .)
    BOOL            reduce using rule 161 (catchs -> catch catchs .)
    NULL            reduce using rule 161 (catchs -> catch catchs .)
    ARRAY           reduce using rule 161 (catchs -> catch catchs .)
    ABSTRACT        reduce using rule 161 (catchs -> catch catchs .)
    PRIVATE         reduce using rule 161 (catchs -> catch catchs .)
    PROTECTED       reduce using rule 161 (catchs -> catch catchs .)
    PUBLIC          reduce using rule 161 (catchs -> catch catchs .)
    STATIC          reduce using rule 161 (catchs -> catch catchs .)
    FINAL           reduce using rule 161 (catchs -> catch catchs .)
    IF              reduce using rule 161 (catchs -> catch catchs .)
    WHILE           reduce using rule 161 (catchs -> catch catchs .)
    DO              reduce using rule 161 (catchs -> catch catchs .)
    SWITCH          reduce using rule 161 (catchs -> catch catchs .)
    FOREACH         reduce using rule 161 (catchs -> catch catchs .)
    FOR             reduce using rule 161 (catchs -> catch catchs .)
    CLOSETAG        reduce using rule 161 (catchs -> catch catchs .)
    RBRACE          reduce using rule 161 (catchs -> catch catchs .)
    BREAK           reduce using rule 161 (catchs -> catch catchs .)
    ENDSWITCH       reduce using rule 161 (catchs -> catch catchs .)
    CASE            reduce using rule 161 (catchs -> catch catchs .)
    DEFAULT         reduce using rule 161 (catchs -> catch catchs .)


state 334

    (159) catch -> CATCH LPAREN . EXCEPTION VARIABLE RPAREN LBRACE body RBRACE

    EXCEPTION       shift and go to state 373


state 335

    (163) funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE . body RBRACE
    (101) body -> . sentenciaList
    (102) body -> . empty
    (103) sentenciaList -> . sentencia
    (104) sentenciaList -> . sentencia sentenciaList
    (68) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (25) sentencia -> . pluse
    (28) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (29) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (30) asignacion -> . VARIABLE EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (54) comparacion -> . valor comparador valor
    (59) impresion -> . ECHO imprimir SEMICOLON
    (60) impresion -> . PRINT imprimir SEMICOLON
    (69) estructurasPrograma -> . controlStructure
    (70) estructurasPrograma -> . dataStructure
    (157) try -> . TRY LBRACE body RBRACE catchs
    (158) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (163) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (26) returnStatement -> . RETURN valor SEMICOLON
    (27) returnStatement -> . RETURN SEMICOLON
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (168) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (170) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (171) classDeclarate -> . classInterface
    (191) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (162) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (192) includes -> . INCLUDE STRING SEMICOLON
    (193) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (194) namespace -> . NAMESPACE ID SEMICOLON
    (195) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> . THROW valor SEMICOLON
    (198) instance -> . VARIABLE INSTANCEOF ID
    (199) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (200) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (201) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (202) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (203) minuse -> . VARIABLE MINUSEQUAL INT
    (204) pluse -> . VARIABLE PLUSEQUAL INT
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (71) controlStructure -> . if
    (72) controlStructure -> . for
    (73) controlStructure -> . while
    (74) controlStructure -> . dowhile
    (75) controlStructure -> . switch
    (76) controlStructure -> . foreach
    (126) dataStructure -> . array
    (185) data -> . ABSTRACT
    (186) data -> . PRIVATE
    (187) data -> . PROTECTED
    (188) data -> . PUBLIC
    (189) data -> . STATIC
    (190) data -> . FINAL
    (179) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (181) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (77) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> . IF LPAREN conditions RPAREN body
    (105) for -> . forStatement
    (109) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (111) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (112) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (120) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (127) array -> . VARIABLE EQUALS arrays SEMICOLON
    (128) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (130) array -> . map
    (106) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (134) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 68 (empty -> .)
    VARIABLE        shift and go to state 27
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 60
    PRIVATE         shift and go to state 61
    PROTECTED       shift and go to state 62
    PUBLIC          shift and go to state 63
    STATIC          shift and go to state 64
    FINAL           shift and go to state 65
    IF              shift and go to state 66
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    SWITCH          shift and go to state 70
    FOREACH         shift and go to state 71
    FOR             shift and go to state 73

    body                           shift and go to state 374
    sentenciaList                  shift and go to state 148
    empty                          shift and go to state 149
    sentencia                      shift and go to state 150
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    pluse                          shift and go to state 26
    valor                          shift and go to state 28
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    if                             shift and go to state 53
    for                            shift and go to state 54
    while                          shift and go to state 55
    dowhile                        shift and go to state 56
    switch                         shift and go to state 57
    foreach                        shift and go to state 58
    array                          shift and go to state 59
    forStatement                   shift and go to state 67
    map                            shift and go to state 72

state 336

    (149) argumento -> type VARIABLE EQUALS valor .

    COMMA           reduce using rule 149 (argumento -> type VARIABLE EQUALS valor .)
    RPAREN          reduce using rule 149 (argumento -> type VARIABLE EQUALS valor .)


state 337

    (174) classMember -> type VARIABLE SEMICOLON .

    INT_TYPE        reduce using rule 174 (classMember -> type VARIABLE SEMICOLON .)
    FLOAT_TYPE      reduce using rule 174 (classMember -> type VARIABLE SEMICOLON .)
    STRING_TYPE     reduce using rule 174 (classMember -> type VARIABLE SEMICOLON .)
    BOOL_TYPE       reduce using rule 174 (classMember -> type VARIABLE SEMICOLON .)
    ARRAY_TYPE      reduce using rule 174 (classMember -> type VARIABLE SEMICOLON .)
    VOID            reduce using rule 174 (classMember -> type VARIABLE SEMICOLON .)
    NEW             reduce using rule 174 (classMember -> type VARIABLE SEMICOLON .)
    RBRACE          reduce using rule 174 (classMember -> type VARIABLE SEMICOLON .)


state 338

    (175) classMember -> type FUNCTION ID . LPAREN argumentos RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 375


state 339

    (177) objectInstantiation -> NEW ID LPAREN . argumentos RPAREN
    (178) objectInstantiation -> NEW ID LPAREN . RPAREN
    (144) argumentos -> . argumento
    (145) argumentos -> . argumento COMMA argumentos
    (146) argumentos -> . empty
    (147) argumento -> . type VARIABLE
    (148) argumento -> . VARIABLE EQUALS valor
    (149) argumento -> . type VARIABLE EQUALS valor
    (150) argumento -> . operaArit
    (68) empty -> .
    (151) type -> . INT_TYPE
    (152) type -> . FLOAT_TYPE
    (153) type -> . STRING_TYPE
    (154) type -> . BOOL_TYPE
    (155) type -> . ARRAY_TYPE
    (156) type -> . VOID
    (35) operaArit -> . valornumerico
    (36) operaArit -> . valornumerico operador operaArit
    (37) valornumerico -> . INT
    (38) valornumerico -> . FLOAT
    (39) valornumerico -> . VARIABLE

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 377
    VARIABLE        shift and go to state 156
    INT_TYPE        shift and go to state 158
    FLOAT_TYPE      shift and go to state 159
    STRING_TYPE     shift and go to state 160
    BOOL_TYPE       shift and go to state 161
    ARRAY_TYPE      shift and go to state 162
    VOID            shift and go to state 163
    INT             shift and go to state 164
    FLOAT           shift and go to state 165

  ! RPAREN          [ reduce using rule 68 (empty -> .) ]

    argumentos                     shift and go to state 376
    argumento                      shift and go to state 153
    empty                          shift and go to state 154
    type                           shift and go to state 155
    operaArit                      shift and go to state 157
    valornumerico                  shift and go to state 127

state 340

    (169) classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody . RBRACE

    RBRACE          shift and go to state 378


state 341

    (180) classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface . LBRACE classBody RBRACE

    LBRACE          shift and go to state 379


state 342

    (184) impInterface -> ID COMMA impInterface .

    LBRACE          reduce using rule 184 (impInterface -> ID COMMA impInterface .)


state 343

    (179) classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody . RBRACE

    RBRACE          shift and go to state 380


state 344

    (170) classDeclarate -> data CLASS ID LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    ECHO            reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    PRINT           reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    TRY             reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    RETURN          reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    ID              reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    CLASS           reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    THROW           reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    CONST           reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    THIS            reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    INT             reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    STRING          reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    BOOL            reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    NULL            reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    STATIC          reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    FINAL           reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    IF              reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    WHILE           reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    DO              reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    FOR             reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    BREAK           reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    CASE            reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 170 (classDeclarate -> data CLASS ID LBRACE classBody RBRACE .)


state 345

    (181) classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE . classBody RBRACE
    (172) classBody -> . classMember
    (173) classBody -> . classMember classBody
    (174) classMember -> . type VARIABLE SEMICOLON
    (175) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (176) classMember -> . objectInstantiation
    (151) type -> . INT_TYPE
    (152) type -> . FLOAT_TYPE
    (153) type -> . STRING_TYPE
    (154) type -> . BOOL_TYPE
    (155) type -> . ARRAY_TYPE
    (156) type -> . VOID
    (177) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (178) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 158
    FLOAT_TYPE      shift and go to state 159
    STRING_TYPE     shift and go to state 160
    BOOL_TYPE       shift and go to state 161
    ARRAY_TYPE      shift and go to state 162
    VOID            shift and go to state 163
    NEW             shift and go to state 243

    classBody                      shift and go to state 381
    classMember                    shift and go to state 240
    type                           shift and go to state 241
    objectInstantiation            shift and go to state 242

state 346

    (182) classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS . impInterface LBRACE classBody RBRACE
    (183) impInterface -> . ID
    (184) impInterface -> . ID COMMA impInterface

    ID              shift and go to state 245

    impInterface                   shift and go to state 382

state 347

    (196) throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 383


state 348

    (201) thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .

    VARIABLE        reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    ECHO            reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    TRY             reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    EMPTY           reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    CLASS           reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    THROW           reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    CONST           reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    THIS            reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    INT             reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    STRING          reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    BOOL            reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    NULL            reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    STATIC          reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    FINAL           reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    DO              reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    SWITCH          reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    FOREACH         reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    BREAK           reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    CASE            reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 201 (thisdeclaration -> THIS ARROW ID LPAREN RPAREN SEMICOLON .)


state 349

    (77) if -> IF LPAREN conditions RPAREN LBRACE body . RBRACE else_blocks

    RBRACE          shift and go to state 384


state 350

    (109) while -> WHILE LPAREN condition RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 385


state 351

    (110) while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .

    VARIABLE        reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ECHO            reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    PRINT           reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    TRY             reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FUNCTION        reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ID              reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    EMPTY           reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    CLASS           reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    INTERFACE       reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    INCLUDE         reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    NAMESPACE       reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    THROW           reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    CONST           reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    THIS            reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    INT             reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FLOAT           reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    STRING          reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    BOOL            reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    NULL            reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ARRAY           reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ABSTRACT        reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    PRIVATE         reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    PROTECTED       reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    PUBLIC          reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    STATIC          reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FINAL           reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    IF              reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    WHILE           reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    DO              reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    SWITCH          reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FOREACH         reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    FOR             reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    CLOSETAG        reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    RBRACE          reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    BREAK           reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    ENDSWITCH       reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    CASE            reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)
    DEFAULT         reduce using rule 110 (while -> WHILE LPAREN condition RPAREN LBRACE RBRACE .)


state 352

    (111) dowhile -> DO LBRACE body RBRACE WHILE LPAREN . condition RPAREN SEMICOLON
    (85) condition -> . valor
    (86) condition -> . valor opSymbol valor
    (87) condition -> . NOT condition
    (88) condition -> . LPAREN conditions RPAREN
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    NOT             shift and go to state 144
    LPAREN          shift and go to state 182
    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    condition                      shift and go to state 386
    valor                          shift and go to state 181
    llamadaFuncion                 shift and go to state 94

state 353

    (112) switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists . RBRACE

    RBRACE          shift and go to state 387


state 354

    (114) caseLists -> cases .
    (115) caseLists -> cases . default
    (139) default -> . DEFAULT COLON body BREAK SEMICOLON
    (140) default -> . DEFAULT SEMICOLON body BREAK SEMICOLON
    (141) default -> . DEFAULT COLON body
    (142) default -> . DEFAULT SEMICOLON body
    (143) default -> . DEFAULT

    RBRACE          reduce using rule 114 (caseLists -> cases .)
    ENDSWITCH       reduce using rule 114 (caseLists -> cases .)
    DEFAULT         shift and go to state 358

    default                        shift and go to state 388

state 355

    (116) caseLists -> default .

    RBRACE          reduce using rule 116 (caseLists -> default .)
    ENDSWITCH       reduce using rule 116 (caseLists -> default .)


state 356

    (117) caseLists -> empty .

    RBRACE          reduce using rule 117 (caseLists -> empty .)
    ENDSWITCH       reduce using rule 117 (caseLists -> empty .)


state 357

    (118) cases -> case .
    (119) cases -> case . cases
    (118) cases -> . case
    (119) cases -> . case cases
    (121) case -> . CASE valor COLON body BREAK SEMICOLON
    (122) case -> . CASE valor SEMICOLON body BREAK SEMICOLON
    (123) case -> . CASE valor COLON body
    (124) case -> . CASE valor SEMICOLON
    (125) case -> . CASE valor

    DEFAULT         reduce using rule 118 (cases -> case .)
    RBRACE          reduce using rule 118 (cases -> case .)
    ENDSWITCH       reduce using rule 118 (cases -> case .)
    CASE            shift and go to state 359

    case                           shift and go to state 357
    cases                          shift and go to state 389

state 358

    (139) default -> DEFAULT . COLON body BREAK SEMICOLON
    (140) default -> DEFAULT . SEMICOLON body BREAK SEMICOLON
    (141) default -> DEFAULT . COLON body
    (142) default -> DEFAULT . SEMICOLON body
    (143) default -> DEFAULT .

    COLON           shift and go to state 390
    SEMICOLON       shift and go to state 391
    RBRACE          reduce using rule 143 (default -> DEFAULT .)
    ENDSWITCH       reduce using rule 143 (default -> DEFAULT .)


state 359

    (121) case -> CASE . valor COLON body BREAK SEMICOLON
    (122) case -> CASE . valor SEMICOLON body BREAK SEMICOLON
    (123) case -> CASE . valor COLON body
    (124) case -> CASE . valor SEMICOLON
    (125) case -> CASE . valor
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    valor                          shift and go to state 392
    llamadaFuncion                 shift and go to state 94

state 360

    (113) switch -> SWITCH LPAREN valor RPAREN COLON caseLists . ENDSWITCH SEMICOLON

    ENDSWITCH       shift and go to state 393


state 361

    (120) foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 394


state 362

    (106) forStatement -> FOR LPAREN forcondition RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 395


state 363

    (107) forcondition -> VARIABLE EQUALS INT SEMICOLON . VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (108) forcondition -> VARIABLE EQUALS INT SEMICOLON . VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS

    VARIABLE        shift and go to state 396


state 364

    (31) asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .

    VARIABLE        reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ECHO            reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    PRINT           reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    TRY             reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    RETURN          reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ID              reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    EMPTY           reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    CLASS           reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    THROW           reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    CONST           reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    THIS            reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    INT             reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    STRING          reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    BOOL            reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    NULL            reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ARRAY           reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    STATIC          reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FINAL           reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    IF              reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    WHILE           reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    DO              reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    SWITCH          reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FOREACH         reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FOR             reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    BREAK           reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    CASE            reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 31 (asignacion_fgets -> VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON .)


state 365

    (195) anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion . SEMICOLON

    SEMICOLON       shift and go to state 397


state 366

    (129) array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .

    VARIABLE        reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    ECHO            reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    PRINT           reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    TRY             reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    RETURN          reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    ID              reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    EMPTY           reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    CLASS           reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    THROW           reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    CONST           reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    THIS            reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    INT             reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    FLOAT           reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    STRING          reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    BOOL            reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    NULL            reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    ARRAY           reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    STATIC          reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    FINAL           reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    IF              reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    WHILE           reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    DO              reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    SWITCH          reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    FOREACH         reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    FOR             reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    RBRACE          reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    BREAK           reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    CASE            reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 129 (array -> VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON .)


state 367

    (135) map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .

    VARIABLE        reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    ECHO            reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    PRINT           reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    TRY             reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    RETURN          reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    ID              reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    EMPTY           reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    CLASS           reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    THROW           reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    CONST           reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    THIS            reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    INT             reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    FLOAT           reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    STRING          reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    BOOL            reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    NULL            reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    ARRAY           reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    STATIC          reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    FINAL           reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    IF              reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    WHILE           reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    DO              reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    SWITCH          reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    FOREACH         reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    FOR             reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    RBRACE          reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    BREAK           reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    CASE            reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 135 (map -> VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON .)


state 368

    (162) objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .

    VARIABLE        reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    ECHO            reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    PRINT           reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    TRY             reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    RETURN          reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    ID              reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    EMPTY           reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    CLASS           reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    THROW           reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    CONST           reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    THIS            reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    INT             reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    FLOAT           reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    STRING          reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    BOOL            reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    NULL            reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    ARRAY           reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    STATIC          reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    FINAL           reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    IF              reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    WHILE           reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    DO              reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    SWITCH          reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    FOREACH         reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    FOR             reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    RBRACE          reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    BREAK           reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    CASE            reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 162 (objeto -> VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON .)


state 369

    (32) operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON . valor
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    valor                          shift and go to state 398
    llamadaFuncion                 shift and go to state 94

state 370

    (33) operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .

    SEMICOLON       reduce using rule 33 (operador_ternario -> LPAREN conditions RPAREN QUESTION COLON valor .)


state 371

    (34) operador_ternario -> LPAREN VARIABLE RPAREN QUESTION COLON valor .

    SEMICOLON       reduce using rule 34 (operador_ternario -> LPAREN VARIABLE RPAREN QUESTION COLON valor .)


state 372

    (158) try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE . body RBRACE
    (101) body -> . sentenciaList
    (102) body -> . empty
    (103) sentenciaList -> . sentencia
    (104) sentenciaList -> . sentencia sentenciaList
    (68) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (25) sentencia -> . pluse
    (28) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (29) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (30) asignacion -> . VARIABLE EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (54) comparacion -> . valor comparador valor
    (59) impresion -> . ECHO imprimir SEMICOLON
    (60) impresion -> . PRINT imprimir SEMICOLON
    (69) estructurasPrograma -> . controlStructure
    (70) estructurasPrograma -> . dataStructure
    (157) try -> . TRY LBRACE body RBRACE catchs
    (158) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (163) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (26) returnStatement -> . RETURN valor SEMICOLON
    (27) returnStatement -> . RETURN SEMICOLON
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (168) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (170) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (171) classDeclarate -> . classInterface
    (191) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (162) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (192) includes -> . INCLUDE STRING SEMICOLON
    (193) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (194) namespace -> . NAMESPACE ID SEMICOLON
    (195) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> . THROW valor SEMICOLON
    (198) instance -> . VARIABLE INSTANCEOF ID
    (199) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (200) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (201) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (202) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (203) minuse -> . VARIABLE MINUSEQUAL INT
    (204) pluse -> . VARIABLE PLUSEQUAL INT
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (71) controlStructure -> . if
    (72) controlStructure -> . for
    (73) controlStructure -> . while
    (74) controlStructure -> . dowhile
    (75) controlStructure -> . switch
    (76) controlStructure -> . foreach
    (126) dataStructure -> . array
    (185) data -> . ABSTRACT
    (186) data -> . PRIVATE
    (187) data -> . PROTECTED
    (188) data -> . PUBLIC
    (189) data -> . STATIC
    (190) data -> . FINAL
    (179) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (181) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (77) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> . IF LPAREN conditions RPAREN body
    (105) for -> . forStatement
    (109) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (111) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (112) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (120) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (127) array -> . VARIABLE EQUALS arrays SEMICOLON
    (128) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (130) array -> . map
    (106) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (134) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 68 (empty -> .)
    VARIABLE        shift and go to state 27
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 60
    PRIVATE         shift and go to state 61
    PROTECTED       shift and go to state 62
    PUBLIC          shift and go to state 63
    STATIC          shift and go to state 64
    FINAL           shift and go to state 65
    IF              shift and go to state 66
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    SWITCH          shift and go to state 70
    FOREACH         shift and go to state 71
    FOR             shift and go to state 73

    body                           shift and go to state 399
    sentenciaList                  shift and go to state 148
    empty                          shift and go to state 149
    sentencia                      shift and go to state 150
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    pluse                          shift and go to state 26
    valor                          shift and go to state 28
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    if                             shift and go to state 53
    for                            shift and go to state 54
    while                          shift and go to state 55
    dowhile                        shift and go to state 56
    switch                         shift and go to state 57
    foreach                        shift and go to state 58
    array                          shift and go to state 59
    forStatement                   shift and go to state 67
    map                            shift and go to state 72

state 373

    (159) catch -> CATCH LPAREN EXCEPTION . VARIABLE RPAREN LBRACE body RBRACE

    VARIABLE        shift and go to state 400


state 374

    (163) funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 401


state 375

    (175) classMember -> type FUNCTION ID LPAREN . argumentos RPAREN LBRACE body RBRACE
    (144) argumentos -> . argumento
    (145) argumentos -> . argumento COMMA argumentos
    (146) argumentos -> . empty
    (147) argumento -> . type VARIABLE
    (148) argumento -> . VARIABLE EQUALS valor
    (149) argumento -> . type VARIABLE EQUALS valor
    (150) argumento -> . operaArit
    (68) empty -> .
    (151) type -> . INT_TYPE
    (152) type -> . FLOAT_TYPE
    (153) type -> . STRING_TYPE
    (154) type -> . BOOL_TYPE
    (155) type -> . ARRAY_TYPE
    (156) type -> . VOID
    (35) operaArit -> . valornumerico
    (36) operaArit -> . valornumerico operador operaArit
    (37) valornumerico -> . INT
    (38) valornumerico -> . FLOAT
    (39) valornumerico -> . VARIABLE

    VARIABLE        shift and go to state 156
    RPAREN          reduce using rule 68 (empty -> .)
    INT_TYPE        shift and go to state 158
    FLOAT_TYPE      shift and go to state 159
    STRING_TYPE     shift and go to state 160
    BOOL_TYPE       shift and go to state 161
    ARRAY_TYPE      shift and go to state 162
    VOID            shift and go to state 163
    INT             shift and go to state 164
    FLOAT           shift and go to state 165

    type                           shift and go to state 155
    argumentos                     shift and go to state 402
    argumento                      shift and go to state 153
    empty                          shift and go to state 154
    operaArit                      shift and go to state 157
    valornumerico                  shift and go to state 127

state 376

    (177) objectInstantiation -> NEW ID LPAREN argumentos . RPAREN

    RPAREN          shift and go to state 403


state 377

    (178) objectInstantiation -> NEW ID LPAREN RPAREN .

    INT_TYPE        reduce using rule 178 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    FLOAT_TYPE      reduce using rule 178 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    STRING_TYPE     reduce using rule 178 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    BOOL_TYPE       reduce using rule 178 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    ARRAY_TYPE      reduce using rule 178 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    VOID            reduce using rule 178 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    NEW             reduce using rule 178 (objectInstantiation -> NEW ID LPAREN RPAREN .)
    RBRACE          reduce using rule 178 (objectInstantiation -> NEW ID LPAREN RPAREN .)


state 378

    (169) classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    ECHO            reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    PRINT           reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    TRY             reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    RETURN          reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    ID              reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    CLASS           reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    THROW           reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    CONST           reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    THIS            reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    INT             reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    STRING          reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    BOOL            reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    NULL            reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    STATIC          reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    FINAL           reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    IF              reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    WHILE           reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    DO              reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    FOR             reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    BREAK           reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    CASE            reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 169 (classDeclarate -> CLASS ID EXTENDS ID LBRACE classBody RBRACE .)


state 379

    (180) classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE . classBody RBRACE
    (172) classBody -> . classMember
    (173) classBody -> . classMember classBody
    (174) classMember -> . type VARIABLE SEMICOLON
    (175) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (176) classMember -> . objectInstantiation
    (151) type -> . INT_TYPE
    (152) type -> . FLOAT_TYPE
    (153) type -> . STRING_TYPE
    (154) type -> . BOOL_TYPE
    (155) type -> . ARRAY_TYPE
    (156) type -> . VOID
    (177) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (178) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 158
    FLOAT_TYPE      shift and go to state 159
    STRING_TYPE     shift and go to state 160
    BOOL_TYPE       shift and go to state 161
    ARRAY_TYPE      shift and go to state 162
    VOID            shift and go to state 163
    NEW             shift and go to state 243

    classBody                      shift and go to state 404
    classMember                    shift and go to state 240
    type                           shift and go to state 241
    objectInstantiation            shift and go to state 242

state 380

    (179) classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ECHO            reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRINT           reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    TRY             reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RETURN          reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ID              reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLASS           reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THROW           reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CONST           reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THIS            reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INT             reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STRING          reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BOOL            reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NULL            reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STATIC          reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FINAL           reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    IF              reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    WHILE           reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DO              reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOR             reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BREAK           reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CASE            reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 179 (classInterface -> CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)


state 381

    (181) classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody . RBRACE

    RBRACE          shift and go to state 405


state 382

    (182) classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface . LBRACE classBody RBRACE

    LBRACE          shift and go to state 406


state 383

    (196) throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .

    VARIABLE        reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    ECHO            reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    PRINT           reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    TRY             reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    RETURN          reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    ID              reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    EMPTY           reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    CLASS           reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    THROW           reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    CONST           reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    THIS            reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    INT             reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    FLOAT           reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    STRING          reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    BOOL            reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    NULL            reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    ARRAY           reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    STATIC          reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    FINAL           reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    IF              reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    WHILE           reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    DO              reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    SWITCH          reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    FOREACH         reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    FOR             reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    RBRACE          reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    BREAK           reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    CASE            reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 196 (throw -> THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON .)


state 384

    (77) if -> IF LPAREN conditions RPAREN LBRACE body RBRACE . else_blocks
    (79) else_blocks -> . ELSE LBRACE body RBRACE
    (80) else_blocks -> . ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (81) else_blocks -> . empty
    (68) empty -> .

    ELSE            shift and go to state 408
    ELSEIF          shift and go to state 409
    VARIABLE        reduce using rule 68 (empty -> .)
    ECHO            reduce using rule 68 (empty -> .)
    PRINT           reduce using rule 68 (empty -> .)
    TRY             reduce using rule 68 (empty -> .)
    FUNCTION        reduce using rule 68 (empty -> .)
    RETURN          reduce using rule 68 (empty -> .)
    ID              reduce using rule 68 (empty -> .)
    EMPTY           reduce using rule 68 (empty -> .)
    CLASS           reduce using rule 68 (empty -> .)
    INTERFACE       reduce using rule 68 (empty -> .)
    INCLUDE         reduce using rule 68 (empty -> .)
    NAMESPACE       reduce using rule 68 (empty -> .)
    THROW           reduce using rule 68 (empty -> .)
    CONST           reduce using rule 68 (empty -> .)
    THIS            reduce using rule 68 (empty -> .)
    INT             reduce using rule 68 (empty -> .)
    FLOAT           reduce using rule 68 (empty -> .)
    STRING          reduce using rule 68 (empty -> .)
    BOOL            reduce using rule 68 (empty -> .)
    NULL            reduce using rule 68 (empty -> .)
    ARRAY           reduce using rule 68 (empty -> .)
    ABSTRACT        reduce using rule 68 (empty -> .)
    PRIVATE         reduce using rule 68 (empty -> .)
    PROTECTED       reduce using rule 68 (empty -> .)
    PUBLIC          reduce using rule 68 (empty -> .)
    STATIC          reduce using rule 68 (empty -> .)
    FINAL           reduce using rule 68 (empty -> .)
    IF              reduce using rule 68 (empty -> .)
    WHILE           reduce using rule 68 (empty -> .)
    DO              reduce using rule 68 (empty -> .)
    SWITCH          reduce using rule 68 (empty -> .)
    FOREACH         reduce using rule 68 (empty -> .)
    FOR             reduce using rule 68 (empty -> .)
    CLOSETAG        reduce using rule 68 (empty -> .)
    RBRACE          reduce using rule 68 (empty -> .)
    BREAK           reduce using rule 68 (empty -> .)
    ENDSWITCH       reduce using rule 68 (empty -> .)
    CASE            reduce using rule 68 (empty -> .)
    DEFAULT         reduce using rule 68 (empty -> .)

    else_blocks                    shift and go to state 407
    empty                          shift and go to state 410

state 385

    (109) while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .

    VARIABLE        reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    TRY             reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    EMPTY           reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    CLASS           reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    INTERFACE       reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    INCLUDE         reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    THROW           reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    CONST           reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    THIS            reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    PRIVATE         reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    PROTECTED       reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    PUBLIC          reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    STATIC          reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FINAL           reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    DO              reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FOREACH         reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 109 (while -> WHILE LPAREN condition RPAREN LBRACE body RBRACE .)


state 386

    (111) dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition . RPAREN SEMICOLON

    RPAREN          shift and go to state 411


state 387

    (112) switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .

    VARIABLE        reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ECHO            reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    PRINT           reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    TRY             reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FUNCTION        reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    RETURN          reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ID              reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    EMPTY           reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    CLASS           reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    INTERFACE       reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    INCLUDE         reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    NAMESPACE       reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    THROW           reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    CONST           reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    THIS            reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    INT             reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FLOAT           reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    STRING          reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    BOOL            reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    NULL            reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ARRAY           reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ABSTRACT        reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    PRIVATE         reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    PROTECTED       reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    PUBLIC          reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    STATIC          reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FINAL           reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    IF              reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    WHILE           reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    DO              reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    SWITCH          reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FOREACH         reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    FOR             reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    CLOSETAG        reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    RBRACE          reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    BREAK           reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    ENDSWITCH       reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    CASE            reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)
    DEFAULT         reduce using rule 112 (switch -> SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE .)


state 388

    (115) caseLists -> cases default .

    RBRACE          reduce using rule 115 (caseLists -> cases default .)
    ENDSWITCH       reduce using rule 115 (caseLists -> cases default .)


state 389

    (119) cases -> case cases .

    DEFAULT         reduce using rule 119 (cases -> case cases .)
    RBRACE          reduce using rule 119 (cases -> case cases .)
    ENDSWITCH       reduce using rule 119 (cases -> case cases .)


state 390

    (139) default -> DEFAULT COLON . body BREAK SEMICOLON
    (141) default -> DEFAULT COLON . body
    (101) body -> . sentenciaList
    (102) body -> . empty
    (103) sentenciaList -> . sentencia
    (104) sentenciaList -> . sentencia sentenciaList
    (68) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (25) sentencia -> . pluse
    (28) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (29) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (30) asignacion -> . VARIABLE EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (54) comparacion -> . valor comparador valor
    (59) impresion -> . ECHO imprimir SEMICOLON
    (60) impresion -> . PRINT imprimir SEMICOLON
    (69) estructurasPrograma -> . controlStructure
    (70) estructurasPrograma -> . dataStructure
    (157) try -> . TRY LBRACE body RBRACE catchs
    (158) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (163) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (26) returnStatement -> . RETURN valor SEMICOLON
    (27) returnStatement -> . RETURN SEMICOLON
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (168) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (170) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (171) classDeclarate -> . classInterface
    (191) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (162) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (192) includes -> . INCLUDE STRING SEMICOLON
    (193) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (194) namespace -> . NAMESPACE ID SEMICOLON
    (195) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> . THROW valor SEMICOLON
    (198) instance -> . VARIABLE INSTANCEOF ID
    (199) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (200) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (201) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (202) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (203) minuse -> . VARIABLE MINUSEQUAL INT
    (204) pluse -> . VARIABLE PLUSEQUAL INT
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (71) controlStructure -> . if
    (72) controlStructure -> . for
    (73) controlStructure -> . while
    (74) controlStructure -> . dowhile
    (75) controlStructure -> . switch
    (76) controlStructure -> . foreach
    (126) dataStructure -> . array
    (185) data -> . ABSTRACT
    (186) data -> . PRIVATE
    (187) data -> . PROTECTED
    (188) data -> . PUBLIC
    (189) data -> . STATIC
    (190) data -> . FINAL
    (179) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (181) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (77) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> . IF LPAREN conditions RPAREN body
    (105) for -> . forStatement
    (109) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (111) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (112) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (120) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (127) array -> . VARIABLE EQUALS arrays SEMICOLON
    (128) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (130) array -> . map
    (106) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (134) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    BREAK           reduce using rule 68 (empty -> .)
    RBRACE          reduce using rule 68 (empty -> .)
    ENDSWITCH       reduce using rule 68 (empty -> .)
    VARIABLE        shift and go to state 27
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 60
    PRIVATE         shift and go to state 61
    PROTECTED       shift and go to state 62
    PUBLIC          shift and go to state 63
    STATIC          shift and go to state 64
    FINAL           shift and go to state 65
    IF              shift and go to state 66
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    SWITCH          shift and go to state 70
    FOREACH         shift and go to state 71
    FOR             shift and go to state 73

    body                           shift and go to state 412
    sentenciaList                  shift and go to state 148
    empty                          shift and go to state 149
    sentencia                      shift and go to state 150
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    pluse                          shift and go to state 26
    valor                          shift and go to state 28
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    if                             shift and go to state 53
    for                            shift and go to state 54
    while                          shift and go to state 55
    dowhile                        shift and go to state 56
    switch                         shift and go to state 57
    foreach                        shift and go to state 58
    array                          shift and go to state 59
    forStatement                   shift and go to state 67
    map                            shift and go to state 72

state 391

    (140) default -> DEFAULT SEMICOLON . body BREAK SEMICOLON
    (142) default -> DEFAULT SEMICOLON . body
    (101) body -> . sentenciaList
    (102) body -> . empty
    (103) sentenciaList -> . sentencia
    (104) sentenciaList -> . sentencia sentenciaList
    (68) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (25) sentencia -> . pluse
    (28) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (29) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (30) asignacion -> . VARIABLE EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (54) comparacion -> . valor comparador valor
    (59) impresion -> . ECHO imprimir SEMICOLON
    (60) impresion -> . PRINT imprimir SEMICOLON
    (69) estructurasPrograma -> . controlStructure
    (70) estructurasPrograma -> . dataStructure
    (157) try -> . TRY LBRACE body RBRACE catchs
    (158) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (163) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (26) returnStatement -> . RETURN valor SEMICOLON
    (27) returnStatement -> . RETURN SEMICOLON
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (168) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (170) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (171) classDeclarate -> . classInterface
    (191) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (162) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (192) includes -> . INCLUDE STRING SEMICOLON
    (193) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (194) namespace -> . NAMESPACE ID SEMICOLON
    (195) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> . THROW valor SEMICOLON
    (198) instance -> . VARIABLE INSTANCEOF ID
    (199) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (200) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (201) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (202) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (203) minuse -> . VARIABLE MINUSEQUAL INT
    (204) pluse -> . VARIABLE PLUSEQUAL INT
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (71) controlStructure -> . if
    (72) controlStructure -> . for
    (73) controlStructure -> . while
    (74) controlStructure -> . dowhile
    (75) controlStructure -> . switch
    (76) controlStructure -> . foreach
    (126) dataStructure -> . array
    (185) data -> . ABSTRACT
    (186) data -> . PRIVATE
    (187) data -> . PROTECTED
    (188) data -> . PUBLIC
    (189) data -> . STATIC
    (190) data -> . FINAL
    (179) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (181) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (77) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> . IF LPAREN conditions RPAREN body
    (105) for -> . forStatement
    (109) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (111) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (112) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (120) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (127) array -> . VARIABLE EQUALS arrays SEMICOLON
    (128) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (130) array -> . map
    (106) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (134) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    BREAK           reduce using rule 68 (empty -> .)
    RBRACE          reduce using rule 68 (empty -> .)
    ENDSWITCH       reduce using rule 68 (empty -> .)
    VARIABLE        shift and go to state 27
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 60
    PRIVATE         shift and go to state 61
    PROTECTED       shift and go to state 62
    PUBLIC          shift and go to state 63
    STATIC          shift and go to state 64
    FINAL           shift and go to state 65
    IF              shift and go to state 66
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    SWITCH          shift and go to state 70
    FOREACH         shift and go to state 71
    FOR             shift and go to state 73

    body                           shift and go to state 413
    sentenciaList                  shift and go to state 148
    empty                          shift and go to state 149
    sentencia                      shift and go to state 150
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    pluse                          shift and go to state 26
    valor                          shift and go to state 28
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    if                             shift and go to state 53
    for                            shift and go to state 54
    while                          shift and go to state 55
    dowhile                        shift and go to state 56
    switch                         shift and go to state 57
    foreach                        shift and go to state 58
    array                          shift and go to state 59
    forStatement                   shift and go to state 67
    map                            shift and go to state 72

state 392

    (121) case -> CASE valor . COLON body BREAK SEMICOLON
    (122) case -> CASE valor . SEMICOLON body BREAK SEMICOLON
    (123) case -> CASE valor . COLON body
    (124) case -> CASE valor . SEMICOLON
    (125) case -> CASE valor .

    COLON           shift and go to state 414
    SEMICOLON       shift and go to state 415
    CASE            reduce using rule 125 (case -> CASE valor .)
    DEFAULT         reduce using rule 125 (case -> CASE valor .)
    RBRACE          reduce using rule 125 (case -> CASE valor .)
    ENDSWITCH       reduce using rule 125 (case -> CASE valor .)


state 393

    (113) switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH . SEMICOLON

    SEMICOLON       shift and go to state 416


state 394

    (120) foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE . body RBRACE
    (101) body -> . sentenciaList
    (102) body -> . empty
    (103) sentenciaList -> . sentencia
    (104) sentenciaList -> . sentencia sentenciaList
    (68) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (25) sentencia -> . pluse
    (28) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (29) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (30) asignacion -> . VARIABLE EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (54) comparacion -> . valor comparador valor
    (59) impresion -> . ECHO imprimir SEMICOLON
    (60) impresion -> . PRINT imprimir SEMICOLON
    (69) estructurasPrograma -> . controlStructure
    (70) estructurasPrograma -> . dataStructure
    (157) try -> . TRY LBRACE body RBRACE catchs
    (158) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (163) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (26) returnStatement -> . RETURN valor SEMICOLON
    (27) returnStatement -> . RETURN SEMICOLON
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (168) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (170) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (171) classDeclarate -> . classInterface
    (191) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (162) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (192) includes -> . INCLUDE STRING SEMICOLON
    (193) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (194) namespace -> . NAMESPACE ID SEMICOLON
    (195) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> . THROW valor SEMICOLON
    (198) instance -> . VARIABLE INSTANCEOF ID
    (199) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (200) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (201) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (202) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (203) minuse -> . VARIABLE MINUSEQUAL INT
    (204) pluse -> . VARIABLE PLUSEQUAL INT
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (71) controlStructure -> . if
    (72) controlStructure -> . for
    (73) controlStructure -> . while
    (74) controlStructure -> . dowhile
    (75) controlStructure -> . switch
    (76) controlStructure -> . foreach
    (126) dataStructure -> . array
    (185) data -> . ABSTRACT
    (186) data -> . PRIVATE
    (187) data -> . PROTECTED
    (188) data -> . PUBLIC
    (189) data -> . STATIC
    (190) data -> . FINAL
    (179) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (181) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (77) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> . IF LPAREN conditions RPAREN body
    (105) for -> . forStatement
    (109) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (111) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (112) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (120) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (127) array -> . VARIABLE EQUALS arrays SEMICOLON
    (128) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (130) array -> . map
    (106) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (134) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 68 (empty -> .)
    VARIABLE        shift and go to state 27
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 60
    PRIVATE         shift and go to state 61
    PROTECTED       shift and go to state 62
    PUBLIC          shift and go to state 63
    STATIC          shift and go to state 64
    FINAL           shift and go to state 65
    IF              shift and go to state 66
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    SWITCH          shift and go to state 70
    FOREACH         shift and go to state 71
    FOR             shift and go to state 73

    body                           shift and go to state 417
    sentenciaList                  shift and go to state 148
    empty                          shift and go to state 149
    sentencia                      shift and go to state 150
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    pluse                          shift and go to state 26
    valor                          shift and go to state 28
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    if                             shift and go to state 53
    for                            shift and go to state 54
    while                          shift and go to state 55
    dowhile                        shift and go to state 56
    switch                         shift and go to state 57
    foreach                        shift and go to state 58
    array                          shift and go to state 59
    forStatement                   shift and go to state 67
    map                            shift and go to state 72

state 395

    (106) forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .

    VARIABLE        reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    TRY             reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    EMPTY           reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    CLASS           reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    INTERFACE       reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    INCLUDE         reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    THROW           reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    CONST           reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    THIS            reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    PRIVATE         reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    PROTECTED       reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    PUBLIC          reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    STATIC          reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FINAL           reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    DO              reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FOREACH         reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 106 (forStatement -> FOR LPAREN forcondition RPAREN LBRACE body RBRACE .)


state 396

    (107) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE . opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS
    (108) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE . opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS
    (89) opSymbol -> . EQ
    (90) opSymbol -> . NEQ
    (91) opSymbol -> . STRICTEQ
    (92) opSymbol -> . STRICTNEQ
    (93) opSymbol -> . LT
    (94) opSymbol -> . GT
    (95) opSymbol -> . LEQ
    (96) opSymbol -> . GEQ

    EQ              shift and go to state 215
    NEQ             shift and go to state 216
    STRICTEQ        shift and go to state 217
    STRICTNEQ       shift and go to state 218
    LT              shift and go to state 219
    GT              shift and go to state 220
    LEQ             shift and go to state 221
    GEQ             shift and go to state 222

    opSymbol                       shift and go to state 418

state 397

    (195) anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .

    VARIABLE        reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    ECHO            reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    PRINT           reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    TRY             reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    FUNCTION        reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    RETURN          reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    ID              reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    EMPTY           reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    CLASS           reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    INTERFACE       reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    INCLUDE         reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    NAMESPACE       reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    THROW           reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    CONST           reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    THIS            reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    INT             reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    FLOAT           reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    STRING          reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    BOOL            reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    NULL            reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    ARRAY           reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    ABSTRACT        reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    PRIVATE         reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    PROTECTED       reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    PUBLIC          reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    STATIC          reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    FINAL           reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    IF              reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    WHILE           reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    DO              reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    SWITCH          reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    FOREACH         reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    FOR             reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    CLOSETAG        reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    RBRACE          reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    BREAK           reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    ENDSWITCH       reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    CASE            reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)
    DEFAULT         reduce using rule 195 (anonymousFunction -> VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON .)


state 398

    (32) operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .

    SEMICOLON       reduce using rule 32 (operador_ternario -> LPAREN conditions RPAREN QUESTION valor COLON valor .)


state 399

    (158) try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body . RBRACE

    RBRACE          shift and go to state 419


state 400

    (159) catch -> CATCH LPAREN EXCEPTION VARIABLE . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 420


state 401

    (163) funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .

    VARIABLE        reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    TRY             reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    EMPTY           reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    CLASS           reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    INTERFACE       reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    INCLUDE         reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    THROW           reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    CONST           reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    THIS            reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    PRIVATE         reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    PROTECTED       reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    PUBLIC          reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    STATIC          reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FINAL           reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    DO              reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FOREACH         reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 163 (funcionDeclaration -> FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)


state 402

    (175) classMember -> type FUNCTION ID LPAREN argumentos . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 421


state 403

    (177) objectInstantiation -> NEW ID LPAREN argumentos RPAREN .

    INT_TYPE        reduce using rule 177 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    FLOAT_TYPE      reduce using rule 177 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    STRING_TYPE     reduce using rule 177 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    BOOL_TYPE       reduce using rule 177 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    ARRAY_TYPE      reduce using rule 177 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    VOID            reduce using rule 177 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    NEW             reduce using rule 177 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)
    RBRACE          reduce using rule 177 (objectInstantiation -> NEW ID LPAREN argumentos RPAREN .)


state 404

    (180) classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody . RBRACE

    RBRACE          shift and go to state 422


state 405

    (181) classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ECHO            reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRINT           reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    TRY             reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RETURN          reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ID              reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLASS           reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THROW           reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CONST           reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THIS            reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INT             reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STRING          reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BOOL            reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NULL            reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STATIC          reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FINAL           reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    IF              reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    WHILE           reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DO              reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOR             reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BREAK           reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CASE            reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 181 (classInterface -> data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)


state 406

    (182) classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE . classBody RBRACE
    (172) classBody -> . classMember
    (173) classBody -> . classMember classBody
    (174) classMember -> . type VARIABLE SEMICOLON
    (175) classMember -> . type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (176) classMember -> . objectInstantiation
    (151) type -> . INT_TYPE
    (152) type -> . FLOAT_TYPE
    (153) type -> . STRING_TYPE
    (154) type -> . BOOL_TYPE
    (155) type -> . ARRAY_TYPE
    (156) type -> . VOID
    (177) objectInstantiation -> . NEW ID LPAREN argumentos RPAREN
    (178) objectInstantiation -> . NEW ID LPAREN RPAREN

    INT_TYPE        shift and go to state 158
    FLOAT_TYPE      shift and go to state 159
    STRING_TYPE     shift and go to state 160
    BOOL_TYPE       shift and go to state 161
    ARRAY_TYPE      shift and go to state 162
    VOID            shift and go to state 163
    NEW             shift and go to state 243

    classBody                      shift and go to state 423
    classMember                    shift and go to state 240
    type                           shift and go to state 241
    objectInstantiation            shift and go to state 242

state 407

    (77) if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .

    VARIABLE        reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ECHO            reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PRINT           reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    TRY             reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FUNCTION        reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    RETURN          reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ID              reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    EMPTY           reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CLASS           reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INTERFACE       reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INCLUDE         reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    NAMESPACE       reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    THROW           reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CONST           reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    THIS            reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INT             reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FLOAT           reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    STRING          reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    BOOL            reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    NULL            reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ARRAY           reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ABSTRACT        reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PRIVATE         reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PROTECTED       reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PUBLIC          reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    STATIC          reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FINAL           reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    IF              reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    WHILE           reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    DO              reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    SWITCH          reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FOREACH         reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FOR             reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CLOSETAG        reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    RBRACE          reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    BREAK           reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ENDSWITCH       reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CASE            reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    DEFAULT         reduce using rule 77 (if -> IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)


state 408

    (79) else_blocks -> ELSE . LBRACE body RBRACE

    LBRACE          shift and go to state 424


state 409

    (80) else_blocks -> ELSEIF . LPAREN conditions RPAREN LBRACE body RBRACE else_blocks

    LPAREN          shift and go to state 425


state 410

    (81) else_blocks -> empty .

    VARIABLE        reduce using rule 81 (else_blocks -> empty .)
    ECHO            reduce using rule 81 (else_blocks -> empty .)
    PRINT           reduce using rule 81 (else_blocks -> empty .)
    TRY             reduce using rule 81 (else_blocks -> empty .)
    FUNCTION        reduce using rule 81 (else_blocks -> empty .)
    RETURN          reduce using rule 81 (else_blocks -> empty .)
    ID              reduce using rule 81 (else_blocks -> empty .)
    EMPTY           reduce using rule 81 (else_blocks -> empty .)
    CLASS           reduce using rule 81 (else_blocks -> empty .)
    INTERFACE       reduce using rule 81 (else_blocks -> empty .)
    INCLUDE         reduce using rule 81 (else_blocks -> empty .)
    NAMESPACE       reduce using rule 81 (else_blocks -> empty .)
    THROW           reduce using rule 81 (else_blocks -> empty .)
    CONST           reduce using rule 81 (else_blocks -> empty .)
    THIS            reduce using rule 81 (else_blocks -> empty .)
    INT             reduce using rule 81 (else_blocks -> empty .)
    FLOAT           reduce using rule 81 (else_blocks -> empty .)
    STRING          reduce using rule 81 (else_blocks -> empty .)
    BOOL            reduce using rule 81 (else_blocks -> empty .)
    NULL            reduce using rule 81 (else_blocks -> empty .)
    ARRAY           reduce using rule 81 (else_blocks -> empty .)
    ABSTRACT        reduce using rule 81 (else_blocks -> empty .)
    PRIVATE         reduce using rule 81 (else_blocks -> empty .)
    PROTECTED       reduce using rule 81 (else_blocks -> empty .)
    PUBLIC          reduce using rule 81 (else_blocks -> empty .)
    STATIC          reduce using rule 81 (else_blocks -> empty .)
    FINAL           reduce using rule 81 (else_blocks -> empty .)
    IF              reduce using rule 81 (else_blocks -> empty .)
    WHILE           reduce using rule 81 (else_blocks -> empty .)
    DO              reduce using rule 81 (else_blocks -> empty .)
    SWITCH          reduce using rule 81 (else_blocks -> empty .)
    FOREACH         reduce using rule 81 (else_blocks -> empty .)
    FOR             reduce using rule 81 (else_blocks -> empty .)
    CLOSETAG        reduce using rule 81 (else_blocks -> empty .)
    RBRACE          reduce using rule 81 (else_blocks -> empty .)
    BREAK           reduce using rule 81 (else_blocks -> empty .)
    ENDSWITCH       reduce using rule 81 (else_blocks -> empty .)
    CASE            reduce using rule 81 (else_blocks -> empty .)
    DEFAULT         reduce using rule 81 (else_blocks -> empty .)


state 411

    (111) dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 426


state 412

    (139) default -> DEFAULT COLON body . BREAK SEMICOLON
    (141) default -> DEFAULT COLON body .

    BREAK           shift and go to state 427
    RBRACE          reduce using rule 141 (default -> DEFAULT COLON body .)
    ENDSWITCH       reduce using rule 141 (default -> DEFAULT COLON body .)


state 413

    (140) default -> DEFAULT SEMICOLON body . BREAK SEMICOLON
    (142) default -> DEFAULT SEMICOLON body .

    BREAK           shift and go to state 428
    RBRACE          reduce using rule 142 (default -> DEFAULT SEMICOLON body .)
    ENDSWITCH       reduce using rule 142 (default -> DEFAULT SEMICOLON body .)


state 414

    (121) case -> CASE valor COLON . body BREAK SEMICOLON
    (123) case -> CASE valor COLON . body
    (101) body -> . sentenciaList
    (102) body -> . empty
    (103) sentenciaList -> . sentencia
    (104) sentenciaList -> . sentencia sentenciaList
    (68) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (25) sentencia -> . pluse
    (28) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (29) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (30) asignacion -> . VARIABLE EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (54) comparacion -> . valor comparador valor
    (59) impresion -> . ECHO imprimir SEMICOLON
    (60) impresion -> . PRINT imprimir SEMICOLON
    (69) estructurasPrograma -> . controlStructure
    (70) estructurasPrograma -> . dataStructure
    (157) try -> . TRY LBRACE body RBRACE catchs
    (158) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (163) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (26) returnStatement -> . RETURN valor SEMICOLON
    (27) returnStatement -> . RETURN SEMICOLON
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (168) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (170) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (171) classDeclarate -> . classInterface
    (191) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (162) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (192) includes -> . INCLUDE STRING SEMICOLON
    (193) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (194) namespace -> . NAMESPACE ID SEMICOLON
    (195) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> . THROW valor SEMICOLON
    (198) instance -> . VARIABLE INSTANCEOF ID
    (199) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (200) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (201) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (202) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (203) minuse -> . VARIABLE MINUSEQUAL INT
    (204) pluse -> . VARIABLE PLUSEQUAL INT
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (71) controlStructure -> . if
    (72) controlStructure -> . for
    (73) controlStructure -> . while
    (74) controlStructure -> . dowhile
    (75) controlStructure -> . switch
    (76) controlStructure -> . foreach
    (126) dataStructure -> . array
    (185) data -> . ABSTRACT
    (186) data -> . PRIVATE
    (187) data -> . PROTECTED
    (188) data -> . PUBLIC
    (189) data -> . STATIC
    (190) data -> . FINAL
    (179) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (181) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (77) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> . IF LPAREN conditions RPAREN body
    (105) for -> . forStatement
    (109) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (111) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (112) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (120) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (127) array -> . VARIABLE EQUALS arrays SEMICOLON
    (128) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (130) array -> . map
    (106) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (134) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    BREAK           reduce using rule 68 (empty -> .)
    CASE            reduce using rule 68 (empty -> .)
    DEFAULT         reduce using rule 68 (empty -> .)
    RBRACE          reduce using rule 68 (empty -> .)
    ENDSWITCH       reduce using rule 68 (empty -> .)
    VARIABLE        shift and go to state 27
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 60
    PRIVATE         shift and go to state 61
    PROTECTED       shift and go to state 62
    PUBLIC          shift and go to state 63
    STATIC          shift and go to state 64
    FINAL           shift and go to state 65
    IF              shift and go to state 66
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    SWITCH          shift and go to state 70
    FOREACH         shift and go to state 71
    FOR             shift and go to state 73

    valor                          shift and go to state 28
    body                           shift and go to state 429
    sentenciaList                  shift and go to state 148
    empty                          shift and go to state 149
    sentencia                      shift and go to state 150
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    pluse                          shift and go to state 26
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    if                             shift and go to state 53
    for                            shift and go to state 54
    while                          shift and go to state 55
    dowhile                        shift and go to state 56
    switch                         shift and go to state 57
    foreach                        shift and go to state 58
    array                          shift and go to state 59
    forStatement                   shift and go to state 67
    map                            shift and go to state 72

state 415

    (122) case -> CASE valor SEMICOLON . body BREAK SEMICOLON
    (124) case -> CASE valor SEMICOLON .
    (101) body -> . sentenciaList
    (102) body -> . empty
    (103) sentenciaList -> . sentencia
    (104) sentenciaList -> . sentencia sentenciaList
    (68) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (25) sentencia -> . pluse
    (28) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (29) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (30) asignacion -> . VARIABLE EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (54) comparacion -> . valor comparador valor
    (59) impresion -> . ECHO imprimir SEMICOLON
    (60) impresion -> . PRINT imprimir SEMICOLON
    (69) estructurasPrograma -> . controlStructure
    (70) estructurasPrograma -> . dataStructure
    (157) try -> . TRY LBRACE body RBRACE catchs
    (158) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (163) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (26) returnStatement -> . RETURN valor SEMICOLON
    (27) returnStatement -> . RETURN SEMICOLON
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (168) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (170) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (171) classDeclarate -> . classInterface
    (191) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (162) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (192) includes -> . INCLUDE STRING SEMICOLON
    (193) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (194) namespace -> . NAMESPACE ID SEMICOLON
    (195) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> . THROW valor SEMICOLON
    (198) instance -> . VARIABLE INSTANCEOF ID
    (199) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (200) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (201) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (202) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (203) minuse -> . VARIABLE MINUSEQUAL INT
    (204) pluse -> . VARIABLE PLUSEQUAL INT
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (71) controlStructure -> . if
    (72) controlStructure -> . for
    (73) controlStructure -> . while
    (74) controlStructure -> . dowhile
    (75) controlStructure -> . switch
    (76) controlStructure -> . foreach
    (126) dataStructure -> . array
    (185) data -> . ABSTRACT
    (186) data -> . PRIVATE
    (187) data -> . PROTECTED
    (188) data -> . PUBLIC
    (189) data -> . STATIC
    (190) data -> . FINAL
    (179) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (181) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (77) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> . IF LPAREN conditions RPAREN body
    (105) for -> . forStatement
    (109) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (111) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (112) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (120) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (127) array -> . VARIABLE EQUALS arrays SEMICOLON
    (128) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (130) array -> . map
    (106) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (134) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    CASE            reduce using rule 124 (case -> CASE valor SEMICOLON .)
    DEFAULT         reduce using rule 124 (case -> CASE valor SEMICOLON .)
    RBRACE          reduce using rule 124 (case -> CASE valor SEMICOLON .)
    ENDSWITCH       reduce using rule 124 (case -> CASE valor SEMICOLON .)
    BREAK           reduce using rule 68 (empty -> .)
    VARIABLE        shift and go to state 27
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 60
    PRIVATE         shift and go to state 61
    PROTECTED       shift and go to state 62
    PUBLIC          shift and go to state 63
    STATIC          shift and go to state 64
    FINAL           shift and go to state 65
    IF              shift and go to state 66
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    SWITCH          shift and go to state 70
    FOREACH         shift and go to state 71
    FOR             shift and go to state 73

    valor                          shift and go to state 28
    body                           shift and go to state 430
    sentenciaList                  shift and go to state 148
    empty                          shift and go to state 149
    sentencia                      shift and go to state 150
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    pluse                          shift and go to state 26
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    if                             shift and go to state 53
    for                            shift and go to state 54
    while                          shift and go to state 55
    dowhile                        shift and go to state 56
    switch                         shift and go to state 57
    foreach                        shift and go to state 58
    array                          shift and go to state 59
    forStatement                   shift and go to state 67
    map                            shift and go to state 72

state 416

    (113) switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .

    VARIABLE        reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ECHO            reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    PRINT           reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    TRY             reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FUNCTION        reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    RETURN          reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ID              reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    EMPTY           reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    CLASS           reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    INTERFACE       reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    INCLUDE         reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    NAMESPACE       reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    THROW           reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    CONST           reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    THIS            reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    INT             reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FLOAT           reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    STRING          reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    BOOL            reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    NULL            reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ARRAY           reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ABSTRACT        reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    PRIVATE         reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    PROTECTED       reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    PUBLIC          reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    STATIC          reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FINAL           reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    IF              reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    WHILE           reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    DO              reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    SWITCH          reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FOREACH         reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    FOR             reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    CLOSETAG        reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    RBRACE          reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    BREAK           reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    ENDSWITCH       reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    CASE            reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)
    DEFAULT         reduce using rule 113 (switch -> SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON .)


state 417

    (120) foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 431


state 418

    (107) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol . INT SEMICOLON VARIABLE DOUBLEPLUS
    (108) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol . INT SEMICOLON VARIABLE DOUBLEMINUS

    INT             shift and go to state 432


state 419

    (158) try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .

    VARIABLE        reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    ECHO            reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    PRINT           reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    TRY             reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    FUNCTION        reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    RETURN          reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    ID              reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    EMPTY           reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    CLASS           reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    INTERFACE       reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    INCLUDE         reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    THROW           reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    CONST           reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    THIS            reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    INT             reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    FLOAT           reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    STRING          reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    BOOL            reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    NULL            reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    ARRAY           reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    PRIVATE         reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    PROTECTED       reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    PUBLIC          reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    STATIC          reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    FINAL           reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    IF              reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    WHILE           reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    DO              reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    SWITCH          reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    FOREACH         reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    FOR             reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    RBRACE          reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    BREAK           reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    CASE            reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)
    DEFAULT         reduce using rule 158 (try -> TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE .)


state 420

    (159) catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 433


state 421

    (175) classMember -> type FUNCTION ID LPAREN argumentos RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 434


state 422

    (180) classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ECHO            reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRINT           reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    TRY             reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RETURN          reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ID              reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLASS           reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THROW           reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CONST           reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THIS            reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INT             reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STRING          reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BOOL            reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NULL            reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STATIC          reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FINAL           reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    IF              reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    WHILE           reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DO              reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOR             reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BREAK           reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CASE            reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 180 (classInterface -> CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)


state 423

    (182) classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody . RBRACE

    RBRACE          shift and go to state 435


state 424

    (79) else_blocks -> ELSE LBRACE . body RBRACE
    (101) body -> . sentenciaList
    (102) body -> . empty
    (103) sentenciaList -> . sentencia
    (104) sentenciaList -> . sentencia sentenciaList
    (68) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (25) sentencia -> . pluse
    (28) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (29) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (30) asignacion -> . VARIABLE EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (54) comparacion -> . valor comparador valor
    (59) impresion -> . ECHO imprimir SEMICOLON
    (60) impresion -> . PRINT imprimir SEMICOLON
    (69) estructurasPrograma -> . controlStructure
    (70) estructurasPrograma -> . dataStructure
    (157) try -> . TRY LBRACE body RBRACE catchs
    (158) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (163) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (26) returnStatement -> . RETURN valor SEMICOLON
    (27) returnStatement -> . RETURN SEMICOLON
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (168) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (170) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (171) classDeclarate -> . classInterface
    (191) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (162) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (192) includes -> . INCLUDE STRING SEMICOLON
    (193) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (194) namespace -> . NAMESPACE ID SEMICOLON
    (195) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> . THROW valor SEMICOLON
    (198) instance -> . VARIABLE INSTANCEOF ID
    (199) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (200) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (201) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (202) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (203) minuse -> . VARIABLE MINUSEQUAL INT
    (204) pluse -> . VARIABLE PLUSEQUAL INT
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (71) controlStructure -> . if
    (72) controlStructure -> . for
    (73) controlStructure -> . while
    (74) controlStructure -> . dowhile
    (75) controlStructure -> . switch
    (76) controlStructure -> . foreach
    (126) dataStructure -> . array
    (185) data -> . ABSTRACT
    (186) data -> . PRIVATE
    (187) data -> . PROTECTED
    (188) data -> . PUBLIC
    (189) data -> . STATIC
    (190) data -> . FINAL
    (179) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (181) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (77) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> . IF LPAREN conditions RPAREN body
    (105) for -> . forStatement
    (109) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (111) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (112) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (120) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (127) array -> . VARIABLE EQUALS arrays SEMICOLON
    (128) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (130) array -> . map
    (106) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (134) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 68 (empty -> .)
    VARIABLE        shift and go to state 27
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 60
    PRIVATE         shift and go to state 61
    PROTECTED       shift and go to state 62
    PUBLIC          shift and go to state 63
    STATIC          shift and go to state 64
    FINAL           shift and go to state 65
    IF              shift and go to state 66
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    SWITCH          shift and go to state 70
    FOREACH         shift and go to state 71
    FOR             shift and go to state 73

    body                           shift and go to state 436
    sentenciaList                  shift and go to state 148
    empty                          shift and go to state 149
    sentencia                      shift and go to state 150
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    pluse                          shift and go to state 26
    valor                          shift and go to state 28
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    if                             shift and go to state 53
    for                            shift and go to state 54
    while                          shift and go to state 55
    dowhile                        shift and go to state 56
    switch                         shift and go to state 57
    foreach                        shift and go to state 58
    array                          shift and go to state 59
    forStatement                   shift and go to state 67
    map                            shift and go to state 72

state 425

    (80) else_blocks -> ELSEIF LPAREN . conditions RPAREN LBRACE body RBRACE else_blocks
    (82) conditions -> . condition
    (83) conditions -> . condition opLogic conditions
    (84) conditions -> . LPAREN conditions RPAREN
    (85) condition -> . valor
    (86) condition -> . valor opSymbol valor
    (87) condition -> . NOT condition
    (88) condition -> . LPAREN conditions RPAREN
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON

    LPAREN          shift and go to state 137
    NOT             shift and go to state 144
    INT             shift and go to state 48
    VARIABLE        shift and go to state 93
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ID              shift and go to state 35
    EMPTY           shift and go to state 37

    conditions                     shift and go to state 437
    condition                      shift and go to state 143
    valor                          shift and go to state 181
    llamadaFuncion                 shift and go to state 94

state 426

    (111) dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .

    VARIABLE        reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    ECHO            reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    PRINT           reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    TRY             reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    RETURN          reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    ID              reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    EMPTY           reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    CLASS           reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    INCLUDE         reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    NAMESPACE       reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    THROW           reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    CONST           reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    THIS            reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    INT             reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    FLOAT           reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    STRING          reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    BOOL            reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    NULL            reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    ARRAY           reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    ABSTRACT        reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    STATIC          reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    FINAL           reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    IF              reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    WHILE           reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    DO              reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    SWITCH          reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    FOREACH         reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    FOR             reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    CLOSETAG        reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    RBRACE          reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    BREAK           reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    ENDSWITCH       reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    CASE            reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 111 (dowhile -> DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)


state 427

    (139) default -> DEFAULT COLON body BREAK . SEMICOLON

    SEMICOLON       shift and go to state 438


state 428

    (140) default -> DEFAULT SEMICOLON body BREAK . SEMICOLON

    SEMICOLON       shift and go to state 439


state 429

    (121) case -> CASE valor COLON body . BREAK SEMICOLON
    (123) case -> CASE valor COLON body .

    BREAK           shift and go to state 440
    CASE            reduce using rule 123 (case -> CASE valor COLON body .)
    DEFAULT         reduce using rule 123 (case -> CASE valor COLON body .)
    RBRACE          reduce using rule 123 (case -> CASE valor COLON body .)
    ENDSWITCH       reduce using rule 123 (case -> CASE valor COLON body .)


state 430

    (122) case -> CASE valor SEMICOLON body . BREAK SEMICOLON

    BREAK           shift and go to state 441


state 431

    (120) foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .

    VARIABLE        reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    TRY             reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    EMPTY           reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    CLASS           reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    INTERFACE       reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    INCLUDE         reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    THROW           reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    CONST           reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    THIS            reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    PRIVATE         reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    PROTECTED       reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    PUBLIC          reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    STATIC          reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    FINAL           reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    DO              reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    FOREACH         reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 120 (foreach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE .)


state 432

    (107) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT . SEMICOLON VARIABLE DOUBLEPLUS
    (108) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT . SEMICOLON VARIABLE DOUBLEMINUS

    SEMICOLON       shift and go to state 442


state 433

    (159) catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE . body RBRACE
    (101) body -> . sentenciaList
    (102) body -> . empty
    (103) sentenciaList -> . sentencia
    (104) sentenciaList -> . sentencia sentenciaList
    (68) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (25) sentencia -> . pluse
    (28) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (29) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (30) asignacion -> . VARIABLE EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (54) comparacion -> . valor comparador valor
    (59) impresion -> . ECHO imprimir SEMICOLON
    (60) impresion -> . PRINT imprimir SEMICOLON
    (69) estructurasPrograma -> . controlStructure
    (70) estructurasPrograma -> . dataStructure
    (157) try -> . TRY LBRACE body RBRACE catchs
    (158) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (163) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (26) returnStatement -> . RETURN valor SEMICOLON
    (27) returnStatement -> . RETURN SEMICOLON
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (168) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (170) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (171) classDeclarate -> . classInterface
    (191) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (162) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (192) includes -> . INCLUDE STRING SEMICOLON
    (193) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (194) namespace -> . NAMESPACE ID SEMICOLON
    (195) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> . THROW valor SEMICOLON
    (198) instance -> . VARIABLE INSTANCEOF ID
    (199) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (200) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (201) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (202) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (203) minuse -> . VARIABLE MINUSEQUAL INT
    (204) pluse -> . VARIABLE PLUSEQUAL INT
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (71) controlStructure -> . if
    (72) controlStructure -> . for
    (73) controlStructure -> . while
    (74) controlStructure -> . dowhile
    (75) controlStructure -> . switch
    (76) controlStructure -> . foreach
    (126) dataStructure -> . array
    (185) data -> . ABSTRACT
    (186) data -> . PRIVATE
    (187) data -> . PROTECTED
    (188) data -> . PUBLIC
    (189) data -> . STATIC
    (190) data -> . FINAL
    (179) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (181) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (77) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> . IF LPAREN conditions RPAREN body
    (105) for -> . forStatement
    (109) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (111) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (112) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (120) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (127) array -> . VARIABLE EQUALS arrays SEMICOLON
    (128) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (130) array -> . map
    (106) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (134) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 68 (empty -> .)
    VARIABLE        shift and go to state 27
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 60
    PRIVATE         shift and go to state 61
    PROTECTED       shift and go to state 62
    PUBLIC          shift and go to state 63
    STATIC          shift and go to state 64
    FINAL           shift and go to state 65
    IF              shift and go to state 66
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    SWITCH          shift and go to state 70
    FOREACH         shift and go to state 71
    FOR             shift and go to state 73

    body                           shift and go to state 443
    sentenciaList                  shift and go to state 148
    empty                          shift and go to state 149
    sentencia                      shift and go to state 150
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    pluse                          shift and go to state 26
    valor                          shift and go to state 28
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    if                             shift and go to state 53
    for                            shift and go to state 54
    while                          shift and go to state 55
    dowhile                        shift and go to state 56
    switch                         shift and go to state 57
    foreach                        shift and go to state 58
    array                          shift and go to state 59
    forStatement                   shift and go to state 67
    map                            shift and go to state 72

state 434

    (175) classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE . body RBRACE
    (101) body -> . sentenciaList
    (102) body -> . empty
    (103) sentenciaList -> . sentencia
    (104) sentenciaList -> . sentencia sentenciaList
    (68) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (25) sentencia -> . pluse
    (28) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (29) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (30) asignacion -> . VARIABLE EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (54) comparacion -> . valor comparador valor
    (59) impresion -> . ECHO imprimir SEMICOLON
    (60) impresion -> . PRINT imprimir SEMICOLON
    (69) estructurasPrograma -> . controlStructure
    (70) estructurasPrograma -> . dataStructure
    (157) try -> . TRY LBRACE body RBRACE catchs
    (158) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (163) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (26) returnStatement -> . RETURN valor SEMICOLON
    (27) returnStatement -> . RETURN SEMICOLON
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (168) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (170) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (171) classDeclarate -> . classInterface
    (191) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (162) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (192) includes -> . INCLUDE STRING SEMICOLON
    (193) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (194) namespace -> . NAMESPACE ID SEMICOLON
    (195) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> . THROW valor SEMICOLON
    (198) instance -> . VARIABLE INSTANCEOF ID
    (199) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (200) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (201) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (202) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (203) minuse -> . VARIABLE MINUSEQUAL INT
    (204) pluse -> . VARIABLE PLUSEQUAL INT
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (71) controlStructure -> . if
    (72) controlStructure -> . for
    (73) controlStructure -> . while
    (74) controlStructure -> . dowhile
    (75) controlStructure -> . switch
    (76) controlStructure -> . foreach
    (126) dataStructure -> . array
    (185) data -> . ABSTRACT
    (186) data -> . PRIVATE
    (187) data -> . PROTECTED
    (188) data -> . PUBLIC
    (189) data -> . STATIC
    (190) data -> . FINAL
    (179) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (181) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (77) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> . IF LPAREN conditions RPAREN body
    (105) for -> . forStatement
    (109) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (111) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (112) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (120) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (127) array -> . VARIABLE EQUALS arrays SEMICOLON
    (128) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (130) array -> . map
    (106) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (134) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 68 (empty -> .)
    VARIABLE        shift and go to state 27
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 60
    PRIVATE         shift and go to state 61
    PROTECTED       shift and go to state 62
    PUBLIC          shift and go to state 63
    STATIC          shift and go to state 64
    FINAL           shift and go to state 65
    IF              shift and go to state 66
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    SWITCH          shift and go to state 70
    FOREACH         shift and go to state 71
    FOR             shift and go to state 73

    body                           shift and go to state 444
    sentenciaList                  shift and go to state 148
    empty                          shift and go to state 149
    sentencia                      shift and go to state 150
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    pluse                          shift and go to state 26
    valor                          shift and go to state 28
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    if                             shift and go to state 53
    for                            shift and go to state 54
    while                          shift and go to state 55
    dowhile                        shift and go to state 56
    switch                         shift and go to state 57
    foreach                        shift and go to state 58
    array                          shift and go to state 59
    forStatement                   shift and go to state 67
    map                            shift and go to state 72

state 435

    (182) classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .

    VARIABLE        reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ECHO            reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRINT           reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    TRY             reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FUNCTION        reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RETURN          reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ID              reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    EMPTY           reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLASS           reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INTERFACE       reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INCLUDE         reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NAMESPACE       reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THROW           reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CONST           reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    THIS            reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    INT             reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FLOAT           reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STRING          reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BOOL            reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    NULL            reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ARRAY           reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ABSTRACT        reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PRIVATE         reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PROTECTED       reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    PUBLIC          reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    STATIC          reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FINAL           reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    IF              reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    WHILE           reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DO              reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    SWITCH          reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOREACH         reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    FOR             reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CLOSETAG        reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    RBRACE          reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    BREAK           reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    ENDSWITCH       reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    CASE            reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)
    DEFAULT         reduce using rule 182 (classInterface -> data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE .)


state 436

    (79) else_blocks -> ELSE LBRACE body . RBRACE

    RBRACE          shift and go to state 445


state 437

    (80) else_blocks -> ELSEIF LPAREN conditions . RPAREN LBRACE body RBRACE else_blocks

    RPAREN          shift and go to state 446


state 438

    (139) default -> DEFAULT COLON body BREAK SEMICOLON .

    RBRACE          reduce using rule 139 (default -> DEFAULT COLON body BREAK SEMICOLON .)
    ENDSWITCH       reduce using rule 139 (default -> DEFAULT COLON body BREAK SEMICOLON .)


state 439

    (140) default -> DEFAULT SEMICOLON body BREAK SEMICOLON .

    RBRACE          reduce using rule 140 (default -> DEFAULT SEMICOLON body BREAK SEMICOLON .)
    ENDSWITCH       reduce using rule 140 (default -> DEFAULT SEMICOLON body BREAK SEMICOLON .)


state 440

    (121) case -> CASE valor COLON body BREAK . SEMICOLON

    SEMICOLON       shift and go to state 447


state 441

    (122) case -> CASE valor SEMICOLON body BREAK . SEMICOLON

    SEMICOLON       shift and go to state 448


state 442

    (107) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON . VARIABLE DOUBLEPLUS
    (108) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON . VARIABLE DOUBLEMINUS

    VARIABLE        shift and go to state 449


state 443

    (159) catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 450


state 444

    (175) classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 451


state 445

    (79) else_blocks -> ELSE LBRACE body RBRACE .

    VARIABLE        reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    ECHO            reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    PRINT           reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    TRY             reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    FUNCTION        reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    RETURN          reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    ID              reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    EMPTY           reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    CLASS           reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    INTERFACE       reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    INCLUDE         reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    THROW           reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    CONST           reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    THIS            reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    INT             reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    FLOAT           reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    STRING          reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    BOOL            reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    NULL            reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    ARRAY           reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    PRIVATE         reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    PROTECTED       reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    PUBLIC          reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    STATIC          reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    FINAL           reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    IF              reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    WHILE           reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    DO              reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    SWITCH          reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    FOREACH         reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    FOR             reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    RBRACE          reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    BREAK           reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    CASE            reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)
    DEFAULT         reduce using rule 79 (else_blocks -> ELSE LBRACE body RBRACE .)


state 446

    (80) else_blocks -> ELSEIF LPAREN conditions RPAREN . LBRACE body RBRACE else_blocks

    LBRACE          shift and go to state 452


state 447

    (121) case -> CASE valor COLON body BREAK SEMICOLON .

    CASE            reduce using rule 121 (case -> CASE valor COLON body BREAK SEMICOLON .)
    DEFAULT         reduce using rule 121 (case -> CASE valor COLON body BREAK SEMICOLON .)
    RBRACE          reduce using rule 121 (case -> CASE valor COLON body BREAK SEMICOLON .)
    ENDSWITCH       reduce using rule 121 (case -> CASE valor COLON body BREAK SEMICOLON .)


state 448

    (122) case -> CASE valor SEMICOLON body BREAK SEMICOLON .

    CASE            reduce using rule 122 (case -> CASE valor SEMICOLON body BREAK SEMICOLON .)
    DEFAULT         reduce using rule 122 (case -> CASE valor SEMICOLON body BREAK SEMICOLON .)
    RBRACE          reduce using rule 122 (case -> CASE valor SEMICOLON body BREAK SEMICOLON .)
    ENDSWITCH       reduce using rule 122 (case -> CASE valor SEMICOLON body BREAK SEMICOLON .)


state 449

    (107) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE . DOUBLEPLUS
    (108) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE . DOUBLEMINUS

    DOUBLEPLUS      shift and go to state 453
    DOUBLEMINUS     shift and go to state 454


state 450

    (159) catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .

    CATCH           reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FINALLY         reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    VARIABLE        reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    ECHO            reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    PRINT           reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    TRY             reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FUNCTION        reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    EMPTY           reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    CLASS           reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    INTERFACE       reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    INCLUDE         reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    NAMESPACE       reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    THROW           reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    CONST           reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    THIS            reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FLOAT           reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    BOOL            reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    NULL            reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    ARRAY           reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    ABSTRACT        reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    PRIVATE         reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    PROTECTED       reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    PUBLIC          reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    STATIC          reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FINAL           reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    DO              reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    SWITCH          reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FOREACH         reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    CLOSETAG        reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    BREAK           reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    ENDSWITCH       reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    CASE            reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)
    DEFAULT         reduce using rule 159 (catch -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE body RBRACE .)


state 451

    (175) classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .

    INT_TYPE        reduce using rule 175 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    FLOAT_TYPE      reduce using rule 175 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    STRING_TYPE     reduce using rule 175 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    BOOL_TYPE       reduce using rule 175 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    ARRAY_TYPE      reduce using rule 175 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    VOID            reduce using rule 175 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    NEW             reduce using rule 175 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 175 (classMember -> type FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE .)


state 452

    (80) else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE . body RBRACE else_blocks
    (101) body -> . sentenciaList
    (102) body -> . empty
    (103) sentenciaList -> . sentencia
    (104) sentenciaList -> . sentencia sentenciaList
    (68) empty -> .
    (4) sentencia -> . asignacion
    (5) sentencia -> . asignacion_fgets
    (6) sentencia -> . comparacion
    (7) sentencia -> . impresion
    (8) sentencia -> . estructurasPrograma
    (9) sentencia -> . try
    (10) sentencia -> . funcionDeclaration
    (11) sentencia -> . returnStatement
    (12) sentencia -> . llamadaFuncion
    (13) sentencia -> . classDeclarate
    (14) sentencia -> . interface
    (15) sentencia -> . objeto
    (16) sentencia -> . includes
    (17) sentencia -> . namespace
    (18) sentencia -> . anonymousFunction
    (19) sentencia -> . throw
    (20) sentencia -> . instance
    (21) sentencia -> . constdeclaration
    (22) sentencia -> . thisdeclaration
    (23) sentencia -> . concatenate
    (24) sentencia -> . minuse
    (25) sentencia -> . pluse
    (28) asignacion -> . VARIABLE EQUALS operaArit SEMICOLON
    (29) asignacion -> . VARIABLE EQUALS valor SEMICOLON
    (30) asignacion -> . VARIABLE EQUALS operador_ternario SEMICOLON
    (31) asignacion_fgets -> . VARIABLE EQUALS FGETS LPAREN STDIN RPAREN SEMICOLON
    (54) comparacion -> . valor comparador valor
    (59) impresion -> . ECHO imprimir SEMICOLON
    (60) impresion -> . PRINT imprimir SEMICOLON
    (69) estructurasPrograma -> . controlStructure
    (70) estructurasPrograma -> . dataStructure
    (157) try -> . TRY LBRACE body RBRACE catchs
    (158) try -> . TRY LBRACE body RBRACE catchs FINALLY LBRACE body RBRACE
    (163) funcionDeclaration -> . FUNCTION ID LPAREN argumentos RPAREN LBRACE body RBRACE
    (26) returnStatement -> . RETURN valor SEMICOLON
    (27) returnStatement -> . RETURN SEMICOLON
    (164) llamadaFuncion -> . ID LPAREN argumentos RPAREN SEMICOLON
    (165) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN
    (166) llamadaFuncion -> . ID LPAREN argumentos RPAREN
    (167) llamadaFuncion -> . EMPTY LPAREN argumentos RPAREN SEMICOLON
    (168) classDeclarate -> . CLASS ID LBRACE classBody RBRACE
    (169) classDeclarate -> . CLASS ID EXTENDS ID LBRACE classBody RBRACE
    (170) classDeclarate -> . data CLASS ID LBRACE classBody RBRACE
    (171) classDeclarate -> . classInterface
    (191) interface -> . INTERFACE ID LBRACE classBody RBRACE
    (162) objeto -> . VARIABLE ARROW ID LPAREN argumentos RPAREN SEMICOLON
    (192) includes -> . INCLUDE STRING SEMICOLON
    (193) includes -> . INCLUDE STRING DOT STRING SEMICOLON
    (194) namespace -> . NAMESPACE ID SEMICOLON
    (195) anonymousFunction -> . VARIABLE EQUALS FN LPAREN RPAREN ARROWMAP comparacion SEMICOLON
    (196) throw -> . THROW NEW EXCEPTION LPAREN repiteValores RPAREN SEMICOLON
    (197) throw -> . THROW valor SEMICOLON
    (198) instance -> . VARIABLE INSTANCEOF ID
    (199) constdeclaration -> . CONST ID EQUALS valor SEMICOLON
    (200) thisdeclaration -> . THIS ARROW ID SEMICOLON
    (201) thisdeclaration -> . THIS ARROW ID LPAREN RPAREN SEMICOLON
    (202) concatenate -> . VARIABLE CONCATENATEEQUAL STRING
    (203) minuse -> . VARIABLE MINUSEQUAL INT
    (204) pluse -> . VARIABLE PLUSEQUAL INT
    (40) valor -> . INT
    (41) valor -> . VARIABLE
    (42) valor -> . FLOAT
    (43) valor -> . STRING
    (44) valor -> . BOOL
    (45) valor -> . NULL
    (46) valor -> . ARRAY
    (47) valor -> . llamadaFuncion
    (71) controlStructure -> . if
    (72) controlStructure -> . for
    (73) controlStructure -> . while
    (74) controlStructure -> . dowhile
    (75) controlStructure -> . switch
    (76) controlStructure -> . foreach
    (126) dataStructure -> . array
    (185) data -> . ABSTRACT
    (186) data -> . PRIVATE
    (187) data -> . PROTECTED
    (188) data -> . PUBLIC
    (189) data -> . STATIC
    (190) data -> . FINAL
    (179) classInterface -> . CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (180) classInterface -> . CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (181) classInterface -> . data CLASS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (182) classInterface -> . data CLASS ID EXTENDS ID IMPLEMENTS impInterface LBRACE classBody RBRACE
    (77) if -> . IF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (78) if -> . IF LPAREN conditions RPAREN body
    (105) for -> . forStatement
    (109) while -> . WHILE LPAREN condition RPAREN LBRACE body RBRACE
    (110) while -> . WHILE LPAREN condition RPAREN LBRACE RBRACE
    (111) dowhile -> . DO LBRACE body RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (112) switch -> . SWITCH LPAREN valor RPAREN LBRACE caseLists RBRACE
    (113) switch -> . SWITCH LPAREN valor RPAREN COLON caseLists ENDSWITCH SEMICOLON
    (120) foreach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN LBRACE body RBRACE
    (127) array -> . VARIABLE EQUALS arrays SEMICOLON
    (128) array -> . VARIABLE EQUALS LBRACKET arrayAnidado RBRACKET SEMICOLON
    (129) array -> . VARIABLE EQUALS ARRAY LPAREN repiteValores RPAREN SEMICOLON
    (130) array -> . map
    (106) forStatement -> . FOR LPAREN forcondition RPAREN LBRACE body RBRACE
    (134) map -> . VARIABLE EQUALS LBRACKET maps RBRACKET SEMICOLON
    (135) map -> . VARIABLE EQUALS ARRAY LPAREN maps RPAREN SEMICOLON

    RBRACE          reduce using rule 68 (empty -> .)
    VARIABLE        shift and go to state 27
    ECHO            shift and go to state 29
    PRINT           shift and go to state 30
    TRY             shift and go to state 33
    FUNCTION        shift and go to state 34
    RETURN          shift and go to state 36
    ID              shift and go to state 35
    EMPTY           shift and go to state 37
    CLASS           shift and go to state 38
    INTERFACE       shift and go to state 41
    INCLUDE         shift and go to state 42
    NAMESPACE       shift and go to state 44
    THROW           shift and go to state 45
    CONST           shift and go to state 46
    THIS            shift and go to state 47
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STRING          shift and go to state 43
    BOOL            shift and go to state 50
    NULL            shift and go to state 51
    ARRAY           shift and go to state 52
    ABSTRACT        shift and go to state 60
    PRIVATE         shift and go to state 61
    PROTECTED       shift and go to state 62
    PUBLIC          shift and go to state 63
    STATIC          shift and go to state 64
    FINAL           shift and go to state 65
    IF              shift and go to state 66
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    SWITCH          shift and go to state 70
    FOREACH         shift and go to state 71
    FOR             shift and go to state 73

    body                           shift and go to state 455
    sentenciaList                  shift and go to state 148
    empty                          shift and go to state 149
    sentencia                      shift and go to state 150
    asignacion                     shift and go to state 5
    asignacion_fgets               shift and go to state 6
    comparacion                    shift and go to state 7
    impresion                      shift and go to state 8
    estructurasPrograma            shift and go to state 9
    try                            shift and go to state 10
    funcionDeclaration             shift and go to state 11
    returnStatement                shift and go to state 12
    llamadaFuncion                 shift and go to state 13
    classDeclarate                 shift and go to state 14
    interface                      shift and go to state 15
    objeto                         shift and go to state 16
    includes                       shift and go to state 17
    namespace                      shift and go to state 18
    anonymousFunction              shift and go to state 19
    throw                          shift and go to state 20
    instance                       shift and go to state 21
    constdeclaration               shift and go to state 22
    thisdeclaration                shift and go to state 23
    concatenate                    shift and go to state 24
    minuse                         shift and go to state 25
    pluse                          shift and go to state 26
    valor                          shift and go to state 28
    controlStructure               shift and go to state 31
    dataStructure                  shift and go to state 32
    data                           shift and go to state 39
    classInterface                 shift and go to state 40
    if                             shift and go to state 53
    for                            shift and go to state 54
    while                          shift and go to state 55
    dowhile                        shift and go to state 56
    switch                         shift and go to state 57
    foreach                        shift and go to state 58
    array                          shift and go to state 59
    forStatement                   shift and go to state 67
    map                            shift and go to state 72

state 453

    (107) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS .

    RPAREN          reduce using rule 107 (forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEPLUS .)


state 454

    (108) forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS .

    RPAREN          reduce using rule 108 (forcondition -> VARIABLE EQUALS INT SEMICOLON VARIABLE opSymbol INT SEMICOLON VARIABLE DOUBLEMINUS .)


state 455

    (80) else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body . RBRACE else_blocks

    RBRACE          shift and go to state 456


state 456

    (80) else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE . else_blocks
    (79) else_blocks -> . ELSE LBRACE body RBRACE
    (80) else_blocks -> . ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks
    (81) else_blocks -> . empty
    (68) empty -> .

    ELSE            shift and go to state 408
    ELSEIF          shift and go to state 409
    VARIABLE        reduce using rule 68 (empty -> .)
    ECHO            reduce using rule 68 (empty -> .)
    PRINT           reduce using rule 68 (empty -> .)
    TRY             reduce using rule 68 (empty -> .)
    FUNCTION        reduce using rule 68 (empty -> .)
    RETURN          reduce using rule 68 (empty -> .)
    ID              reduce using rule 68 (empty -> .)
    EMPTY           reduce using rule 68 (empty -> .)
    CLASS           reduce using rule 68 (empty -> .)
    INTERFACE       reduce using rule 68 (empty -> .)
    INCLUDE         reduce using rule 68 (empty -> .)
    NAMESPACE       reduce using rule 68 (empty -> .)
    THROW           reduce using rule 68 (empty -> .)
    CONST           reduce using rule 68 (empty -> .)
    THIS            reduce using rule 68 (empty -> .)
    INT             reduce using rule 68 (empty -> .)
    FLOAT           reduce using rule 68 (empty -> .)
    STRING          reduce using rule 68 (empty -> .)
    BOOL            reduce using rule 68 (empty -> .)
    NULL            reduce using rule 68 (empty -> .)
    ARRAY           reduce using rule 68 (empty -> .)
    ABSTRACT        reduce using rule 68 (empty -> .)
    PRIVATE         reduce using rule 68 (empty -> .)
    PROTECTED       reduce using rule 68 (empty -> .)
    PUBLIC          reduce using rule 68 (empty -> .)
    STATIC          reduce using rule 68 (empty -> .)
    FINAL           reduce using rule 68 (empty -> .)
    IF              reduce using rule 68 (empty -> .)
    WHILE           reduce using rule 68 (empty -> .)
    DO              reduce using rule 68 (empty -> .)
    SWITCH          reduce using rule 68 (empty -> .)
    FOREACH         reduce using rule 68 (empty -> .)
    FOR             reduce using rule 68 (empty -> .)
    CLOSETAG        reduce using rule 68 (empty -> .)
    RBRACE          reduce using rule 68 (empty -> .)
    BREAK           reduce using rule 68 (empty -> .)
    ENDSWITCH       reduce using rule 68 (empty -> .)
    CASE            reduce using rule 68 (empty -> .)
    DEFAULT         reduce using rule 68 (empty -> .)

    else_blocks                    shift and go to state 457
    empty                          shift and go to state 410

state 457

    (80) else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .

    VARIABLE        reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ECHO            reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PRINT           reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    TRY             reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FUNCTION        reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    RETURN          reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ID              reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    EMPTY           reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CLASS           reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INTERFACE       reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INCLUDE         reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    NAMESPACE       reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    THROW           reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CONST           reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    THIS            reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    INT             reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FLOAT           reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    STRING          reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    BOOL            reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    NULL            reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ARRAY           reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ABSTRACT        reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PRIVATE         reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PROTECTED       reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    PUBLIC          reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    STATIC          reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FINAL           reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    IF              reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    WHILE           reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    DO              reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    SWITCH          reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FOREACH         reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    FOR             reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CLOSETAG        reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    RBRACE          reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    BREAK           reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    ENDSWITCH       reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    CASE            reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)
    DEFAULT         reduce using rule 80 (else_blocks -> ELSEIF LPAREN conditions RPAREN LBRACE body RBRACE else_blocks .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 142 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 150 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 150 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 150 resolved as shift
WARNING: shift/reduce conflict for TRY in state 150 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 150 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 150 resolved as shift
WARNING: shift/reduce conflict for ID in state 150 resolved as shift
WARNING: shift/reduce conflict for EMPTY in state 150 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 150 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 150 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 150 resolved as shift
WARNING: shift/reduce conflict for NAMESPACE in state 150 resolved as shift
WARNING: shift/reduce conflict for THROW in state 150 resolved as shift
WARNING: shift/reduce conflict for CONST in state 150 resolved as shift
WARNING: shift/reduce conflict for THIS in state 150 resolved as shift
WARNING: shift/reduce conflict for INT in state 150 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 150 resolved as shift
WARNING: shift/reduce conflict for STRING in state 150 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 150 resolved as shift
WARNING: shift/reduce conflict for NULL in state 150 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 150 resolved as shift
WARNING: shift/reduce conflict for ABSTRACT in state 150 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 150 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 150 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 150 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 150 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 150 resolved as shift
WARNING: shift/reduce conflict for IF in state 150 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 150 resolved as shift
WARNING: shift/reduce conflict for DO in state 150 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 150 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 150 resolved as shift
WARNING: shift/reduce conflict for FOR in state 150 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 234 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 238 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 256 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 256 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 256 resolved as shift
WARNING: shift/reduce conflict for TRY in state 256 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 256 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 256 resolved as shift
WARNING: shift/reduce conflict for ID in state 256 resolved as shift
WARNING: shift/reduce conflict for EMPTY in state 256 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 256 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 256 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 256 resolved as shift
WARNING: shift/reduce conflict for NAMESPACE in state 256 resolved as shift
WARNING: shift/reduce conflict for THROW in state 256 resolved as shift
WARNING: shift/reduce conflict for CONST in state 256 resolved as shift
WARNING: shift/reduce conflict for THIS in state 256 resolved as shift
WARNING: shift/reduce conflict for INT in state 256 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 256 resolved as shift
WARNING: shift/reduce conflict for STRING in state 256 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 256 resolved as shift
WARNING: shift/reduce conflict for NULL in state 256 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 256 resolved as shift
WARNING: shift/reduce conflict for ABSTRACT in state 256 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 256 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 256 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 256 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 256 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 256 resolved as shift
WARNING: shift/reduce conflict for IF in state 256 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 256 resolved as shift
WARNING: shift/reduce conflict for DO in state 256 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 256 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 256 resolved as shift
WARNING: shift/reduce conflict for FOR in state 256 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 311 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 339 resolved as shift
WARNING: reduce/reduce conflict in state 117 resolved using rule (valornumerico -> VARIABLE)
WARNING: rejected rule (valor -> VARIABLE) in state 117
WARNING: reduce/reduce conflict in state 128 resolved using rule (valornumerico -> INT)
WARNING: rejected rule (valor -> INT) in state 128
WARNING: reduce/reduce conflict in state 129 resolved using rule (valornumerico -> FLOAT)
WARNING: rejected rule (valor -> FLOAT) in state 129
WARNING: reduce/reduce conflict in state 141 resolved using rule (repiteValores -> valor)
WARNING: rejected rule (condition -> valor) in state 141
WARNING: reduce/reduce conflict in state 277 resolved using rule (conditions -> LPAREN conditions RPAREN)
WARNING: rejected rule (condition -> LPAREN conditions RPAREN) in state 277
